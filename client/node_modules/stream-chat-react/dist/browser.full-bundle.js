var StreamChatReact = (function (exports, React$2, jsxRuntime, ReactDOM, streamChat, Picker) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var React__default = /*#__PURE__*/_interopDefaultLegacy(React$2);
    var React__namespace = /*#__PURE__*/_interopNamespace(React$2);
    var ReactDOM__namespace = /*#__PURE__*/_interopNamespace(ReactDOM);
    var Picker__default = /*#__PURE__*/_interopDefaultLegacy(Picker);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function () {
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var lib$1 = {};

    var players = {};

    var utils = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var loadScript = function load (src, opts, cb) {
      var head = document.head || document.getElementsByTagName('head')[0];
      var script = document.createElement('script');

      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }

      opts = opts || {};
      cb = cb || function() {};

      script.type = opts.type || 'text/javascript';
      script.charset = opts.charset || 'utf8';
      script.async = 'async' in opts ? !!opts.async : true;
      script.src = src;

      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }

      if (opts.text) {
        script.text = '' + opts.text;
      }

      var onend = 'onload' in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);

      // some good legacy browsers (firefox) fail the 'in' detection above
      // so as a fallback we always set onload
      // old IE will ignore this and new IE will set onload
      if (!script.onload) {
        stdOnEnd(script, cb);
      }

      head.appendChild(script);
    };

    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }

    function stdOnEnd (script, cb) {
      script.onload = function () {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function () {
        // this.onload = null here is necessary
        // because even IE9 works not like others
        this.onerror = this.onload = null;
        cb(new Error('Failed to load ' + this.src), script);
      };
    }

    function ieOnEnd (script, cb) {
      script.onreadystatechange = function () {
        if (this.readyState != 'complete' && this.readyState != 'loaded') return
        this.onreadystatechange = null;
        cb(null, script); // there is no way to catch loading errors in IE8
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return Object.propertyIsEnumerable.call(target, symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs$1 = deepmerge_1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(utils, "__esModule", {
      value: true
    });
    utils.parseStartTime = parseStartTime;
    utils.parseEndTime = parseEndTime;
    utils.randomString = randomString;
    utils.queryString = queryString;
    utils.getSDK = getSDK;
    utils.getConfig = getConfig;
    utils.omit = omit$1;
    utils.callPlayer = callPlayer;
    utils.isMediaStream = isMediaStream;
    utils.isBlobUrl = isBlobUrl;
    utils.supportsWebKitPresentationMode = supportsWebKitPresentationMode;

    var _loadScript = _interopRequireDefault$2(loadScript);

    var _deepmerge$1 = _interopRequireDefault$2(cjs$1);

    function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _slicedToArray$2(arr, i) { return _arrayWithHoles$3(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest$3(); }

    function _nonIterableRest$3() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$6(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$6(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$6(o, minLen); }

    function _arrayLikeToArray$6(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit$2(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles$3(arr) { if (Array.isArray(arr)) return arr; }

    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s
    // and return the start time in seconds

    function parseTimeParam(url, pattern) {
      if (url instanceof Array) {
        return undefined;
      }

      var match = url.match(pattern);

      if (match) {
        var stamp = match[1];

        if (stamp.match(MATCH_START_STAMP)) {
          return parseTimeString(stamp);
        }

        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp);
        }
      }

      return undefined;
    }

    function parseTimeString(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);

      while (array !== null) {
        var _array = array,
            _array2 = _slicedToArray$2(_array, 3),
            count = _array2[1],
            period = _array2[2];

        if (period === 'h') seconds += parseInt(count, 10) * 60 * 60;
        if (period === 'm') seconds += parseInt(count, 10) * 60;
        if (period === 's') seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }

      return seconds;
    }

    function parseStartTime(url) {
      return parseTimeParam(url, MATCH_START_QUERY);
    }

    function parseEndTime(url) {
      return parseTimeParam(url, MATCH_END_QUERY);
    } // http://stackoverflow.com/a/38622545


    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }

    function queryString(object) {
      return Object.keys(object).map(function (key) {
        return "".concat(key, "=").concat(object[key]);
      }).join('&');
    }

    function getGlobal(key) {
      if (window[key]) {
        return window[key];
      }

      if (window.exports && window.exports[key]) {
        return window.exports[key];
      }

      if (window.module && window.module.exports && window.module.exports[key]) {
        return window.module.exports[key];
      }

      return null;
    } // Util function to load an external SDK
    // or return the SDK if it is already loaded


    var requests = {};

    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
        return true;
      };
      var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript["default"];
      var existingGlobal = getGlobal(sdkGlobal);

      if (existingGlobal && isLoaded(existingGlobal)) {
        return Promise.resolve(existingGlobal);
      }

      return new Promise(function (resolve, reject) {
        // If we are already loading the SDK, add the resolve and reject
        // functions to the existing array of requests
        if (requests[url]) {
          requests[url].push({
            resolve: resolve,
            reject: reject
          });
          return;
        }

        requests[url] = [{
          resolve: resolve,
          reject: reject
        }];

        var onLoaded = function onLoaded(sdk) {
          // When loaded, resolve all pending request promises
          requests[url].forEach(function (request) {
            return request.resolve(sdk);
          });
        };

        if (sdkReady) {
          var previousOnReady = window[sdkReady];

          window[sdkReady] = function () {
            if (previousOnReady) previousOnReady();
            onLoaded(getGlobal(sdkGlobal));
          };
        }

        fetchScript(url, function (err) {
          if (err) {
            // Loading the SDK failed – reject all requests and
            // reset the array of requests for this SDK
            requests[url].forEach(function (request) {
              return request.reject(err);
            });
            requests[url] = null;
          } else if (!sdkReady) {
            onLoaded(getGlobal(sdkGlobal));
          }
        });
      });
    }

    function getConfig(props, defaultProps) {
      return (0, _deepmerge$1["default"])(defaultProps.config, props.config);
    }

    function omit$1(object) {
      var _ref;

      for (var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays[_key - 1] = arguments[_key];
      }

      var omitKeys = (_ref = []).concat.apply(_ref, arrays);

      var output = {};
      var keys = Object.keys(object);

      for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {
        var key = _keys[_i2];

        if (omitKeys.indexOf(key) === -1) {
          output[key] = object[key];
        }
      }

      return output;
    }

    function callPlayer(method) {
      var _this$player;

      // Util method for calling a method on this.player
      // but guard against errors and console.warn instead
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: ".concat(this.constructor.displayName, " player could not call %c").concat(method, "%c \u2013 ");

        if (!this.player) {
          message += 'The player was not available';
        } else if (!this.player[method]) {
          message += 'The method was not available';
        }

        console.warn(message, 'font-weight: bold', '');
        return null;
      }

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return (_this$player = this.player)[method].apply(_this$player, args);
    }

    function isMediaStream(url) {
      return typeof window !== 'undefined' && typeof window.MediaStream !== 'undefined' && url instanceof window.MediaStream;
    }

    function isBlobUrl(url) {
      return /^blob:/.test(url);
    }

    function supportsWebKitPresentationMode() {
      var video = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement('video');
      // Check if Safari supports PiP, and is not on mobile (other than iPad)
      // iPhone safari appears to "support" PiP through the check, however PiP does not function
      var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;
      return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function' && notMobile;
    }

    var patterns = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(patterns, "__esModule", {
      value: true
    });
    patterns.canPlay = patterns.FLV_EXTENSIONS = patterns.DASH_EXTENSIONS = patterns.HLS_EXTENSIONS = patterns.VIDEO_EXTENSIONS = patterns.AUDIO_EXTENSIONS = patterns.MATCH_URL_KALTURA = patterns.MATCH_URL_VIDYARD = patterns.MATCH_URL_MIXCLOUD = patterns.MATCH_URL_DAILYMOTION = patterns.MATCH_URL_TWITCH_CHANNEL = patterns.MATCH_URL_TWITCH_VIDEO = patterns.MATCH_URL_WISTIA = patterns.MATCH_URL_STREAMABLE = patterns.MATCH_URL_FACEBOOK_WATCH = patterns.MATCH_URL_FACEBOOK = patterns.MATCH_URL_VIMEO = patterns.MATCH_URL_SOUNDCLOUD = patterns.MATCH_URL_YOUTUBE = void 0;

    var _utils$1 = utils;

    function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray$5(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$5(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$5(o, minLen); }

    function _arrayLikeToArray$5(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var MATCH_URL_YOUTUBE = /(?:youtu\.be\/|youtube(?:-nocookie)?\.com\/(?:embed\/|v\/|watch\/|watch\?v=|watch\?.+&v=|shorts\/))((\w|-){11})|youtube\.com\/playlist\?list=|youtube\.com\/user\//;
    patterns.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;
    var MATCH_URL_SOUNDCLOUD = /(?:soundcloud\.com|snd\.sc)\/[^.]+$/;
    patterns.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;
    var MATCH_URL_VIMEO = /vimeo\.com\/(?!progressive_redirect).+/;
    patterns.MATCH_URL_VIMEO = MATCH_URL_VIMEO;
    var MATCH_URL_FACEBOOK = /^https?:\/\/(www\.)?facebook\.com.*\/(video(s)?|watch|story)(\.php?|\/).+$/;
    patterns.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;
    var MATCH_URL_FACEBOOK_WATCH = /^https?:\/\/fb\.watch\/.+$/;
    patterns.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;
    var MATCH_URL_STREAMABLE = /streamable\.com\/([a-z0-9]+)$/;
    patterns.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;
    var MATCH_URL_WISTIA = /(?:wistia\.(?:com|net)|wi\.st)\/(?:medias|embed)\/(?:iframe\/)?(.*)$/;
    patterns.MATCH_URL_WISTIA = MATCH_URL_WISTIA;
    var MATCH_URL_TWITCH_VIDEO = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    patterns.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;
    var MATCH_URL_TWITCH_CHANNEL = /(?:www\.|go\.)?twitch\.tv\/([a-zA-Z0-9_]+)($|\?)/;
    patterns.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;
    var MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
    patterns.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;
    var MATCH_URL_MIXCLOUD = /mixcloud\.com\/([^/]+\/[^/]+)/;
    patterns.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;
    var MATCH_URL_VIDYARD = /vidyard.com\/(?:watch\/)?([a-zA-Z0-9-_]+)/;
    patterns.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;
    var MATCH_URL_KALTURA = /^https?:\/\/[a-zA-Z]+\.kaltura.(com|org)\/p\/([0-9]+)\/sp\/([0-9]+)00\/embedIframeJs\/uiconf_id\/([0-9]+)\/partner_id\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;
    patterns.MATCH_URL_KALTURA = MATCH_URL_KALTURA;
    var AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    patterns.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
    patterns.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    patterns.HLS_EXTENSIONS = HLS_EXTENSIONS;
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    patterns.DASH_EXTENSIONS = DASH_EXTENSIONS;
    var FLV_EXTENSIONS = /\.(flv)($|\?)/i;
    patterns.FLV_EXTENSIONS = FLV_EXTENSIONS;

    var canPlayFile = function canPlayFile(url) {
      if (url instanceof Array) {
        var _iterator = _createForOfIteratorHelper(url),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            if (typeof item === 'string' && canPlayFile(item)) {
              return true;
            }

            if (canPlayFile(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return false;
      }

      if ((0, _utils$1.isMediaStream)(url) || (0, _utils$1.isBlobUrl)(url)) {
        return true;
      }

      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);
    };

    var canPlay = {
      youtube: function youtube(url) {
        if (url instanceof Array) {
          return url.every(function (item) {
            return MATCH_URL_YOUTUBE.test(item);
          });
        }

        return MATCH_URL_YOUTUBE.test(url);
      },
      soundcloud: function soundcloud(url) {
        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);
      },
      vimeo: function vimeo(url) {
        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);
      },
      facebook: function facebook(url) {
        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);
      },
      streamable: function streamable(url) {
        return MATCH_URL_STREAMABLE.test(url);
      },
      wistia: function wistia(url) {
        return MATCH_URL_WISTIA.test(url);
      },
      twitch: function twitch(url) {
        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);
      },
      dailymotion: function dailymotion(url) {
        return MATCH_URL_DAILYMOTION.test(url);
      },
      mixcloud: function mixcloud(url) {
        return MATCH_URL_MIXCLOUD.test(url);
      },
      vidyard: function vidyard(url) {
        return MATCH_URL_VIDYARD.test(url);
      },
      kaltura: function kaltura(url) {
        return MATCH_URL_KALTURA.test(url);
      },
      file: canPlayFile
    };
    patterns.canPlay = canPlay;

    var YouTube = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredYouTube;

    function requireYouTube () {
    	if (hasRequiredYouTube) return YouTube;
    	hasRequiredYouTube = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://www.youtube.com/iframe_api';
    		var SDK_GLOBAL = 'YT';
    		var SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';
    		var MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;
    		var MATCH_USER_UPLOADS = /user\/([a-zA-Z0-9_-]+)\/?/;
    		var MATCH_NOCOOKIE = /youtube-nocookie\.com/;
    		var NOCOOKIE_HOST = 'https://www.youtube-nocookie.com';

    		var YouTube = /*#__PURE__*/function (_Component) {
    		  _inherits(YouTube, _Component);

    		  var _super = _createSuper(YouTube);

    		  function YouTube() {
    		    var _this;

    		    _classCallCheck(this, YouTube);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "parsePlaylist", function (url) {
    		      if (url instanceof Array) {
    		        return {
    		          listType: 'playlist',
    		          playlist: url.map(_this.getID).join(',')
    		        };
    		      }

    		      if (MATCH_PLAYLIST.test(url)) {
    		        var _url$match = url.match(MATCH_PLAYLIST),
    		            _url$match2 = _slicedToArray(_url$match, 2),
    		            playlistId = _url$match2[1];

    		        return {
    		          listType: 'playlist',
    		          list: playlistId.replace(/^UC/, 'UU')
    		        };
    		      }

    		      if (MATCH_USER_UPLOADS.test(url)) {
    		        var _url$match3 = url.match(MATCH_USER_UPLOADS),
    		            _url$match4 = _slicedToArray(_url$match3, 2),
    		            username = _url$match4[1];

    		        return {
    		          listType: 'user_uploads',
    		          list: username
    		        };
    		      }

    		      return {};
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onStateChange", function (event) {
    		      var data = event.data;
    		      var _this$props = _this.props,
    		          onPlay = _this$props.onPlay,
    		          onPause = _this$props.onPause,
    		          onBuffer = _this$props.onBuffer,
    		          onBufferEnd = _this$props.onBufferEnd,
    		          onEnded = _this$props.onEnded,
    		          onReady = _this$props.onReady,
    		          loop = _this$props.loop,
    		          _this$props$config = _this$props.config,
    		          playerVars = _this$props$config.playerVars,
    		          onUnstarted = _this$props$config.onUnstarted;
    		      var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState,
    		          UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED,
    		          PLAYING = _window$SDK_GLOBAL$Pl.PLAYING,
    		          PAUSED = _window$SDK_GLOBAL$Pl.PAUSED,
    		          BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING,
    		          ENDED = _window$SDK_GLOBAL$Pl.ENDED,
    		          CUED = _window$SDK_GLOBAL$Pl.CUED;
    		      if (data === UNSTARTED) onUnstarted();

    		      if (data === PLAYING) {
    		        onPlay();
    		        onBufferEnd();
    		      }

    		      if (data === PAUSED) onPause();
    		      if (data === BUFFERING) onBuffer();

    		      if (data === ENDED) {
    		        var isPlaylist = !!_this.callPlayer('getPlaylist'); // Only loop manually if not playing a playlist

    		        if (loop && !isPlaylist) {
    		          if (playerVars.start) {
    		            _this.seekTo(playerVars.start);
    		          } else {
    		            _this.play();
    		          }
    		        }

    		        onEnded();
    		      }

    		      if (data === CUED) onReady();
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('mute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('unMute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
    		      _this.container = container;
    		    });

    		    return _this;
    		  }

    		  _createClass(YouTube, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "getID",
    		    value: function getID(url) {
    		      if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {
    		        return null;
    		      }

    		      return url.match(_patterns.MATCH_URL_YOUTUBE)[1];
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url, isReady) {
    		      var _this2 = this;

    		      var _this$props2 = this.props,
    		          playing = _this$props2.playing,
    		          muted = _this$props2.muted,
    		          playsinline = _this$props2.playsinline,
    		          controls = _this$props2.controls,
    		          loop = _this$props2.loop,
    		          config = _this$props2.config,
    		          _onError = _this$props2.onError;
    		      var playerVars = config.playerVars,
    		          embedOptions = config.embedOptions;
    		      var id = this.getID(url);

    		      if (isReady) {
    		        if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {
    		          this.player.loadPlaylist(this.parsePlaylist(url));
    		          return;
    		        }

    		        this.player.cueVideoById({
    		          videoId: id,
    		          startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,
    		          endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end
    		        });
    		        return;
    		      }

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (YT) {
    		        return YT.loaded;
    		      }).then(function (YT) {
    		        if (!_this2.container) return;
    		        _this2.player = new YT.Player(_this2.container, _objectSpread({
    		          width: '100%',
    		          height: '100%',
    		          videoId: id,
    		          playerVars: _objectSpread(_objectSpread({
    		            autoplay: playing ? 1 : 0,
    		            mute: muted ? 1 : 0,
    		            controls: controls ? 1 : 0,
    		            start: (0, _utils.parseStartTime)(url),
    		            end: (0, _utils.parseEndTime)(url),
    		            origin: window.location.origin,
    		            playsinline: playsinline ? 1 : 0
    		          }, _this2.parsePlaylist(url)), playerVars),
    		          events: {
    		            onReady: function onReady() {
    		              if (loop) {
    		                _this2.player.setLoop(true); // Enable playlist looping

    		              }

    		              _this2.props.onReady();
    		            },
    		            onPlaybackRateChange: function onPlaybackRateChange(event) {
    		              return _this2.props.onPlaybackRateChange(event.data);
    		            },
    		            onStateChange: _this2.onStateChange,
    		            onError: function onError(event) {
    		              return _onError(event.data);
    		            }
    		          },
    		          host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined
    		        }, embedOptions));
    		      }, _onError);

    		      if (embedOptions.events) {
    		        console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause');
    		      }
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('playVideo');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pauseVideo');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      if (!document.body.contains(this.callPlayer('getIframe'))) return;
    		      this.callPlayer('stopVideo');
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(amount) {
    		      this.callPlayer('seekTo', amount);

    		      if (!this.props.playing) {
    		        this.pause();
    		      }
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction * 100);
    		    }
    		  }, {
    		    key: "setPlaybackRate",
    		    value: function setPlaybackRate(rate) {
    		      this.callPlayer('setPlaybackRate', rate);
    		    }
    		  }, {
    		    key: "setLoop",
    		    value: function setLoop(loop) {
    		      this.callPlayer('setLoop', loop);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.callPlayer('getDuration');
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.callPlayer('getCurrentTime');
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.callPlayer('getVideoLoadedFraction') * this.getDuration();
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var display = this.props.display;
    		      var style = {
    		        width: '100%',
    		        height: '100%',
    		        display: display
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        style: style
    		      }, /*#__PURE__*/_react["default"].createElement("div", {
    		        ref: this.ref
    		      }));
    		    }
    		  }]);

    		  return YouTube;
    		}(_react.Component);

    		exports["default"] = YouTube;

    		_defineProperty(YouTube, "displayName", 'YouTube');

    		_defineProperty(YouTube, "canPlay", _patterns.canPlay.youtube);
    } (YouTube));
    	return YouTube;
    }

    var SoundCloud = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredSoundCloud;

    function requireSoundCloud () {
    	if (hasRequiredSoundCloud) return SoundCloud;
    	hasRequiredSoundCloud = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://w.soundcloud.com/player/api.js';
    		var SDK_GLOBAL = 'SC';

    		var SoundCloud = /*#__PURE__*/function (_Component) {
    		  _inherits(SoundCloud, _Component);

    		  var _super = _createSuper(SoundCloud);

    		  function SoundCloud() {
    		    var _this;

    		    _classCallCheck(this, SoundCloud);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "duration", null);

    		    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    		    _defineProperty(_assertThisInitialized(_this), "fractionLoaded", null);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.setVolume(0);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      if (_this.props.volume !== null) {
    		        _this.setVolume(_this.props.volume);
    		      }
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
    		      _this.iframe = iframe;
    		    });

    		    return _this;
    		  }

    		  _createClass(SoundCloud, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url, isReady) {
    		      var _this2 = this;

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (SC) {
    		        if (!_this2.iframe) return;
    		        var _SC$Widget$Events = SC.Widget.Events,
    		            PLAY = _SC$Widget$Events.PLAY,
    		            PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS,
    		            PAUSE = _SC$Widget$Events.PAUSE,
    		            FINISH = _SC$Widget$Events.FINISH,
    		            ERROR = _SC$Widget$Events.ERROR;

    		        if (!isReady) {
    		          _this2.player = SC.Widget(_this2.iframe);

    		          _this2.player.bind(PLAY, _this2.props.onPlay);

    		          _this2.player.bind(PAUSE, function () {
    		            var remaining = _this2.duration - _this2.currentTime;

    		            if (remaining < 0.05) {
    		              // Prevent onPause firing right before onEnded
    		              return;
    		            }

    		            _this2.props.onPause();
    		          });

    		          _this2.player.bind(PLAY_PROGRESS, function (e) {
    		            _this2.currentTime = e.currentPosition / 1000;
    		            _this2.fractionLoaded = e.loadedProgress;
    		          });

    		          _this2.player.bind(FINISH, function () {
    		            return _this2.props.onEnded();
    		          });

    		          _this2.player.bind(ERROR, function (e) {
    		            return _this2.props.onError(e);
    		          });
    		        }

    		        _this2.player.load(url, _objectSpread(_objectSpread({}, _this2.props.config.options), {}, {
    		          callback: function callback() {
    		            _this2.player.getDuration(function (duration) {
    		              _this2.duration = duration / 1000;

    		              _this2.props.onReady();
    		            });
    		          }
    		        }));
    		      });
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('seekTo', seconds * 1000);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction * 100);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.fractionLoaded * this.duration;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var display = this.props.display;
    		      var style = {
    		        width: '100%',
    		        height: '100%',
    		        display: display
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("iframe", {
    		        ref: this.ref,
    		        src: "https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),
    		        style: style,
    		        frameBorder: 0,
    		        allow: "autoplay"
    		      });
    		    }
    		  }]);

    		  return SoundCloud;
    		}(_react.Component);

    		exports["default"] = SoundCloud;

    		_defineProperty(SoundCloud, "displayName", 'SoundCloud');

    		_defineProperty(SoundCloud, "canPlay", _patterns.canPlay.soundcloud);

    		_defineProperty(SoundCloud, "loopOnEnded", true);
    } (SoundCloud));
    	return SoundCloud;
    }

    var Vimeo = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredVimeo;

    function requireVimeo () {
    	if (hasRequiredVimeo) return Vimeo;
    	hasRequiredVimeo = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://player.vimeo.com/api/player.js';
    		var SDK_GLOBAL = 'Vimeo';

    		var Vimeo = /*#__PURE__*/function (_Component) {
    		  _inherits(Vimeo, _Component);

    		  var _super = _createSuper(Vimeo);

    		  function Vimeo() {
    		    var _this;

    		    _classCallCheck(this, Vimeo);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "duration", null);

    		    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    		    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.setVolume(0);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      if (_this.props.volume !== null) {
    		        _this.setVolume(_this.props.volume);
    		      }
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
    		      _this.container = container;
    		    });

    		    return _this;
    		  }

    		  _createClass(Vimeo, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      this.duration = null;
    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Vimeo) {
    		        if (!_this2.container) return;
    		        var _this2$props$config = _this2.props.config,
    		            playerOptions = _this2$props$config.playerOptions,
    		            title = _this2$props$config.title;
    		        _this2.player = new Vimeo.Player(_this2.container, _objectSpread({
    		          url: url,
    		          autoplay: _this2.props.playing,
    		          muted: _this2.props.muted,
    		          loop: _this2.props.loop,
    		          playsinline: _this2.props.playsinline,
    		          controls: _this2.props.controls
    		        }, playerOptions));

    		        _this2.player.ready().then(function () {
    		          var iframe = _this2.container.querySelector('iframe');

    		          iframe.style.width = '100%';
    		          iframe.style.height = '100%';

    		          if (title) {
    		            iframe.title = title;
    		          }
    		        })["catch"](_this2.props.onError);

    		        _this2.player.on('loaded', function () {
    		          _this2.props.onReady();

    		          _this2.refreshDuration();
    		        });

    		        _this2.player.on('play', function () {
    		          _this2.props.onPlay();

    		          _this2.refreshDuration();
    		        });

    		        _this2.player.on('pause', _this2.props.onPause);

    		        _this2.player.on('seeked', function (e) {
    		          return _this2.props.onSeek(e.seconds);
    		        });

    		        _this2.player.on('ended', _this2.props.onEnded);

    		        _this2.player.on('error', _this2.props.onError);

    		        _this2.player.on('timeupdate', function (_ref) {
    		          var seconds = _ref.seconds;
    		          _this2.currentTime = seconds;
    		        });

    		        _this2.player.on('progress', function (_ref2) {
    		          var seconds = _ref2.seconds;
    		          _this2.secondsLoaded = seconds;
    		        });

    		        _this2.player.on('bufferstart', _this2.props.onBuffer);

    		        _this2.player.on('bufferend', _this2.props.onBufferEnd);
    		      }, this.props.onError);
    		    }
    		  }, {
    		    key: "refreshDuration",
    		    value: function refreshDuration() {
    		      var _this3 = this;

    		      this.player.getDuration().then(function (duration) {
    		        _this3.duration = duration;
    		      });
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      var promise = this.callPlayer('play');

    		      if (promise) {
    		        promise["catch"](this.props.onError);
    		      }
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      this.callPlayer('unload');
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('setCurrentTime', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "setLoop",
    		    value: function setLoop(loop) {
    		      this.callPlayer('setLoop', loop);
    		    }
    		  }, {
    		    key: "setPlaybackRate",
    		    value: function setPlaybackRate(rate) {
    		      this.callPlayer('setPlaybackRate', rate);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.secondsLoaded;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var display = this.props.display;
    		      var style = {
    		        width: '100%',
    		        height: '100%',
    		        overflow: 'hidden',
    		        display: display
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        key: this.props.url,
    		        ref: this.ref,
    		        style: style
    		      });
    		    }
    		  }]);

    		  return Vimeo;
    		}(_react.Component);

    		exports["default"] = Vimeo;

    		_defineProperty(Vimeo, "displayName", 'Vimeo');

    		_defineProperty(Vimeo, "canPlay", _patterns.canPlay.vimeo);

    		_defineProperty(Vimeo, "forceLoad", true);
    } (Vimeo));
    	return Vimeo;
    }

    var Facebook = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredFacebook;

    function requireFacebook () {
    	if (hasRequiredFacebook) return Facebook;
    	hasRequiredFacebook = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://connect.facebook.net/en_US/sdk.js';
    		var SDK_GLOBAL = 'FB';
    		var SDK_GLOBAL_READY = 'fbAsyncInit';
    		var PLAYER_ID_PREFIX = 'facebook-player-';

    		var Facebook = /*#__PURE__*/function (_Component) {
    		  _inherits(Facebook, _Component);

    		  var _super = _createSuper(Facebook);

    		  function Facebook() {
    		    var _this;

    		    _classCallCheck(this, Facebook);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('mute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('unmute');
    		    });

    		    return _this;
    		  }

    		  _createClass(Facebook, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url, isReady) {
    		      var _this2 = this;

    		      if (isReady) {
    		        (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
    		          return FB.XFBML.parse();
    		        });
    		        return;
    		      }

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (FB) {
    		        FB.init({
    		          appId: _this2.props.config.appId,
    		          xfbml: true,
    		          version: _this2.props.config.version
    		        });
    		        FB.Event.subscribe('xfbml.render', function (msg) {
    		          // Here we know the SDK has loaded, even if onReady/onPlay
    		          // is not called due to a video that cannot be embedded
    		          _this2.props.onLoaded();
    		        });
    		        FB.Event.subscribe('xfbml.ready', function (msg) {
    		          if (msg.type === 'video' && msg.id === _this2.playerID) {
    		            _this2.player = msg.instance;

    		            _this2.player.subscribe('startedPlaying', _this2.props.onPlay);

    		            _this2.player.subscribe('paused', _this2.props.onPause);

    		            _this2.player.subscribe('finishedPlaying', _this2.props.onEnded);

    		            _this2.player.subscribe('startedBuffering', _this2.props.onBuffer);

    		            _this2.player.subscribe('finishedBuffering', _this2.props.onBufferEnd);

    		            _this2.player.subscribe('error', _this2.props.onError);

    		            if (_this2.props.muted) {
    		              _this2.callPlayer('mute');
    		            } else {
    		              _this2.callPlayer('unmute');
    		            }

    		            _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`
    		            // to the iframe when autoplay fails, so here we set it back


    		            document.getElementById(_this2.playerID).querySelector('iframe').style.visibility = 'visible';
    		          }
    		        });
    		      });
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('seek', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.callPlayer('getDuration');
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.callPlayer('getCurrentPosition');
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return null;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var attributes = this.props.config.attributes;
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", _extends({
    		        style: style,
    		        id: this.playerID,
    		        className: "fb-video",
    		        "data-href": this.props.url,
    		        "data-autoplay": this.props.playing ? 'true' : 'false',
    		        "data-allowfullscreen": "true",
    		        "data-controls": this.props.controls ? 'true' : 'false'
    		      }, attributes));
    		    }
    		  }]);

    		  return Facebook;
    		}(_react.Component);

    		exports["default"] = Facebook;

    		_defineProperty(Facebook, "displayName", 'Facebook');

    		_defineProperty(Facebook, "canPlay", _patterns.canPlay.facebook);

    		_defineProperty(Facebook, "loopOnEnded", true);
    } (Facebook));
    	return Facebook;
    }

    var Streamable = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredStreamable;

    function requireStreamable () {
    	if (hasRequiredStreamable) return Streamable;
    	hasRequiredStreamable = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
    		var SDK_GLOBAL = 'playerjs';

    		var Streamable = /*#__PURE__*/function (_Component) {
    		  _inherits(Streamable, _Component);

    		  var _super = _createSuper(Streamable);

    		  function Streamable() {
    		    var _this;

    		    _classCallCheck(this, Streamable);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "duration", null);

    		    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    		    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('mute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('unmute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
    		      _this.iframe = iframe;
    		    });

    		    return _this;
    		  }

    		  _createClass(Streamable, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
    		        if (!_this2.iframe) return;
    		        _this2.player = new playerjs.Player(_this2.iframe);

    		        _this2.player.setLoop(_this2.props.loop);

    		        _this2.player.on('ready', _this2.props.onReady);

    		        _this2.player.on('play', _this2.props.onPlay);

    		        _this2.player.on('pause', _this2.props.onPause);

    		        _this2.player.on('seeked', _this2.props.onSeek);

    		        _this2.player.on('ended', _this2.props.onEnded);

    		        _this2.player.on('error', _this2.props.onError);

    		        _this2.player.on('timeupdate', function (_ref) {
    		          var duration = _ref.duration,
    		              seconds = _ref.seconds;
    		          _this2.duration = duration;
    		          _this2.currentTime = seconds;
    		        });

    		        _this2.player.on('buffered', function (_ref2) {
    		          var percent = _ref2.percent;

    		          if (_this2.duration) {
    		            _this2.secondsLoaded = _this2.duration * percent;
    		          }
    		        });

    		        if (_this2.props.muted) {
    		          _this2.player.mute();
    		        }
    		      }, this.props.onError);
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('setCurrentTime', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction * 100);
    		    }
    		  }, {
    		    key: "setLoop",
    		    value: function setLoop(loop) {
    		      this.callPlayer('setLoop', loop);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.secondsLoaded;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("iframe", {
    		        ref: this.ref,
    		        src: "https://streamable.com/o/".concat(id),
    		        frameBorder: "0",
    		        scrolling: "no",
    		        style: style,
    		        allow: "encrypted-media; autoplay; fullscreen;"
    		      });
    		    }
    		  }]);

    		  return Streamable;
    		}(_react.Component);

    		exports["default"] = Streamable;

    		_defineProperty(Streamable, "displayName", 'Streamable');

    		_defineProperty(Streamable, "canPlay", _patterns.canPlay.streamable);
    } (Streamable));
    	return Streamable;
    }

    var Wistia = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredWistia;

    function requireWistia () {
    	if (hasRequiredWistia) return Wistia;
    	hasRequiredWistia = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://fast.wistia.com/assets/external/E-v1.js';
    		var SDK_GLOBAL = 'Wistia';
    		var PLAYER_ID_PREFIX = 'wistia-player-';

    		var Wistia = /*#__PURE__*/function (_Component) {
    		  _inherits(Wistia, _Component);

    		  var _super = _createSuper(Wistia);

    		  function Wistia() {
    		    var _this;

    		    _classCallCheck(this, Wistia);

    		    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      _args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(_args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    		    _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
    		      var _this$props;

    		      return (_this$props = _this.props).onPlay.apply(_this$props, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPause", function () {
    		      var _this$props2;

    		      return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onSeek", function () {
    		      var _this$props3;

    		      return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
    		      var _this$props4;

    		      return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPlaybackRateChange", function () {
    		      var _this$props5;

    		      return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('mute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('unmute');
    		    });

    		    return _this;
    		  }

    		  _createClass(Wistia, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      var _this$props6 = this.props,
    		          playing = _this$props6.playing,
    		          muted = _this$props6.muted,
    		          controls = _this$props6.controls,
    		          _onReady = _this$props6.onReady,
    		          config = _this$props6.config,
    		          onError = _this$props6.onError;
    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Wistia) {
    		        if (config.customControls) {
    		          config.customControls.forEach(function (control) {
    		            return Wistia.defineControl(control);
    		          });
    		        }

    		        window._wq = window._wq || [];

    		        window._wq.push({
    		          id: _this2.playerID,
    		          options: _objectSpread({
    		            autoPlay: playing,
    		            silentAutoPlay: 'allow',
    		            muted: muted,
    		            controlsVisibleOnLoad: controls,
    		            fullscreenButton: controls,
    		            playbar: controls,
    		            playbackRateControl: controls,
    		            qualityControl: controls,
    		            volumeControl: controls,
    		            settingsControl: controls,
    		            smallPlayButton: controls
    		          }, config.options),
    		          onReady: function onReady(player) {
    		            _this2.player = player;

    		            _this2.unbind();

    		            _this2.player.bind('play', _this2.onPlay);

    		            _this2.player.bind('pause', _this2.onPause);

    		            _this2.player.bind('seek', _this2.onSeek);

    		            _this2.player.bind('end', _this2.onEnded);

    		            _this2.player.bind('playbackratechange', _this2.onPlaybackRateChange);

    		            _onReady();
    		          }
    		        });
    		      }, onError);
    		    }
    		  }, {
    		    key: "unbind",
    		    value: function unbind() {
    		      this.player.unbind('play', this.onPlay);
    		      this.player.unbind('pause', this.onPause);
    		      this.player.unbind('seek', this.onSeek);
    		      this.player.unbind('end', this.onEnded);
    		      this.player.unbind('playbackratechange', this.onPlaybackRateChange);
    		    } // Proxy methods to prevent listener leaks

    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      this.unbind();
    		      this.callPlayer('remove');
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('time', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('volume', fraction);
    		    }
    		  }, {
    		    key: "setPlaybackRate",
    		    value: function setPlaybackRate(rate) {
    		      this.callPlayer('playbackRate', rate);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.callPlayer('duration');
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.callPlayer('time');
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return null;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var url = this.props.url;
    		      var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];
    		      var className = "wistia_embed wistia_async_".concat(videoID);
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        id: this.playerID,
    		        key: videoID,
    		        className: className,
    		        style: style
    		      });
    		    }
    		  }]);

    		  return Wistia;
    		}(_react.Component);

    		exports["default"] = Wistia;

    		_defineProperty(Wistia, "displayName", 'Wistia');

    		_defineProperty(Wistia, "canPlay", _patterns.canPlay.wistia);

    		_defineProperty(Wistia, "loopOnEnded", true);
    } (Wistia));
    	return Wistia;
    }

    var Twitch = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredTwitch;

    function requireTwitch () {
    	if (hasRequiredTwitch) return Twitch;
    	hasRequiredTwitch = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://player.twitch.tv/js/embed/v1.js';
    		var SDK_GLOBAL = 'Twitch';
    		var PLAYER_ID_PREFIX = 'twitch-player-';

    		var Twitch = /*#__PURE__*/function (_Component) {
    		  _inherits(Twitch, _Component);

    		  var _super = _createSuper(Twitch);

    		  function Twitch() {
    		    var _this;

    		    _classCallCheck(this, Twitch);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "playerID", _this.props.config.playerId || "".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('setMuted', true);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('setMuted', false);
    		    });

    		    return _this;
    		  }

    		  _createClass(Twitch, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url, isReady) {
    		      var _this2 = this;

    		      var _this$props = this.props,
    		          playsinline = _this$props.playsinline,
    		          onError = _this$props.onError,
    		          config = _this$props.config,
    		          controls = _this$props.controls;

    		      var isChannel = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);

    		      var id = isChannel ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];

    		      if (isReady) {
    		        if (isChannel) {
    		          this.player.setChannel(id);
    		        } else {
    		          this.player.setVideo('v' + id);
    		        }

    		        return;
    		      }

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Twitch) {
    		        _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({
    		          video: isChannel ? '' : id,
    		          channel: isChannel ? id : '',
    		          height: '100%',
    		          width: '100%',
    		          playsinline: playsinline,
    		          autoplay: _this2.props.playing,
    		          muted: _this2.props.muted,
    		          // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859
    		          controls: isChannel ? true : controls,
    		          time: (0, _utils.parseStartTime)(url)
    		        }, config.options));
    		        var _Twitch$Player = Twitch.Player,
    		            READY = _Twitch$Player.READY,
    		            PLAYING = _Twitch$Player.PLAYING,
    		            PAUSE = _Twitch$Player.PAUSE,
    		            ENDED = _Twitch$Player.ENDED,
    		            ONLINE = _Twitch$Player.ONLINE,
    		            OFFLINE = _Twitch$Player.OFFLINE,
    		            SEEK = _Twitch$Player.SEEK;

    		        _this2.player.addEventListener(READY, _this2.props.onReady);

    		        _this2.player.addEventListener(PLAYING, _this2.props.onPlay);

    		        _this2.player.addEventListener(PAUSE, _this2.props.onPause);

    		        _this2.player.addEventListener(ENDED, _this2.props.onEnded);

    		        _this2.player.addEventListener(SEEK, _this2.props.onSeek); // Prevent weird isLoading behaviour when streams are offline


    		        _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);

    		        _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);
    		      }, onError);
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('seek', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.callPlayer('getDuration');
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.callPlayer('getCurrentTime');
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return null;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        style: style,
    		        id: this.playerID
    		      });
    		    }
    		  }]);

    		  return Twitch;
    		}(_react.Component);

    		exports["default"] = Twitch;

    		_defineProperty(Twitch, "displayName", 'Twitch');

    		_defineProperty(Twitch, "canPlay", _patterns.canPlay.twitch);

    		_defineProperty(Twitch, "loopOnEnded", true);
    } (Twitch));
    	return Twitch;
    }

    var DailyMotion = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredDailyMotion;

    function requireDailyMotion () {
    	if (hasRequiredDailyMotion) return DailyMotion;
    	hasRequiredDailyMotion = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

    		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://api.dmcdn.net/all.js';
    		var SDK_GLOBAL = 'DM';
    		var SDK_GLOBAL_READY = 'dmAsyncInit';

    		var DailyMotion = /*#__PURE__*/function (_Component) {
    		  _inherits(DailyMotion, _Component);

    		  var _super = _createSuper(DailyMotion);

    		  function DailyMotion() {
    		    var _this;

    		    _classCallCheck(this, DailyMotion);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "onDurationChange", function () {
    		      var duration = _this.getDuration();

    		      _this.props.onDuration(duration);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('setMuted', true);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('setMuted', false);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
    		      _this.container = container;
    		    });

    		    return _this;
    		  }

    		  _createClass(DailyMotion, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      var _this$props = this.props,
    		          controls = _this$props.controls,
    		          config = _this$props.config,
    		          onError = _this$props.onError,
    		          playing = _this$props.playing;

    		      var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION),
    		          _url$match2 = _slicedToArray(_url$match, 2),
    		          id = _url$match2[1];

    		      if (this.player) {
    		        this.player.load(id, {
    		          start: (0, _utils.parseStartTime)(url),
    		          autoplay: playing
    		        });
    		        return;
    		      }

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function (DM) {
    		        return DM.player;
    		      }).then(function (DM) {
    		        if (!_this2.container) return;
    		        var Player = DM.player;
    		        _this2.player = new Player(_this2.container, {
    		          width: '100%',
    		          height: '100%',
    		          video: id,
    		          params: _objectSpread({
    		            controls: controls,
    		            autoplay: _this2.props.playing,
    		            mute: _this2.props.muted,
    		            start: (0, _utils.parseStartTime)(url),
    		            origin: window.location.origin
    		          }, config.params),
    		          events: {
    		            apiready: _this2.props.onReady,
    		            seeked: function seeked() {
    		              return _this2.props.onSeek(_this2.player.currentTime);
    		            },
    		            video_end: _this2.props.onEnded,
    		            durationchange: _this2.onDurationChange,
    		            pause: _this2.props.onPause,
    		            playing: _this2.props.onPlay,
    		            waiting: _this2.props.onBuffer,
    		            error: function error(event) {
    		              return onError(event);
    		            }
    		          }
    		        });
    		      }, onError);
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('seek', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.player.duration || null;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.player.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.player.bufferedTime;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var display = this.props.display;
    		      var style = {
    		        width: '100%',
    		        height: '100%',
    		        display: display
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        style: style
    		      }, /*#__PURE__*/_react["default"].createElement("div", {
    		        ref: this.ref
    		      }));
    		    }
    		  }]);

    		  return DailyMotion;
    		}(_react.Component);

    		exports["default"] = DailyMotion;

    		_defineProperty(DailyMotion, "displayName", 'DailyMotion');

    		_defineProperty(DailyMotion, "canPlay", _patterns.canPlay.dailymotion);

    		_defineProperty(DailyMotion, "loopOnEnded", true);
    } (DailyMotion));
    	return DailyMotion;
    }

    var Mixcloud = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredMixcloud;

    function requireMixcloud () {
    	if (hasRequiredMixcloud) return Mixcloud;
    	hasRequiredMixcloud = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://widget.mixcloud.com/media/js/widgetApi.js';
    		var SDK_GLOBAL = 'Mixcloud';

    		var Mixcloud = /*#__PURE__*/function (_Component) {
    		  _inherits(Mixcloud, _Component);

    		  var _super = _createSuper(Mixcloud);

    		  function Mixcloud() {
    		    var _this;

    		    _classCallCheck(this, Mixcloud);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "duration", null);

    		    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    		    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {// No volume support
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {// No volume support
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
    		      _this.iframe = iframe;
    		    });

    		    return _this;
    		  }

    		  _createClass(Mixcloud, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (Mixcloud) {
    		        _this2.player = Mixcloud.PlayerWidget(_this2.iframe);

    		        _this2.player.ready.then(function () {
    		          _this2.player.events.play.on(_this2.props.onPlay);

    		          _this2.player.events.pause.on(_this2.props.onPause);

    		          _this2.player.events.ended.on(_this2.props.onEnded);

    		          _this2.player.events.error.on(_this2.props.error);

    		          _this2.player.events.progress.on(function (seconds, duration) {
    		            _this2.currentTime = seconds;
    		            _this2.duration = duration;
    		          });

    		          _this2.props.onReady();
    		        });
    		      }, this.props.onError);
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('seek', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {// No volume support
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return null;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props = this.props,
    		          url = _this$props.url,
    		          config = _this$props.config;
    		      var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      var query = (0, _utils.queryString)(_objectSpread(_objectSpread({}, config.options), {}, {
    		        feed: "/".concat(id, "/")
    		      })); // We have to give the iframe a key here to prevent a
    		      // weird dialog appearing when loading a new track

    		      return /*#__PURE__*/_react["default"].createElement("iframe", {
    		        key: id,
    		        ref: this.ref,
    		        style: style,
    		        src: "https://www.mixcloud.com/widget/iframe/?".concat(query),
    		        frameBorder: "0"
    		      });
    		    }
    		  }]);

    		  return Mixcloud;
    		}(_react.Component);

    		exports["default"] = Mixcloud;

    		_defineProperty(Mixcloud, "displayName", 'Mixcloud');

    		_defineProperty(Mixcloud, "canPlay", _patterns.canPlay.mixcloud);

    		_defineProperty(Mixcloud, "loopOnEnded", true);
    } (Mixcloud));
    	return Mixcloud;
    }

    var Vidyard = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredVidyard;

    function requireVidyard () {
    	if (hasRequiredVidyard) return Vidyard;
    	hasRequiredVidyard = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://play.vidyard.com/embed/v4.js';
    		var SDK_GLOBAL = 'VidyardV4';
    		var SDK_GLOBAL_READY = 'onVidyardAPI';

    		var Vidyard = /*#__PURE__*/function (_Component) {
    		  _inherits(Vidyard, _Component);

    		  var _super = _createSuper(Vidyard);

    		  function Vidyard() {
    		    var _this;

    		    _classCallCheck(this, Vidyard);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.setVolume(0);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      if (_this.props.volume !== null) {
    		        _this.setVolume(_this.props.volume);
    		      }
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (container) {
    		      _this.container = container;
    		    });

    		    return _this;
    		  }

    		  _createClass(Vidyard, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      var _this$props = this.props,
    		          playing = _this$props.playing,
    		          config = _this$props.config,
    		          onError = _this$props.onError,
    		          onDuration = _this$props.onDuration;
    		      var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];

    		      if (this.player) {
    		        this.stop();
    		      }

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function (Vidyard) {
    		        if (!_this2.container) return;
    		        Vidyard.api.addReadyListener(function (data, player) {
    		          if (_this2.player) {
    		            return;
    		          }

    		          _this2.player = player;

    		          _this2.player.on('ready', _this2.props.onReady);

    		          _this2.player.on('play', _this2.props.onPlay);

    		          _this2.player.on('pause', _this2.props.onPause);

    		          _this2.player.on('seek', _this2.props.onSeek);

    		          _this2.player.on('playerComplete', _this2.props.onEnded);
    		        }, id);
    		        Vidyard.api.renderPlayer(_objectSpread({
    		          uuid: id,
    		          container: _this2.container,
    		          autoplay: playing ? 1 : 0
    		        }, config.options));
    		        Vidyard.api.getPlayerMetadata(id).then(function (meta) {
    		          _this2.duration = meta.length_in_seconds;
    		          onDuration(meta.length_in_seconds);
    		        });
    		      }, onError);
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      window.VidyardV4.api.destroyPlayer(this.player);
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(amount) {
    		      this.callPlayer('seek', amount);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "setPlaybackRate",
    		    value: function setPlaybackRate(rate) {
    		      this.callPlayer('setPlaybackSpeed', rate);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.callPlayer('currentTime');
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return null;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var display = this.props.display;
    		      var style = {
    		        width: '100%',
    		        height: '100%',
    		        display: display
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        style: style
    		      }, /*#__PURE__*/_react["default"].createElement("div", {
    		        ref: this.ref
    		      }));
    		    }
    		  }]);

    		  return Vidyard;
    		}(_react.Component);

    		exports["default"] = Vidyard;

    		_defineProperty(Vidyard, "displayName", 'Vidyard');

    		_defineProperty(Vidyard, "canPlay", _patterns.canPlay.vidyard);
    } (Vidyard));
    	return Vidyard;
    }

    var Kaltura = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredKaltura;

    function requireKaltura () {
    	if (hasRequiredKaltura) return Kaltura;
    	hasRequiredKaltura = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var SDK_URL = 'https://cdn.embed.ly/player-0.1.0.min.js';
    		var SDK_GLOBAL = 'playerjs';

    		var Kaltura = /*#__PURE__*/function (_Component) {
    		  _inherits(Kaltura, _Component);

    		  var _super = _createSuper(Kaltura);

    		  function Kaltura() {
    		    var _this;

    		    _classCallCheck(this, Kaltura);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "callPlayer", _utils.callPlayer);

    		    _defineProperty(_assertThisInitialized(_this), "duration", null);

    		    _defineProperty(_assertThisInitialized(_this), "currentTime", null);

    		    _defineProperty(_assertThisInitialized(_this), "secondsLoaded", null);

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.callPlayer('mute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.callPlayer('unmute');
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (iframe) {
    		      _this.iframe = iframe;
    		    });

    		    return _this;
    		  }

    		  _createClass(Kaltura, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function (playerjs) {
    		        if (!_this2.iframe) return;
    		        _this2.player = new playerjs.Player(_this2.iframe);

    		        _this2.player.on('ready', function () {
    		          // An arbitrary timeout is required otherwise
    		          // the event listeners won’t work
    		          setTimeout(function () {
    		            _this2.player.isReady = true;

    		            _this2.player.setLoop(_this2.props.loop);

    		            if (_this2.props.muted) {
    		              _this2.player.mute();
    		            }

    		            _this2.addListeners(_this2.player, _this2.props);

    		            _this2.props.onReady();
    		          }, 500);
    		        });
    		      }, this.props.onError);
    		    }
    		  }, {
    		    key: "addListeners",
    		    value: function addListeners(player, props) {
    		      var _this3 = this;

    		      player.on('play', props.onPlay);
    		      player.on('pause', props.onPause);
    		      player.on('ended', props.onEnded);
    		      player.on('error', props.onError);
    		      player.on('timeupdate', function (_ref) {
    		        var duration = _ref.duration,
    		            seconds = _ref.seconds;
    		        _this3.duration = duration;
    		        _this3.currentTime = seconds;
    		      });
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      this.callPlayer('play');
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.callPlayer('pause');
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {// Nothing to do
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.callPlayer('setCurrentTime', seconds);
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.callPlayer('setVolume', fraction);
    		    }
    		  }, {
    		    key: "setLoop",
    		    value: function setLoop(loop) {
    		      this.callPlayer('setLoop', loop);
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      return this.duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      return this.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      return this.secondsLoaded;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var style = {
    		        width: '100%',
    		        height: '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement("iframe", {
    		        ref: this.ref,
    		        src: this.props.url,
    		        frameBorder: "0",
    		        scrolling: "no",
    		        style: style,
    		        allow: "encrypted-media; autoplay; fullscreen;",
    		        referrerPolicy: "no-referrer-when-downgrade"
    		      });
    		    }
    		  }]);

    		  return Kaltura;
    		}(_react.Component);

    		exports["default"] = Kaltura;

    		_defineProperty(Kaltura, "displayName", 'Kaltura');

    		_defineProperty(Kaltura, "canPlay", _patterns.canPlay.kaltura);
    } (Kaltura));
    	return Kaltura;
    }

    var FilePlayer = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredFilePlayer;

    function requireFilePlayer () {
    	if (hasRequiredFilePlayer) return FilePlayer;
    	hasRequiredFilePlayer = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		var _utils = utils;

    		var _patterns = patterns;

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var HAS_NAVIGATOR = typeof navigator !== 'undefined';
    		var IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;
    		var IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;
    		var HLS_SDK_URL = 'https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js';
    		var HLS_GLOBAL = 'Hls';
    		var DASH_SDK_URL = 'https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js';
    		var DASH_GLOBAL = 'dashjs';
    		var FLV_SDK_URL = 'https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js';
    		var FLV_GLOBAL = 'flvjs';
    		var MATCH_DROPBOX_URL = /www\.dropbox\.com\/.+/;
    		var MATCH_CLOUDFLARE_STREAM = /https:\/\/watch\.cloudflarestream\.com\/([a-z0-9]+)/;
    		var REPLACE_CLOUDFLARE_STREAM = 'https://videodelivery.net/{id}/manifest/video.m3u8';

    		var FilePlayer = /*#__PURE__*/function (_Component) {
    		  _inherits(FilePlayer, _Component);

    		  var _super = _createSuper(FilePlayer);

    		  function FilePlayer() {
    		    var _this;

    		    _classCallCheck(this, FilePlayer);

    		    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      _args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(_args));

    		    _defineProperty(_assertThisInitialized(_this), "onReady", function () {
    		      var _this$props;

    		      return (_this$props = _this.props).onReady.apply(_this$props, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPlay", function () {
    		      var _this$props2;

    		      return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onBuffer", function () {
    		      var _this$props3;

    		      return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onBufferEnd", function () {
    		      var _this$props4;

    		      return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPause", function () {
    		      var _this$props5;

    		      return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onEnded", function () {
    		      var _this$props6;

    		      return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onError", function () {
    		      var _this$props7;

    		      return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPlayBackRateChange", function (event) {
    		      return _this.props.onPlaybackRateChange(event.target.playbackRate);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onEnablePIP", function () {
    		      var _this$props8;

    		      return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onDisablePIP", function (e) {
    		      var _this$props9 = _this.props,
    		          onDisablePIP = _this$props9.onDisablePIP,
    		          playing = _this$props9.playing;
    		      onDisablePIP(e);

    		      if (playing) {
    		        _this.play();
    		      }
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onPresentationModeChange", function (e) {
    		      if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {
    		        var webkitPresentationMode = _this.player.webkitPresentationMode;

    		        if (webkitPresentationMode === 'picture-in-picture') {
    		          _this.onEnablePIP(e);
    		        } else if (webkitPresentationMode === 'inline') {
    		          _this.onDisablePIP(e);
    		        }
    		      }
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "onSeek", function (e) {
    		      _this.props.onSeek(e.target.currentTime);
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "mute", function () {
    		      _this.player.muted = true;
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "unmute", function () {
    		      _this.player.muted = false;
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "renderSourceElement", function (source, index) {
    		      if (typeof source === 'string') {
    		        return /*#__PURE__*/_react["default"].createElement("source", {
    		          key: index,
    		          src: source
    		        });
    		      }

    		      return /*#__PURE__*/_react["default"].createElement("source", _extends({
    		        key: index
    		      }, source));
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "renderTrack", function (track, index) {
    		      return /*#__PURE__*/_react["default"].createElement("track", _extends({
    		        key: index
    		      }, track));
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "ref", function (player) {
    		      if (_this.player) {
    		        // Store previous player to be used by removeListeners()
    		        _this.prevPlayer = _this.player;
    		      }

    		      _this.player = player;
    		    });

    		    return _this;
    		  }

    		  _createClass(FilePlayer, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.props.onMount && this.props.onMount(this);
    		      this.addListeners(this.player);

    		      if (IS_IOS) {
    		        this.player.load();
    		      }
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
    		        this.removeListeners(this.prevPlayer, prevProps.url);
    		        this.addListeners(this.player);
    		      }

    		      if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url)) {
    		        this.player.srcObject = null;
    		      }
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      this.removeListeners(this.player);

    		      if (this.hls) {
    		        this.hls.destroy();
    		      }
    		    }
    		  }, {
    		    key: "addListeners",
    		    value: function addListeners(player) {
    		      var _this$props10 = this.props,
    		          url = _this$props10.url,
    		          playsinline = _this$props10.playsinline;
    		      player.addEventListener('play', this.onPlay);
    		      player.addEventListener('waiting', this.onBuffer);
    		      player.addEventListener('playing', this.onBufferEnd);
    		      player.addEventListener('pause', this.onPause);
    		      player.addEventListener('seeked', this.onSeek);
    		      player.addEventListener('ended', this.onEnded);
    		      player.addEventListener('error', this.onError);
    		      player.addEventListener('ratechange', this.onPlayBackRateChange);
    		      player.addEventListener('enterpictureinpicture', this.onEnablePIP);
    		      player.addEventListener('leavepictureinpicture', this.onDisablePIP);
    		      player.addEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

    		      if (!this.shouldUseHLS(url)) {
    		        // onReady is handled by hls.js
    		        player.addEventListener('canplay', this.onReady);
    		      }

    		      if (playsinline) {
    		        player.setAttribute('playsinline', '');
    		        player.setAttribute('webkit-playsinline', '');
    		        player.setAttribute('x5-playsinline', '');
    		      }
    		    }
    		  }, {
    		    key: "removeListeners",
    		    value: function removeListeners(player, url) {
    		      player.removeEventListener('canplay', this.onReady);
    		      player.removeEventListener('play', this.onPlay);
    		      player.removeEventListener('waiting', this.onBuffer);
    		      player.removeEventListener('playing', this.onBufferEnd);
    		      player.removeEventListener('pause', this.onPause);
    		      player.removeEventListener('seeked', this.onSeek);
    		      player.removeEventListener('ended', this.onEnded);
    		      player.removeEventListener('error', this.onError);
    		      player.removeEventListener('ratechange', this.onPlayBackRateChange);
    		      player.removeEventListener('enterpictureinpicture', this.onEnablePIP);
    		      player.removeEventListener('leavepictureinpicture', this.onDisablePIP);
    		      player.removeEventListener('webkitpresentationmodechanged', this.onPresentationModeChange);

    		      if (!this.shouldUseHLS(url)) {
    		        // onReady is handled by hls.js
    		        player.removeEventListener('canplay', this.onReady);
    		      }
    		    } // Proxy methods to prevent listener leaks

    		  }, {
    		    key: "shouldUseAudio",
    		    value: function shouldUseAudio(props) {
    		      if (props.config.forceVideo) {
    		        return false;
    		      }

    		      if (props.config.attributes.poster) {
    		        return false; // Use <video> so that poster is shown
    		      }

    		      return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;
    		    }
    		  }, {
    		    key: "shouldUseHLS",
    		    value: function shouldUseHLS(url) {
    		      if (this.props.config.forceHLS) {
    		        return true;
    		      }

    		      if (IS_IOS) {
    		        return false;
    		      }

    		      return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);
    		    }
    		  }, {
    		    key: "shouldUseDASH",
    		    value: function shouldUseDASH(url) {
    		      return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;
    		    }
    		  }, {
    		    key: "shouldUseFLV",
    		    value: function shouldUseFLV(url) {
    		      return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;
    		    }
    		  }, {
    		    key: "load",
    		    value: function load(url) {
    		      var _this2 = this;

    		      var _this$props$config = this.props.config,
    		          hlsVersion = _this$props$config.hlsVersion,
    		          hlsOptions = _this$props$config.hlsOptions,
    		          dashVersion = _this$props$config.dashVersion,
    		          flvVersion = _this$props$config.flvVersion;

    		      if (this.hls) {
    		        this.hls.destroy();
    		      }

    		      if (this.dash) {
    		        this.dash.reset();
    		      }

    		      if (this.shouldUseHLS(url)) {
    		        (0, _utils.getSDK)(HLS_SDK_URL.replace('VERSION', hlsVersion), HLS_GLOBAL).then(function (Hls) {
    		          _this2.hls = new Hls(hlsOptions);

    		          _this2.hls.on(Hls.Events.MANIFEST_PARSED, function () {
    		            _this2.props.onReady();
    		          });

    		          _this2.hls.on(Hls.Events.ERROR, function (e, data) {
    		            _this2.props.onError(e, data, _this2.hls, Hls);
    		          });

    		          if (MATCH_CLOUDFLARE_STREAM.test(url)) {
    		            var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];

    		            _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace('{id}', id));
    		          } else {
    		            _this2.hls.loadSource(url);
    		          }

    		          _this2.hls.attachMedia(_this2.player);

    		          _this2.props.onLoaded();
    		        });
    		      }

    		      if (this.shouldUseDASH(url)) {
    		        (0, _utils.getSDK)(DASH_SDK_URL.replace('VERSION', dashVersion), DASH_GLOBAL).then(function (dashjs) {
    		          _this2.dash = dashjs.MediaPlayer().create();

    		          _this2.dash.initialize(_this2.player, url, _this2.props.playing);

    		          _this2.dash.on('error', _this2.props.onError);

    		          if (parseInt(dashVersion) < 3) {
    		            _this2.dash.getDebug().setLogToBrowserConsole(false);
    		          } else {
    		            _this2.dash.updateSettings({
    		              debug: {
    		                logLevel: dashjs.Debug.LOG_LEVEL_NONE
    		              }
    		            });
    		          }

    		          _this2.props.onLoaded();
    		        });
    		      }

    		      if (this.shouldUseFLV(url)) {
    		        (0, _utils.getSDK)(FLV_SDK_URL.replace('VERSION', flvVersion), FLV_GLOBAL).then(function (flvjs) {
    		          _this2.flv = flvjs.createPlayer({
    		            type: 'flv',
    		            url: url
    		          });

    		          _this2.flv.attachMediaElement(_this2.player);

    		          _this2.flv.on(flvjs.Events.ERROR, function (e, data) {
    		            _this2.props.onError(e, data, _this2.flv, flvjs);
    		          });

    		          _this2.flv.load();

    		          _this2.props.onLoaded();
    		        });
    		      }

    		      if (url instanceof Array) {
    		        // When setting new urls (<source>) on an already loaded video,
    		        // HTMLMediaElement.load() is needed to reset the media element
    		        // and restart the media resource. Just replacing children source
    		        // dom nodes is not enough
    		        this.player.load();
    		      } else if ((0, _utils.isMediaStream)(url)) {
    		        try {
    		          this.player.srcObject = url;
    		        } catch (e) {
    		          this.player.src = window.URL.createObjectURL(url);
    		        }
    		      }
    		    }
    		  }, {
    		    key: "play",
    		    value: function play() {
    		      var promise = this.player.play();

    		      if (promise) {
    		        promise["catch"](this.props.onError);
    		      }
    		    }
    		  }, {
    		    key: "pause",
    		    value: function pause() {
    		      this.player.pause();
    		    }
    		  }, {
    		    key: "stop",
    		    value: function stop() {
    		      this.player.removeAttribute('src');

    		      if (this.dash) {
    		        this.dash.reset();
    		      }
    		    }
    		  }, {
    		    key: "seekTo",
    		    value: function seekTo(seconds) {
    		      this.player.currentTime = seconds;
    		    }
    		  }, {
    		    key: "setVolume",
    		    value: function setVolume(fraction) {
    		      this.player.volume = fraction;
    		    }
    		  }, {
    		    key: "enablePIP",
    		    value: function enablePIP() {
    		      if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {
    		        this.player.requestPictureInPicture();
    		      } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'picture-in-picture') {
    		        this.player.webkitSetPresentationMode('picture-in-picture');
    		      }
    		    }
    		  }, {
    		    key: "disablePIP",
    		    value: function disablePIP() {
    		      if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {
    		        document.exitPictureInPicture();
    		      } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== 'inline') {
    		        this.player.webkitSetPresentationMode('inline');
    		      }
    		    }
    		  }, {
    		    key: "setPlaybackRate",
    		    value: function setPlaybackRate(rate) {
    		      try {
    		        this.player.playbackRate = rate;
    		      } catch (error) {
    		        this.props.onError(error);
    		      }
    		    }
    		  }, {
    		    key: "getDuration",
    		    value: function getDuration() {
    		      if (!this.player) return null;
    		      var _this$player = this.player,
    		          duration = _this$player.duration,
    		          seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration
    		      // so instead we use the end of the seekable timerange

    		      if (duration === Infinity && seekable.length > 0) {
    		        return seekable.end(seekable.length - 1);
    		      }

    		      return duration;
    		    }
    		  }, {
    		    key: "getCurrentTime",
    		    value: function getCurrentTime() {
    		      if (!this.player) return null;
    		      return this.player.currentTime;
    		    }
    		  }, {
    		    key: "getSecondsLoaded",
    		    value: function getSecondsLoaded() {
    		      if (!this.player) return null;
    		      var buffered = this.player.buffered;

    		      if (buffered.length === 0) {
    		        return 0;
    		      }

    		      var end = buffered.end(buffered.length - 1);
    		      var duration = this.getDuration();

    		      if (end > duration) {
    		        return duration;
    		      }

    		      return end;
    		    }
    		  }, {
    		    key: "getSource",
    		    value: function getSource(url) {
    		      var useHLS = this.shouldUseHLS(url);
    		      var useDASH = this.shouldUseDASH(url);
    		      var useFLV = this.shouldUseFLV(url);

    		      if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {
    		        return undefined;
    		      }

    		      if (MATCH_DROPBOX_URL.test(url)) {
    		        return url.replace('www.dropbox.com', 'dl.dropboxusercontent.com');
    		      }

    		      return url;
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props11 = this.props,
    		          url = _this$props11.url,
    		          playing = _this$props11.playing,
    		          loop = _this$props11.loop,
    		          controls = _this$props11.controls,
    		          muted = _this$props11.muted,
    		          config = _this$props11.config,
    		          width = _this$props11.width,
    		          height = _this$props11.height;
    		      var useAudio = this.shouldUseAudio(this.props);
    		      var Element = useAudio ? 'audio' : 'video';
    		      var style = {
    		        width: width === 'auto' ? width : '100%',
    		        height: height === 'auto' ? height : '100%'
    		      };
    		      return /*#__PURE__*/_react["default"].createElement(Element, _extends({
    		        ref: this.ref,
    		        src: this.getSource(url),
    		        style: style,
    		        preload: "auto",
    		        autoPlay: playing || undefined,
    		        controls: controls,
    		        muted: muted,
    		        loop: loop
    		      }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));
    		    }
    		  }]);

    		  return FilePlayer;
    		}(_react.Component);

    		exports["default"] = FilePlayer;

    		_defineProperty(FilePlayer, "displayName", 'FilePlayer');

    		_defineProperty(FilePlayer, "canPlay", _patterns.canPlay.file);
    } (FilePlayer));
    	return FilePlayer;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports["default"] = void 0;

    	var _react = React__default["default"];

    	var _utils = utils;

    	var _patterns = patterns;

    	function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    	var _default = [{
    	  key: 'youtube',
    	  name: 'YouTube',
    	  canPlay: _patterns.canPlay.youtube,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireYouTube());
    	    });
    	  })
    	}, {
    	  key: 'soundcloud',
    	  name: 'SoundCloud',
    	  canPlay: _patterns.canPlay.soundcloud,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireSoundCloud());
    	    });
    	  })
    	}, {
    	  key: 'vimeo',
    	  name: 'Vimeo',
    	  canPlay: _patterns.canPlay.vimeo,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireVimeo());
    	    });
    	  })
    	}, {
    	  key: 'facebook',
    	  name: 'Facebook',
    	  canPlay: _patterns.canPlay.facebook,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireFacebook());
    	    });
    	  })
    	}, {
    	  key: 'streamable',
    	  name: 'Streamable',
    	  canPlay: _patterns.canPlay.streamable,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireStreamable());
    	    });
    	  })
    	}, {
    	  key: 'wistia',
    	  name: 'Wistia',
    	  canPlay: _patterns.canPlay.wistia,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireWistia());
    	    });
    	  })
    	}, {
    	  key: 'twitch',
    	  name: 'Twitch',
    	  canPlay: _patterns.canPlay.twitch,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireTwitch());
    	    });
    	  })
    	}, {
    	  key: 'dailymotion',
    	  name: 'DailyMotion',
    	  canPlay: _patterns.canPlay.dailymotion,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireDailyMotion());
    	    });
    	  })
    	}, {
    	  key: 'mixcloud',
    	  name: 'Mixcloud',
    	  canPlay: _patterns.canPlay.mixcloud,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireMixcloud());
    	    });
    	  })
    	}, {
    	  key: 'vidyard',
    	  name: 'Vidyard',
    	  canPlay: _patterns.canPlay.vidyard,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireVidyard());
    	    });
    	  })
    	}, {
    	  key: 'kaltura',
    	  name: 'Kaltura',
    	  canPlay: _patterns.canPlay.kaltura,
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireKaltura());
    	    });
    	  })
    	}, {
    	  key: 'file',
    	  name: 'FilePlayer',
    	  canPlay: _patterns.canPlay.file,
    	  canEnablePIP: function canEnablePIP(url) {
    	    return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);
    	  },
    	  lazyPlayer: /*#__PURE__*/(0, _react.lazy)(function () {
    	    return Promise.resolve().then(function () {
    	      return _interopRequireWildcard(requireFilePlayer());
    	    });
    	  })
    	}];
    	exports["default"] = _default;
    } (players));

    var ReactPlayer$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
            return false;
        }
        for (var i = 0; i < newInputs.length; i++) {
            if (newInputs[i] !== lastInputs[i]) {
                return false;
            }
        }
        return true;
    }

    function memoizeOne(resultFn, isEqual) {
        if (isEqual === void 0) { isEqual = areInputsEqual; }
        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;
        function memoized() {
            var newArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                newArgs[_i] = arguments[_i];
            }
            if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
                return lastResult;
            }
            lastResult = resultFn.apply(this, newArgs);
            calledOnce = true;
            lastThis = this;
            lastArgs = newArgs;
            return lastResult;
        }
        return memoized;
    }

    var memoizeOne_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': memoizeOne
    });

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(memoizeOne_esm);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

    var hasElementType = typeof Element !== 'undefined';
    var hasMap = typeof Map === 'function';
    var hasSet = typeof Set === 'function';
    var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

    // Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

    function equal(a, b) {
      // START: fast-deep-equal es6/index.js 3.1.3
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }

        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && (a instanceof Map) && (b instanceof Map)) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0]))) return false;
          return true;
        }

        if (hasSet && (a instanceof Set) && (b instanceof Set)) {
          if (a.size !== b.size) return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0])) return false;
          return true;
        }
        // END: Modifications

        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (a[i] !== b[i]) return false;
          return true;
        }

        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        // START: Modifications:
        // Apply guards for `Object.create(null)` handling. See:
        // - https://github.com/FormidableLabs/react-fast-compare/issues/64
        // - https://github.com/epoberezkin/fast-deep-equal/issues/49
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
        // END: Modifications

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        // END: fast-deep-equal

        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element) return false;

        // custom handling for React/Preact
        for (i = length; i-- !== 0;) {
          if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
            // React-specific: avoid traversing React elements' _owner
            // Preact-specific: avoid traversing Preact elements' __v and __o
            //    __v = $_original / $_vnode
            //    __o = $_owner
            // These properties contain circular references and are not needed when
            // comparing the actual elements (and not their owners)
            // .$$typeof and ._store on just reasonable markers of elements

            continue;
          }

          // all other properties should be traversed as usual
          if (!equal(a[keys[i]], b[keys[i]])) return false;
        }
        // END: react-fast-compare

        // START: fast-deep-equal
        return true;
      }

      return a !== a && b !== b;
    }
    // end fast-deep-equal

    var reactFastCompare = function isEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if (((error.message || '').match(/stack|recursion/i))) {
          // warn on circular references, don't crash
          // browsers give this different errors name and messages:
          // chrome/safari: "RangeError", "Maximum call stack size exceeded"
          // firefox: "InternalError", too much recursion"
          // edge: "Error", "Out of stack space"
          console.warn('react-fast-compare cannot handle circular refs');
          return false;
        }
        // some other error. we should definitely know about these
        throw error;
      }
    };

    var props = {};

    var propTypes$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = ReactPropTypesSecret_1;

    function emptyFunction() {}
    function emptyFunctionWithReset() {}
    emptyFunctionWithReset.resetWarningCache = emptyFunction;

    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          // It is still safe when called from React.
          return;
        }
        var err = new Error(
          'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
          'Use PropTypes.checkPropTypes() to call them. ' +
          'Read more at http://fb.me/use-check-prop-types'
        );
        err.name = 'Invariant Violation';
        throw err;
      }  shim.isRequired = shim;
      function getShim() {
        return shim;
      }  // Important!
      // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,

        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,

        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };

      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      // By explicitly using `prop-types` you are opting into new production behavior.
      // http://fb.me/prop-types-in-prod
      propTypes$1.exports = factoryWithThrowingShims();
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(props, "__esModule", {
      value: true
    });
    props.defaultProps = props.propTypes = void 0;

    var _propTypes = _interopRequireDefault$1(propTypes$1.exports);

    function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    var string$4 = _propTypes["default"].string,
        bool = _propTypes["default"].bool,
        number$1 = _propTypes["default"].number,
        array = _propTypes["default"].array,
        oneOfType = _propTypes["default"].oneOfType,
        shape = _propTypes["default"].shape,
        object = _propTypes["default"].object,
        func = _propTypes["default"].func,
        node$1 = _propTypes["default"].node;
    var propTypes = {
      url: oneOfType([string$4, array, object]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number$1,
      muted: bool,
      playbackRate: number$1,
      width: oneOfType([string$4, number$1]),
      height: oneOfType([string$4, number$1]),
      style: object,
      progressInterval: number$1,
      playsinline: bool,
      pip: bool,
      stopOnUnmount: bool,
      light: oneOfType([bool, string$4]),
      playIcon: node$1,
      previewTabIndex: number$1,
      fallback: node$1,
      oEmbedUrl: string$4,
      wrapper: oneOfType([string$4, func, shape({
        render: func.isRequired
      })]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          embedOptions: object,
          onUnstarted: func
        }),
        facebook: shape({
          appId: string$4,
          version: string$4,
          playerId: string$4,
          attributes: object
        }),
        dailymotion: shape({
          params: object
        }),
        vimeo: shape({
          playerOptions: object,
          title: string$4
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceVideo: bool,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          forceFLV: bool,
          hlsOptions: object,
          hlsVersion: string$4,
          dashVersion: string$4,
          flvVersion: string$4
        }),
        wistia: shape({
          options: object,
          playerId: string$4,
          customControls: array
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object,
          playerId: string$4
        }),
        vidyard: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onBufferEnd: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onPlaybackRateChange: func,
      onProgress: func,
      onClickPreview: func,
      onEnablePIP: func,
      onDisablePIP: func
    };
    props.propTypes = propTypes;

    var noop$7 = function noop() {};

    var defaultProps$1 = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: '640px',
      height: '360px',
      style: {},
      progressInterval: 1000,
      playsinline: false,
      pip: false,
      stopOnUnmount: true,
      light: false,
      fallback: null,
      wrapper: 'div',
      previewTabIndex: 0,
      oEmbedUrl: 'https://noembed.com/embed?url={url}',
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          embedOptions: {},
          onUnstarted: noop$7
        },
        facebook: {
          appId: '1309697205772819',
          version: 'v3.3',
          playerId: null,
          attributes: {}
        },
        dailymotion: {
          params: {
            api: 1,
            'endscreen-enable': false
          }
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            byline: false,
            portrait: false,
            title: false
          },
          title: null
        },
        file: {
          attributes: {},
          tracks: [],
          forceVideo: false,
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          forceFLV: false,
          hlsOptions: {},
          hlsVersion: '1.1.4',
          dashVersion: '3.1.3',
          flvVersion: '1.5.0'
        },
        wistia: {
          options: {},
          playerId: null,
          customControls: null
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {},
          playerId: null
        },
        vidyard: {
          options: {}
        }
      },
      onReady: noop$7,
      onStart: noop$7,
      onPlay: noop$7,
      onPause: noop$7,
      onBuffer: noop$7,
      onBufferEnd: noop$7,
      onEnded: noop$7,
      onError: noop$7,
      onDuration: noop$7,
      onSeek: noop$7,
      onPlaybackRateChange: noop$7,
      onProgress: noop$7,
      onClickPreview: noop$7,
      onEnablePIP: noop$7,
      onDisablePIP: noop$7
    };
    props.defaultProps = defaultProps$1;

    var Player = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (exports) {

    	function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports["default"] = void 0;

    	var _react = _interopRequireWildcard(React__default["default"]);

    	var _reactFastCompare = _interopRequireDefault(reactFastCompare);

    	var _props = props;

    	var _utils = utils;

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

    	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    	var SEEK_ON_PLAY_EXPIRY = 5000;

    	var Player = /*#__PURE__*/function (_Component) {
    	  _inherits(Player, _Component);

    	  var _super = _createSuper(Player);

    	  function Player() {
    	    var _this;

    	    _classCallCheck(this, Player);

    	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
    	      _args[_key] = arguments[_key];
    	    }

    	    _this = _super.call.apply(_super, [this].concat(_args));

    	    _defineProperty(_assertThisInitialized(_this), "mounted", false);

    	    _defineProperty(_assertThisInitialized(_this), "isReady", false);

    	    _defineProperty(_assertThisInitialized(_this), "isPlaying", false);

    	    _defineProperty(_assertThisInitialized(_this), "isLoading", true);

    	    _defineProperty(_assertThisInitialized(_this), "loadOnReady", null);

    	    _defineProperty(_assertThisInitialized(_this), "startOnPlay", true);

    	    _defineProperty(_assertThisInitialized(_this), "seekOnPlay", null);

    	    _defineProperty(_assertThisInitialized(_this), "onDurationCalled", false);

    	    _defineProperty(_assertThisInitialized(_this), "handlePlayerMount", function (player) {
    	      if (_this.player) return; // Prevent loading twice in strict mode

    	      _this.player = player;

    	      _this.player.load(_this.props.url);

    	      _this.progress();
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "getInternalPlayer", function (key) {
    	      if (!_this.player) return null;
    	      return _this.player[key];
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "progress", function () {
    	      if (_this.props.url && _this.player && _this.isReady) {
    	        var playedSeconds = _this.getCurrentTime() || 0;

    	        var loadedSeconds = _this.getSecondsLoaded();

    	        var duration = _this.getDuration();

    	        if (duration) {
    	          var progress = {
    	            playedSeconds: playedSeconds,
    	            played: playedSeconds / duration
    	          };

    	          if (loadedSeconds !== null) {
    	            progress.loadedSeconds = loadedSeconds;
    	            progress.loaded = loadedSeconds / duration;
    	          } // Only call onProgress if values have changed


    	          if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {
    	            _this.props.onProgress(progress);
    	          }

    	          _this.prevPlayed = progress.playedSeconds;
    	          _this.prevLoaded = progress.loadedSeconds;
    	        }
    	      }

    	      _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handleReady", function () {
    	      if (!_this.mounted) return;
    	      _this.isReady = true;
    	      _this.isLoading = false;
    	      var _this$props = _this.props,
    	          onReady = _this$props.onReady,
    	          playing = _this$props.playing,
    	          volume = _this$props.volume,
    	          muted = _this$props.muted;
    	      onReady();

    	      if (!muted && volume !== null) {
    	        _this.player.setVolume(volume);
    	      }

    	      if (_this.loadOnReady) {
    	        _this.player.load(_this.loadOnReady, true);

    	        _this.loadOnReady = null;
    	      } else if (playing) {
    	        _this.player.play();
    	      }

    	      _this.handleDurationCheck();
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handlePlay", function () {
    	      _this.isPlaying = true;
    	      _this.isLoading = false;
    	      var _this$props2 = _this.props,
    	          onStart = _this$props2.onStart,
    	          onPlay = _this$props2.onPlay,
    	          playbackRate = _this$props2.playbackRate;

    	      if (_this.startOnPlay) {
    	        if (_this.player.setPlaybackRate && playbackRate !== 1) {
    	          _this.player.setPlaybackRate(playbackRate);
    	        }

    	        onStart();
    	        _this.startOnPlay = false;
    	      }

    	      onPlay();

    	      if (_this.seekOnPlay) {
    	        _this.seekTo(_this.seekOnPlay);

    	        _this.seekOnPlay = null;
    	      }

    	      _this.handleDurationCheck();
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handlePause", function (e) {
    	      _this.isPlaying = false;

    	      if (!_this.isLoading) {
    	        _this.props.onPause(e);
    	      }
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handleEnded", function () {
    	      var _this$props3 = _this.props,
    	          activePlayer = _this$props3.activePlayer,
    	          loop = _this$props3.loop,
    	          onEnded = _this$props3.onEnded;

    	      if (activePlayer.loopOnEnded && loop) {
    	        _this.seekTo(0);
    	      }

    	      if (!loop) {
    	        _this.isPlaying = false;
    	        onEnded();
    	      }
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handleError", function () {
    	      var _this$props4;

    	      _this.isLoading = false;

    	      (_this$props4 = _this.props).onError.apply(_this$props4, arguments);
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handleDurationCheck", function () {
    	      clearTimeout(_this.durationCheckTimeout);

    	      var duration = _this.getDuration();

    	      if (duration) {
    	        if (!_this.onDurationCalled) {
    	          _this.props.onDuration(duration);

    	          _this.onDurationCalled = true;
    	        }
    	      } else {
    	        _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);
    	      }
    	    });

    	    _defineProperty(_assertThisInitialized(_this), "handleLoaded", function () {
    	      // Sometimes we know loading has stopped but onReady/onPlay are never called
    	      // so this provides a way for players to avoid getting stuck
    	      _this.isLoading = false;
    	    });

    	    return _this;
    	  }

    	  _createClass(Player, [{
    	    key: "componentDidMount",
    	    value: function componentDidMount() {
    	      this.mounted = true;
    	    }
    	  }, {
    	    key: "componentWillUnmount",
    	    value: function componentWillUnmount() {
    	      clearTimeout(this.progressTimeout);
    	      clearTimeout(this.durationCheckTimeout);

    	      if (this.isReady && this.props.stopOnUnmount) {
    	        this.player.stop();

    	        if (this.player.disablePIP) {
    	          this.player.disablePIP();
    	        }
    	      }

    	      this.mounted = false;
    	    }
    	  }, {
    	    key: "componentDidUpdate",
    	    value: function componentDidUpdate(prevProps) {
    	      var _this2 = this;

    	      // If there isn’t a player available, don’t do anything
    	      if (!this.player) {
    	        return;
    	      } // Invoke player methods based on changed props


    	      var _this$props5 = this.props,
    	          url = _this$props5.url,
    	          playing = _this$props5.playing,
    	          volume = _this$props5.volume,
    	          muted = _this$props5.muted,
    	          playbackRate = _this$props5.playbackRate,
    	          pip = _this$props5.pip,
    	          loop = _this$props5.loop,
    	          activePlayer = _this$props5.activePlayer,
    	          disableDeferredLoading = _this$props5.disableDeferredLoading;

    	      if (!(0, _reactFastCompare["default"])(prevProps.url, url)) {
    	        if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {
    	          console.warn("ReactPlayer: the attempt to load ".concat(url, " is being deferred until the player has loaded"));
    	          this.loadOnReady = url;
    	          return;
    	        }

    	        this.isLoading = true;
    	        this.startOnPlay = true;
    	        this.onDurationCalled = false;
    	        this.player.load(url, this.isReady);
    	      }

    	      if (!prevProps.playing && playing && !this.isPlaying) {
    	        this.player.play();
    	      }

    	      if (prevProps.playing && !playing && this.isPlaying) {
    	        this.player.pause();
    	      }

    	      if (!prevProps.pip && pip && this.player.enablePIP) {
    	        this.player.enablePIP();
    	      }

    	      if (prevProps.pip && !pip && this.player.disablePIP) {
    	        this.player.disablePIP();
    	      }

    	      if (prevProps.volume !== volume && volume !== null) {
    	        this.player.setVolume(volume);
    	      }

    	      if (prevProps.muted !== muted) {
    	        if (muted) {
    	          this.player.mute();
    	        } else {
    	          this.player.unmute();

    	          if (volume !== null) {
    	            // Set volume next tick to fix a bug with DailyMotion
    	            setTimeout(function () {
    	              return _this2.player.setVolume(volume);
    	            });
    	          }
    	        }
    	      }

    	      if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {
    	        this.player.setPlaybackRate(playbackRate);
    	      }

    	      if (prevProps.loop !== loop && this.player.setLoop) {
    	        this.player.setLoop(loop);
    	      }
    	    }
    	  }, {
    	    key: "getDuration",
    	    value: function getDuration() {
    	      if (!this.isReady) return null;
    	      return this.player.getDuration();
    	    }
    	  }, {
    	    key: "getCurrentTime",
    	    value: function getCurrentTime() {
    	      if (!this.isReady) return null;
    	      return this.player.getCurrentTime();
    	    }
    	  }, {
    	    key: "getSecondsLoaded",
    	    value: function getSecondsLoaded() {
    	      if (!this.isReady) return null;
    	      return this.player.getSecondsLoaded();
    	    }
    	  }, {
    	    key: "seekTo",
    	    value: function seekTo(amount, type) {
    	      var _this3 = this;

    	      // When seeking before player is ready, store value and seek later
    	      if (!this.isReady) {
    	        if (amount !== 0) {
    	          this.seekOnPlay = amount;
    	          setTimeout(function () {
    	            _this3.seekOnPlay = null;
    	          }, SEEK_ON_PLAY_EXPIRY);
    	        }

    	        return;
    	      }

    	      var isFraction = !type ? amount > 0 && amount < 1 : type === 'fraction';

    	      if (isFraction) {
    	        // Convert fraction to seconds based on duration
    	        var duration = this.player.getDuration();

    	        if (!duration) {
    	          console.warn('ReactPlayer: could not seek using fraction – duration not yet available');
    	          return;
    	        }

    	        this.player.seekTo(duration * amount);
    	        return;
    	      }

    	      this.player.seekTo(amount);
    	    }
    	  }, {
    	    key: "render",
    	    value: function render() {
    	      var Player = this.props.activePlayer;

    	      if (!Player) {
    	        return null;
    	      }

    	      return /*#__PURE__*/_react["default"].createElement(Player, _extends({}, this.props, {
    	        onMount: this.handlePlayerMount,
    	        onReady: this.handleReady,
    	        onPlay: this.handlePlay,
    	        onPause: this.handlePause,
    	        onEnded: this.handleEnded,
    	        onLoaded: this.handleLoaded,
    	        onError: this.handleError
    	      }));
    	    }
    	  }]);

    	  return Player;
    	}(_react.Component);

    	exports["default"] = Player;

    	_defineProperty(Player, "displayName", 'Player');

    	_defineProperty(Player, "propTypes", _props.propTypes);

    	_defineProperty(Player, "defaultProps", _props.defaultProps);
    } (Player));

    var Preview$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredPreview;

    function requirePreview () {
    	if (hasRequiredPreview) return Preview$1;
    	hasRequiredPreview = 1;
    	(function (exports) {

    		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    		Object.defineProperty(exports, "__esModule", {
    		  value: true
    		});
    		exports["default"] = void 0;

    		var _react = _interopRequireWildcard(React__default["default"]);

    		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    		function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    		function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    		function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    		function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    		function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    		function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    		function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    		var ICON_SIZE = '64px';
    		var cache = {};

    		var Preview = /*#__PURE__*/function (_Component) {
    		  _inherits(Preview, _Component);

    		  var _super = _createSuper(Preview);

    		  function Preview() {
    		    var _this;

    		    _classCallCheck(this, Preview);

    		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    		      args[_key] = arguments[_key];
    		    }

    		    _this = _super.call.apply(_super, [this].concat(args));

    		    _defineProperty(_assertThisInitialized(_this), "mounted", false);

    		    _defineProperty(_assertThisInitialized(_this), "state", {
    		      image: null
    		    });

    		    _defineProperty(_assertThisInitialized(_this), "handleKeyPress", function (e) {
    		      if (e.key === 'Enter' || e.key === ' ') {
    		        _this.props.onClick();
    		      }
    		    });

    		    return _this;
    		  }

    		  _createClass(Preview, [{
    		    key: "componentDidMount",
    		    value: function componentDidMount() {
    		      this.mounted = true;
    		      this.fetchImage(this.props);
    		    }
    		  }, {
    		    key: "componentDidUpdate",
    		    value: function componentDidUpdate(prevProps) {
    		      var _this$props = this.props,
    		          url = _this$props.url,
    		          light = _this$props.light;

    		      if (prevProps.url !== url || prevProps.light !== light) {
    		        this.fetchImage(this.props);
    		      }
    		    }
    		  }, {
    		    key: "componentWillUnmount",
    		    value: function componentWillUnmount() {
    		      this.mounted = false;
    		    }
    		  }, {
    		    key: "fetchImage",
    		    value: function fetchImage(_ref) {
    		      var _this2 = this;

    		      var url = _ref.url,
    		          light = _ref.light,
    		          oEmbedUrl = _ref.oEmbedUrl;

    		      if (typeof light === 'string') {
    		        this.setState({
    		          image: light
    		        });
    		        return;
    		      }

    		      if (cache[url]) {
    		        this.setState({
    		          image: cache[url]
    		        });
    		        return;
    		      }

    		      this.setState({
    		        image: null
    		      });
    		      return window.fetch(oEmbedUrl.replace('{url}', url)).then(function (response) {
    		        return response.json();
    		      }).then(function (data) {
    		        if (data.thumbnail_url && _this2.mounted) {
    		          var image = data.thumbnail_url.replace('height=100', 'height=480');

    		          _this2.setState({
    		            image: image
    		          });

    		          cache[url] = image;
    		        }
    		      });
    		    }
    		  }, {
    		    key: "render",
    		    value: function render() {
    		      var _this$props2 = this.props,
    		          onClick = _this$props2.onClick,
    		          playIcon = _this$props2.playIcon,
    		          previewTabIndex = _this$props2.previewTabIndex;
    		      var image = this.state.image;
    		      var flexCenter = {
    		        display: 'flex',
    		        alignItems: 'center',
    		        justifyContent: 'center'
    		      };
    		      var styles = {
    		        preview: _objectSpread({
    		          width: '100%',
    		          height: '100%',
    		          backgroundImage: image ? "url(".concat(image, ")") : undefined,
    		          backgroundSize: 'cover',
    		          backgroundPosition: 'center',
    		          cursor: 'pointer'
    		        }, flexCenter),
    		        shadow: _objectSpread({
    		          background: 'radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)',
    		          borderRadius: ICON_SIZE,
    		          width: ICON_SIZE,
    		          height: ICON_SIZE
    		        }, flexCenter),
    		        playIcon: {
    		          borderStyle: 'solid',
    		          borderWidth: '16px 0 16px 26px',
    		          borderColor: 'transparent transparent transparent white',
    		          marginLeft: '7px'
    		        }
    		      };

    		      var defaultPlayIcon = /*#__PURE__*/_react["default"].createElement("div", {
    		        style: styles.shadow,
    		        className: "react-player__shadow"
    		      }, /*#__PURE__*/_react["default"].createElement("div", {
    		        style: styles.playIcon,
    		        className: "react-player__play-icon"
    		      }));

    		      return /*#__PURE__*/_react["default"].createElement("div", {
    		        style: styles.preview,
    		        className: "react-player__preview",
    		        onClick: onClick,
    		        tabIndex: previewTabIndex,
    		        onKeyPress: this.handleKeyPress
    		      }, playIcon || defaultPlayIcon);
    		    }
    		  }]);

    		  return Preview;
    		}(_react.Component);

    		exports["default"] = Preview;
    } (Preview$1));
    	return Preview$1;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(ReactPlayer$1, "__esModule", {
      value: true
    });
    ReactPlayer$1.createReactPlayer = void 0;

    var _react = _interopRequireWildcard$3(React__default["default"]);

    var _deepmerge = _interopRequireDefault(cjs$1);

    var _memoizeOne = _interopRequireDefault(require$$2);

    var _reactFastCompare = _interopRequireDefault(reactFastCompare);

    var _props = props;

    var _utils = utils;

    var _Player3 = _interopRequireDefault(Player);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

    function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

    function _toConsumableArray$2(arr) { return _arrayWithoutHoles$2(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread$2(); }

    function _nonIterableSpread$2() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

    function _iterableToArray$3(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

    function _arrayWithoutHoles$2(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$4(arr); }

    function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

    function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$1(subClass, superClass); }

    function _setPrototypeOf$1(o, p) { _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$1(o, p); }

    function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf$1(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$1(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

    function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$3(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized$1(self); }

    function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf$1(o) { _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$1(o); }

    function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

    function _interopRequireWildcard$3(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof$3(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var Preview = /*#__PURE__*/(0, _react.lazy)(function () {
      return Promise.resolve().then(function () {
        return _interopRequireWildcard$3(requirePreview());
      });
    });
    var IS_BROWSER = typeof window !== 'undefined' && window.document;
    var IS_GLOBAL = typeof commonjsGlobal !== 'undefined' && commonjsGlobal.window && commonjsGlobal.window.document;
    var SUPPORTED_PROPS = Object.keys(_props.propTypes); // Return null when rendering on the server
    // as Suspense is not supported yet

    var UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function () {
      return null;
    };
    var customPlayers = [];

    var createReactPlayer = function createReactPlayer(players, fallback) {
      var _class, _temp;

      return _temp = _class = /*#__PURE__*/function (_Component) {
        _inherits$1(ReactPlayer, _Component);

        var _super = _createSuper$4(ReactPlayer);

        function ReactPlayer() {
          var _this;

          _classCallCheck$1(this, ReactPlayer);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _defineProperty$4(_assertThisInitialized$1(_this), "state", {
            showPreview: !!_this.props.light
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "references", {
            wrapper: function wrapper(_wrapper) {
              _this.wrapper = _wrapper;
            },
            player: function player(_player) {
              _this.player = _player;
            }
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "handleClickPreview", function (e) {
            _this.setState({
              showPreview: false
            });

            _this.props.onClickPreview(e);
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "showPreview", function () {
            _this.setState({
              showPreview: true
            });
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "getDuration", function () {
            if (!_this.player) return null;
            return _this.player.getDuration();
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "getCurrentTime", function () {
            if (!_this.player) return null;
            return _this.player.getCurrentTime();
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "getSecondsLoaded", function () {
            if (!_this.player) return null;
            return _this.player.getSecondsLoaded();
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "getInternalPlayer", function () {
            var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'player';
            if (!_this.player) return null;
            return _this.player.getInternalPlayer(key);
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "seekTo", function (fraction, type) {
            if (!_this.player) return null;

            _this.player.seekTo(fraction, type);
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "handleReady", function () {
            _this.props.onReady(_assertThisInitialized$1(_this));
          });

          _defineProperty$4(_assertThisInitialized$1(_this), "getActivePlayer", (0, _memoizeOne["default"])(function (url) {
            for (var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray$2(players)); _i < _arr.length; _i++) {
              var player = _arr[_i];

              if (player.canPlay(url)) {
                return player;
              }
            }

            if (fallback) {
              return fallback;
            }

            return null;
          }));

          _defineProperty$4(_assertThisInitialized$1(_this), "getConfig", (0, _memoizeOne["default"])(function (url, key) {
            var config = _this.props.config;
            return _deepmerge["default"].all([_props.defaultProps.config, _props.defaultProps.config[key] || {}, config, config[key] || {}]);
          }));

          _defineProperty$4(_assertThisInitialized$1(_this), "getAttributes", (0, _memoizeOne["default"])(function (url) {
            return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);
          }));

          _defineProperty$4(_assertThisInitialized$1(_this), "renderActivePlayer", function (url) {
            if (!url) return null;

            var player = _this.getActivePlayer(url);

            if (!player) return null;

            var config = _this.getConfig(url, player.key);

            return /*#__PURE__*/_react["default"].createElement(_Player3["default"], _extends$4({}, _this.props, {
              key: player.key,
              ref: _this.references.player,
              config: config,
              activePlayer: player.lazyPlayer || player,
              onReady: _this.handleReady
            }));
          });

          return _this;
        }

        _createClass$1(ReactPlayer, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            return !(0, _reactFastCompare["default"])(this.props, nextProps) || !(0, _reactFastCompare["default"])(this.state, nextState);
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var light = this.props.light;

            if (!prevProps.light && light) {
              this.setState({
                showPreview: true
              });
            }

            if (prevProps.light && !light) {
              this.setState({
                showPreview: false
              });
            }
          }
        }, {
          key: "renderPreview",
          value: function renderPreview(url) {
            if (!url) return null;
            var _this$props = this.props,
                light = _this$props.light,
                playIcon = _this$props.playIcon,
                previewTabIndex = _this$props.previewTabIndex,
                oEmbedUrl = _this$props.oEmbedUrl;
            return /*#__PURE__*/_react["default"].createElement(Preview, {
              url: url,
              light: light,
              playIcon: playIcon,
              previewTabIndex: previewTabIndex,
              oEmbedUrl: oEmbedUrl,
              onClick: this.handleClickPreview
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props2 = this.props,
                url = _this$props2.url,
                style = _this$props2.style,
                width = _this$props2.width,
                height = _this$props2.height,
                fallback = _this$props2.fallback,
                Wrapper = _this$props2.wrapper;
            var showPreview = this.state.showPreview;
            var attributes = this.getAttributes(url);
            return /*#__PURE__*/_react["default"].createElement(Wrapper, _extends$4({
              ref: this.references.wrapper,
              style: _objectSpread$7(_objectSpread$7({}, style), {}, {
                width: width,
                height: height
              })
            }, attributes), /*#__PURE__*/_react["default"].createElement(UniversalSuspense, {
              fallback: fallback
            }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));
          }
        }]);

        return ReactPlayer;
      }(_react.Component), _defineProperty$4(_class, "displayName", 'ReactPlayer'), _defineProperty$4(_class, "propTypes", _props.propTypes), _defineProperty$4(_class, "defaultProps", _props.defaultProps), _defineProperty$4(_class, "addCustomPlayer", function (player) {
        customPlayers.push(player);
      }), _defineProperty$4(_class, "removeCustomPlayers", function () {
        customPlayers.length = 0;
      }), _defineProperty$4(_class, "canPlay", function (url) {
        for (var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray$2(players)); _i2 < _arr2.length; _i2++) {
          var _Player = _arr2[_i2];

          if (_Player.canPlay(url)) {
            return true;
          }
        }

        return false;
      }), _defineProperty$4(_class, "canEnablePIP", function (url) {
        for (var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray$2(players)); _i3 < _arr3.length; _i3++) {
          var _Player2 = _arr3[_i3];

          if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {
            return true;
          }
        }

        return false;
      }), _temp;
    };

    ReactPlayer$1.createReactPlayer = createReactPlayer;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (exports) {

    	Object.defineProperty(exports, "__esModule", {
    	  value: true
    	});
    	exports["default"] = void 0;

    	var _players = _interopRequireDefault(players);

    	var _ReactPlayer = ReactPlayer$1;

    	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

    	// Fall back to FilePlayer if nothing else can play the URL
    	var fallback = _players["default"][_players["default"].length - 1];

    	var _default = (0, _ReactPlayer.createReactPlayer)(_players["default"], fallback);

    	exports["default"] = _default;
    } (lib$1));

    var ReactPlayer = /*@__PURE__*/getDefaultExportFromCjs(lib$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function r$1(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r$1(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r$1(e))&&(n&&(n+=" "),n+=t);return n}

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelActionContext = React__default["default"].createContext(undefined);
    var ChannelActionProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(ChannelActionContext.Provider, { value: value }, children));
    };
    var useChannelActionContext = function (componentName) {
        var contextValue = React$2.useContext(ChannelActionContext);
        if (!contextValue) {
            console.warn("The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ChannelActionContext
     * typing is desired while using the HOC withChannelActionContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChannelActionContext = function (Component) {
        var WithChannelActionContextComponent = function (props) {
            var channelActionContext = useChannelActionContext();
            return React__default["default"].createElement(Component, __assign({}, props, channelActionContext));
        };
        WithChannelActionContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithChannelActionContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelListContext = React$2.createContext(undefined);
    /**
     * Context provider for components rendered within the `ChannelList`
     */
    var ChannelListContextProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(ChannelListContext.Provider, { value: value }, children));
    };
    var useChannelListContext = function (componentName) {
        var contextValue = React$2.useContext(ChannelListContext);
        if (!contextValue) {
            console.warn("The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelStateContext = React__default["default"].createContext(undefined);
    var ChannelStateProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(ChannelStateContext.Provider, { value: value }, children));
    };
    var useChannelStateContext = function (componentName) {
        var contextValue = React$2.useContext(ChannelStateContext);
        if (!contextValue) {
            console.warn("The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ChannelStateContext
     * typing is desired while using the HOC withChannelStateContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChannelStateContext = function (Component) {
        var WithChannelStateContextComponent = function (props) {
            var channelStateContext = useChannelStateContext();
            return React__default["default"].createElement(Component, __assign({}, props, channelStateContext));
        };
        WithChannelStateContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithChannelStateContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getDisplayName = function (Component) {
        return Component.displayName || Component.name || 'Component';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChatContext = React__default["default"].createContext(undefined);
    var ChatProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(ChatContext.Provider, { value: value }, children));
    };
    var useChatContext = function (componentName) {
        var contextValue = React$2.useContext(ChatContext);
        if (!contextValue) {
            console.warn("The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference so if ChatContext
     * typing is desired while using the HOC withChatContext the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withChatContext = function (Component) {
        var WithChatContextComponent = function (props) {
            var chatContext = useChatContext();
            return React__default["default"].createElement(Component, __assign({}, props, chatContext));
        };
        WithChatContextComponent.displayName = "WithChatContext".concat(getDisplayName(Component));
        return WithChatContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ComponentContext = React__default["default"].createContext(undefined);
    var ComponentProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(ComponentContext.Provider, { value: value }, children));
    };
    var useComponentContext = function (componentName) {
        var contextValue = React$2.useContext(ComponentContext);
        if (!contextValue) {
            console.warn("The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if ComponentContext
     * typing is desired while using the HOC withComponentContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withComponentContext = function (Component) {
        var WithComponentContextComponent = function (props) {
            var componentContext = useComponentContext();
            return React__default["default"].createElement(Component, __assign({}, props, componentContext));
        };
        WithComponentContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithComponentContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageContext = React__default["default"].createContext(undefined);
    var MessageProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(MessageContext.Provider, { value: value }, children));
    };
    var useMessageContext = function (componentName) {
        var contextValue = React$2.useContext(MessageContext);
        if (!contextValue) {
            console.warn("The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if MessageContext
     * typing is desired while using the HOC withMessageContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withMessageContext = function (Component) {
        var WithMessageContextComponent = function (props) {
            var messageContext = useMessageContext();
            return React__default["default"].createElement(Component, __assign({}, props, messageContext));
        };
        WithMessageContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithMessageContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageBounceContext = React$2.createContext(undefined);
    function useMessageBounceContext(componentName) {
        var contextValue = React$2.useContext(MessageBounceContext);
        if (!contextValue) {
            console.warn("The useMessageBounceContext hook was called outside of the MessageBounceContext provider. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    }
    function MessageBounceProvider(_a) {
        var children = _a.children;
        var _b = useMessageContext('MessageBounceProvider'), doHandleRetry = _b.handleRetry, message = _b.message, setEditingState = _b.setEditingState;
        if (!isMessageBounced(message)) {
            console.warn("The MessageBounceProvider was rendered for a message that is not bounced. Have you missed the \"isMessageBounced\" check?");
        }
        var removeMessage = useChannelActionContext('MessageBounceProvider').removeMessage;
        var handleDelete = React$2.useCallback(function () {
            removeMessage(message);
        }, [message, removeMessage]);
        var handleEdit = React$2.useCallback(function (e) {
            setEditingState(e);
        }, [setEditingState]);
        var handleRetry = React$2.useCallback(function () {
            doHandleRetry(message);
        }, [doHandleRetry, message]);
        var value = React$2.useMemo(function () { return ({
            handleDelete: handleDelete,
            handleEdit: handleEdit,
            handleRetry: handleRetry,
            message: message,
        }); }, [handleDelete, handleEdit, handleRetry, message]);
        return React__default["default"].createElement(MessageBounceContext.Provider, { value: value }, children);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputContext = React$2.createContext(undefined);
    var MessageInputContextProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(MessageInputContext.Provider, { value: value }, children));
    };
    var useMessageInputContext = function (componentName) {
        var contextValue = React$2.useContext(MessageInputContext);
        if (!contextValue) {
            console.warn("The useMessageInputContext hook was called outside of the MessageInputContext provider. Make sure this hook is called within the MessageInput's UI component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageListContext = React$2.createContext(undefined);
    /**
     * Context provider for components rendered within the `MessageList`
     */
    var MessageListContextProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(MessageListContext.Provider, { value: value }, children));
    };
    var useMessageListContext = function (componentName) {
        var contextValue = React$2.useContext(MessageListContext);
        if (!contextValue) {
            console.warn("The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };

    var dayjs_min = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasRequiredDayjs_min;

    function requireDayjs_min () {
    	if (hasRequiredDayjs_min) return dayjs_min.exports;
    	hasRequiredDayjs_min = 1;
    	(function (module, exports) {
    		!function(t,e){module.exports=e();}(commonjsGlobal,function(){var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",a="quarter",o="year",f="date",h=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,c=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,d={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},$=function(t,e,n){var r=String(t);return !r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},l={s:$,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return (e<=0?"+":"-")+$(r,2,"0")+":"+$(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return -t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,u),s=n-i<0,a=e.clone().add(r+(s?-1:1),u);return +(-(r+(n-i)/(s?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return {M:u,y:o,w:s,d:i,D:f,h:r,m:n,s:e,ms:t,Q:a}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",M={};M[y]=d;var m=function(t){return t instanceof S},D=function(t,e,n){var r;if(!t)return y;if("string"==typeof t)M[t]&&(r=t),e&&(M[t]=e,r=t);else {var i=t.name;M[i]=t,r=i;}return !n&&r&&(y=r),r||!n&&y},v=function(t,e){if(m(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new S(n)},g=l;g.l=D,g.i=m,g.w=function(t,e){return v(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var S=function(){function d(t){this.$L=D(t.locale,null,!0),this.parse(t);}var $=d.prototype;return $.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(g.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init();},$.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds();},$.$utils=function(){return g},$.isValid=function(){return !("Invalid Date"===this.$d.toString())},$.isSame=function(t,e){var n=v(t);return this.startOf(e)<=n&&n<=this.endOf(e)},$.isAfter=function(t,e){return v(t)<this.startOf(e)},$.isBefore=function(t,e){return this.endOf(e)<v(t)},$.$g=function(t,e,n){return g.u(t)?this[e]:this.set(n,t)},$.unix=function(){return Math.floor(this.valueOf()/1e3)},$.valueOf=function(){return this.$d.getTime()},$.startOf=function(t,a){var h=this,c=!!g.u(a)||a,d=g.p(t),$=function(t,e){var n=g.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return c?n:n.endOf(i)},l=function(t,e){return g.w(h.toDate()[t].apply(h.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},y=this.$W,M=this.$M,m=this.$D,D="set"+(this.$u?"UTC":"");switch(d){case o:return c?$(1,0):$(31,11);case u:return c?$(1,M):$(0,M+1);case s:var v=this.$locale().weekStart||0,S=(y<v?y+7:y)-v;return $(c?m-S:m+(6-S),M);case i:case f:return l(D+"Hours",0);case r:return l(D+"Minutes",1);case n:return l(D+"Seconds",2);case e:return l(D+"Milliseconds",3);default:return this.clone()}},$.endOf=function(t){return this.startOf(t,!1)},$.$set=function(s,a){var h,c=g.p(s),d="set"+(this.$u?"UTC":""),$=(h={},h[i]=d+"Date",h[f]=d+"Date",h[u]=d+"Month",h[o]=d+"FullYear",h[r]=d+"Hours",h[n]=d+"Minutes",h[e]=d+"Seconds",h[t]=d+"Milliseconds",h)[c],l=c===i?this.$D+(a-this.$W):a;if(c===u||c===o){var y=this.clone().set(f,1);y.$d[$](l),y.init(),this.$d=y.set(f,Math.min(this.$D,y.daysInMonth())).$d;}else $&&this.$d[$](l);return this.init(),this},$.set=function(t,e){return this.clone().$set(t,e)},$.get=function(t){return this[g.p(t)]()},$.add=function(t,a){var f,h=this;t=Number(t);var c=g.p(a),d=function(e){var n=v(h);return g.w(n.date(n.date()+Math.round(e*t)),h)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(f={},f[n]=6e4,f[r]=36e5,f[e]=1e3,f)[c]||1,l=this.$d.getTime()+t*$;return g.w(l,this)},$.subtract=function(t,e){return this.add(-1*t,e)},$.format=function(t){var e=this;if(!this.isValid())return "Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=g.z(this),i=this.$locale(),s=this.$H,u=this.$m,a=this.$M,o=i.weekdays,f=i.months,h=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return g.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:g.s(a+1,2,"0"),MMM:h(i.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:g.s(this.$D,2,"0"),d:String(this.$W),dd:h(i.weekdaysMin,this.$W,o,2),ddd:h(i.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:g.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:g.s(u,2,"0"),s:String(this.$s),ss:g.s(this.$s,2,"0"),SSS:g.s(this.$ms,3,"0"),Z:r};return n.replace(c,function(t,e){return e||l[t]||r.replace(":","")})},$.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},$.diff=function(t,f,h){var c,d=g.p(f),$=v(t),l=6e4*($.utcOffset()-this.utcOffset()),y=this-$,M=g.m(this,$);return M=(c={},c[o]=M/12,c[u]=M,c[a]=M/3,c[s]=(y-l)/6048e5,c[i]=(y-l)/864e5,c[r]=y/36e5,c[n]=y/6e4,c[e]=y/1e3,c)[d]||y,h?M:g.a(M)},$.daysInMonth=function(){return this.endOf(u).$D},$.$locale=function(){return M[this.$L]},$.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=D(t,e,!0);return r&&(n.$L=r),n},$.clone=function(){return g.w(this.$d,this)},$.toDate=function(){return new Date(this.valueOf())},$.toJSON=function(){return this.isValid()?this.toISOString():null},$.toISOString=function(){return this.$d.toISOString()},$.toString=function(){return this.$d.toUTCString()},d}(),p=S.prototype;return v.prototype=p,[["$ms",t],["$s",e],["$m",n],["$H",r],["$W",i],["$M",u],["$y",o],["$D",f]].forEach(function(t){p[t[1]]=function(e){return this.$g(e,t[0],t[1])};}),v.extend=function(t,e){return t.$i||(t(e,S,v),t.$i=!0),v},v.locale=D,v.isDayjs=m,v.unix=function(t){return v(1e3*t)},v.en=M[y],v.Ls=M,v.p={},v});
    } (dayjs_min));
    	return dayjs_min.exports;
    }

    var dayjs_minExports = requireDayjs_min();

    var calendar$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,a){var n="h:mm A",d={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};t.prototype.calendar=function(e,t){var n=t||this.$locale().calendar||d,s=a(e||void 0).startOf("d"),o=this.diff(s,"d",!0),i=o<-6?"sameElse":o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":"sameElse",f=n[i]||d[i];return "function"==typeof f?f.call(this,a()):this.format(f)};}});
    } (calendar$1));

    var calendar = calendar$1.exports;

    var localizedFormat$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,t){module.exports=t();}(commonjsGlobal,function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,n,o){var r=n.prototype,M=r.format;o.en.formats=e,r.format=function(t){void 0===t&&(t="YYYY-MM-DDTHH:mm:ssZ");var n=this.$locale().formats,o=function(t,n){return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(t,o,r){var M=r&&r.toUpperCase();return o||n[r]||e[r]||n[M].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(e,t,n){return t||n.slice(1)})})}(t,void 0===n?{}:n);return M.call(this,o)};}});
    } (localizedFormat$1));

    var localizedFormat = localizedFormat$1.exports;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$b="Stornieren";var Close$b="Schließen";var Delete$b="Löschen";var Delivered$b="Zugestellt";var Flag$b="Meldung";var Menu$b="Menü";var Mute$b="Stumm schalten";var New$b="Neu";var Pin$b="Pin";var Reply$b="Antworten";var Search$b="Suche";var Send$b="Senden";var Shuffle$b="Mischen";var Thread$c="Thread";var Unmute$b="Stummschaltung aufheben";var Unpin$b="Pin entfernen";var live$b="live";var replyCount_one$b="1 Antwort";var replyCount_other$b="{{ count }} Antworten";var searchResultsCount_one$b="1 Ergebnis";var searchResultsCount_other$b="{{ count }} Ergebnisse";var unreadMessagesSeparatorText_one$9="1 ungelesene Nachricht";var unreadMessagesSeparatorText_other$b="{{count}} ungelesene Nachrichten";var deTranslations = {"Attach files":"Dateien anhängen",Cancel:Cancel$b,"Channel Missing":"Kanal fehlt",Close:Close$b,"Close emoji picker":"Emoji-Picker schließen","Commands matching":"Übereinstimmende Befehle","Connection failure, reconnecting now...":"Verbindungsfehler, Wiederherstellung der Verbindung...",Delete:Delete$b,Delivered:Delivered$b,"Drag your files here":"Ziehen Sie Ihre Dateien hierher","Drag your files here to add to your post":"Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzufügen","Edit Message":"Nachricht bearbeiten","Edit message request failed":"Anfrage zum Bearbeiten der Nachricht fehlgeschlagen","Emoji matching":"Emoji passend","Empty message...":"Leere Nachricht...","Error adding flag":"Fehler beim Hinzufügen des Flags","Error connecting to chat, refresh the page to try again.":"Verbindungsfehler zum Chat, Aktualisiere die Seite um es erneut zu versuchen.","Error deleting message":"Fehler beim Löschen der Nachricht","Error fetching reactions":"Fehler beim Laden von Reaktionen","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Fehler beim Markieren der Nachricht als ungelesen. Kann keine älteren ungelesenen Nachrichten markieren als die neuesten 100 Kanalnachrichten.","Error muting a user ...":"Fehler beim Stummschalten eines Nutzers.","Error pinning message":"Fehler beim Pinnen der Nachricht","Error removing message pin":"Fehler beim Entfernen der gepinnten Nachricht","Error unmuting a user ...":"Stummschaltung des Nutzers fehlgeschlagen ...","Error uploading file":"Fehler beim Hochladen der Datei","Error uploading image":"Hochladen des Bildes fehlgeschlagen","Error · Unsent":"Fehler nicht gesendet","Error: {{ errorMessage }}":"Fehler: {{ errorMessage }}","Failed to jump to the first unread message":"Fehler beim Springen zur ersten ungelesenen Nachricht","Failed to mark channel as read":"Fehler beim Markieren des Kanals als gelesen",Flag:Flag$b,"Latest Messages":"Neueste Nachrichten","Load more":"Mehr laden","Mark as unread":"Als ungelesen markieren",Menu:Menu$b,"Message Failed · Click to try again":"Nachricht fehlgeschlagen · Klicken, um es erneut zu versuchen","Message Failed · Unauthorized":"Nachricht fehlgeschlagen · Nicht autorisiert","Message deleted":"Nachricht gelöscht","Message has been successfully flagged":"Nachricht wurde erfolgreich gemeldet","Message pinned":"Nachricht gepinnt","Messages have been marked unread.":"Nachrichten wurden als ungelesen markiert.",Mute:Mute$b,New:New$b,"New Messages!":"Neue Nachrichten!","No chats here yet…":"Noch keine Chats hier...","No results found":"keine Ergebnisse gefunden","Nothing yet...":"Noch nichts...","Open emoji picker":"Emoji-Picker öffnen","People matching":"Passende Personen",Pin:Pin$b,"Pinned by":"Gepinnt von",Reply:Reply$b,"Reply to Message":"Auf Nachricht antworten",Search:Search$b,"Searching...":"Suchen...",Send:Send$b,"Send Anyway":"Trotzdem senden","Send message request failed":"Senden der Nachrichtenanfrage fehlgeschlagen","Sending...":"Senden...",Shuffle:Shuffle$b,"Slow Mode ON":"Slow-Mode EIN","Some of the files will not be accepted":"Einige der Dateien werden nicht akzeptiert","This message did not meet our content guidelines":"Diese Nachricht entsprach nicht unseren Inhaltsrichtlinien","This message was deleted...":"Diese Nachricht wurde gelöscht...",Thread:Thread$c,"Type your message":"Nachricht eingeben",Unmute:Unmute$b,Unpin:Unpin$b,"Unread messages":"Ungelesene Nachrichten","Upload type: \"{{ type }}\" is not allowed":"Upload-Typ: \"{{ type }}\" ist nicht erlaubt","User uploaded content":"Benutzer hochgeladenen Inhalts","Wait until all attachments have uploaded":"Bitte warten, bis alle Anhänge hochgeladen wurden","You have no channels currently":"Du hast momentan noch keinen Channels","You've reached the maximum number of files":"Die maximale Dateianzahl ist erreicht","aria/Attachment":"Anhang","aria/Cancel Reply":"Antwort abbrechen","aria/Cancel upload":"Upload abbrechen","aria/Channel list":"Kanalliste","aria/Channel search results":"Kanalsuchergebnisse","aria/Close thread":"Thread schließen","aria/Emoji picker":"Emoji-Auswahl","aria/File input":"Dateieingabe","aria/File upload":"Datei hochladen","aria/Image input":"Bildeingabe","aria/Load More Channels":"Mehr Kanäle laden","aria/Menu":"Menü","aria/Message Options":"Nachrichtenoptionen","aria/Open Message Actions Menu":"Nachrichtenaktionsmenü öffnen","aria/Open Reaction Selector":"Reaktionsauswahl öffnen","aria/Open Thread":"Thread öffnen","aria/Reaction list":"Reaktionsliste","aria/Retry upload":"Upload erneut versuchen","aria/Send":"Senden","ban-command-args":"[@Benutzername] [Text]","ban-command-description":"Einen Benutzer verbannen","giphy-command-args":"[Text]","giphy-command-description":"Poste ein zufälliges Gif in den Kanal",live:live$b,"mute-command-args":"[@Benutzername]","mute-command-description":"Stummschalten eines Benutzers",replyCount_one:replyCount_one$b,replyCount_other:replyCount_other$b,searchResultsCount_one:searchResultsCount_one$b,searchResultsCount_other:searchResultsCount_other$b,"this content could not be displayed":"Dieser Inhalt konnte nicht angezeigt werden","unban-command-args":"[@Benutzername]","unban-command-description":"Einen Benutzer entbannen","unmute-command-args":"[@Benutzername]","unmute-command-description":"Stummschaltung eines Benutzers aufheben",unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$9,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$b,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} und {{moreCount}} Mehr","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} und {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} und {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} mehr","{{ memberCount }} members":"{{ memberCount }} Mitglieder","{{ user }} has been muted":"{{ user }} wurde stummgeschaltet","{{ user }} has been unmuted":"{{ user }} wurde nicht stummgeschaltet","{{ user }} is typing...":"{{ user }} tippt...","{{ users }} and more are typing...":"{{ users }} und mehr tippen...","{{ users }} and {{ user }} are typing...":"{{ users }} und {{ user }} tippen...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_one":"{{count}} ungelesen","{{count}} unread_other":"{{count}} ungelesen","🏙 Attachment...":"🏙 Anhang..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$a="Cancel";var Close$a="Close";var Delete$a="Delete";var Delivered$a="Delivered";var Flag$a="Flag";var Menu$a="Menu";var Mute$a="Mute";var New$a="New";var Pin$a="Pin";var Reply$a="Reply";var Search$a="Search";var Send$a="Send";var Shuffle$a="Shuffle";var Thread$b="Thread";var Unmute$a="Unmute";var Unpin$a="Unpin";var live$a="live";var replyCount_one$a="1 reply";var replyCount_other$a="{{ count }} replies";var searchResultsCount_one$a="1 result";var searchResultsCount_other$a="{{ count }} results";var unreadMessagesSeparatorText_one$8="1 unread message";var unreadMessagesSeparatorText_other$a="{{count}} unread messages";var enTranslations = {"Attach files":"Attach files",Cancel:Cancel$a,"Channel Missing":"Channel Missing",Close:Close$a,"Close emoji picker":"Close emoji picker","Commands matching":"Commands matching","Connection failure, reconnecting now...":"Connection failure, reconnecting now...",Delete:Delete$a,Delivered:Delivered$a,"Drag your files here":"Drag your files here","Drag your files here to add to your post":"Drag your files here to add to your post","Edit Message":"Edit Message","Edit message request failed":"Edit message request failed","Emoji matching":"Emoji matching","Empty message...":"Empty message...","Error adding flag":"Error adding flag","Error connecting to chat, refresh the page to try again.":"Error connecting to chat, refresh the page to try again.","Error deleting message":"Error deleting message","Error fetching reactions":"Error loading reactions","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.","Error muting a user ...":"Error muting a user ...","Error pinning message":"Error pinning message","Error removing message pin":"Error removing message pin","Error unmuting a user ...":"Error unmuting a user ...","Error uploading file":"Error uploading file","Error uploading image":"Error uploading image","Error · Unsent":"Error · Unsent","Error: {{ errorMessage }}":"Error: {{ errorMessage }}","Failed to jump to the first unread message":"Failed to jump to the first unread message","Failed to mark channel as read":"Failed to mark channel as read",Flag:Flag$a,"Latest Messages":"Latest Messages","Load more":"Load more","Mark as unread":"Mark as unread",Menu:Menu$a,"Message Failed · Click to try again":"Message Failed · Click to try again","Message Failed · Unauthorized":"Message Failed · Unauthorized","Message deleted":"Message deleted","Message has been successfully flagged":"Message has been successfully flagged","Message pinned":"Message pinned","Messages have been marked unread.":"Messages have been marked unread.",Mute:Mute$a,New:New$a,"New Messages!":"New Messages!","No chats here yet…":"No chats here yet…","No results found":"No results found","Nothing yet...":"Nothing yet...","Open emoji picker":"Open emoji picker","People matching":"People matching",Pin:Pin$a,"Pinned by":"Pinned by",Reply:Reply$a,"Reply to Message":"Reply to Message",Search:Search$a,"Searching...":"Searching...",Send:Send$a,"Send Anyway":"Send Anyway","Send message request failed":"Send message request failed","Sending...":"Sending...",Shuffle:Shuffle$a,"Slow Mode ON":"Slow Mode ON","Some of the files will not be accepted":"Some of the files will not be accepted","This message did not meet our content guidelines":"This message did not meet our content guidelines","This message was deleted...":"This message was deleted...",Thread:Thread$b,"Type your message":"Type your message",Unmute:Unmute$a,Unpin:Unpin$a,"Unread messages":"Unread messages","Upload type: \"{{ type }}\" is not allowed":"Upload type: \"{{ type }}\" is not allowed","User uploaded content":"User uploaded content","Wait until all attachments have uploaded":"Wait until all attachments have uploaded","You have no channels currently":"You have no channels currently","You've reached the maximum number of files":"You've reached the maximum number of files","aria/Attachment":"Attachment","aria/Cancel Reply":"Cancel Reply","aria/Cancel upload":"Cancel upload","aria/Channel list":"Channel list","aria/Channel search results":"Channel search results","aria/Close thread":"Close thread","aria/Emoji picker":"Emoji picker","aria/File input":"File input","aria/File upload":"File upload","aria/Image input":"Image input","aria/Load More Channels":"Load More Channels","aria/Menu":"Menu","aria/Message Options":"Message Options","aria/Open Message Actions Menu":"Open Message Actions Menu","aria/Open Reaction Selector":"Open Reaction Selector","aria/Open Thread":"Open Thread","aria/Reaction list":"Reaction list","aria/Retry upload":"Retry upload","aria/Send":"Send",live:live$a,replyCount_one:replyCount_one$a,replyCount_other:replyCount_other$a,searchResultsCount_one:searchResultsCount_one$a,searchResultsCount_other:searchResultsCount_other$a,"this content could not be displayed":"this content could not be displayed",unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$8,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$a,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} and {{ moreCount }} more","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }}, and {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} and {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} more","{{ memberCount }} members":"{{ memberCount }} members","{{ user }} has been muted":"{{ user }} has been muted","{{ user }} has been unmuted":"{{ user }} has been unmuted","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_one":"{{count}} unread","{{count}} unread_other":"{{count}} unread","🏙 Attachment...":"🏙 Attachment..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$9="Cancelar";var Close$9="Cerca";var Delete$9="Borrar";var Delivered$9="Entregado";var Flag$9="Bandera";var Menu$9="Menú";var Mute$9="Mudo";var New$9="Nuevo";var Pin$9="Alfiler";var Reply$9="Respuesta";var Search$9="Buscar";var Send$9="Enviar";var Shuffle$9="Mezclar";var Thread$a="Hilo";var Unmute$9="Activar sonido";var Unpin$9="Desprender";var live$9="En Vivo";var replyCount_many$4="{{ count }} respuestas";var replyCount_one$9="1 respuesta";var replyCount_other$9="{{ count }} respuestas";var searchResultsCount_many$4="{{ count }} resultados";var searchResultsCount_one$9="1 resultado";var searchResultsCount_other$9="{{ count }} resultados";var unreadMessagesSeparatorText_many$4="{{count}} mensajes no leídos";var unreadMessagesSeparatorText_one$7="1 mensaje no leído";var unreadMessagesSeparatorText_other$9="{{count}} mensajes no leídos";var esTranslations = {"Attach files":"Adjuntar archivos",Cancel:Cancel$9,"Channel Missing":"Falta canal",Close:Close$9,"Close emoji picker":"Cerrar el selector de emojis","Commands matching":"Coincidencia de comandos","Connection failure, reconnecting now...":"Fallo de conexión, reconectando ahora ...",Delete:Delete$9,Delivered:Delivered$9,"Drag your files here":"Arrastra tus archivos aquí","Drag your files here to add to your post":"Arrastra tus archivos aquí para agregarlos a tu publicación","Edit Message":"Editar mensaje","Edit message request failed":"Error al editar la solicitud de mensaje","Emoji matching":"Coincidencia de emoji","Empty message...":"Mensaje vacío ...","Error adding flag":"Error al agregar la bandera","Error connecting to chat, refresh the page to try again.":"Error al conectarse al chat, actualice la página para volver a intentarlo.","Error deleting message":"Error al eliminar el mensaje","Error fetching reactions":"Error al cargar las reacciones","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Error al marcar el mensaje como no leído. No se pueden marcar mensajes no leídos más antiguos que los últimos 100 mensajes del canal.","Error muting a user ...":"Error al silenciar a un usuario ...","Error pinning message":"Mensaje de error al fijar","Error removing message pin":"Error al quitar el pin del mensaje","Error unmuting a user ...":"Error al activar el silencio de un usuario ...","Error uploading file":"Error al cargar el archivo","Error uploading image":"Error subiendo imagen","Error · Unsent":"Error · No enviado","Error: {{ errorMessage }}":"Error: {{ errorMessage }}","Failed to jump to the first unread message":"Error al saltar al primer mensaje no leído","Failed to mark channel as read":"Error al marcar el canal como leído",Flag:Flag$9,"Latest Messages":"Últimos mensajes","Load more":"Cargar más","Mark as unread":"Marcar como no leído",Menu:Menu$9,"Message Failed · Click to try again":"Mensaje fallido · Haga clic para volver a intentarlo","Message Failed · Unauthorized":"Mensaje fallido · No autorizado","Message deleted":"Mensaje borrado","Message has been successfully flagged":"El mensaje se marcó correctamente","Message pinned":"Mensaje fijado","Messages have been marked unread.":"Los mensajes han sido marcados como no leídos.",Mute:Mute$9,New:New$9,"New Messages!":"¡Nuevos mensajes!","No chats here yet…":"Aún no hay mensajes aquí...","No results found":"No se han encontrado resultados","Nothing yet...":"Nada aún...","Open emoji picker":"Selector de emoji abierto","People matching":"Personas que coinciden",Pin:Pin$9,"Pinned by":"Fijado por",Reply:Reply$9,"Reply to Message":"Responder al mensaje",Search:Search$9,"Searching...":"Buscando...",Send:Send$9,"Send Anyway":"Enviar de todos modos","Send message request failed":"Error al enviar la solicitud de mensaje","Sending...":"Enviando...",Shuffle:Shuffle$9,"Slow Mode ON":"Modo lento activado","Some of the files will not be accepted":"Algunos de los archivos no serán aceptados","This message did not meet our content guidelines":"Este mensaje no cumple nuestras directrices de contenido","This message was deleted...":"Este mensaje fue eliminado ...",Thread:Thread$a,"Type your message":"Escribe tu mensaje",Unmute:Unmute$9,Unpin:Unpin$9,"Unread messages":"Mensajes no leídos","Upload type: \"{{ type }}\" is not allowed":"Tipo de carga: \"{{ type }}\" no está permitido","User uploaded content":"Contenido subido por el usuario","Wait until all attachments have uploaded":"Espere hasta que se hayan cargado todos los archivos adjuntos","You have no channels currently":"Actualmente no tienes canales","You've reached the maximum number of files":"Has alcanzado el número máximo de archivos","aria/Attachment":"Adjunto","aria/Cancel Reply":"Cancelar respuesta","aria/Cancel upload":"Cancelar carga","aria/Channel list":"Lista de canales","aria/Channel search results":"Resultados de búsqueda de canales","aria/Close thread":"Cerrar hilo","aria/Emoji picker":"Selector de emojis","aria/File input":"Entrada de archivo","aria/File upload":"Carga de archivo","aria/Image input":"Entrada de imagen","aria/Load More Channels":"Cargar más canales","aria/Menu":"Menú","aria/Message Options":"Opciones de mensaje","aria/Open Message Actions Menu":"Abrir menú de acciones de mensaje","aria/Open Reaction Selector":"Abrir selector de reacción","aria/Open Thread":"Abrir hilo","aria/Reaction list":"Lista de reacciones","aria/Retry upload":"Reintentar carga","aria/Send":"Enviar","ban-command-args":"[@usuario] [texto]","ban-command-description":"Prohibir a un usuario","giphy-command-args":"[texto]","giphy-command-description":"Publicar un gif aleatorio en el canal",live:live$9,"mute-command-args":"[@usuario]","mute-command-description":"Silenciar a un usuario",replyCount_many:replyCount_many$4,replyCount_one:replyCount_one$9,replyCount_other:replyCount_other$9,searchResultsCount_many:searchResultsCount_many$4,searchResultsCount_one:searchResultsCount_one$9,searchResultsCount_other:searchResultsCount_other$9,"this content could not be displayed":"este contenido no se pudo mostrar","unban-command-args":"[@usuario]","unban-command-description":"Quitar la prohibición a un usuario","unmute-command-args":"[@usuario]","unmute-command-description":"Anular el silencio de un usuario",unreadMessagesSeparatorText_many:unreadMessagesSeparatorText_many$4,unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$7,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$9,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} y {{ moreCount }} más","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} y {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} y {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} más","{{ memberCount }} members":"{{ memberCount }} miembros","{{ user }} has been muted":"{{ user }} ha sido silenciado","{{ user }} has been unmuted":"{{ user }} se ha desactivado","{{ user }} is typing...":"{{ user }} está escribiendo...","{{ users }} and more are typing...":"{{ users }} y más están escribiendo...","{{ users }} and {{ user }} are typing...":"{{ users }} y {{ user }} están escribiendo...","{{ watcherCount }} online":"{{ watcherCount }} en línea","{{count}} unread_many":"{{count}} no leídos","{{count}} unread_one":"{{count}} no leído","{{count}} unread_other":"{{count}} no leídos","🏙 Attachment...":"🏙 Adjunto..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$8="Annuler";var Close$8="Fermer";var Delete$8="Supprimer";var Delivered$8="Publié";var Flag$8="Signaler";var Menu$8="Menu";var Mute$8="Muet";var New$8="Nouveaux";var Pin$8="Épingle";var Reply$8="Réponse";var Search$8="Rechercher";var Send$8="Envoyer";var Shuffle$8="Mélanger";var Thread$9="Fil de discussion";var Unmute$8="Désactiver muet";var Unpin$8="Détacher";var live$8="en direct";var replyCount_many$3="{{ count }} réponses";var replyCount_one$8="1 réponse";var replyCount_other$8="{{ count }} réponses";var searchResultsCount_many$3="{{ count }} résultats";var searchResultsCount_one$8="1 résultat";var searchResultsCount_other$8="{{ count }} résultats";var unreadMessagesSeparatorText_many$3="{{count}} messages non lus";var unreadMessagesSeparatorText_one$6="1 message non lu";var unreadMessagesSeparatorText_other$8="{{count}} messages non lus";var frTranslations = {"Attach files":"Pièces jointes",Cancel:Cancel$8,"Channel Missing":"Canal Manquant",Close:Close$8,"Close emoji picker":"Fermer le sélecteur d'emojis","Commands matching":"Correspondance des commandes","Connection failure, reconnecting now...":"Échec de la connexion, reconnexion en cours...",Delete:Delete$8,Delivered:Delivered$8,"Drag your files here":"Glissez vos fichiers ici","Drag your files here to add to your post":"Glissez vos fichiers ici pour les ajouter à votre publication","Edit Message":"Éditer un message","Edit message request failed":"Échec de la demande de modification du message","Emoji matching":"Correspondance emoji","Empty message...":"Message vide...","Error adding flag":"Erreur lors de l'ajout du drapeau","Error connecting to chat, refresh the page to try again.":"Erreur de connexion au chat, rafraîchissez la page pour réessayer.","Error deleting message":"Erreur lors de la suppression du message","Error fetching reactions":"Erreur de chargement des réactions","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Erreur lors de la marque du message comme non lu. Impossible de marquer des messages non lus plus anciens que les 100 derniers messages du canal.","Error muting a user ...":"Erreur de mise en sourdine d'un utilisateur ...","Error pinning message":"Erreur d'épinglage du message","Error removing message pin":"Erreur lors de la suppression du code PIN du message","Error unmuting a user ...":"Erreur de désactivation de la fonction sourdine pour un utilisateur ...","Error uploading file":"Erreur lors du téléchargement du fichier","Error uploading image":"Erreur lors de l'envoi de l'image","Error · Unsent":"Erreur - Non envoyé","Error: {{ errorMessage }}":"Erreur : {{ errorMessage }}","Failed to jump to the first unread message":"Échec de saut vers le premier message non lu","Failed to mark channel as read":"Échec de la marque du canal comme lu",Flag:Flag$8,"Latest Messages":"Derniers messages","Load more":"Charger plus","Mark as unread":"Marquer comme non lu",Menu:Menu$8,"Message Failed · Click to try again":"Échec de l'envoi du message - Cliquez pour réessayer","Message Failed · Unauthorized":"Échec de l'envoi du message - Non autorisé","Message deleted":"Message supprimé","Message has been successfully flagged":"Le message a été signalé avec succès","Message pinned":"Message épinglé","Messages have been marked unread.":"Les messages ont été marqués comme non lus.",Mute:Mute$8,New:New$8,"New Messages!":"Nouveaux Messages!","No chats here yet…":"Pas encore de messages ici...","No results found":"Aucun résultat trouvé","Nothing yet...":"Aucun message...","Open emoji picker":"Ouvrez le sélecteur d'emoji","People matching":"Correspondance de personnes",Pin:Pin$8,"Pinned by":"Épinglé par",Reply:Reply$8,"Reply to Message":"Répondre au message",Search:Search$8,"Searching...":"Recherche...",Send:Send$8,"Send Anyway":"Envoyer quand même","Send message request failed":"Échec de la demande d'envoi de message","Sending...":"Envoi en cours...",Shuffle:Shuffle$8,"Slow Mode ON":"Mode lent activé","Some of the files will not be accepted":"Certains fichiers ne seront pas acceptés","This message did not meet our content guidelines":"Ce message n'est pas conforme à nos lignes directrices en matière de contenu","This message was deleted...":"Ce message a été supprimé...",Thread:Thread$9,"Type your message":"Saisissez votre message",Unmute:Unmute$8,Unpin:Unpin$8,"Unread messages":"Messages non lus","Upload type: \"{{ type }}\" is not allowed":"Le type de téléchargement: \"{{ type }}\" n'est pas autorisé","User uploaded content":"Contenu téléchargé par l'utilisateur","Wait until all attachments have uploaded":"Attendez que toutes les pièces jointes soient téléchargées","You have no channels currently":"Vous n'avez actuellement aucun canal","You've reached the maximum number of files":"Vous avez atteint le nombre maximum de fichiers","aria/Attachment":"Pièce jointe","aria/Cancel Reply":"Annuler la réponse","aria/Cancel upload":"Annuler le téléchargement","aria/Channel list":"Liste des canaux","aria/Channel search results":"Résultats de la recherche de canaux","aria/Close thread":"Fermer le fil","aria/Emoji picker":"Sélecteur d'émojis","aria/File input":"Entrée de fichier","aria/File upload":"Téléchargement de fichier","aria/Image input":"Entrée d'image","aria/Load More Channels":"Charger plus de canaux","aria/Menu":"Menu","aria/Message Options":"Options de message","aria/Open Message Actions Menu":"Ouvrir le menu des actions de message","aria/Open Reaction Selector":"Ouvrir le sélecteur de réaction","aria/Open Thread":"Ouvrir le fil","aria/Reaction list":"Liste des réactions","aria/Retry upload":"Réessayer le téléchargement","aria/Send":"Envoyer","ban-command-args":"[@nomdutilisateur] [texte]","ban-command-description":"Bannir un utilisateur","giphy-command-args":"[texte]","giphy-command-description":"Poster un GIF aléatoire dans le canal",live:live$8,"mute-command-args":"[@nomdutilisateur]","mute-command-description":"Muter un utilisateur",replyCount_many:replyCount_many$3,replyCount_one:replyCount_one$8,replyCount_other:replyCount_other$8,searchResultsCount_many:searchResultsCount_many$3,searchResultsCount_one:searchResultsCount_one$8,searchResultsCount_other:searchResultsCount_other$8,"this content could not be displayed":"ce contenu n'a pu être affiché","unban-command-args":"[@nomdutilisateur]","unban-command-description":"Débannir un utilisateur","unmute-command-args":"[@nomdutilisateur]","unmute-command-description":"Démuter un utilisateur",unreadMessagesSeparatorText_many:unreadMessagesSeparatorText_many$3,unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$6,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$8,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} et {{ moreCount }} autres","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} et {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} et {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} supplémentaires","{{ memberCount }} members":"{{ memberCount }} membres","{{ user }} has been muted":"{{ user }} a été mis en sourdine","{{ user }} has been unmuted":"{{ user }} n'est plus en sourdine","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} en ligne","{{count}} unread_many":"{{count}} non lus","{{count}} unread_one":"{{count}} non lu","{{count}} unread_other":"{{count}} non lus","🏙 Attachment...":"🏙 Pièce jointe..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$7="रद्द करें";var Close$7="बंद करे";var Delete$7="डिलीट";var Delivered$7="पहुंच गया";var Flag$7="फ्लैग करे";var Menu$7="मेन्यू";var Mute$7="म्यूट करे";var New$7="नए";var Pin$7="पिन";var Reply$7="जवाब दे दो";var Search$7="खोज";var Send$7="भेजे";var Shuffle$7="मिश्रित करें";var Thread$8="रिप्लाई थ्रेड";var Unmute$7="अनम्यूट";var Unpin$7="अनपिन";var live$7="लाइव";var replyCount_one$7="1 रिप्लाई";var replyCount_other$7="{{ count }} रिप्लाई";var searchResultsCount_one$7="1 परिणाम";var searchResultsCount_other$7="{{ count }} परिणाम";var unreadMessagesSeparatorText_one$5="1 अपठित संदेश";var unreadMessagesSeparatorText_other$7="{{count}} अपठित संदेश";var hiTranslations = {"Attach files":"फाइल्स अटैच करे",Cancel:Cancel$7,"Channel Missing":"चैनल उपलब्ध नहीं है",Close:Close$7,"Close emoji picker":"इमोजी पिकर बंद करें","Commands matching":"मेल खाती है","Connection failure, reconnecting now...":"कनेक्शन विफल रहा, अब पुनः कनेक्ट हो रहा है ...",Delete:Delete$7,Delivered:Delivered$7,"Drag your files here":"अपनी फ़ाइलें यहाँ खींचें","Drag your files here to add to your post":"अपनी फ़ाइलें यहाँ खींचें और अपने पोस्ट में जोड़ने के लिए","Edit Message":"मैसेज में बदलाव करे","Edit message request failed":"संदेश संपादित करने का अनुरोध विफल रहा","Emoji matching":"इमोजी मिलान","Empty message...":"खाली संदेश ...","Error adding flag":"ध्वज जोड़ने में त्रुटि","Error connecting to chat, refresh the page to try again.":"चैट से कनेक्ट करने में त्रुटि, पेज को रिफ्रेश करें","Error deleting message":"संदेश हटाने में त्रुटि","Error fetching reactions":"प्रतिक्रियाएँ लोड करने में त्रुटि","Error marking message unread":"संदेश को अपठित चिह्नित करने में त्रुटि","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"संदेश को अपठित मार्क करने में त्रुटि। सबसे नए 100 चैनल संदेश से पहले के सभी अपठित संदेशों को अपठित मार्क नहीं किया जा सकता है।","Error muting a user ...":"यूजर को म्यूट करने का प्रयास फेल हुआ","Error pinning message":"संदेश को पिन करने में त्रुटि","Error removing message pin":"संदेश पिन निकालने में त्रुटि","Error unmuting a user ...":"यूजर को अनम्यूट करने का प्रयास फेल हुआ","Error uploading file":"फ़ाइल अपलोड करने में त्रुटि","Error uploading image":"छवि अपलोड करने में त्रुटि","Error · Unsent":"फेल","Error: {{ errorMessage }}":"फेल: {{ errorMessage }}","Failed to jump to the first unread message":"पहले अपठित संदेश पर जाने में विफल","Failed to mark channel as read":"चैनल को पढ़ा हुआ चिह्नित करने में विफल।",Flag:Flag$7,"Latest Messages":"नवीनतम संदेश","Load more":"और लोड करें","Mark as unread":"अपठित चिह्नित करें",Menu:Menu$7,"Message Failed · Click to try again":"मैसेज फ़ैल - पुनः कोशिश करें","Message Failed · Unauthorized":"मैसेज फ़ैल - अनधिकृत","Message deleted":"मैसेज हटा दिया गया","Message has been successfully flagged":"मैसेज को फ्लैग कर दिया गया है","Message pinned":"संदेश पिन किया गया","Messages have been marked unread.":"संदेशों को अपठित चिह्नित किया गया है।",Mute:Mute$7,New:New$7,"New Messages!":"नए मैसेज!","No chats here yet…":"यहां अभी तक कोई चैट नहीं...","No results found":"कोई परिणाम नहीं मिला","Nothing yet...":"कोई मैसेज नहीं है","Open emoji picker":"इमोजी पिकर खोलिये","People matching":"मेल खाते लोग",Pin:Pin$7,"Pinned by":"द्वारा पिन किया गया",Reply:Reply$7,"Reply to Message":"संदेश का जवाब दें",Search:Search$7,"Searching...":"खोज कर...",Send:Send$7,"Send Anyway":"वैसे भी भेजें","Send message request failed":"संदेश भेजने का अनुरोध विफल रहा","Sending...":"भेजा जा रहा है",Shuffle:Shuffle$7,"Slow Mode ON":"स्लो मोड ऑन","Some of the files will not be accepted":"कुछ फ़ाइलें स्वीकार नहीं की जाएंगी","This message did not meet our content guidelines":"यह संदेश हमारे सामग्री दिशानिर्देशों के अनुरूप नहीं था","This message was deleted...":"मैसेज हटा दिया गया",Thread:Thread$8,"Type your message":"अपना मैसेज लिखे",Unmute:Unmute$7,Unpin:Unpin$7,"Unread messages":"अपठित संदेश","Upload type: \"{{ type }}\" is not allowed":"अपलोड प्रकार: \"{{ type }}\" की अनुमति नहीं है","User uploaded content":"उपयोगकर्ता अपलोड की गई सामग्री","Wait until all attachments have uploaded":"सभी अटैचमेंट अपलोड होने तक प्रतीक्षा करें","You have no channels currently":"आपके पास कोई चैनल नहीं है","You've reached the maximum number of files":"आप अधिकतम फ़ाइलों तक पहुँच गए हैं","aria/Attachment":"अनुलग्नक","aria/Cancel Reply":"उत्तर रद्द करें","aria/Cancel upload":"अपलोड रद्द करें","aria/Channel list":"चैनल सूची","aria/Channel search results":"चैनल खोज परिणाम","aria/Close thread":"थ्रेड बंद करें","aria/Emoji picker":"इमोजी चुनने वाला","aria/File input":"फ़ाइल इनपुट","aria/File upload":"फ़ाइल अपलोड","aria/Image input":"छवि इनपुट","aria/Load More Channels":"और चैनल लोड करें","aria/Menu":"मेन्यू","aria/Message Options":"संदेश विकल्प","aria/Open Message Actions Menu":"संदेश क्रिया मेन्यू खोलें","aria/Open Reaction Selector":"प्रतिक्रिया चयनकर्ता खोलें","aria/Open Thread":"थ्रेड खोलें","aria/Reaction list":"प्रतिक्रिया सूची","aria/Retry upload":"अपलोड पुनः प्रयास करें","aria/Send":"भेजें","ban-command-args":"[@उपयोगकर्तनाम] [पाठ]","ban-command-description":"एक उपयोगकर्ता को प्रतिषेधित करें","giphy-command-args":"[पाठ]","giphy-command-description":"चैनल पर एक क्रॉफिल जीआइएफ पोस्ट करें",live:live$7,"mute-command-args":"[@उपयोगकर्तनाम]","mute-command-description":"एक उपयोगकर्ता को म्यूट करें",replyCount_one:replyCount_one$7,replyCount_other:replyCount_other$7,searchResultsCount_one:searchResultsCount_one$7,searchResultsCount_other:searchResultsCount_other$7,"this content could not be displayed":"यह कॉन्टेंट लोड नहीं हो पाया","unban-command-args":"[@उपयोगकर्तनाम]","unban-command-description":"एक उपयोगकर्ता को प्रतिषेध से मुक्त करें","unmute-command-args":"[@उपयोगकर्तनाम]","unmute-command-description":"एक उपयोगकर्ता को अनम्यूट करें",unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$5,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$7,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} और {{ moreCount }} और","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} और {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} और {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} और","{{ memberCount }} members":"{{ memberCount }} मेंबर्स","{{ user }} has been muted":"{{ user }} को म्यूट कर दिया गया है","{{ user }} has been unmuted":"{{ user }} को अनम्यूट कर दिया गया है","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_one":"{{count}} अपठित","{{count}} unread_other":"{{count}} अपठित","🏙 Attachment...":"🏙 अटैचमेंट"};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$6="Annulla";var Close$6="Chiudi";var Delete$6="Cancella";var Delivered$6="Consegnato";var Flag$6="Segnala";var Menu$6="Menù";var Mute$6="Silenzia";var New$6="Nuovo";var Pin$6="Pin";var Reply$6="Rispondere";var Search$6="Ricerca";var Send$6="Invia";var Shuffle$6="Mescolare";var Thread$7="Thread";var Unmute$6="Riattiva le notifiche";var Unpin$6="Sblocca";var live$6="live";var replyCount_many$2="{{ count }} risposte";var replyCount_one$6="Una risposta";var replyCount_other$6="{{ count }} risposte";var searchResultsCount_many$2="{{ count }} risultati";var searchResultsCount_one$6="1 risultato";var searchResultsCount_other$6="{{ count }} risultati";var unreadMessagesSeparatorText_many$2="{{count}} messaggi non letti";var unreadMessagesSeparatorText_one$4="1 messaggio non letto";var unreadMessagesSeparatorText_other$6="{{count}} messaggi non letti";var itTranslations = {"Attach files":"Allega file",Cancel:Cancel$6,"Channel Missing":"Il canale non esiste",Close:Close$6,"Close emoji picker":"Chiudi il selettore di emoji","Commands matching":"Comandi corrispondenti","Connection failure, reconnecting now...":"Connessione fallitta, riconnessione in corso...",Delete:Delete$6,Delivered:Delivered$6,"Drag your files here":"Trascina i tuoi file qui","Drag your files here to add to your post":"Trascina i tuoi file qui per aggiungerli al tuo post","Edit Message":"Modifica messaggio","Edit message request failed":"Richiesta di modifica del messaggio non riuscita","Emoji matching":"Abbinamento emoji","Empty message...":"Message vuoto...","Error adding flag":"Errore durante l'aggiunta del flag","Error connecting to chat, refresh the page to try again.":"Errore di connessione alla chat, aggiorna la pagina per riprovare","Error deleting message":"Errore durante l'eliminazione del messaggio","Error fetching reactions":"Errore nel caricamento delle reazioni","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Errore durante la marcatura del messaggio come non letto. Impossibile marcare messaggi non letti più vecchi dei più recenti 100 messaggi del canale.","Error muting a user ...":"Errore silenziando un utente ...","Error pinning message":"Errore durante il blocco del messaggio","Error removing message pin":"Errore durante la rimozione del PIN del messaggio","Error unmuting a user ...":"Errore riattivando le notifiche per l'utente ...","Error uploading file":"Errore durante il caricamento del file","Error uploading image":"Errore durante il caricamento dell'immagine","Error · Unsent":"Errore · Non inviato","Error: {{ errorMessage }}":"Errore: {{ errorMessage }}","Failed to jump to the first unread message":"Impossibile passare al primo messaggio non letto","Failed to mark channel as read":"Impossibile contrassegnare il canale come letto",Flag:Flag$6,"Latest Messages":"Ultimi messaggi","Load more":"Carica di più","Mark as unread":"Contrassegna come non letto",Menu:Menu$6,"Message Failed · Click to try again":"Invio messaggio fallito · Clicca per riprovare","Message Failed · Unauthorized":"Invio messaggio fallito · Non autorizzato","Message deleted":"Messaggio cancellato","Message has been successfully flagged":"Il messaggio é stato segnalato con successo","Message pinned":"Messaggio bloccato","Messages have been marked unread.":"I messaggi sono stati contrassegnati come non letti.",Mute:Mute$6,New:New$6,"New Messages!":"Nuovo messaggio!","No chats here yet…":"Non ci sono ancora messaggi qui...","No results found":"Nessun risultato trovato","Nothing yet...":"Ancora niente...","Open emoji picker":"Apri il selettore dellle emoji","People matching":"Persone che corrispondono",Pin:Pin$6,"Pinned by":"Appuntato da",Reply:Reply$6,"Reply to Message":"Rispondi al messaggio",Search:Search$6,"Searching...":"Ricerca in corso ...",Send:Send$6,"Send Anyway":"Invia comunque","Send message request failed":"Invia messaggio di richiesta non riuscito","Sending...":"Invio in corso...",Shuffle:Shuffle$6,"Slow Mode ON":"Modalità lenta attivata","Some of the files will not be accepted":"Alcuni dei file non saranno accettati","This message did not meet our content guidelines":"Questo messaggio non soddisfa le nostre linee guida sui contenuti","This message was deleted...":"Questo messaggio é stato cancellato",Thread:Thread$7,"Type your message":"Scrivi il tuo messaggio",Unmute:Unmute$6,Unpin:Unpin$6,"Unread messages":"Messaggi non letti","Upload type: \"{{ type }}\" is not allowed":"Tipo di caricamento: \"{{ type }}\" non è consentito","User uploaded content":"Contenuto caricato dall'utente","Wait until all attachments have uploaded":"Attendi il caricamento di tutti gli allegati","You have no channels currently":"Al momento non sono presenti canali","You've reached the maximum number of files":"Hai raggiunto il numero massimo di file","aria/Attachment":"Allegato","aria/Cancel Reply":"Annulla risposta","aria/Cancel upload":"Annulla caricamento","aria/Channel list":"Elenco dei canali","aria/Channel search results":"Risultati della ricerca dei canali","aria/Close thread":"Chiudi discussione","aria/Emoji picker":"Selettore di emoji","aria/File input":"Input di file","aria/File upload":"Caricamento di file","aria/Image input":"Input di immagine","aria/Load More Channels":"Carica altri canali","aria/Menu":"Menu","aria/Message Options":"Opzioni di messaggio","aria/Open Message Actions Menu":"Apri il menu delle azioni di messaggio","aria/Open Reaction Selector":"Apri il selettore di reazione","aria/Open Thread":"Apri discussione","aria/Reaction list":"Elenco delle reazioni","aria/Retry upload":"Riprova caricamento","aria/Send":"Invia","ban-command-args":"[@nomeutente] [testo]","ban-command-description":"Vietare un utente","giphy-command-args":"[testo]","giphy-command-description":"Pubblica un gif casuale sul canale",live:live$6,"mute-command-args":"[@nomeutente]","mute-command-description":"Silenzia un utente",replyCount_many:replyCount_many$2,replyCount_one:replyCount_one$6,replyCount_other:replyCount_other$6,searchResultsCount_many:searchResultsCount_many$2,searchResultsCount_one:searchResultsCount_one$6,searchResultsCount_other:searchResultsCount_other$6,"this content could not be displayed":"questo contenuto non puó essere mostrato","unban-command-args":"[@nomeutente]","unban-command-description":"Togliere il divieto a un utente","unmute-command-args":"[@nomeutente]","unmute-command-description":"Togliere il silenzio a un utente",unreadMessagesSeparatorText_many:unreadMessagesSeparatorText_many$2,unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$4,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$6,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} e altri {{ moreCount }}","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} e {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} e {{ secondUser }}","{{ imageCount }} more":"+ {{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} membri","{{ user }} has been muted":"{{ user }} é stato silenziato","{{ user }} has been unmuted":"Notifiche riattivate per {{ user }}","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_many":"{{count}} non letti","{{count}} unread_one":"{{count}} non letto","{{count}} unread_other":"{{count}} non letti","🏙 Attachment...":"🏙 Allegato..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$5="キャンセル";var Close$5="閉める";var Delete$5="消去";var Delivered$5="配信しました";var Flag$5="フラグ";var Menu$5="メニュー";var Mute$5="無音";var New$5="新しい";var Pin$5="ピン";var Reply$5="返事";var Search$5="探す";var Send$5="送信";var Shuffle$5="シャッフル";var Thread$6="スレッド";var Unmute$5="無音を解除する";var Unpin$5="ピンを解除する";var live$5="ライブ";var replyCount_one$5="1件の返信";var replyCount_other$5="{{ count }} 返信";var searchResultsCount_one$5="1件の結果";var searchResultsCount_other$5="{{ count }}件の結果";var unreadMessagesSeparatorText_other$5="未読メッセージ {{count}} 件";var jaTranslations = {"Attach files":"ファイルを添付する",Cancel:Cancel$5,"Channel Missing":"チャネルがありません",Close:Close$5,"Close emoji picker":"絵文字ピッカーを閉める","Commands matching":"一致するコマンド","Connection failure, reconnecting now...":"接続が失敗しました。再接続中...",Delete:Delete$5,Delivered:Delivered$5,"Drag your files here":"ここにファイルをドラッグ","Drag your files here to add to your post":"投稿に追加するためにここにファイルをドラッグ","Edit Message":"メッセージを編集","Edit message request failed":"メッセージの編集要求が失敗しました","Emoji matching":"絵文字マッチング","Empty message...":"空のメッセージ...","Error adding flag":"フラグを追加のエラーが発生しました","Error connecting to chat, refresh the page to try again.":"チャットへの接続ができませんでした。ページを更新してください。","Error deleting message":"メッセージを削除するエラーが発生しました","Error fetching reactions":"反応の読み込みエラー","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"メッセージを未読にする際にエラーが発生しました。最新の100件のチャンネルメッセージより古い未読メッセージはマークできません。","Error muting a user ...":"ユーザーを無音するエラーが発生しました...","Error pinning message":"メッセージをピンのエラーが発生しました","Error removing message pin":"メッセージのピンを削除のエラーが発生しました","Error unmuting a user ...":"ユーザーの無音解除のエラーが発生しました...","Error uploading file":"ファイルをアップロードのエラーが発生しました","Error uploading image":"画像をアップロードのエラーが発生しました","Error · Unsent":"エラー・未送信","Error: {{ errorMessage }}":"エラー: {{ errorMessage }}","Failed to jump to the first unread message":"最初の未読メッセージにジャンプできませんでした","Failed to mark channel as read":"チャンネルを既読にすることができませんでした",Flag:Flag$5,"Latest Messages":"最新のメッセージ","Load more":"もっと読み込む","Mark as unread":"未読としてマーク",Menu:Menu$5,"Message Failed · Click to try again":"メッセージが失敗しました · クリックして再試行してください","Message Failed · Unauthorized":"メッセージが失敗しました · 許可されていません","Message deleted":"メッセージが削除されました","Message has been successfully flagged":"メッセージに正常にフラグが付けられました","Message pinned":"メッセージにピンが付けられました","Messages have been marked unread.":"メッセージは未読としてマークされました。",Mute:Mute$5,New:New$5,"New Messages!":"新しいメッセージ!","No chats here yet…":"ここにはまだチャットはありません…","No results found":"結果が見つかりません","Nothing yet...":"まだ何もありません...","Open emoji picker":"絵文字ピッカーを開く","People matching":"一致する人",Pin:Pin$5,"Pinned by":"ピンした方",Reply:Reply$5,"Reply to Message":"メッセージに返信",Search:Search$5,"Searching...":"検索中...",Send:Send$5,"Send Anyway":"とにかく送信する","Send message request failed":"メッセージ送信リクエストが失敗しました","Sending...":"送信中...",Shuffle:Shuffle$5,"Slow Mode ON":"スローモードオン","Some of the files will not be accepted":"一部のファイルは受け付けられません","This message did not meet our content guidelines":"このメッセージはコンテンツガイドラインに適合していません","This message was deleted...":"このメッセージは削除されました...",Thread:Thread$6,"Type your message":"メッセージを入力してください",Unmute:Unmute$5,Unpin:Unpin$5,"Unread messages":"未読メッセージ","Upload type: \"{{ type }}\" is not allowed":"アップロードタイプ：\"{{ type }}\"は許可されていません","User uploaded content":"ユーザーがアップロードしたコンテンツ","Wait until all attachments have uploaded":"すべての添付ファイルがアップロードされるまでお待ちください","You have no channels currently":"現在チャンネルはありません","You've reached the maximum number of files":"ファイルの最大数に達しました","aria/Attachment":"添付ファイル","aria/Cancel Reply":"返信をキャンセル","aria/Cancel upload":"アップロードをキャンセル","aria/Channel list":"チャンネル一覧","aria/Channel search results":"チャンネル検索結果","aria/Close thread":"スレッドを閉じる","aria/Emoji picker":"絵文字ピッカー","aria/File input":"ファイル入力","aria/File upload":"ファイルアップロード","aria/Image input":"画像入力","aria/Load More Channels":"さらにチャンネルを読み込む","aria/Menu":"メニュー","aria/Message Options":"メッセージオプション","aria/Open Message Actions Menu":"メッセージアクションメニューを開く","aria/Open Reaction Selector":"リアクションセレクターを開く","aria/Open Thread":"スレッドを開く","aria/Reaction list":"リアクション一覧","aria/Retry upload":"アップロードを再試行","aria/Send":"送信","ban-command-args":"[@ユーザ名] [テキスト]","ban-command-description":"ユーザーを禁止する","giphy-command-args":"[テキスト]","giphy-command-description":"チャンネルにランダムなGIFを投稿する",live:live$5,"mute-command-args":"[@ユーザ名]","mute-command-description":"ユーザーをミュートする",replyCount_one:replyCount_one$5,replyCount_other:replyCount_other$5,searchResultsCount_one:searchResultsCount_one$5,searchResultsCount_other:searchResultsCount_other$5,"this content could not be displayed":"このコンテンツは表示できませんでした","unban-command-args":"[@ユーザ名]","unban-command-description":"ユーザーの禁止を解除する","unmute-command-args":"[@ユーザ名]","unmute-command-description":"ユーザーのミュートを解除する",unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$5,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} と {{ moreCount }} 他人","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} と {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} と {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} イメージ","{{ memberCount }} members":"{{ memberCount }} メンバー","{{ user }} has been muted":"{{ user }} 無音されています","{{ user }} has been unmuted":"{{ user }} 無音されていません","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} オンライン","{{count}} unread_other":"{{count}} 未読","🏙 Attachment...":"🏙 アタッチメント..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$4="취소";var Close$4="닫기";var Delete$4="삭제";var Delivered$4="배달됨";var Flag$4="플래그";var Menu$4="메뉴";var Mute$4="무음";var New$4="새로운";var Pin$4="핀";var Reply$4="답장";var Search$4="찾다";var Send$4="보내다";var Shuffle$4="셔플";var Thread$5="스레드";var Unmute$4="음소거 해제";var Unpin$4="핀 해제";var live$4="라이브";var replyCount_one$4="답장 1개";var replyCount_other$4="{{ count }} 답장";var searchResultsCount_one$4="1개의 결과";var searchResultsCount_other$4="{{ count }}개 결과";var unreadMessagesSeparatorText_other$4="읽지 않은 메시지 {{count}}개";var koTranslations = {"Attach files":"파일 첨부",Cancel:Cancel$4,"Channel Missing":"채널 누락",Close:Close$4,"Close emoji picker":"이모티콘 선택기 닫기","Commands matching":"일치하는 명령","Connection failure, reconnecting now...":"연결 실패, 지금 다시 연결 중...",Delete:Delete$4,Delivered:Delivered$4,"Drag your files here":"여기로 파일을 끌어다 놓으세요","Drag your files here to add to your post":"게시물에 추가하려면 파일을 여기로 끌어다 놓으세요","Edit Message":"메시지 수정","Edit message request failed":"메시지 수정 요청 실패","Emoji matching":"이모티콘 매칭","Empty message...":"빈 메시지...","Error adding flag":"플래그를 추가하는 동안 오류가 발생했습니다.","Error connecting to chat, refresh the page to try again.":"채팅에 연결하는 동안 오류가 발생했습니다. 페이지를 새로고침하여 다시 시도하세요.","Error deleting message":"메시지를 삭제하는 중에 오류가 발생했습니다.","Error fetching reactions":"반응 로딩 오류.","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"메시지를 읽지 않음으로 표시하는 중 오류가 발생했습니다. 가장 최근 100개의 채널 메시지보다 오래된 읽지 않은 메시지는 표시할 수 없습니다.","Error muting a user ...":"사용자를 음소거하는 중에 오류가 발생했습니다...","Error pinning message":"메시지를 핀하는 중에 오류가 발생했습니다.","Error removing message pin":"메시지 핀을 제거하는 중에 오류가 발생했습니다.","Error unmuting a user ...":"사용자 음소거 해제 중 오류 발생...","Error uploading file":"파일 업로드 오류","Error uploading image":"이미지를 업로드하는 동안 오류가 발생했습니다.","Error · Unsent":"오류 · 전송되지 않음","Error: {{ errorMessage }}":"오류: {{ errorMessage }}","Failed to jump to the first unread message":"첫 번째 읽지 않은 메시지로 이동하지 못했습니다","Failed to mark channel as read":"채널을 읽음으로 표시하는 데 실패했습니다",Flag:Flag$4,"Latest Messages":"최신 메시지","Load more":"더 불러오기","Mark as unread":"읽지 않음으로 표시",Menu:Menu$4,"Message Failed · Click to try again":"메시지 실패 · 다시 시도하려면 클릭하세요.","Message Failed · Unauthorized":"메시지 실패 · 승인되지 않음","Message deleted":"메시지가 삭제되었습니다.","Message has been successfully flagged":"메시지에 플래그가 지정되었습니다.","Message pinned":"메시지 핀했습니다","Messages have been marked unread.":"메시지가 읽지 않음으로 표시되었습니다.",Mute:Mute$4,New:New$4,"New Messages!":"새 메시지!","No chats here yet…":"아직 채팅이 없습니다...","No results found":"검색 결과가 없습니다","Nothing yet...":"아직 아무것도...","Open emoji picker":"이모티콘 선택기 열기","People matching":"일치하는 사람",Pin:Pin$4,"Pinned by":"핀했던 분:",Reply:Reply$4,"Reply to Message":"메시지에 답장",Search:Search$4,"Searching...":"수색...",Send:Send$4,"Send Anyway":"어쨌든 보내기","Send message request failed":"메시지 보내기 요청 실패","Sending...":"배상중...",Shuffle:Shuffle$4,"Slow Mode ON":"슬로우 모드 켜짐","Some of the files will not be accepted":"일부 파일은 허용되지 않을 수 있습니다","This message did not meet our content guidelines":"이 메시지는 콘텐츠 가이드라인을 충족하지 않습니다.","This message was deleted...":"이 메시지는 삭제되었습니다...",Thread:Thread$5,"Type your message":"메시지 입력",Unmute:Unmute$4,Unpin:Unpin$4,"Unread messages":"읽지 않은 메시지","Upload type: \"{{ type }}\" is not allowed":"업로드 유형: \"{{ type }}\"은(는) 허용되지 않습니다.","User uploaded content":"사용자 업로드 콘텐츠","Wait until all attachments have uploaded":"모든 첨부 파일이 업로드될 때까지 기다립니다.","You have no channels currently":"현재 채널이 없습니다.","You've reached the maximum number of files":"최대 파일 수에 도달했습니다.","aria/Attachment":"첨부 파일","aria/Cancel Reply":"답장 취소","aria/Cancel upload":"업로드 취소","aria/Channel list":"채널 목록","aria/Channel search results":"채널 검색 결과","aria/Close thread":"스레드 닫기","aria/Emoji picker":"이모지 선택기","aria/File input":"파일 입력","aria/File upload":"파일 업로드","aria/Image input":"이미지 입력","aria/Load More Channels":"더 많은 채널 불러오기","aria/Menu":"메뉴","aria/Message Options":"메시지 옵션","aria/Open Message Actions Menu":"메시지 액션 메뉴 열기","aria/Open Reaction Selector":"반응 선택기 열기","aria/Open Thread":"스레드 열기","aria/Reaction list":"반응 목록","aria/Retry upload":"업로드 다시 시도","aria/Send":"보내기","ban-command-args":"[@사용자이름] [텍스트]","ban-command-description":"사용자를 차단","giphy-command-args":"[텍스트]","giphy-command-description":"채널에 무작위 GIF 게시",live:live$4,"mute-command-args":"[@사용자이름]","mute-command-description":"사용자 음소거",replyCount_one:replyCount_one$4,replyCount_other:replyCount_other$4,searchResultsCount_one:searchResultsCount_one$4,searchResultsCount_other:searchResultsCount_other$4,"this content could not be displayed":"이 콘텐츠를 표시할 수 없습니다","unban-command-args":"[@사용자이름]","unban-command-description":"사용자 차단 해제","unmute-command-args":"[@사용자이름]","unmute-command-description":"사용자 음소거 해제",unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$4,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} 그리고 {{ moreCount }}명 더","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} 그리고 {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} 그리고 {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }}개 더","{{ memberCount }} members":"{{ memberCount }}명","{{ user }} has been muted":"{{ user }} 음소거되었습니다","{{ user }} has been unmuted":"{{ user }} 음소거가 해제되었습니다","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} 온라인","{{count}} unread_other":"{{count}} 읽지 않음","🏙 Attachment...":"🏙 부착..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$3="Annuleer";var Close$3="Sluit";var Delete$3="Verwijder";var Delivered$3="Afgeleverd";var Flag$3="Markeer";var Menu$3="Menu";var Mute$3="Mute";var New$3="Nieuwe";var Pin$3="Pin";var Reply$3="Antwoord";var Search$3="Zoeken";var Send$3="Verstuur";var Shuffle$3="Schudden";var Thread$4="Draadje";var Unmute$3="Unmute";var Unpin$3="Losmaken";var live$3="live";var replyCount_one$3="1 antwoord";var replyCount_other$3="{{ count }} antwoorden";var searchResultsCount_one$3="1 resultaat";var searchResultsCount_other$3="{{ count }} resultaten";var unreadMessagesSeparatorText_one$3="1 ongelezen bericht";var unreadMessagesSeparatorText_other$3="{{count}} ongelezen berichten";var nlTranslations = {"Attach files":"Bijlage toevoegen",Cancel:Cancel$3,"Channel Missing":"Kanaal niet gevonden",Close:Close$3,"Close emoji picker":"Sluit de emoji-kiezer","Commands matching":"Bijpassende opdrachten","Connection failure, reconnecting now...":"Probleem met de verbinding, opnieuw verbinding maken...",Delete:Delete$3,Delivered:Delivered$3,"Drag your files here":"Sleep je bestanden hier naartoe","Drag your files here to add to your post":"Sleep je bestanden hier naartoe om aan je bericht toe te voegen","Edit Message":"Pas bericht aan","Edit message request failed":"Verzoek om bericht bewerken mislukt","Emoji matching":"Emoji-overeenkomsten","Empty message...":"Leeg bericht...","Error adding flag":"Fout bij toevoegen van vlag","Error connecting to chat, refresh the page to try again.":"Fout bij het verbinden, ververs de pagina om nogmaals te proberen","Error deleting message":"Fout bij verwijderen van bericht","Error fetching reactions":"Fout bij het laden van reacties","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Fout bij markeren van bericht als ongelezen. Kan geen oudere ongelezen berichten markeren dan de nieuwste 100 kanaalberichten.","Error muting a user ...":"Fout bij het muten van de gebruiker","Error pinning message":"Fout bij vastzetten van bericht","Error removing message pin":"Fout bij verwijderen van berichtpin","Error unmuting a user ...":"Fout bij het unmuten van de gebruiker","Error uploading file":"Fout bij uploaden bestand","Error uploading image":"Fout bij uploaden afbeelding","Error · Unsent":"Error: · niet verzonden","Error: {{ errorMessage }}":"Error: {{ errorMessage }}","Failed to jump to the first unread message":"Niet gelukt om naar het eerste ongelezen bericht te springen","Failed to mark channel as read":"Kanaal kon niet als gelezen worden gemarkeerd",Flag:Flag$3,"Latest Messages":"Laatste berichten","Load more":"Meer laden","Mark as unread":"Markeren als ongelezen",Menu:Menu$3,"Message Failed · Click to try again":"Bericht mislukt, klik om het nogmaals te proberen","Message Failed · Unauthorized":"Bericht mislukt, ongeautoriseerd","Message deleted":"Bericht verwijderd","Message has been successfully flagged":"Bericht is succesvol gemarkeerd","Message pinned":"Bericht vastgezet","Messages have been marked unread.":"Berichten zijn gemarkeerd als ongelezen.",Mute:Mute$3,New:New$3,"New Messages!":"Nieuwe Berichten!","No chats here yet…":"Nog geen chats hier...","No results found":"Geen resultaten gevonden","Nothing yet...":"Nog niets ...","Open emoji picker":"Open emojipicker","People matching":"Mensen die matchen",Pin:Pin$3,"Pinned by":"Vastgemaakt door",Reply:Reply$3,"Reply to Message":"Antwoord op bericht",Search:Search$3,"Searching...":"Zoeken...",Send:Send$3,"Send Anyway":"Toch versturen","Send message request failed":"Verzoek om bericht te verzenden mislukt","Sending...":"Aan het verzenden...",Shuffle:Shuffle$3,"Slow Mode ON":"Langzame modus aan","Some of the files will not be accepted":"Sommige bestanden zullen niet worden geaccepteerd","This message did not meet our content guidelines":"Dit bericht voldeed niet aan onze inhoudsrichtlijnen","This message was deleted...":"Dit bericht was verwijderd",Thread:Thread$4,"Type your message":"Type je bericht",Unmute:Unmute$3,Unpin:Unpin$3,"Unread messages":"Ongelezen berichten","Upload type: \"{{ type }}\" is not allowed":"Uploadtype: \"{{ type }}\" is niet toegestaan","User uploaded content":"Gebruikersgeüploade inhoud","Wait until all attachments have uploaded":"Wacht tot alle bijlagen zijn geüpload","You have no channels currently":"Er zijn geen chats beschikbaar","You've reached the maximum number of files":"Je hebt het maximale aantal bestanden bereikt","aria/Attachment":"Bijlage","aria/Cancel Reply":"Antwoord annuleren","aria/Cancel upload":"Upload annuleren","aria/Channel list":"Kanaallijst","aria/Channel search results":"Zoekresultaten voor kanalen","aria/Close thread":"Draad sluiten","aria/Emoji picker":"Emoji kiezer","aria/File input":"Bestandsinvoer","aria/File upload":"Bestand uploaden","aria/Image input":"Afbeelding invoeren","aria/Load More Channels":"Meer kanalen laden","aria/Menu":"Menu","aria/Message Options":"Berichtopties","aria/Open Message Actions Menu":"Menu voor berichtacties openen","aria/Open Reaction Selector":"Reactiekiezer openen","aria/Open Thread":"Draad openen","aria/Reaction list":"Reactielijst","aria/Retry upload":"Upload opnieuw proberen","aria/Send":"Verzenden","ban-command-args":"[@gebruikersnaam] [tekst]","ban-command-description":"Een gebruiker verbannen","giphy-command-args":"[tekst]","giphy-command-description":"Plaats een willekeurige gif in het kanaal",live:live$3,"mute-command-args":"[@gebruikersnaam]","mute-command-description":"Een gebruiker dempen",replyCount_one:replyCount_one$3,replyCount_other:replyCount_other$3,searchResultsCount_one:searchResultsCount_one$3,searchResultsCount_other:searchResultsCount_other$3,"this content could not be displayed":"Deze inhoud kan niet weergegeven worden","unban-command-args":"[@gebruikersnaam]","unban-command-description":"Een gebruiker debannen","unmute-command-args":"[@gebruikersnaam]","unmute-command-description":"Een gebruiker niet meer dempen",unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$3,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$3,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} en {{ moreCount }} meer","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} en {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} en {{ secondUser }}","{{ imageCount }} more":"+{{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} deelnemers","{{ user }} has been muted":"{{ user }} is muted","{{ user }} has been unmuted":"{{ user }} is unmuted","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_one":"{{count}} ongelezen","{{count}} unread_other":"{{count}} ongelezen","🏙 Attachment...":"🏙 Bijlage..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$2="Cancelar";var Close$2="Fechar";var Delete$2="Excluir";var Delivered$2="Entregue";var Flag$2="Reportar";var Menu$2="Menu";var Mute$2="Mudo";var New$2="Novo";var Pin$2="Fixar";var Reply$2="Responder";var Search$2="Procurar";var Send$2="Enviar";var Shuffle$2="Embaralhar";var Thread$3="Fio";var Unmute$2="Ativar som";var Unpin$2="Liberar";var live$2="ao vivo";var replyCount_many$1="{{ count }} respostas";var replyCount_one$2="1 resposta";var replyCount_other$2="{{ count }} respostas";var searchResultsCount_many$1="{{ count }} resultados";var searchResultsCount_one$2="1 resultado";var searchResultsCount_other$2="{{ count }} resultados";var unreadMessagesSeparatorText_many$1="{{count}} mensagens não lidas";var unreadMessagesSeparatorText_one$2="1 mensagem não lida";var unreadMessagesSeparatorText_other$2="{{count}} mensagens não lidas";var ptTranslations = {"Attach files":"Anexar arquivos",Cancel:Cancel$2,"Channel Missing":"Canal ausente",Close:Close$2,"Close emoji picker":"Fechar seletor de emoji","Commands matching":"Comandos correspondentes","Connection failure, reconnecting now...":"Falha de conexão, reconectando agora...",Delete:Delete$2,Delivered:Delivered$2,"Drag your files here":"Arraste seus arquivos aqui","Drag your files here to add to your post":"Arraste seus arquivos aqui para adicionar ao seu post","Edit Message":"Editar Mensagem","Edit message request failed":"O pedido de edição da mensagem falhou","Emoji matching":"Emoji correspondente","Empty message...":"Mensagem vazia...","Error adding flag":"Erro ao reportar","Error connecting to chat, refresh the page to try again.":"Erro ao conectar ao bate-papo, atualize a página para tentar novamente.","Error deleting message":"Erro ao deletar mensagem","Error fetching reactions":"Erro ao carregar reacções","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Erro ao marcar a mensagem como não lida. Não é possível marcar mensagens não lidas mais antigas do que as 100 mensagens mais recentes do canal.","Error muting a user ...":"Erro ao silenciar um usuário...","Error pinning message":"Erro ao fixar mensagem","Error removing message pin":"Erro ao remover o PIN da mensagem","Error unmuting a user ...":"Erro ao ativar o som de um usuário...","Error uploading file":"Erro ao enviar arquivo","Error uploading image":"Erro ao carregar a imagem","Error · Unsent":"Erro · Não enviado","Error: {{ errorMessage }}":"Erro: {{ errorMessage }}","Failed to jump to the first unread message":"Falha ao pular para a primeira mensagem não lida","Failed to mark channel as read":"Falha ao marcar o canal como lido",Flag:Flag$2,"Latest Messages":"Mensagens mais recentes","Load more":"Carregar mais","Mark as unread":"Marcar como não lida",Menu:Menu$2,"Message Failed · Click to try again":"A mensagem falhou · Clique para tentar novamente","Message Failed · Unauthorized":"A mensagem falhou · não autorizado","Message deleted":"Mensagem apagada","Message has been successfully flagged":"A mensagem foi reportada com sucesso","Message pinned":"Mensagem fixada","Messages have been marked unread.":"Mensagens foram marcadas como não lidas.",Mute:Mute$2,New:New$2,"New Messages!":"Novas mensagens!","No chats here yet…":"Ainda não há conversas aqui...","No results found":"Nenhum resultado encontrado","Nothing yet...":"Nada ainda...","Open emoji picker":"Abrir seletor de emoji","People matching":"Pessoas correspondentes",Pin:Pin$2,"Pinned by":"Fixado por",Reply:Reply$2,"Reply to Message":"Responder a mensagem",Search:Search$2,"Searching...":"Procurando...",Send:Send$2,"Send Anyway":"Enviar de qualquer forma","Send message request failed":"O pedido de envio de mensagem falhou","Sending...":"Enviando...",Shuffle:Shuffle$2,"Slow Mode ON":"Modo lento LIGADO","Some of the files will not be accepted":"Alguns dos arquivos não serão aceitos","This message did not meet our content guidelines":"Esta mensagem não corresponde às nossas directrizes de conteúdo","This message was deleted...":"Esta mensagem foi excluída...",Thread:Thread$3,"Type your message":"Digite sua mensagem",Unmute:Unmute$2,Unpin:Unpin$2,"Unread messages":"Mensagens não lidas","Upload type: \"{{ type }}\" is not allowed":"Tipo de upload: \"{{ type }}\" não é permitido","User uploaded content":"Conteúdo enviado pelo usuário","Wait until all attachments have uploaded":"Espere até que todos os anexos tenham sido carregados","You have no channels currently":"Você não tem canais atualmente","You've reached the maximum number of files":"Você atingiu o número máximo de arquivos","aria/Attachment":"Bijlage","aria/Cancel Reply":"Antwoord annuleren","aria/Cancel upload":"Upload annuleren","aria/Channel list":"Kanaallijst","aria/Channel search results":"Zoekresultaten voor kanalen","aria/Close thread":"Draad sluiten","aria/Emoji picker":"Emoji kiezer","aria/File input":"Bestandsinvoer","aria/File upload":"Bestand uploaden","aria/Image input":"Afbeelding invoeren","aria/Load More Channels":"Meer kanalen laden","aria/Menu":"Menu","aria/Message Options":"Berichtopties","aria/Open Message Actions Menu":"Menu voor berichtacties openen","aria/Open Reaction Selector":"Reactiekiezer openen","aria/Open Thread":"Draad openen","aria/Reaction list":"Reactielijst","aria/Retry upload":"Upload opnieuw proberen","aria/Send":"Verzenden","ban-command-args":"[@nomedeusuário] [texto]","ban-command-description":"Banir um usuário","giphy-command-args":"[texto]","giphy-command-description":"Postar um gif aleatório no canal",live:live$2,"mute-command-args":"[@nomedeusuário]","mute-command-description":"Silenciar um usuário",replyCount_many:replyCount_many$1,replyCount_one:replyCount_one$2,replyCount_other:replyCount_other$2,searchResultsCount_many:searchResultsCount_many$1,searchResultsCount_one:searchResultsCount_one$2,searchResultsCount_other:searchResultsCount_other$2,"this content could not be displayed":"este conteúdo não pôde ser exibido","unban-command-args":"[@nomedeusuário]","unban-command-description":"Desbanir um usuário","unmute-command-args":"[@nomedeusuário]","unmute-command-description":"Retirar o silenciamento de um usuário",unreadMessagesSeparatorText_many:unreadMessagesSeparatorText_many$1,unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$2,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$2,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} e mais {{ moreCount }}","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} e {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} e {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} mais","{{ memberCount }} members":"{{ memberCount }} membros","{{ user }} has been muted":"{{ user }} foi silenciado","{{ user }} has been unmuted":"{{ user }} foi reativado","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} online","{{count}} unread_many":"{{count}} não lidos","{{count}} unread_one":"{{count}} não lido","{{count}} unread_other":"{{count}} não lidos","🏙 Attachment...":"🏙 Anexo..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel$1="Отмена";var Close$1="Закрыть";var Delete$1="Удалить";var Delivered$1="Отправлено";var Flag$1="Пожаловаться";var Menu$1="Меню";var Mute$1="Отключить уведомления";var New$1="Новые";var Pin$1="Штырь";var Reply$1="Отвечать";var Search$1="Поиск";var Send$1="Отправить";var Shuffle$1="Перемешать";var Thread$2="Ветка";var Unmute$1="Включить уведомления";var Unpin$1="Открепить";var live$1="В прямом эфире";var replyCount_few="{{ count }} ответов";var replyCount_many="{{ count }} ответов";var replyCount_one$1="1 ответ";var replyCount_other$1="{{ count }} ответов";var searchResultsCount_few="{{ count }} результата";var searchResultsCount_many="{{ count }} результатов";var searchResultsCount_one$1="1 результат";var searchResultsCount_other$1="{{ count }} результатов";var unreadMessagesSeparatorText_few="1 непрочитанное сообщения";var unreadMessagesSeparatorText_many="{{count}} непрочитанных сообщений";var unreadMessagesSeparatorText_one$1="1 непрочитанное сообщение";var unreadMessagesSeparatorText_other$1="{{count}} непрочитанных сообщений";var ruTranslations = {"Attach files":"Прикрепить файлы",Cancel:Cancel$1,"Channel Missing":"Канал не найден",Close:Close$1,"Close emoji picker":"Закрыть окно выбора смайлов","Commands matching":"Соответствие команд","Connection failure, reconnecting now...":"Ошибка соединения, переподключение...",Delete:Delete$1,Delivered:Delivered$1,"Drag your files here":"Перетащите ваши файлы сюда","Drag your files here to add to your post":"Перетащите ваши файлы сюда, чтобы добавить их в ваш пост","Edit Message":"Редактировать сообщение","Edit message request failed":"Не удалось изменить запрос сообщения","Emoji matching":"Соответствие эмодзи","Empty message...":"Пустое сообщение...","Error adding flag":"Ошибка добавления флага","Error connecting to chat, refresh the page to try again.":"Ошибка подключения к чату, обновите страницу чтобы попробовать снова.","Error deleting message":"Ошибка при удалении сообщения","Error fetching reactions":"Ошибка при загрузке реакций","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Ошибка при отметке сообщения как непрочитанного. Невозможно отметить как непрочитанные сообщения старше последних 100 сообщений в канале.","Error muting a user ...":"Ошибка отключения уведомлений от пользователя...","Error pinning message":"Сообщение об ошибке при закреплении","Error removing message pin":"Ошибка при удалении булавки сообщения","Error unmuting a user ...":"Ошибка включения уведомлений...","Error uploading file":"Ошибка при загрузке файла","Error uploading image":"Ошибка загрузки изображения","Error · Unsent":"Ошибка · Не отправлено","Error: {{ errorMessage }}":"Ошибка: {{ errorMessage }}","Failed to jump to the first unread message":"Не удалось перейти к первому непрочитанному сообщению","Failed to mark channel as read":"Не удалось пометить канал как прочитанный",Flag:Flag$1,"Latest Messages":"Последние сообщения","Load more":"Загрузить больше","Mark as unread":"Отметить как непрочитанное",Menu:Menu$1,"Message Failed · Click to try again":"Ошибка отправки сообщения · Нажмите чтобы повторить","Message Failed · Unauthorized":"Ошибка отправки сообщения · Неавторизованный","Message deleted":"Сообщение удалено","Message has been successfully flagged":"Жалоба на сообщение была принята","Message pinned":"Сообщение закреплено","Messages have been marked unread.":"Сообщения были отмечены как непрочитанные.",Mute:Mute$1,New:New$1,"New Messages!":"Новые сообщения!","No chats here yet…":"Здесь еще нет чатов...","No results found":"результаты не найдены","Nothing yet...":"Пока ничего нет...","Open emoji picker":"Выбрать emoji","People matching":"Соответствующие люди",Pin:Pin$1,"Pinned by":"Закреплено",Reply:Reply$1,"Reply to Message":"Ответить на сообщение",Search:Search$1,"Searching...":"Ищем...",Send:Send$1,"Send Anyway":"Мне всё равно, отправить","Send message request failed":"Не удалось отправить запрос на отправку сообщения","Sending...":"Отправка...",Shuffle:Shuffle$1,"Slow Mode ON":"Медленный режим включен","Some of the files will not be accepted":"Некоторые файлы не будут приняты","This message did not meet our content guidelines":"Сообщение не соответствует правилам","This message was deleted...":"Сообщение было удалено...",Thread:Thread$2,"Type your message":"Ваше сообщение",Unmute:Unmute$1,Unpin:Unpin$1,"Unread messages":"Непрочитанные сообщения","Upload type: \"{{ type }}\" is not allowed":"Тип загрузки: \"{{ type }}\" не разрешен","User uploaded content":"Пользователь загрузил контент","Wait until all attachments have uploaded":"Подождите, пока все вложения загрузятся","You have no channels currently":"У вас нет каналов в данный момент","You've reached the maximum number of files":"Вы достигли максимального количества файлов","aria/Attachment":"Вложение","aria/Cancel Reply":"Отменить ответ","aria/Cancel upload":"Отменить загрузку","aria/Channel list":"Список каналов","aria/Channel search results":"Результаты поиска по каналам","aria/Close thread":"Закрыть тему","aria/Emoji picker":"Выбор эмодзи","aria/File input":"Ввод файла","aria/File upload":"Загрузка файла","aria/Image input":"Ввод изображения","aria/Load More Channels":"Загрузить больше каналов","aria/Menu":"Меню","aria/Message Options":"Параметры сообщения","aria/Open Message Actions Menu":"Открыть меню действий с сообщениями","aria/Open Reaction Selector":"Открыть селектор реакций","aria/Open Thread":"Открыть тему","aria/Reaction list":"Список реакций","aria/Retry upload":"Повторить загрузку","aria/Send":"Отправить","ban-command-args":"[@имяпользователя] [текст]","ban-command-description":"Заблокировать пользователя","giphy-command-args":"[текст]","giphy-command-description":"Опубликовать случайную GIF-анимацию в канале",live:live$1,"mute-command-args":"[@имяпользователя]","mute-command-description":"Выключить микрофон у пользователя",replyCount_few:replyCount_few,replyCount_many:replyCount_many,replyCount_one:replyCount_one$1,replyCount_other:replyCount_other$1,searchResultsCount_few:searchResultsCount_few,searchResultsCount_many:searchResultsCount_many,searchResultsCount_one:searchResultsCount_one$1,searchResultsCount_other:searchResultsCount_other$1,"this content could not be displayed":"Этот контент не может быть отображен в данный момент","unban-command-args":"[@имяпользователя]","unban-command-description":"Разблокировать пользователя","unmute-command-args":"[@имяпользователя]","unmute-command-description":"Включить микрофон у пользователя",unreadMessagesSeparatorText_few:unreadMessagesSeparatorText_few,unreadMessagesSeparatorText_many:unreadMessagesSeparatorText_many,unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one$1,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other$1,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} и {{ moreCount }} еще","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }} и {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} и {{ secondUser }}","{{ imageCount }} more":"Ещё {{ imageCount }}","{{ memberCount }} members":"{{ memberCount }} члены","{{ user }} has been muted":"Вы отписались от уведомлений от {{ user }}","{{ user }} has been unmuted":"Уведомления от {{ user }} были включены","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} в сети","{{count}} unread_few":"{{count}} непрочитанных","{{count}} unread_many":"{{count}} непрочитанных","{{count}} unread_one":"{{count}} непрочитанное","{{count}} unread_other":"{{count}} непрочитанных","🏙 Attachment...":"🏙 Вложение..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Cancel="İptal";var Close="Kapat";var Delete="Sil";var Delivered="İletildi";var Flag="Bayrak";var Menu="Menü";var Mute="Sessiz";var New="Yeni";var Pin="Toplu iğne";var Reply="Cevapla";var Search="Arama";var Send="Gönder";var Shuffle="Karıştır";var Thread$1="Konu";var Unmute="Sesini aç";var Unpin="Sabitlemeyi kaldır";var live="canlı";var replyCount_one="1 cevap";var replyCount_other="{{ count }} cevaplar";var searchResultsCount_one="1 sonuç";var searchResultsCount_other="{{ count }} sonuç";var unreadMessagesSeparatorText_one="1 okunmamış mesaj";var unreadMessagesSeparatorText_other="{{count}} okunmamış mesaj";var trTranslations = {"Attach files":"Dosya ekle",Cancel:Cancel,"Channel Missing":"Kanal bulunamıyor",Close:Close,"Close emoji picker":"Emoji seçiciyi kapat","Commands matching":"Eşleşen komutlar","Connection failure, reconnecting now...":"Bağlantı hatası, tekrar bağlanılıyor...",Delete:Delete,Delivered:Delivered,"Drag your files here":"Dosyalarınızı buraya sürükleyin","Drag your files here to add to your post":"Gönderinize eklemek için dosyalarınızı buraya sürükleyin","Edit Message":"Mesajı Düzenle","Edit message request failed":"Mesaj düzenleme isteği başarısız oldu","Emoji matching":"Emoji eşleştirme","Empty message...":"Boş mesaj...","Error adding flag":"Bayrak eklenirken hata oluştu","Error connecting to chat, refresh the page to try again.":"Bağlantı hatası, sayfayı yenileyip tekrar deneyin.","Error deleting message":"Mesaj silinirken hata oluştu","Error fetching reactions":"Reaksiyonlar alınırken hata oluştu","Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.":"Mesajı okunmamış olarak işaretleme hatası. En yeni 100 kanal mesajından daha eski okunmamış mesajları işaretleme yapılamaz.","Error muting a user ...":"Kullanıcıyı sessize alırken hata oluştu ...","Error pinning message":"Mesaj sabitlenirken hata oluştu","Error removing message pin":"Mesaj PIN'i kaldırılırken hata oluştu","Error unmuting a user ...":"Kullanıcının sesini açarken hata oluştu ...","Error uploading file":"Dosya yüklenirken hata oluştu","Error uploading image":"Resmi yüklerken hata","Error · Unsent":"Hata · Gönderilemedi","Error: {{ errorMessage }}":"Hata: {{ errorMessage }}","Failed to jump to the first unread message":"İlk okunmamış mesaja atlamada hata oluştu","Failed to mark channel as read":"Kanalı okundu olarak işaretleme başarısız oldu",Flag:Flag,"Latest Messages":"Son Mesajlar","Load more":"Daha fazla yükle","Mark as unread":"Okunmamış olarak işaretle",Menu:Menu,"Message Failed · Click to try again":"Mesaj Başarısız · Tekrar denemek için tıklayın","Message Failed · Unauthorized":"Mesaj Başarısız · Yetkisiz","Message deleted":"Mesaj silindi","Message has been successfully flagged":"Mesaj başarıyla bayraklandı","Message pinned":"Mesaj sabitlendi","Messages have been marked unread.":"Mesajlar okunmamış olarak işaretlendi.",Mute:Mute,New:New,"New Messages!":"Yeni Mesajlar!","No chats here yet…":"Henüz burada sohbet yok...","No results found":"Sonuç bulunamadı","Nothing yet...":"Şimdilik hiçbir şey...","Open emoji picker":"Emoji klavyesini aç","People matching":"Eşleşen kişiler",Pin:Pin,"Pinned by":"Sabitleyen",Reply:Reply,"Reply to Message":"Mesajı Cevapla",Search:Search,"Searching...":"Aranıyor...",Send:Send,"Send Anyway":"Neyse Gönder","Send message request failed":"Mesaj gönderme isteği başarısız oldu","Sending...":"Gönderiliyor...",Shuffle:Shuffle,"Slow Mode ON":"Yavaş Mod Açık","Some of the files will not be accepted":"Bazı dosyalar kabul edilmeyecektir","This message did not meet our content guidelines":"Bu mesaj içerik yönergelerimize uygun değil","This message was deleted...":"Bu mesaj silindi",Thread:Thread$1,"Type your message":"Mesajınızı yazın",Unmute:Unmute,Unpin:Unpin,"Unread messages":"Okunmamış mesajlar","Upload type: \"{{ type }}\" is not allowed":"Yükleme türü: \"{{ type }}\" izin verilmez","User uploaded content":"Kullanıcı tarafından yüklenen içerik","Wait until all attachments have uploaded":"Tüm ekler yüklenene kadar bekleyin","You have no channels currently":"Henüz kanalınız yok","You've reached the maximum number of files":"Maksimum dosya sayısına ulaştınız","aria/Attachment":"Bijlage","aria/Cancel Reply":"Antwoord annuleren","aria/Cancel upload":"Upload annuleren","aria/Channel list":"Kanaallijst","aria/Channel search results":"Zoekresultaten voor kanalen","aria/Close thread":"Draad sluiten","aria/Emoji picker":"Emoji kiezer","aria/File input":"Bestandsinvoer","aria/File upload":"Bestand uploaden","aria/Image input":"Afbeelding invoeren","aria/Load More Channels":"Meer kanalen laden","aria/Menu":"Menu","aria/Message Options":"Berichtopties","aria/Open Message Actions Menu":"Menu voor berichtacties openen","aria/Open Reaction Selector":"Reactiekiezer openen","aria/Open Thread":"Draad openen","aria/Reaction list":"Reactielijst","aria/Retry upload":"Upload opnieuw proberen","aria/Send":"Verzenden","ban-command-args":"[@kullanıcıadı] [metin]","ban-command-description":"Bir kullanıcıyı yasakla","giphy-command-args":"[metin]","giphy-command-description":"Rastgele bir gif'i kanala gönder",live:live,"mute-command-args":"[@kullanıcıadı]","mute-command-description":"Bir kullanıcının sesini kapat",replyCount_one:replyCount_one,replyCount_other:replyCount_other,searchResultsCount_one:searchResultsCount_one,searchResultsCount_other:searchResultsCount_other,"this content could not be displayed":"bu içerik gösterilemiyor","unban-command-args":"[@kullanıcıadı]","unban-command-description":"Bir kullanıcının yasağını kaldır","unmute-command-args":"[@kullanıcıadı]","unmute-command-description":"Bir kullanıcının sesini aç",unreadMessagesSeparatorText_one:unreadMessagesSeparatorText_one,unreadMessagesSeparatorText_other:unreadMessagesSeparatorText_other,"{{ commaSeparatedUsers }} and {{ moreCount }} more":"{{ commaSeparatedUsers }} ve {{ moreCount }} daha","{{ commaSeparatedUsers }}, and {{ lastUser }}":"{{ commaSeparatedUsers }}, ve {{ lastUser }}","{{ firstUser }} and {{ secondUser }}":"{{ firstUser }} ve {{ secondUser }}","{{ imageCount }} more":"{{ imageCount }} adet daha","{{ memberCount }} members":"{{ memberCount }} üyeler","{{ user }} has been muted":"{{ user }} sessize alındı","{{ user }} has been unmuted":"{{ user }} sesi açıldı","{{ user }} is typing...":"{{ user }} is typing...","{{ users }} and more are typing...":"{{ users }} and more are typing...","{{ users }} and {{ user }} are typing...":"{{ users }} and {{ user }} are typing...","{{ watcherCount }} online":"{{ watcherCount }} çevrimiçi","{{count}} unread_one":"{{count}} okunmamış","{{count}} unread_other":"{{count}} okunmamış","🏙 Attachment...":"🏙 Ek..."};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _typeof$2(o) {
      "@babel/helpers - typeof";

      return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
      } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
      }, _typeof$2(o);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function toPrimitive$1(t, r) {
      if ("object" != _typeof$2(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != _typeof$2(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r ? String : Number)(t);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function toPropertyKey$1(t) {
      var i = toPrimitive$1(t, "string");
      return "symbol" == _typeof$2(i) ? i : String(i);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, toPropertyKey$1(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };
      return _setPrototypeOf(o, p);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _possibleConstructorReturn(self, call) {
      if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
      return _getPrototypeOf(o);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _defineProperty$3(obj, key, value) {
      key = toPropertyKey$1(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arrayWithHoles$2(arr) {
      if (Array.isArray(arr)) return arr;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _iterableToArray$2(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _unsupportedIterableToArray$3(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _nonIterableRest$2() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _toArray(arr) {
      return _arrayWithHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableRest$2();
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var consoleLogger = {
      type: 'logger',
      log: function log(args) {
        this.output('log', args);
      },
      warn: function warn(args) {
        this.output('warn', args);
      },
      error: function error(args) {
        this.output('error', args);
      },
      output: function output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
      }
    };

    var Logger = function () {
      function Logger(concreteLogger) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Logger);

        this.init(concreteLogger, options);
      }

      _createClass(Logger, [{
        key: "init",
        value: function init(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          this.prefix = options.prefix || 'i18next:';
          this.logger = concreteLogger || consoleLogger;
          this.options = options;
          this.debug = options.debug;
        }
      }, {
        key: "setDebug",
        value: function setDebug(bool) {
          this.debug = bool;
        }
      }, {
        key: "log",
        value: function log() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return this.forward(args, 'log', '', true);
        }
      }, {
        key: "warn",
        value: function warn() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return this.forward(args, 'warn', '', true);
        }
      }, {
        key: "error",
        value: function error() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          return this.forward(args, 'error', '');
        }
      }, {
        key: "deprecate",
        value: function deprecate() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
        }
      }, {
        key: "forward",
        value: function forward(args, lvl, prefix, debugOnly) {
          if (debugOnly && !this.debug) return null;
          if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
          return this.logger[lvl](args);
        }
      }, {
        key: "create",
        value: function create(moduleName) {
          return new Logger(this.logger, _objectSpread$2(_objectSpread$2({}, {
            prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
          }), this.options));
        }
      }, {
        key: "clone",
        value: function clone(options) {
          options = options || this.options;
          options.prefix = options.prefix || this.prefix;
          return new Logger(this.logger, options);
        }
      }]);

      return Logger;
    }();

    var baseLogger = new Logger();

    var EventEmitter = function () {
      function EventEmitter() {
        _classCallCheck(this, EventEmitter);

        this.observers = {};
      }

      _createClass(EventEmitter, [{
        key: "on",
        value: function on(events, listener) {
          var _this = this;

          events.split(' ').forEach(function (event) {
            _this.observers[event] = _this.observers[event] || [];

            _this.observers[event].push(listener);
          });
          return this;
        }
      }, {
        key: "off",
        value: function off(event, listener) {
          if (!this.observers[event]) return;

          if (!listener) {
            delete this.observers[event];
            return;
          }

          this.observers[event] = this.observers[event].filter(function (l) {
            return l !== listener;
          });
        }
      }, {
        key: "emit",
        value: function emit(event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (this.observers[event]) {
            var cloned = [].concat(this.observers[event]);
            cloned.forEach(function (observer) {
              observer.apply(void 0, args);
            });
          }

          if (this.observers['*']) {
            var _cloned = [].concat(this.observers['*']);

            _cloned.forEach(function (observer) {
              observer.apply(observer, [event].concat(args));
            });
          }
        }
      }]);

      return EventEmitter;
    }();

    function defer() {
      var res;
      var rej;
      var promise = new Promise(function (resolve, reject) {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    function makeString(object) {
      if (object == null) return '';
      return '' + object;
    }
    function copy$1(a, s, t) {
      a.forEach(function (m) {
        if (s[m]) t[m] = s[m];
      });
    }

    function getLastOfPath(object, path, Empty) {
      function cleanKey(key) {
        return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
      }

      function canNotTraverseDeeper() {
        return !object || typeof object === 'string';
      }

      var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

      while (stack.length > 1) {
        if (canNotTraverseDeeper()) return {};
        var key = cleanKey(stack.shift());
        if (!object[key] && Empty) object[key] = new Empty();

        if (Object.prototype.hasOwnProperty.call(object, key)) {
          object = object[key];
        } else {
          object = {};
        }
      }

      if (canNotTraverseDeeper()) return {};
      return {
        obj: object,
        k: cleanKey(stack.shift())
      };
    }

    function setPath$1(object, path, newValue) {
      var _getLastOfPath = getLastOfPath(object, path, Object),
          obj = _getLastOfPath.obj,
          k = _getLastOfPath.k;

      obj[k] = newValue;
    }
    function pushPath(object, path, newValue, concat) {
      var _getLastOfPath2 = getLastOfPath(object, path, Object),
          obj = _getLastOfPath2.obj,
          k = _getLastOfPath2.k;

      obj[k] = obj[k] || [];
      if (concat) obj[k] = obj[k].concat(newValue);
      if (!concat) obj[k].push(newValue);
    }
    function getPath$1(object, path) {
      var _getLastOfPath3 = getLastOfPath(object, path),
          obj = _getLastOfPath3.obj,
          k = _getLastOfPath3.k;

      if (!obj) return undefined;
      return obj[k];
    }
    function getPathWithDefaults(data, defaultData, key) {
      var value = getPath$1(data, key);

      if (value !== undefined) {
        return value;
      }

      return getPath$1(defaultData, key);
    }
    function deepExtend(target, source, overwrite) {
      for (var prop in source) {
        if (prop !== '__proto__' && prop !== 'constructor') {
          if (prop in target) {
            if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
              if (overwrite) target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }

      return target;
    }
    function regexEscape(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    }
    var _entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;'
    };
    function escape(data) {
      if (typeof data === 'string') {
        return data.replace(/[&<>"'\/]/g, function (s) {
          return _entityMap[s];
        });
      }

      return data;
    }
    var isIE10 = typeof window !== 'undefined' && window.navigator && typeof window.navigator.userAgentData === 'undefined' && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
    var chars = [' ', ',', '?', '!', ';'];
    function looksLikeObjectPath(key, nsSeparator, keySeparator) {
      nsSeparator = nsSeparator || '';
      keySeparator = keySeparator || '';
      var possibleChars = chars.filter(function (c) {
        return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
      });
      if (possibleChars.length === 0) return true;
      var r = new RegExp("(".concat(possibleChars.map(function (c) {
        return c === '?' ? '\\?' : c;
      }).join('|'), ")"));
      var matched = !r.test(key);

      if (!matched) {
        var ki = key.indexOf(keySeparator);

        if (ki > 0 && !r.test(key.substring(0, ki))) {
          matched = true;
        }
      }

      return matched;
    }

    function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function deepFind(obj, path) {
      var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
      if (!obj) return undefined;
      if (obj[path]) return obj[path];
      var paths = path.split(keySeparator);
      var current = obj;

      for (var i = 0; i < paths.length; ++i) {
        if (!current) return undefined;

        if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
          return undefined;
        }

        if (current[paths[i]] === undefined) {
          var j = 2;
          var p = paths.slice(i, i + j).join(keySeparator);
          var mix = current[p];

          while (mix === undefined && paths.length > i + j) {
            j++;
            p = paths.slice(i, i + j).join(keySeparator);
            mix = current[p];
          }

          if (mix === undefined) return undefined;
          if (mix === null) return null;

          if (path.endsWith(p)) {
            if (typeof mix === 'string') return mix;
            if (p && typeof mix[p] === 'string') return mix[p];
          }

          var joinedPath = paths.slice(i + j).join(keySeparator);
          if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
          return undefined;
        }

        current = current[paths[i]];
      }

      return current;
    }

    var ResourceStore = function (_EventEmitter) {
      _inherits(ResourceStore, _EventEmitter);

      var _super = _createSuper(ResourceStore);

      function ResourceStore(data) {
        var _this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          ns: ['translation'],
          defaultNS: 'translation'
        };

        _classCallCheck(this, ResourceStore);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized(_this));
        }

        _this.data = data || {};
        _this.options = options;

        if (_this.options.keySeparator === undefined) {
          _this.options.keySeparator = '.';
        }

        if (_this.options.ignoreJSONStructure === undefined) {
          _this.options.ignoreJSONStructure = true;
        }

        return _this;
      }

      _createClass(ResourceStore, [{
        key: "addNamespaces",
        value: function addNamespaces(ns) {
          if (this.options.ns.indexOf(ns) < 0) {
            this.options.ns.push(ns);
          }
        }
      }, {
        key: "removeNamespaces",
        value: function removeNamespaces(ns) {
          var index = this.options.ns.indexOf(ns);

          if (index > -1) {
            this.options.ns.splice(index, 1);
          }
        }
      }, {
        key: "getResource",
        value: function getResource(lng, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
          var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
          var path = [lng, ns];
          if (key && typeof key !== 'string') path = path.concat(key);
          if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
          }

          var result = getPath$1(this.data, path);
          if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
          return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
        }
      }, {
        key: "addResource",
        value: function addResource(lng, ns, key, value) {
          var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
            silent: false
          };
          var keySeparator = this.options.keySeparator;
          if (keySeparator === undefined) keySeparator = '.';
          var path = [lng, ns];
          if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
            value = ns;
            ns = path[1];
          }

          this.addNamespaces(ns);
          setPath$1(this.data, path, value);
          if (!options.silent) this.emit('added', lng, ns, key, value);
        }
      }, {
        key: "addResources",
        value: function addResources(lng, ns, resources) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
            silent: false
          };

          for (var m in resources) {
            if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
              silent: true
            });
          }

          if (!options.silent) this.emit('added', lng, ns, resources);
        }
      }, {
        key: "addResourceBundle",
        value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
          var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
            silent: false
          };
          var path = [lng, ns];

          if (lng.indexOf('.') > -1) {
            path = lng.split('.');
            deep = resources;
            resources = ns;
            ns = path[1];
          }

          this.addNamespaces(ns);
          var pack = getPath$1(this.data, path) || {};

          if (deep) {
            deepExtend(pack, resources, overwrite);
          } else {
            pack = _objectSpread$1$1(_objectSpread$1$1({}, pack), resources);
          }

          setPath$1(this.data, path, pack);
          if (!options.silent) this.emit('added', lng, ns, resources);
        }
      }, {
        key: "removeResourceBundle",
        value: function removeResourceBundle(lng, ns) {
          if (this.hasResourceBundle(lng, ns)) {
            delete this.data[lng][ns];
          }

          this.removeNamespaces(ns);
          this.emit('removed', lng, ns);
        }
      }, {
        key: "hasResourceBundle",
        value: function hasResourceBundle(lng, ns) {
          return this.getResource(lng, ns) !== undefined;
        }
      }, {
        key: "getResourceBundle",
        value: function getResourceBundle(lng, ns) {
          if (!ns) ns = this.options.defaultNS;
          if (this.options.compatibilityAPI === 'v1') return _objectSpread$1$1(_objectSpread$1$1({}, {}), this.getResource(lng, ns));
          return this.getResource(lng, ns);
        }
      }, {
        key: "getDataByLanguage",
        value: function getDataByLanguage(lng) {
          return this.data[lng];
        }
      }, {
        key: "hasLanguageSomeTranslations",
        value: function hasLanguageSomeTranslations(lng) {
          var data = this.getDataByLanguage(lng);
          var n = data && Object.keys(data) || [];
          return !!n.find(function (v) {
            return data[v] && Object.keys(data[v]).length > 0;
          });
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return this.data;
        }
      }]);

      return ResourceStore;
    }(EventEmitter);

    var postProcessor = {
      processors: {},
      addPostProcessor: function addPostProcessor(module) {
        this.processors[module.name] = module;
      },
      handle: function handle(processors, value, key, options, translator) {
        var _this = this;

        processors.forEach(function (processor) {
          if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
        });
        return value;
      }
    };

    function ownKeys$2$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
    var checkedLoadedFor = {};

    var Translator = function (_EventEmitter) {
      _inherits(Translator, _EventEmitter);

      var _super = _createSuper$1(Translator);

      function Translator(services) {
        var _this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, Translator);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized(_this));
        }

        copy$1(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
        _this.options = options;

        if (_this.options.keySeparator === undefined) {
          _this.options.keySeparator = '.';
        }

        _this.logger = baseLogger.create('translator');
        return _this;
      }

      _createClass(Translator, [{
        key: "changeLanguage",
        value: function changeLanguage(lng) {
          if (lng) this.language = lng;
        }
      }, {
        key: "exists",
        value: function exists(key) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            interpolation: {}
          };

          if (key === undefined || key === null) {
            return false;
          }

          var resolved = this.resolve(key, options);
          return resolved && resolved.res !== undefined;
        }
      }, {
        key: "extractFromKey",
        value: function extractFromKey(key, options) {
          var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
          if (nsSeparator === undefined) nsSeparator = ':';
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
          var namespaces = options.ns || this.options.defaultNS || [];
          var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
          var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);

          if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
            var m = key.match(this.interpolator.nestingRegexp);

            if (m && m.length > 0) {
              return {
                key: key,
                namespaces: namespaces
              };
            }

            var parts = key.split(nsSeparator);
            if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
            key = parts.join(keySeparator);
          }

          if (typeof namespaces === 'string') namespaces = [namespaces];
          return {
            key: key,
            namespaces: namespaces
          };
        }
      }, {
        key: "translate",
        value: function translate(keys, options, lastKey) {
          var _this2 = this;

          if (_typeof$2(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
            options = this.options.overloadTranslationOptionHandler(arguments);
          }

          if (!options) options = {};
          if (keys === undefined || keys === null) return '';
          if (!Array.isArray(keys)) keys = [String(keys)];
          var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
          var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

          var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
              key = _this$extractFromKey.key,
              namespaces = _this$extractFromKey.namespaces;

          var namespace = namespaces[namespaces.length - 1];
          var lng = options.lng || this.language;
          var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

          if (lng && lng.toLowerCase() === 'cimode') {
            if (appendNamespaceToCIMode) {
              var nsSeparator = options.nsSeparator || this.options.nsSeparator;

              if (returnDetails) {
                resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
                return resolved;
              }

              return "".concat(namespace).concat(nsSeparator).concat(key);
            }

            if (returnDetails) {
              resolved.res = key;
              return resolved;
            }

            return key;
          }

          var resolved = this.resolve(keys, options);
          var res = resolved && resolved.res;
          var resUsedKey = resolved && resolved.usedKey || key;
          var resExactUsedKey = resolved && resolved.exactUsedKey || key;
          var resType = Object.prototype.toString.apply(res);
          var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
          var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
          var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
          var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

          if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
            if (!options.returnObjects && !this.options.returnObjects) {
              if (!this.options.returnedObjectHandler) {
                this.logger.warn('accessing an object - but returnObjects options is not enabled!');
              }

              var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                ns: namespaces
              })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");

              if (returnDetails) {
                resolved.res = r;
                return resolved;
              }

              return r;
            }

            if (keySeparator) {
              var resTypeIsArray = resType === '[object Array]';
              var copy = resTypeIsArray ? [] : {};
              var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

              for (var m in res) {
                if (Object.prototype.hasOwnProperty.call(res, m)) {
                  var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                  copy[m] = this.translate(deepKey, _objectSpread$2$1(_objectSpread$2$1({}, options), {
                    joinArrays: false,
                    ns: namespaces
                  }));
                  if (copy[m] === deepKey) copy[m] = res[m];
                }
              }

              res = copy;
            }
          } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
            res = res.join(joinArrays);
            if (res) res = this.extendTranslation(res, keys, options, lastKey);
          } else {
            var usedDefault = false;
            var usedKey = false;
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
            var hasDefaultValue = Translator.hasDefaultValue(options);
            var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
            var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;

            if (!this.isValidLookup(res) && hasDefaultValue) {
              usedDefault = true;
              res = defaultValue;
            }

            if (!this.isValidLookup(res)) {
              usedKey = true;
              res = key;
            }

            var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
            var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
            var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;

            if (usedKey || usedDefault || updateMissing) {
              this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);

              if (keySeparator) {
                var fk = this.resolve(key, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                  keySeparator: false
                }));
                if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
              }

              var lngs = [];
              var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

              if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                for (var i = 0; i < fallbackLngs.length; i++) {
                  lngs.push(fallbackLngs[i]);
                }
              } else if (this.options.saveMissingTo === 'all') {
                lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
              } else {
                lngs.push(options.lng || this.language);
              }

              var send = function send(l, k, specificDefaultValue) {
                var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;

                if (_this2.options.missingKeyHandler) {
                  _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
                } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                  _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
                }

                _this2.emit('missingKey', l, namespace, k, res);
              };

              if (this.options.saveMissing) {
                if (this.options.saveMissingPlurals && needsPluralHandling) {
                  lngs.forEach(function (language) {
                    _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                      send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                    });
                  });
                } else {
                  send(lngs, key, defaultValue);
                }
              }
            }

            res = this.extendTranslation(res, keys, options, resolved, lastKey);
            if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);

            if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
              if (this.options.compatibilityAPI !== 'v1') {
                res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : undefined);
              } else {
                res = this.options.parseMissingKeyHandler(res);
              }
            }
          }

          if (returnDetails) {
            resolved.res = res;
            return resolved;
          }

          return res;
        }
      }, {
        key: "extendTranslation",
        value: function extendTranslation(res, key, options, resolved, lastKey) {
          var _this3 = this;

          if (this.i18nFormat && this.i18nFormat.parse) {
            res = this.i18nFormat.parse(res, _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
              resolved: resolved
            });
          } else if (!options.skipInterpolation) {
            if (options.interpolation) this.interpolator.init(_objectSpread$2$1(_objectSpread$2$1({}, options), {
              interpolation: _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation), options.interpolation)
            }));
            var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
            var nestBef;

            if (skipOnVariables) {
              var nb = res.match(this.interpolator.nestingRegexp);
              nestBef = nb && nb.length;
            }

            var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
            if (this.options.interpolation.defaultVariables) data = _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation.defaultVariables), data);
            res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

            if (skipOnVariables) {
              var na = res.match(this.interpolator.nestingRegexp);
              var nestAft = na && na.length;
              if (nestBef < nestAft) options.nest = false;
            }

            if (options.nest !== false) res = this.interpolator.nest(res, function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              if (lastKey && lastKey[0] === args[0] && !options.context) {
                _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

                return null;
              }

              return _this3.translate.apply(_this3, args.concat([key]));
            }, options);
            if (options.interpolation) this.interpolator.reset();
          }

          var postProcess = options.postProcess || this.options.postProcess;
          var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

          if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
            res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2$1({
              i18nResolved: resolved
            }, options) : options, this);
          }

          return res;
        }
      }, {
        key: "resolve",
        value: function resolve(keys) {
          var _this4 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var found;
          var usedKey;
          var exactUsedKey;
          var usedLng;
          var usedNS;
          if (typeof keys === 'string') keys = [keys];
          keys.forEach(function (k) {
            if (_this4.isValidLookup(found)) return;

            var extracted = _this4.extractFromKey(k, options);

            var key = extracted.key;
            usedKey = key;
            var namespaces = extracted.namespaces;
            if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

            var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();

            var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
            var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
            namespaces.forEach(function (ns) {
              if (_this4.isValidLookup(found)) return;
              usedNS = ns;

              if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

                _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
              }

              codes.forEach(function (code) {
                if (_this4.isValidLookup(found)) return;
                usedLng = code;
                var finalKeys = [key];

                if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                  _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                } else {
                  var pluralSuffix;
                  if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                  var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");

                  if (needsPluralHandling) {
                    finalKeys.push(key + pluralSuffix);

                    if (needsZeroSuffixLookup) {
                      finalKeys.push(key + zeroSuffix);
                    }
                  }

                  if (needsContextHandling) {
                    var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                    finalKeys.push(contextKey);

                    if (needsPluralHandling) {
                      finalKeys.push(contextKey + pluralSuffix);

                      if (needsZeroSuffixLookup) {
                        finalKeys.push(contextKey + zeroSuffix);
                      }
                    }
                  }
                }

                var possibleKey;

                while (possibleKey = finalKeys.pop()) {
                  if (!_this4.isValidLookup(found)) {
                    exactUsedKey = possibleKey;
                    found = _this4.getResource(code, ns, possibleKey, options);
                  }
                }
              });
            });
          });
          return {
            res: found,
            usedKey: usedKey,
            exactUsedKey: exactUsedKey,
            usedLng: usedLng,
            usedNS: usedNS
          };
        }
      }, {
        key: "isValidLookup",
        value: function isValidLookup(res) {
          return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
        }
      }, {
        key: "getResource",
        value: function getResource(code, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
          return this.resourceStore.getResource(code, ns, key, options);
        }
      }], [{
        key: "hasDefaultValue",
        value: function hasDefaultValue(options) {
          var prefix = 'defaultValue';

          for (var option in options) {
            if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
              return true;
            }
          }

          return false;
        }
      }]);

      return Translator;
    }(EventEmitter);

    function capitalize(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    var LanguageUtil = function () {
      function LanguageUtil(options) {
        _classCallCheck(this, LanguageUtil);

        this.options = options;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create('languageUtils');
      }

      _createClass(LanguageUtil, [{
        key: "getScriptPartFromCode",
        value: function getScriptPartFromCode(code) {
          if (!code || code.indexOf('-') < 0) return null;
          var p = code.split('-');
          if (p.length === 2) return null;
          p.pop();
          if (p[p.length - 1].toLowerCase() === 'x') return null;
          return this.formatLanguageCode(p.join('-'));
        }
      }, {
        key: "getLanguagePartFromCode",
        value: function getLanguagePartFromCode(code) {
          if (!code || code.indexOf('-') < 0) return code;
          var p = code.split('-');
          return this.formatLanguageCode(p[0]);
        }
      }, {
        key: "formatLanguageCode",
        value: function formatLanguageCode(code) {
          if (typeof code === 'string' && code.indexOf('-') > -1) {
            var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
            var p = code.split('-');

            if (this.options.lowerCaseLng) {
              p = p.map(function (part) {
                return part.toLowerCase();
              });
            } else if (p.length === 2) {
              p[0] = p[0].toLowerCase();
              p[1] = p[1].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
            } else if (p.length === 3) {
              p[0] = p[0].toLowerCase();
              if (p[1].length === 2) p[1] = p[1].toUpperCase();
              if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
              if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
            }

            return p.join('-');
          }

          return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
        }
      }, {
        key: "isSupportedCode",
        value: function isSupportedCode(code) {
          if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
            code = this.getLanguagePartFromCode(code);
          }

          return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
        }
      }, {
        key: "getBestMatchFromCodes",
        value: function getBestMatchFromCodes(codes) {
          var _this = this;

          if (!codes) return null;
          var found;
          codes.forEach(function (code) {
            if (found) return;

            var cleanedLng = _this.formatLanguageCode(code);

            if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
          });

          if (!found && this.options.supportedLngs) {
            codes.forEach(function (code) {
              if (found) return;

              var lngOnly = _this.getLanguagePartFromCode(code);

              if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
              found = _this.options.supportedLngs.find(function (supportedLng) {
                if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
              });
            });
          }

          if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
          return found;
        }
      }, {
        key: "getFallbackCodes",
        value: function getFallbackCodes(fallbacks, code) {
          if (!fallbacks) return [];
          if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
          if (typeof fallbacks === 'string') fallbacks = [fallbacks];
          if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
          if (!code) return fallbacks["default"] || [];
          var found = fallbacks[code];
          if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
          if (!found) found = fallbacks[this.formatLanguageCode(code)];
          if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
          if (!found) found = fallbacks["default"];
          return found || [];
        }
      }, {
        key: "toResolveHierarchy",
        value: function toResolveHierarchy(code, fallbackCode) {
          var _this2 = this;

          var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
          var codes = [];

          var addCode = function addCode(c) {
            if (!c) return;

            if (_this2.isSupportedCode(c)) {
              codes.push(c);
            } else {
              _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
            }
          };

          if (typeof code === 'string' && code.indexOf('-') > -1) {
            if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
            if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
            if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
          } else if (typeof code === 'string') {
            addCode(this.formatLanguageCode(code));
          }

          fallbackCodes.forEach(function (fc) {
            if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
          });
          return codes;
        }
      }]);

      return LanguageUtil;
    }();

    var sets = [{
      lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
      nr: [1, 2],
      fc: 1
    }, {
      lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
      nr: [1, 2],
      fc: 2
    }, {
      lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
      nr: [1],
      fc: 3
    }, {
      lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
      nr: [1, 2, 5],
      fc: 4
    }, {
      lngs: ['ar'],
      nr: [0, 1, 2, 3, 11, 100],
      fc: 5
    }, {
      lngs: ['cs', 'sk'],
      nr: [1, 2, 5],
      fc: 6
    }, {
      lngs: ['csb', 'pl'],
      nr: [1, 2, 5],
      fc: 7
    }, {
      lngs: ['cy'],
      nr: [1, 2, 3, 8],
      fc: 8
    }, {
      lngs: ['fr'],
      nr: [1, 2],
      fc: 9
    }, {
      lngs: ['ga'],
      nr: [1, 2, 3, 7, 11],
      fc: 10
    }, {
      lngs: ['gd'],
      nr: [1, 2, 3, 20],
      fc: 11
    }, {
      lngs: ['is'],
      nr: [1, 2],
      fc: 12
    }, {
      lngs: ['jv'],
      nr: [0, 1],
      fc: 13
    }, {
      lngs: ['kw'],
      nr: [1, 2, 3, 4],
      fc: 14
    }, {
      lngs: ['lt'],
      nr: [1, 2, 10],
      fc: 15
    }, {
      lngs: ['lv'],
      nr: [1, 2, 0],
      fc: 16
    }, {
      lngs: ['mk'],
      nr: [1, 2],
      fc: 17
    }, {
      lngs: ['mnk'],
      nr: [0, 1, 2],
      fc: 18
    }, {
      lngs: ['mt'],
      nr: [1, 2, 11, 20],
      fc: 19
    }, {
      lngs: ['or'],
      nr: [2, 1],
      fc: 2
    }, {
      lngs: ['ro'],
      nr: [1, 2, 20],
      fc: 20
    }, {
      lngs: ['sl'],
      nr: [5, 1, 2, 3],
      fc: 21
    }, {
      lngs: ['he', 'iw'],
      nr: [1, 2, 20, 21],
      fc: 22
    }];
    var _rulesPluralsTypes = {
      1: function _(n) {
        return Number(n > 1);
      },
      2: function _(n) {
        return Number(n != 1);
      },
      3: function _(n) {
        return 0;
      },
      4: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      5: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
      },
      6: function _(n) {
        return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
      },
      7: function _(n) {
        return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      8: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
      },
      9: function _(n) {
        return Number(n >= 2);
      },
      10: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
      },
      11: function _(n) {
        return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
      },
      12: function _(n) {
        return Number(n % 10 != 1 || n % 100 == 11);
      },
      13: function _(n) {
        return Number(n !== 0);
      },
      14: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
      },
      15: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
      },
      16: function _(n) {
        return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
      },
      17: function _(n) {
        return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
      },
      18: function _(n) {
        return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
      },
      19: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
      },
      20: function _(n) {
        return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
      },
      21: function _(n) {
        return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
      },
      22: function _(n) {
        return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
      }
    };
    var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
    var suffixesOrder = {
      zero: 0,
      one: 1,
      two: 2,
      few: 3,
      many: 4,
      other: 5
    };

    function createRules() {
      var rules = {};
      sets.forEach(function (set) {
        set.lngs.forEach(function (l) {
          rules[l] = {
            numbers: set.nr,
            plurals: _rulesPluralsTypes[set.fc]
          };
        });
      });
      return rules;
    }

    var PluralResolver = function () {
      function PluralResolver(languageUtils) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, PluralResolver);

        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create('pluralResolver');

        if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
          this.options.compatibilityJSON = 'v3';
          this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
        }

        this.rules = createRules();
      }

      _createClass(PluralResolver, [{
        key: "addRule",
        value: function addRule(lng, obj) {
          this.rules[lng] = obj;
        }
      }, {
        key: "getRule",
        value: function getRule(code) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (this.shouldUseIntlApi()) {
            try {
              return new Intl.PluralRules(code, {
                type: options.ordinal ? 'ordinal' : 'cardinal'
              });
            } catch (_unused) {
              return;
            }
          }

          return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
        }
      }, {
        key: "needsPlural",
        value: function needsPlural(code) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var rule = this.getRule(code, options);

          if (this.shouldUseIntlApi()) {
            return rule && rule.resolvedOptions().pluralCategories.length > 1;
          }

          return rule && rule.numbers.length > 1;
        }
      }, {
        key: "getPluralFormsOfKey",
        value: function getPluralFormsOfKey(code, key) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          return this.getSuffixes(code, options).map(function (suffix) {
            return "".concat(key).concat(suffix);
          });
        }
      }, {
        key: "getSuffixes",
        value: function getSuffixes(code) {
          var _this = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var rule = this.getRule(code, options);

          if (!rule) {
            return [];
          }

          if (this.shouldUseIntlApi()) {
            return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
              return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
            }).map(function (pluralCategory) {
              return "".concat(_this.options.prepend).concat(pluralCategory);
            });
          }

          return rule.numbers.map(function (number) {
            return _this.getSuffix(code, number, options);
          });
        }
      }, {
        key: "getSuffix",
        value: function getSuffix(code, count) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var rule = this.getRule(code, options);

          if (rule) {
            if (this.shouldUseIntlApi()) {
              return "".concat(this.options.prepend).concat(rule.select(count));
            }

            return this.getSuffixRetroCompatible(rule, count);
          }

          this.logger.warn("no plural rule found for: ".concat(code));
          return '';
        }
      }, {
        key: "getSuffixRetroCompatible",
        value: function getSuffixRetroCompatible(rule, count) {
          var _this2 = this;

          var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
          var suffix = rule.numbers[idx];

          if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            if (suffix === 2) {
              suffix = 'plural';
            } else if (suffix === 1) {
              suffix = '';
            }
          }

          var returnSuffix = function returnSuffix() {
            return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
          };

          if (this.options.compatibilityJSON === 'v1') {
            if (suffix === 1) return '';
            if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
            return returnSuffix();
          } else if (this.options.compatibilityJSON === 'v2') {
            return returnSuffix();
          } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
            return returnSuffix();
          }

          return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
        }
      }, {
        key: "shouldUseIntlApi",
        value: function shouldUseIntlApi() {
          return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
        }
      }]);

      return PluralResolver;
    }();

    function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    var Interpolator = function () {
      function Interpolator() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Interpolator);

        this.logger = baseLogger.create('interpolator');
        this.options = options;

        this.format = options.interpolation && options.interpolation.format || function (value) {
          return value;
        };

        this.init(options);
      }

      _createClass(Interpolator, [{
        key: "init",
        value: function init() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          if (!options.interpolation) options.interpolation = {
            escapeValue: true
          };
          var iOpts = options.interpolation;
          this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
          this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
          this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
          this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
          this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
          this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
          this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
          this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
          this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
          this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
          this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
          this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
          this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
          this.resetRegExp();
        }
      }, {
        key: "reset",
        value: function reset() {
          if (this.options) this.init(this.options);
        }
      }, {
        key: "resetRegExp",
        value: function resetRegExp() {
          var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
          this.regexp = new RegExp(regexpStr, 'g');
          var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
          this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
          var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
          this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
        }
      }, {
        key: "interpolate",
        value: function interpolate(str, data, lng, options) {
          var _this = this;

          var match;
          var value;
          var replaces;
          var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

          function regexSafe(val) {
            return val.replace(/\$/g, '$$$$');
          }

          var handleFormat = function handleFormat(key) {
            if (key.indexOf(_this.formatSeparator) < 0) {
              var path = getPathWithDefaults(data, defaultData, key);
              return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                interpolationkey: key
              })) : path;
            }

            var p = key.split(_this.formatSeparator);
            var k = p.shift().trim();
            var f = p.join(_this.formatSeparator).trim();
            return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
              interpolationkey: k
            }));
          };

          this.resetRegExp();
          var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
          var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
          var todos = [{
            regex: this.regexpUnescape,
            safeValue: function safeValue(val) {
              return regexSafe(val);
            }
          }, {
            regex: this.regexp,
            safeValue: function safeValue(val) {
              return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
            }
          }];
          todos.forEach(function (todo) {
            replaces = 0;

            while (match = todo.regex.exec(str)) {
              var matchedVar = match[1].trim();
              value = handleFormat(matchedVar);

              if (value === undefined) {
                if (typeof missingInterpolationHandler === 'function') {
                  var temp = missingInterpolationHandler(str, match, options);
                  value = typeof temp === 'string' ? temp : '';
                } else if (options && options.hasOwnProperty(matchedVar)) {
                  value = '';
                } else if (skipOnVariables) {
                  value = match[0];
                  continue;
                } else {
                  _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));

                  value = '';
                }
              } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
                value = makeString(value);
              }

              var safeValue = todo.safeValue(value);
              str = str.replace(match[0], safeValue);

              if (skipOnVariables) {
                todo.regex.lastIndex += value.length;
                todo.regex.lastIndex -= match[0].length;
              } else {
                todo.regex.lastIndex = 0;
              }

              replaces++;

              if (replaces >= _this.maxReplaces) {
                break;
              }
            }
          });
          return str;
        }
      }, {
        key: "nest",
        value: function nest(str, fc) {
          var _this2 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var match;
          var value;

          var clonedOptions = _objectSpread$3({}, options);

          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;

          function handleHasOptions(key, inheritedOptions) {
            var sep = this.nestingOptionsSeparator;
            if (key.indexOf(sep) < 0) return key;
            var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
            var optionsString = "{".concat(c[1]);
            key = c[0];
            optionsString = this.interpolate(optionsString, clonedOptions);
            var matchedSingleQuotes = optionsString.match(/'/g);
            var matchedDoubleQuotes = optionsString.match(/"/g);

            if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
              optionsString = optionsString.replace(/'/g, '"');
            }

            try {
              clonedOptions = JSON.parse(optionsString);
              if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
            } catch (e) {
              this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
              return "".concat(key).concat(sep).concat(optionsString);
            }

            delete clonedOptions.defaultValue;
            return key;
          }

          while (match = this.nestingRegexp.exec(str)) {
            var formatters = [];
            var doReduce = false;

            if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
              var r = match[1].split(this.formatSeparator).map(function (elem) {
                return elem.trim();
              });
              match[1] = r.shift();
              formatters = r;
              doReduce = true;
            }

            value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
            if (value && match[0] === str && typeof value !== 'string') return value;
            if (typeof value !== 'string') value = makeString(value);

            if (!value) {
              this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
              value = '';
            }

            if (doReduce) {
              value = formatters.reduce(function (v, f) {
                return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                  interpolationkey: match[1].trim()
                }));
              }, value.trim());
            }

            str = str.replace(match[0], value);
            this.regexp.lastIndex = 0;
          }

          return str;
        }
      }]);

      return Interpolator;
    }();

    function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function parseFormatStr(formatStr) {
      var formatName = formatStr.toLowerCase().trim();
      var formatOptions = {};

      if (formatStr.indexOf('(') > -1) {
        var p = formatStr.split('(');
        formatName = p[0].toLowerCase().trim();
        var optStr = p[1].substring(0, p[1].length - 1);

        if (formatName === 'currency' && optStr.indexOf(':') < 0) {
          if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
          if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
          var opts = optStr.split(';');
          opts.forEach(function (opt) {
            if (!opt) return;

            var _opt$split = opt.split(':'),
                _opt$split2 = _toArray(_opt$split),
                key = _opt$split2[0],
                rest = _opt$split2.slice(1);

            var val = rest.join(':').trim().replace(/^'+|'+$/g, '');
            if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
            if (val === 'false') formatOptions[key.trim()] = false;
            if (val === 'true') formatOptions[key.trim()] = true;
            if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
          });
        }
      }

      return {
        formatName: formatName,
        formatOptions: formatOptions
      };
    }

    function createCachedFormatter(fn) {
      var cache = {};
      return function invokeFormatter(val, lng, options) {
        var key = lng + JSON.stringify(options);
        var formatter = cache[key];

        if (!formatter) {
          formatter = fn(lng, options);
          cache[key] = formatter;
        }

        return formatter(val);
      };
    }

    var Formatter = function () {
      function Formatter() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Formatter);

        this.logger = baseLogger.create('formatter');
        this.options = options;
        this.formats = {
          number: createCachedFormatter(function (lng, options) {
            var formatter = new Intl.NumberFormat(lng, options);
            return function (val) {
              return formatter.format(val);
            };
          }),
          currency: createCachedFormatter(function (lng, options) {
            var formatter = new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options), {}, {
              style: 'currency'
            }));
            return function (val) {
              return formatter.format(val);
            };
          }),
          datetime: createCachedFormatter(function (lng, options) {
            var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4({}, options));
            return function (val) {
              return formatter.format(val);
            };
          }),
          relativetime: createCachedFormatter(function (lng, options) {
            var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options));
            return function (val) {
              return formatter.format(val, options.range || 'day');
            };
          }),
          list: createCachedFormatter(function (lng, options) {
            var formatter = new Intl.ListFormat(lng, _objectSpread$4({}, options));
            return function (val) {
              return formatter.format(val);
            };
          })
        };
        this.init(options);
      }

      _createClass(Formatter, [{
        key: "init",
        value: function init(services) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            interpolation: {}
          };
          var iOpts = options.interpolation;
          this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
        }
      }, {
        key: "add",
        value: function add(name, fc) {
          this.formats[name.toLowerCase().trim()] = fc;
        }
      }, {
        key: "addCached",
        value: function addCached(name, fc) {
          this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
        }
      }, {
        key: "format",
        value: function format(value, _format, lng, options) {
          var _this = this;

          var formats = _format.split(this.formatSeparator);

          var result = formats.reduce(function (mem, f) {
            var _parseFormatStr = parseFormatStr(f),
                formatName = _parseFormatStr.formatName,
                formatOptions = _parseFormatStr.formatOptions;

            if (_this.formats[formatName]) {
              var formatted = mem;

              try {
                var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
              } catch (error) {
                _this.logger.warn(error);
              }

              return formatted;
            } else {
              _this.logger.warn("there was no format function for ".concat(formatName));
            }

            return mem;
          }, value);
          return result;
        }
      }]);

      return Formatter;
    }();

    function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function removePending(q, name) {
      if (q.pending[name] !== undefined) {
        delete q.pending[name];
        q.pendingCount--;
      }
    }

    var Connector = function (_EventEmitter) {
      _inherits(Connector, _EventEmitter);

      var _super = _createSuper$2(Connector);

      function Connector(backend, store, services) {
        var _this;

        var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        _classCallCheck(this, Connector);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized(_this));
        }

        _this.backend = backend;
        _this.store = store;
        _this.services = services;
        _this.languageUtils = services.languageUtils;
        _this.options = options;
        _this.logger = baseLogger.create('backendConnector');
        _this.waitingReads = [];
        _this.maxParallelReads = options.maxParallelReads || 10;
        _this.readingCalls = 0;
        _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
        _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
        _this.state = {};
        _this.queue = [];

        if (_this.backend && _this.backend.init) {
          _this.backend.init(services, options.backend, options);
        }

        return _this;
      }

      _createClass(Connector, [{
        key: "queueLoad",
        value: function queueLoad(languages, namespaces, options, callback) {
          var _this2 = this;

          var toLoad = {};
          var pending = {};
          var toLoadLanguages = {};
          var toLoadNamespaces = {};
          languages.forEach(function (lng) {
            var hasAllNamespaces = true;
            namespaces.forEach(function (ns) {
              var name = "".concat(lng, "|").concat(ns);

              if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                _this2.state[name] = 2;
              } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
                if (pending[name] === undefined) pending[name] = true;
              } else {
                _this2.state[name] = 1;
                hasAllNamespaces = false;
                if (pending[name] === undefined) pending[name] = true;
                if (toLoad[name] === undefined) toLoad[name] = true;
                if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
              }
            });
            if (!hasAllNamespaces) toLoadLanguages[lng] = true;
          });

          if (Object.keys(toLoad).length || Object.keys(pending).length) {
            this.queue.push({
              pending: pending,
              pendingCount: Object.keys(pending).length,
              loaded: {},
              errors: [],
              callback: callback
            });
          }

          return {
            toLoad: Object.keys(toLoad),
            pending: Object.keys(pending),
            toLoadLanguages: Object.keys(toLoadLanguages),
            toLoadNamespaces: Object.keys(toLoadNamespaces)
          };
        }
      }, {
        key: "loaded",
        value: function loaded(name, err, data) {
          var s = name.split('|');
          var lng = s[0];
          var ns = s[1];
          if (err) this.emit('failedLoading', lng, ns, err);

          if (data) {
            this.store.addResourceBundle(lng, ns, data);
          }

          this.state[name] = err ? -1 : 2;
          var loaded = {};
          this.queue.forEach(function (q) {
            pushPath(q.loaded, [lng], ns);
            removePending(q, name);
            if (err) q.errors.push(err);

            if (q.pendingCount === 0 && !q.done) {
              Object.keys(q.loaded).forEach(function (l) {
                if (!loaded[l]) loaded[l] = {};
                var loadedKeys = q.loaded[l];

                if (loadedKeys.length) {
                  loadedKeys.forEach(function (ns) {
                    if (loaded[l][ns] === undefined) loaded[l][ns] = true;
                  });
                }
              });
              q.done = true;

              if (q.errors.length) {
                q.callback(q.errors);
              } else {
                q.callback();
              }
            }
          });
          this.emit('loaded', loaded);
          this.queue = this.queue.filter(function (q) {
            return !q.done;
          });
        }
      }, {
        key: "read",
        value: function read(lng, ns, fcName) {
          var _this3 = this;

          var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
          var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
          var callback = arguments.length > 5 ? arguments[5] : undefined;
          if (!lng.length) return callback(null, {});

          if (this.readingCalls >= this.maxParallelReads) {
            this.waitingReads.push({
              lng: lng,
              ns: ns,
              fcName: fcName,
              tried: tried,
              wait: wait,
              callback: callback
            });
            return;
          }

          this.readingCalls++;
          return this.backend[fcName](lng, ns, function (err, data) {
            _this3.readingCalls--;

            if (_this3.waitingReads.length > 0) {
              var next = _this3.waitingReads.shift();

              _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
            }

            if (err && data && tried < _this3.maxRetries) {
              setTimeout(function () {
                _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
              }, wait);
              return;
            }

            callback(err, data);
          });
        }
      }, {
        key: "prepareLoading",
        value: function prepareLoading(languages, namespaces) {
          var _this4 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var callback = arguments.length > 3 ? arguments[3] : undefined;

          if (!this.backend) {
            this.logger.warn('No backend was added via i18next.use. Will not load resources.');
            return callback && callback();
          }

          if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
          if (typeof namespaces === 'string') namespaces = [namespaces];
          var toLoad = this.queueLoad(languages, namespaces, options, callback);

          if (!toLoad.toLoad.length) {
            if (!toLoad.pending.length) callback();
            return null;
          }

          toLoad.toLoad.forEach(function (name) {
            _this4.loadOne(name);
          });
        }
      }, {
        key: "load",
        value: function load(languages, namespaces, callback) {
          this.prepareLoading(languages, namespaces, {}, callback);
        }
      }, {
        key: "reload",
        value: function reload(languages, namespaces, callback) {
          this.prepareLoading(languages, namespaces, {
            reload: true
          }, callback);
        }
      }, {
        key: "loadOne",
        value: function loadOne(name) {
          var _this5 = this;

          var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
          var s = name.split('|');
          var lng = s[0];
          var ns = s[1];
          this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
            if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
            if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

            _this5.loaded(name, err, data);
          });
        }
      }, {
        key: "saveMissing",
        value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
          var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

          if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
            this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
            return;
          }

          if (key === undefined || key === null || key === '') return;

          if (this.backend && this.backend.create) {
            this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
              isUpdate: isUpdate
            }));
          }

          if (!languages || !languages[0]) return;
          this.store.addResource(languages[0], namespace, key, fallbackValue);
        }
      }]);

      return Connector;
    }(EventEmitter);

    function get() {
      return {
        debug: false,
        initImmediate: true,
        ns: ['translation'],
        defaultNS: ['translation'],
        fallbackLng: ['dev'],
        fallbackNS: false,
        supportedLngs: false,
        nonExplicitSupportedLngs: false,
        load: 'all',
        preload: false,
        simplifyPluralSuffix: true,
        keySeparator: '.',
        nsSeparator: ':',
        pluralSeparator: '_',
        contextSeparator: '_',
        partialBundledLanguages: false,
        saveMissing: false,
        updateMissing: false,
        saveMissingTo: 'fallback',
        saveMissingPlurals: true,
        missingKeyHandler: false,
        missingInterpolationHandler: false,
        postProcess: false,
        postProcessPassResolved: false,
        returnNull: true,
        returnEmptyString: true,
        returnObjects: false,
        joinArrays: false,
        returnedObjectHandler: false,
        parseMissingKeyHandler: false,
        appendNamespaceToMissingKey: false,
        appendNamespaceToCIMode: false,
        overloadTranslationOptionHandler: function handle(args) {
          var ret = {};
          if (_typeof$2(args[1]) === 'object') ret = args[1];
          if (typeof args[1] === 'string') ret.defaultValue = args[1];
          if (typeof args[2] === 'string') ret.tDescription = args[2];

          if (_typeof$2(args[2]) === 'object' || _typeof$2(args[3]) === 'object') {
            var options = args[3] || args[2];
            Object.keys(options).forEach(function (key) {
              ret[key] = options[key];
            });
          }

          return ret;
        },
        interpolation: {
          escapeValue: true,
          format: function format(value, _format, lng, options) {
            return value;
          },
          prefix: '{{',
          suffix: '}}',
          formatSeparator: ',',
          unescapePrefix: '-',
          nestingPrefix: '$t(',
          nestingSuffix: ')',
          nestingOptionsSeparator: ',',
          maxReplaces: 1000,
          skipOnVariables: true
        }
      };
    }
    function transformOptions(options) {
      if (typeof options.ns === 'string') options.ns = [options.ns];
      if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
      if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

      if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
        options.supportedLngs = options.supportedLngs.concat(['cimode']);
      }

      return options;
    }

    function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

    function noop$6() {}

    function bindMemberFunctions(inst) {
      var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
      mems.forEach(function (mem) {
        if (typeof inst[mem] === 'function') {
          inst[mem] = inst[mem].bind(inst);
        }
      });
    }

    var I18n = function (_EventEmitter) {
      _inherits(I18n, _EventEmitter);

      var _super = _createSuper$3(I18n);

      function I18n() {
        var _this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, I18n);

        _this = _super.call(this);

        if (isIE10) {
          EventEmitter.call(_assertThisInitialized(_this));
        }

        _this.options = transformOptions(options);
        _this.services = {};
        _this.logger = baseLogger;
        _this.modules = {
          external: []
        };
        bindMemberFunctions(_assertThisInitialized(_this));

        if (callback && !_this.isInitialized && !options.isClone) {
          if (!_this.options.initImmediate) {
            _this.init(options, callback);

            return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
          }

          setTimeout(function () {
            _this.init(options, callback);
          }, 0);
        }

        return _this;
      }

      _createClass(I18n, [{
        key: "init",
        value: function init() {
          var _this2 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : undefined;

          if (typeof options === 'function') {
            callback = options;
            options = {};
          }

          if (!options.defaultNS && options.defaultNS !== false && options.ns) {
            if (typeof options.ns === 'string') {
              options.defaultNS = options.ns;
            } else if (options.ns.indexOf('translation') < 0) {
              options.defaultNS = options.ns[0];
            }
          }

          var defOpts = get();
          this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));

          if (this.options.compatibilityAPI !== 'v1') {
            this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
          }

          if (options.keySeparator !== undefined) {
            this.options.userDefinedKeySeparator = options.keySeparator;
          }

          if (options.nsSeparator !== undefined) {
            this.options.userDefinedNsSeparator = options.nsSeparator;
          }

          function createClassOnDemand(ClassOrObject) {
            if (!ClassOrObject) return null;
            if (typeof ClassOrObject === 'function') return new ClassOrObject();
            return ClassOrObject;
          }

          if (!this.options.isClone) {
            if (this.modules.logger) {
              baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
            } else {
              baseLogger.init(null, this.options);
            }

            var formatter;

            if (this.modules.formatter) {
              formatter = this.modules.formatter;
            } else if (typeof Intl !== 'undefined') {
              formatter = Formatter;
            }

            var lu = new LanguageUtil(this.options);
            this.store = new ResourceStore(this.options.resources, this.options);
            var s = this.services;
            s.logger = baseLogger;
            s.resourceStore = this.store;
            s.languageUtils = lu;
            s.pluralResolver = new PluralResolver(lu, {
              prepend: this.options.pluralSeparator,
              compatibilityJSON: this.options.compatibilityJSON,
              simplifyPluralSuffix: this.options.simplifyPluralSuffix
            });

            if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
              s.formatter = createClassOnDemand(formatter);
              s.formatter.init(s, this.options);
              this.options.interpolation.format = s.formatter.format.bind(s.formatter);
            }

            s.interpolator = new Interpolator(this.options);
            s.utils = {
              hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
            };
            s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
            s.backendConnector.on('*', function (event) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              _this2.emit.apply(_this2, [event].concat(args));
            });

            if (this.modules.languageDetector) {
              s.languageDetector = createClassOnDemand(this.modules.languageDetector);
              s.languageDetector.init(s, this.options.detection, this.options);
            }

            if (this.modules.i18nFormat) {
              s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
              if (s.i18nFormat.init) s.i18nFormat.init(this);
            }

            this.translator = new Translator(this.services, this.options);
            this.translator.on('*', function (event) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }

              _this2.emit.apply(_this2, [event].concat(args));
            });
            this.modules.external.forEach(function (m) {
              if (m.init) m.init(_this2);
            });
          }

          this.format = this.options.interpolation.format;
          if (!callback) callback = noop$6;

          if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
            var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
          }

          if (!this.services.languageDetector && !this.options.lng) {
            this.logger.warn('init: no languageDetector is used and no lng is defined');
          }

          var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
          storeApi.forEach(function (fcName) {
            _this2[fcName] = function () {
              var _this2$store;

              return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
            };
          });
          var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
          storeApiChained.forEach(function (fcName) {
            _this2[fcName] = function () {
              var _this2$store2;

              (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

              return _this2;
            };
          });
          var deferred = defer();

          var load = function load() {
            var finish = function finish(err, t) {
              if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
              _this2.isInitialized = true;
              if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

              _this2.emit('initialized', _this2.options);

              deferred.resolve(t);
              callback(err, t);
            };

            if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));

            _this2.changeLanguage(_this2.options.lng, finish);
          };

          if (this.options.resources || !this.options.initImmediate) {
            load();
          } else {
            setTimeout(load, 0);
          }

          return deferred;
        }
      }, {
        key: "loadResources",
        value: function loadResources(language) {
          var _this3 = this;

          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$6;
          var usedCallback = callback;
          var usedLng = typeof language === 'string' ? language : this.language;
          if (typeof language === 'function') usedCallback = language;

          if (!this.options.resources || this.options.partialBundledLanguages) {
            if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
            var toLoad = [];

            var append = function append(lng) {
              if (!lng) return;

              var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

              lngs.forEach(function (l) {
                if (toLoad.indexOf(l) < 0) toLoad.push(l);
              });
            };

            if (!usedLng) {
              var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
              fallbacks.forEach(function (l) {
                return append(l);
              });
            } else {
              append(usedLng);
            }

            if (this.options.preload) {
              this.options.preload.forEach(function (l) {
                return append(l);
              });
            }

            this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
              if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
              usedCallback(e);
            });
          } else {
            usedCallback(null);
          }
        }
      }, {
        key: "reloadResources",
        value: function reloadResources(lngs, ns, callback) {
          var deferred = defer();
          if (!lngs) lngs = this.languages;
          if (!ns) ns = this.options.ns;
          if (!callback) callback = noop$6;
          this.services.backendConnector.reload(lngs, ns, function (err) {
            deferred.resolve();
            callback(err);
          });
          return deferred;
        }
      }, {
        key: "use",
        value: function use(module) {
          if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
          if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

          if (module.type === 'backend') {
            this.modules.backend = module;
          }

          if (module.type === 'logger' || module.log && module.warn && module.error) {
            this.modules.logger = module;
          }

          if (module.type === 'languageDetector') {
            this.modules.languageDetector = module;
          }

          if (module.type === 'i18nFormat') {
            this.modules.i18nFormat = module;
          }

          if (module.type === 'postProcessor') {
            postProcessor.addPostProcessor(module);
          }

          if (module.type === 'formatter') {
            this.modules.formatter = module;
          }

          if (module.type === '3rdParty') {
            this.modules.external.push(module);
          }

          return this;
        }
      }, {
        key: "setResolvedLanguage",
        value: function setResolvedLanguage(l) {
          if (!l || !this.languages) return;
          if (['cimode', 'dev'].indexOf(l) > -1) return;

          for (var li = 0; li < this.languages.length; li++) {
            var lngInLngs = this.languages[li];
            if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;

            if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
              this.resolvedLanguage = lngInLngs;
              break;
            }
          }
        }
      }, {
        key: "changeLanguage",
        value: function changeLanguage(lng, callback) {
          var _this4 = this;

          this.isLanguageChangingTo = lng;
          var deferred = defer();
          this.emit('languageChanging', lng);

          var setLngProps = function setLngProps(l) {
            _this4.language = l;
            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
            _this4.resolvedLanguage = undefined;

            _this4.setResolvedLanguage(l);
          };

          var done = function done(err, l) {
            if (l) {
              setLngProps(l);

              _this4.translator.changeLanguage(l);

              _this4.isLanguageChangingTo = undefined;

              _this4.emit('languageChanged', l);

              _this4.logger.log('languageChanged', l);
            } else {
              _this4.isLanguageChangingTo = undefined;
            }

            deferred.resolve(function () {
              return _this4.t.apply(_this4, arguments);
            });
            if (callback) callback(err, function () {
              return _this4.t.apply(_this4, arguments);
            });
          };

          var setLng = function setLng(lngs) {
            if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
            var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

            if (l) {
              if (!_this4.language) {
                setLngProps(l);
              }

              if (!_this4.translator.language) _this4.translator.changeLanguage(l);
              if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
            }

            _this4.loadResources(l, function (err) {
              done(err, l);
            });
          };

          if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
            setLng(this.services.languageDetector.detect());
          } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
            this.services.languageDetector.detect(setLng);
          } else {
            setLng(lng);
          }

          return deferred;
        }
      }, {
        key: "getFixedT",
        value: function getFixedT(lng, ns, keyPrefix) {
          var _this5 = this;

          var fixedT = function fixedT(key, opts) {
            var options;

            if (_typeof$2(opts) !== 'object') {
              for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                rest[_key3 - 2] = arguments[_key3];
              }

              options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
            } else {
              options = _objectSpread$6({}, opts);
            }

            options.lng = options.lng || fixedT.lng;
            options.lngs = options.lngs || fixedT.lngs;
            options.ns = options.ns || fixedT.ns;
            options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
            var keySeparator = _this5.options.keySeparator || '.';
            var resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
            return _this5.t(resultKey, options);
          };

          if (typeof lng === 'string') {
            fixedT.lng = lng;
          } else {
            fixedT.lngs = lng;
          }

          fixedT.ns = ns;
          fixedT.keyPrefix = keyPrefix;
          return fixedT;
        }
      }, {
        key: "t",
        value: function t() {
          var _this$translator;

          return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
        }
      }, {
        key: "exists",
        value: function exists() {
          var _this$translator2;

          return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
        }
      }, {
        key: "setDefaultNamespace",
        value: function setDefaultNamespace(ns) {
          this.options.defaultNS = ns;
        }
      }, {
        key: "hasLoadedNamespace",
        value: function hasLoadedNamespace(ns) {
          var _this6 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (!this.isInitialized) {
            this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
            return false;
          }

          if (!this.languages || !this.languages.length) {
            this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
            return false;
          }

          var lng = this.resolvedLanguage || this.languages[0];
          var fallbackLng = this.options ? this.options.fallbackLng : false;
          var lastLng = this.languages[this.languages.length - 1];
          if (lng.toLowerCase() === 'cimode') return true;

          var loadNotPending = function loadNotPending(l, n) {
            var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

            return loadState === -1 || loadState === 2;
          };

          if (options.precheck) {
            var preResult = options.precheck(this, loadNotPending);
            if (preResult !== undefined) return preResult;
          }

          if (this.hasResourceBundle(lng, ns)) return true;
          if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
          if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
          return false;
        }
      }, {
        key: "loadNamespaces",
        value: function loadNamespaces(ns, callback) {
          var _this7 = this;

          var deferred = defer();

          if (!this.options.ns) {
            callback && callback();
            return Promise.resolve();
          }

          if (typeof ns === 'string') ns = [ns];
          ns.forEach(function (n) {
            if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
          });
          this.loadResources(function (err) {
            deferred.resolve();
            if (callback) callback(err);
          });
          return deferred;
        }
      }, {
        key: "loadLanguages",
        value: function loadLanguages(lngs, callback) {
          var deferred = defer();
          if (typeof lngs === 'string') lngs = [lngs];
          var preloaded = this.options.preload || [];
          var newLngs = lngs.filter(function (lng) {
            return preloaded.indexOf(lng) < 0;
          });

          if (!newLngs.length) {
            if (callback) callback();
            return Promise.resolve();
          }

          this.options.preload = preloaded.concat(newLngs);
          this.loadResources(function (err) {
            deferred.resolve();
            if (callback) callback(err);
          });
          return deferred;
        }
      }, {
        key: "dir",
        value: function dir(lng) {
          if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
          if (!lng) return 'rtl';
          var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
          return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
        }
      }, {
        key: "cloneInstance",
        value: function cloneInstance() {
          var _this8 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$6;

          var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
            isClone: true
          });

          var clone = new I18n(mergedOptions);

          if (options.debug !== undefined || options.prefix !== undefined) {
            clone.logger = clone.logger.clone(options);
          }

          var membersToCopy = ['store', 'services', 'language'];
          membersToCopy.forEach(function (m) {
            clone[m] = _this8[m];
          });
          clone.services = _objectSpread$6({}, this.services);
          clone.services.utils = {
            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
          };
          clone.translator = new Translator(clone.services, clone.options);
          clone.translator.on('*', function (event) {
            for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
              args[_key4 - 1] = arguments[_key4];
            }

            clone.emit.apply(clone, [event].concat(args));
          });
          clone.init(mergedOptions, callback);
          clone.translator.options = clone.options;
          clone.translator.backendConnector.services.utils = {
            hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
          };
          return clone;
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          return {
            options: this.options,
            store: this.store,
            language: this.language,
            languages: this.languages,
            resolvedLanguage: this.resolvedLanguage
          };
        }
      }]);

      return I18n;
    }(EventEmitter);

    _defineProperty$3(I18n, "createInstance", function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    });

    var instance = I18n.createInstance();
    instance.createInstance = I18n.createInstance;

    instance.createInstance;
    instance.init;
    instance.loadResources;
    instance.reloadResources;
    instance.use;
    instance.changeLanguage;
    instance.getFixedT;
    instance.t;
    instance.exists;
    instance.setDefaultNamespace;
    instance.hasLoadedNamespace;
    instance.loadNamespaces;
    instance.loadLanguages;

    var updateLocale$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,n){module.exports=n();}(commonjsGlobal,function(){return function(e,n,t){t.updateLocale=function(e,n){var o=t.Ls[e];if(o)return (n?Object.keys(n):[]).forEach(function(e){o[e]=n[e];}),o};}});
    } (updateLocale$1));

    var updateLocale = updateLocale$1.exports;

    var localeData$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(n,t){module.exports=t();}(commonjsGlobal,function(){return function(n,t,e){var r=function(n){return n&&(n.indexOf?n:n.s)},o=function(n,t,e,o,u){var a=n.name?n:n.$locale(),i=r(a[t]),s=r(a[e]),d=i||s.map(function(n){return n.substr(0,o)});if(!u)return d;var f=a.weekStart;return d.map(function(n,t){return d[(t+(f||0))%7]})},u=function(){return e.Ls[e.locale()]},a=function(n,t){return n.formats[t]||function(n){return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(n,t,e){return t||e.slice(1)})}(n.formats[t.toUpperCase()])};t.prototype.localeData=function(){return function(){var n=this;return {months:function(t){return t?t.format("MMMM"):o(n,"months")},monthsShort:function(t){return t?t.format("MMM"):o(n,"monthsShort","months",3)},firstDayOfWeek:function(){return n.$locale().weekStart||0},weekdays:function(t){return t?t.format("dddd"):o(n,"weekdays")},weekdaysMin:function(t){return t?t.format("dd"):o(n,"weekdaysMin","weekdays",2)},weekdaysShort:function(t){return t?t.format("ddd"):o(n,"weekdaysShort","weekdays",3)},longDateFormat:function(t){return a(n.$locale(),t)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}}.bind(this)()},e.localeData=function(){var n=u();return {firstDayOfWeek:function(){return n.weekStart||0},weekdays:function(){return e.weekdays()},weekdaysShort:function(){return e.weekdaysShort()},weekdaysMin:function(){return e.weekdaysMin()},months:function(){return e.months()},monthsShort:function(){return e.monthsShort()},longDateFormat:function(t){return a(n,t)},meridiem:n.meridiem,ordinal:n.ordinal}},e.months=function(){return o(u(),"months")},e.monthsShort=function(){return o(u(),"monthsShort","months",3)},e.weekdays=function(n){return o(u(),"weekdays",null,null,n)},e.weekdaysShort=function(n){return o(u(),"weekdaysShort","weekdays",3,n)},e.weekdaysMin=function(n){return o(u(),"weekdaysMin","weekdays",2,n)};}});
    } (localeData$1));

    var localeData = localeData$1.exports;

    var relativeTime$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(r,t){module.exports=t();}(commonjsGlobal,function(){return function(r,t,e){r=r||{};var n=t.prototype,o={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function i(r,t,e,o){return n.fromToBase(r,t,e,o)}e.en.relativeTime=o,n.fromToBase=function(t,n,i,d,u){for(var a,f,s,l=i.$locale().relativeTime||o,h=r.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],m=h.length,c=0;c<m;c+=1){var y=h[c];y.d&&(a=d?e(t).diff(i,y.d,!0):i.diff(t,y.d,!0));var p=(r.rounding||Math.round)(Math.abs(a));if(s=a>0,p<=y.r||!y.r){p<=1&&c>0&&(y=h[c-1]);var v=l[y.l];u&&(p=u(""+p)),f="string"==typeof v?v.replace("%d",p):v(p,n,y.l,s);break}}if(n)return f;var M=s?l.future:l.past;return "function"==typeof M?M(f):M.replace("%s",f)},n.to=function(r,t){return i(r,t,this,!0)},n.from=function(r,t){return i(r,t,this)};var d=function(r){return r.$u?e.utc():e()};n.toNow=function(r){return this.to(d(this),r)},n.fromNow=function(r){return this.from(d(this),r)};}});
    } (relativeTime$1));

    var relativeTime = relativeTime$1.exports;

    var utc$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(t,i){module.exports=i();}(commonjsGlobal,function(){return function(t,i,e){var s=i.prototype;e.utc=function(t){return new i({date:t,utc:!0,args:arguments})},s.utc=function(t){var i=e(this.toDate(),{locale:this.$L,utc:!0});return t?i.add(this.utcOffset(),"minute"):i},s.local=function(){return e(this.toDate(),{locale:this.$L,utc:!1})};var f=s.parse;s.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),f.call(this,t);};var n=s.init;s.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds();}else n.call(this);};var u=s.utcOffset;s.utcOffset=function(t,i){var e=this.$utils().u;if(e(t))return this.$u?0:e(this.$offset)?u.call(this):this.$offset;var s=Math.abs(t)<=16?60*t:t,f=this;if(i)return f.$offset=s,f.$u=0===t,f;if(0!==t){var n=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(f=this.local().add(s+n,"minute")).$offset=s,f.$x.$localOffset=n;}else f=this.utc();return f};var o=s.format;s.format=function(t){var i=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return o.call(this,i)},s.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||(new Date).getTimezoneOffset());return this.$d.valueOf()-6e4*t},s.isUTC=function(){return !!this.$u},s.toISOString=function(){return this.toDate().toISOString()},s.toString=function(){return this.toDate().toUTCString()};var r=s.toDate;s.toDate=function(t){return "s"===t&&this.$offset?e(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():r.call(this)};var a=s.diff;s.diff=function(t,i,s){if(t&&this.$u===t.$u)return a.call(this,t,i,s);var f=this.local(),n=e(t).local();return a.call(f,n,i,s)};}});
    } (utc$1));

    var utc = utc$1.exports;

    var timezone$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(t,e){module.exports=e();}(commonjsGlobal,function(){var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(n,i,r){var o,u=r().utcOffset(),a=function(t,n,i){void 0===i&&(i={});var r=new Date(t);return function(t,n){void 0===n&&(n={});var i=n.timeZoneName||"short",r=t+"|"+i,o=e[r];return o||(o=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:i}),e[r]=o),o}(n,i).formatToParts(r)},f=function(e,n){for(var i=a(e,n),o=[],u=0;u<i.length;u+=1){var f=i[u],s=f.type,m=f.value,c=t[s];c>=0&&(o[c]=parseInt(m,10));}var d=o[3],v=24===d?0:d,h=o[0]+"-"+o[1]+"-"+o[2]+" "+v+":"+o[4]+":"+o[5]+":000",l=+e;return (r.utc(h).valueOf()-(l-=l%1e3))/6e4},s=i.prototype;s.tz=function(t,e){void 0===t&&(t=o);var n=this.utcOffset(),i=this.toDate().toLocaleString("en-US",{timeZone:t}),a=Math.round((this.toDate()-new Date(i))/1e3/60),f=r(i).$set("millisecond",this.$ms).utcOffset(u-a,!0);if(e){var s=f.utcOffset();f=f.add(n-s,"minute");}return f.$x.$timezone=t,f},s.offsetName=function(t){var e=this.$x.$timezone||r.tz.guess(),n=a(this.valueOf(),e,{timeZoneName:t}).find(function(t){return "timezonename"===t.type.toLowerCase()});return n&&n.value};var m=s.startOf;s.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return m.call(this,t,e);var n=r(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return m.call(n,t,e).tz(this.$x.$timezone,!0)},r.tz=function(t,e,n){var i=n&&e,u=n||e||o,a=f(+r(),u);if("string"!=typeof t)return r(t).tz(u);var s=function(t,e,n){var i=t-60*e*1e3,r=f(i,n);if(e===r)return [i,e];var o=f(i-=60*(r-e)*1e3,n);return r===o?[i,r]:[t-60*Math.min(r,o)*1e3,Math.max(r,o)]}(r.utc(t,i).valueOf(),a,u),m=s[0],c=s[1],d=r(m).utcOffset(c);return d.$x.$timezone=u,d},r.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},r.tz.setDefault=function(t){o=t;};}});
    } (timezone$1));

    var timezone = timezone$1.exports;

    var de$2 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,n){module.exports=n(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var n={s:"ein paar Sekunden",m:["eine Minute","einer Minute"],mm:"%d Minuten",h:["eine Stunde","einer Stunde"],hh:"%d Stunden",d:["ein Tag","einem Tag"],dd:["%d Tage","%d Tagen"],M:["ein Monat","einem Monat"],MM:["%d Monate","%d Monaten"],y:["ein Jahr","einem Jahr"],yy:["%d Jahre","%d Jahren"]};function t(e,t,a){var r=n[a];return Array.isArray(r)&&(r=r[t?0:1]),r.replace("%d",e)}var a={name:"de",weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan_Feb_März_Apr_Mai_Juni_Juli_Aug_Sept_Okt_Nov_Dez".split("_"),ordinal:function(e){return e+"."},weekStart:1,yearStart:4,formats:{LTS:"HH:mm:ss",LT:"HH:mm",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},relativeTime:{future:"in %s",past:"vor %s",s:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t}};return e.locale(a,null,!0),a});
    } (de$2));

    var es = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,s){module.exports=s(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var s={name:"es",monthsShort:"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),months:"Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre".split("_"),weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinal:function(e){return e+"º"}};return e.locale(s,null,!0),s});
    } (es));

    var fr = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,_){module.exports=_(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var _={name:"fr",weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinal:function(e){return ""+e+(1===e?"er":"")}};return e.locale(_,null,!0),_});
    } (fr));

    var hi = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(_,e){module.exports=e(requireDayjs_min());}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"hi",weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),ordinal:function(_){return _},formats:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"}};return _.locale(e,null,!0),e});
    } (hi));

    var it$2 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,o){module.exports=o(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var o={name:"it",weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),weekStart:1,monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"tra %s",past:"%s fa",s:"qualche secondo",m:"un minuto",mm:"%d minuti",h:"un' ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinal:function(e){return e+"º"}};return e.locale(o,null,!0),o});
    } (it$2));

    var ja = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(_,e){module.exports=e(requireDayjs_min());}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"ja",weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),ordinal:function(_){return _+"日"},formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiem:function(_){return _<12?"午前":"午後"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}};return _.locale(e,null,!0),e});
    } (ja));

    var ko = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(_,e){module.exports=e(requireDayjs_min());}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"ko",weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),ordinal:function(_){return _},formats:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},meridiem:function(_){return _<12?"오전":"오후"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"}};return _.locale(e,null,!0),e});
    } (ko));

    var nl = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,a){module.exports=a(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var a={name:"nl",weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),ordinal:function(e){return e+"."},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"een minuut",mm:"%d minuten",h:"een uur",hh:"%d uur",d:"een dag",dd:"%d dagen",M:"een maand",MM:"%d maanden",y:"een jaar",yy:"%d jaar"}};return e.locale(a,null,!0),a});
    } (nl));

    var pt$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,a){module.exports=a(requireDayjs_min());}(commonjsGlobal,function(e){e=e&&e.hasOwnProperty("default")?e.default:e;var a={name:"pt",weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sab".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sa".split("_"),months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),ordinal:function(e){return e+"º"},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},relativeTime:{future:"em %s",past:"há %s",s:"alguns segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"}};return e.locale(a,null,!0),a});
    } (pt$1));

    var ru = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(_,t){module.exports=t(requireDayjs_min());}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var t="января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),e="январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),n="янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),s="янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_"),r=/D[oD]?(\[[^[\]]*\]|\s)+MMMM?/;function o(_,t,e){var n,s;return "m"===e?t?"минута":"минуту":_+" "+(n=+_,s={mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[e].split("_"),n%10==1&&n%100!=11?s[0]:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?s[1]:s[2])}var d=function(_,n){return r.test(n)?t[_.month()]:e[_.month()]};d.s=e,d.f=t;var i=function(_,t){return r.test(t)?n[_.month()]:s[_.month()]};i.s=s,i.f=n;var m={name:"ru",weekdays:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),weekdaysShort:"вск_пнд_втр_срд_чтв_птн_сбт".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),months:d,monthsShort:i,weekStart:1,formats:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:o,mm:o,h:"час",hh:o,d:"день",dd:o,M:"месяц",MM:o,y:"год",yy:o},ordinal:function(_){return _}};return _.locale(m,null,!0),m});
    } (ru));

    var tr$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(a,e){module.exports=e(requireDayjs_min());}(commonjsGlobal,function(a){a=a&&a.hasOwnProperty("default")?a.default:a;var e={name:"tr",weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekStart:1,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(a){return a+"."}};return a.locale(e,null,!0),e});
    } (tr$1));

    var en$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,n){module.exports=n();}(commonjsGlobal,function(){return {name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")}});
    } (en$1));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultNS = 'translation';
    var defaultLng = 'en';
    dayjs_minExports.extend(updateLocale);
    dayjs_minExports.extend(utc);
    dayjs_minExports.extend(timezone);
    dayjs_minExports.updateLocale('de', {
        calendar: {
            lastDay: '[gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT',
            nextDay: '[morgen um] LT',
            nextWeek: 'dddd [um] LT',
            sameDay: '[heute um] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('es', {
        calendar: {
            lastDay: '[ayer a las] LT',
            lastWeek: '[pasado] dddd [a] LT',
            nextDay: '[mañana a] LT',
            nextWeek: 'dddd [a] LT',
            sameDay: '[hoy a las] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('fr', {
        calendar: {
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            sameDay: '[Aujourd’hui à] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('hi', {
        calendar: {
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            sameDay: '[आज] LT',
            sameElse: 'L',
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiem: function (hour) {
            if (hour < 4) {
                return 'रात';
            }
            else if (hour < 10) {
                return 'सुबह';
            }
            else if (hour < 17) {
                return 'दोपहर';
            }
            else if (hour < 20) {
                return 'शाम';
            }
            else {
                return 'रात';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            }
            else if (meridiem === 'सुबह') {
                return hour;
            }
            else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            }
            else if (meridiem === 'शाम') {
                return hour + 12;
            }
            return hour;
        },
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
    });
    dayjs_minExports.updateLocale('it', {
        calendar: {
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            sameDay: '[Oggi alle] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('ja', {
        calendar: {
            lastDay: '[昨日] LT',
            lastWeek: 'dddd LT',
            nextDay: '[明日] LT',
            nextWeek: '[次の] dddd LT',
            sameDay: '[今日] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('ko', {
        calendar: {
            lastDay: '[어제] LT',
            lastWeek: '[지난] dddd LT',
            nextDay: '[내일] LT',
            nextWeek: 'dddd LT',
            sameDay: '[오늘] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('nl', {
        calendar: {
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            sameDay: '[vandaag om] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('pt', {
        calendar: {
            lastDay: '[ontem às] LT',
            lastWeek: 'dddd [passada às] LT',
            nextDay: '[amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            sameDay: '[hoje às] LT',
            sameElse: 'L',
        },
    });
    dayjs_minExports.updateLocale('ru', {
        calendar: {
            lastDay: '[Вчера, в] LT',
            nextDay: '[Завтра, в] LT',
            sameDay: '[Сегодня, в] LT',
        },
    });
    dayjs_minExports.updateLocale('tr', {
        calendar: {
            lastDay: '[dün] LT',
            lastWeek: '[geçen] dddd [saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            sameDay: '[bugün saat] LT',
            sameElse: 'L',
        },
    });
    var en_locale = {
        formats: {},
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ],
        relativeTime: {},
        weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    };
    // Type guards to check DayJs
    var isDayJs = function (dateTimeParser) {
        return dateTimeParser.extend !== undefined;
    };
    var supportsTz = function (dateTimeParser) {
        return dateTimeParser.tz !== undefined;
    };
    /**
     * Wrapper around [i18next](https://www.i18next.com/) class for Stream related translations.
     * Instance of this class should be provided to Chat component to handle translations.
     * Stream provides following list of in-built translations:
     * 1. English (en)
     * 2. Dutch (nl)
     * 3. Russian (ru)
     * 4. Turkish (tr)
     * 5. French (fr)
     * 6. Italian (it)
     * 7. Hindi (hi)
     * 8. Spanish (es)
     * 9. Portuguese (pt)
     * 10. German (de)
     * 11. Japanese (ja)
     * 12. Korean (ko)
     *
     * Simplest way to start using chat components in one of the in-built languages would be following:
     *
     * ```
     * const i18n = new Streami18n({ language 'nl' });
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * If you would like to override certain keys in in-built translation.
     * UI will be automatically updated in this case.
     *
     * ```
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  translationsForLanguage: {
     *    'Nothing yet...': 'Nog Niet ...',
     *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',
     *  }
     * });
     *
     * If you would like to register additional languages, use registerTranslation. You can add as many languages as you want:
     *
     * i18n.registerTranslation('zh', {
     *  'Nothing yet...': 'Nog Niet ...',
     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',
     * });
     *
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * You can use the same function to add whole new language as well.
     *
     * ```
     * const i18n = new Streami18n();
     *
     * i18n.registerTranslation('mr', {
     *  'Nothing yet...': 'काहीही नाही  ...',
     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',
     * });
     *
     * // Make sure to call setLanguage to reflect new language in UI.
     * i18n.setLanguage('it');
     * <Chat client={chatClient} i18nInstance={i18n}>
     *  ...
     * </Chat>
     * ```
     *
     * ## Datetime translations
     *
     * Stream react chat components uses [dayjs](https://day.js.org/en/) internally by default to format datetime stamp.
     * e.g., in ChannelPreview, MessageContent components.
     * Dayjs has locale support as well - https://day.js.org/docs/en/i18n/i18n
     * Dayjs is a lightweight alternative to Momentjs with the same modern API.
     *
     * Dayjs provides locale config for plenty of languages, you can check the whole list of locale configs at following url
     * https://github.com/iamkun/dayjs/tree/dev/src/locale
     *
     * You can either provide the dayjs locale config while registering
     * language with Streami18n (either via constructor or registerTranslation()) or you can provide your own Dayjs or Moment instance
     * to Streami18n constructor, which will be then used internally (using the language locale) in components.
     *
     * 1. Via language registration
     *
     * e.g.,
     * ```
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  dayjsLocaleConfigForLanguage: {
     *    months: [...],
     *    monthsShort: [...],
     *    calendar: {
     *      sameDay: ...'
     *    }
     *  }
     * });
     * ```
     *
     * Similarly, you can add locale config for moment while registering translation via `registerTranslation` function.
     *
     * e.g.,
     * ```
     * const i18n = new Streami18n();
     *
     * i18n.registerTranslation(
     *  'mr',
     *  {
     *    'Nothing yet...': 'काहीही नाही  ...',
     *    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',
     *  },
     *  {
     *    months: [...],
     *    monthsShort: [...],
     *    calendar: {
     *      sameDay: ...'
     *    }
     *  }
     * );
     *```
     * 2. Provide your own Moment object
     *
     * ```js
     * import 'moment/locale/nl';
     * import 'moment/locale/it';
     * // or if you want to include all locales
     * import 'moment/min/locales';
     *
     * import Moment from moment
     *
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  DateTimeParser: Moment
     * })
     * ```
     *
     * 3. Provide your own Dayjs object
     *
     * ```js
     * import Dayjs from 'dayjs'
     *
     * import 'dayjs/locale/nl';
     * import 'dayjs/locale/it';
     * // or if you want to include all locales
     * import 'dayjs/min/locales';
     *
     * const i18n = new Streami18n({
     *  language: 'nl',
     *  DateTimeParser: Dayjs
     * })
     * ```
     * If you would like to stick with english language for datetimes in Stream components, you can set `disableDateTimeTranslations` to true.
     *
     */
    var defaultStreami18nOptions = {
        DateTimeParser: dayjs_minExports,
        dayjsLocaleConfigForLanguage: null,
        debug: false,
        disableDateTimeTranslations: false,
        language: 'en',
        logger: function (message) { return console.warn(message); },
    };
    var defaultTranslatorFunction = function (key) { return key; };
    var Streami18n = /** @class */ (function () {
        /**
         * Constructor accepts following options:
         *  - language (String) default: 'en'
         *    Language code e.g., en, tr
         *
         *  - translationsForLanguage (object)
         *    Translations object. Please check src/i18n/en.json for example.
         *
         *  - disableDateTimeTranslations (boolean) default: false
         *    Disable translations for date-times
         *
         *  - debug (boolean) default: false
         *    Enable debug mode in internal i18n class
         *
         *  - logger (function) default: () => {}
         *    Logger function to log warnings/errors from this class
         *
         *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
         *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
         *    corresponding to language (param)
         *
         *  - DateTimeParser (function) Moment or Dayjs instance/function.
         *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
         *
         * @param {*} options
         */
        function Streami18n(options) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            if (options === void 0) { options = {}; }
            var _this = this;
            this.i18nInstance = instance.createInstance();
            this.Dayjs = null;
            this.setLanguageCallback = function () { return null; };
            this.initialized = false;
            this.t = defaultTranslatorFunction;
            this.translations = {
                de: (_a = {}, _a[defaultNS] = deTranslations, _a),
                en: (_b = {}, _b[defaultNS] = enTranslations, _b),
                es: (_c = {}, _c[defaultNS] = esTranslations, _c),
                fr: (_d = {}, _d[defaultNS] = frTranslations, _d),
                hi: (_e = {}, _e[defaultNS] = hiTranslations, _e),
                it: (_f = {}, _f[defaultNS] = itTranslations, _f),
                ja: (_g = {}, _g[defaultNS] = jaTranslations, _g),
                ko: (_h = {}, _h[defaultNS] = koTranslations, _h),
                nl: (_j = {}, _j[defaultNS] = nlTranslations, _j),
                pt: (_k = {}, _k[defaultNS] = ptTranslations, _k),
                ru: (_l = {}, _l[defaultNS] = ruTranslations, _l),
                tr: (_m = {}, _m[defaultNS] = trTranslations, _m),
            };
            /**
             * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that
             * when user calls registerTranslation() function. So instead we will store the locale configs
             * given to registerTranslation() function in `dayjsLocales` object, and register the required locale
             * with moment, when setLanguage is called.
             * */
            this.dayjsLocales = {};
            this.localeExists = function (language) {
                if (_this.isCustomDateTimeParser)
                    return true;
                return Object.keys(dayjs_minExports.Ls).indexOf(language) > -1;
            };
            this.validateCurrentLanguage = function () {
                var availableLanguages = Object.keys(_this.translations);
                if (availableLanguages.indexOf(_this.currentLanguage) === -1) {
                    _this.logger("Streami18n: '".concat(_this.currentLanguage, "' language is not registered.") +
                        " Please make sure to call streami18n.registerTranslation('".concat(_this.currentLanguage, "', {...}) or ") +
                        "use one the built-in supported languages - ".concat(_this.getAvailableLanguages()));
                    _this.currentLanguage = defaultLng;
                }
            };
            /** Returns an instance of i18next used within this class instance */
            this.geti18Instance = function () { return _this.i18nInstance; };
            /** Returns list of available languages. */
            this.getAvailableLanguages = function () { return Object.keys(_this.translations); };
            /** Returns all the translation dictionary for all inbuilt-languages */
            this.getTranslations = function () { return _this.translations; };
            var finalOptions = __assign(__assign({}, defaultStreami18nOptions), options);
            // Prepare the i18next configuration.
            this.logger = finalOptions.logger;
            this.currentLanguage = finalOptions.language;
            this.DateTimeParser = finalOptions.DateTimeParser;
            this.timezone = finalOptions.timezone;
            try {
                if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
                    this.DateTimeParser.extend(localizedFormat);
                    this.DateTimeParser.extend(calendar);
                    this.DateTimeParser.extend(localeData);
                    this.DateTimeParser.extend(relativeTime);
                }
            }
            catch (error) {
                throw Error("Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ".concat(error));
            }
            this.isCustomDateTimeParser = !!options.DateTimeParser;
            var translationsForLanguage = finalOptions.translationsForLanguage;
            if (translationsForLanguage) {
                this.translations[this.currentLanguage] = (_o = {},
                    _o[defaultNS] = this.translations[this.currentLanguage] &&
                        this.translations[this.currentLanguage][defaultNS]
                        ? __assign(__assign({}, this.translations[this.currentLanguage][defaultNS]), translationsForLanguage) : translationsForLanguage,
                    _o);
            }
            // If translations don't exist for given language, then set it as empty object.
            if (!this.translations[this.currentLanguage]) {
                this.translations[this.currentLanguage] = (_p = {},
                    _p[defaultNS] = {},
                    _p);
            }
            this.i18nextConfig = {
                debug: finalOptions.debug,
                fallbackLng: false,
                interpolation: { escapeValue: false },
                keySeparator: false,
                lng: this.currentLanguage,
                nsSeparator: false,
            };
            if (finalOptions.parseMissingKeyHandler) {
                this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
            }
            this.validateCurrentLanguage();
            var dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
            if (dayjsLocaleConfigForLanguage) {
                this.addOrUpdateLocale(this.currentLanguage, __assign({}, dayjsLocaleConfigForLanguage));
            }
            else if (!this.localeExists(this.currentLanguage)) {
                this.logger("Streami18n: Streami18n(...) - Locale config for ".concat(this.currentLanguage, " does not exist in momentjs.") +
                    "Please import the locale file using \"import 'moment/locale/".concat(this.currentLanguage, "';\" in your app or ") +
                    "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
            }
            this.tDateTimeParser = function (timestamp) {
                var language = finalOptions.disableDateTimeTranslations || !_this.localeExists(_this.currentLanguage)
                    ? defaultLng
                    : _this.currentLanguage;
                if (isDayJs(_this.DateTimeParser)) {
                    return supportsTz(_this.DateTimeParser)
                        ? _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language)
                        : _this.DateTimeParser(timestamp).locale(language);
                }
                if (supportsTz(_this.DateTimeParser) && _this.timezone) {
                    return _this.DateTimeParser(timestamp).tz(_this.timezone).locale(language);
                }
                return _this.DateTimeParser(timestamp).locale(language);
            };
        }
        /**
         * Initializes the i18next instance with configuration (which enables natural language as default keys)
         */
        Streami18n.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.validateCurrentLanguage();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.i18nInstance.init(__assign(__assign({}, this.i18nextConfig), { lng: this.currentLanguage, resources: this.translations }))];
                        case 2:
                            _a.t = _b.sent();
                            this.initialized = true;
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            this.logger("Something went wrong with init: ".concat(JSON.stringify(error_1)));
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, {
                                t: this.t,
                                tDateTimeParser: this.tDateTimeParser,
                            }];
                    }
                });
            });
        };
        /**
         * Returns current version translator function.
         */
        Streami18n.prototype.getTranslators = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.initialized) return [3 /*break*/, 2];
                            if (this.dayjsLocales[this.currentLanguage]) {
                                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
                            }
                            return [4 /*yield*/, this.init()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, {
                                t: this.t,
                                tDateTimeParser: this.tDateTimeParser,
                            }];
                    }
                });
            });
        };
        Streami18n.prototype.registerTranslation = function (language, translation, customDayjsLocale) {
            var _a;
            if (!translation) {
                this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation");
                return;
            }
            if (!this.translations[language]) {
                this.translations[language] = (_a = {}, _a[defaultNS] = translation, _a);
            }
            else {
                this.translations[language][defaultNS] = translation;
            }
            if (customDayjsLocale) {
                this.dayjsLocales[language] = __assign({}, customDayjsLocale);
            }
            else if (!this.localeExists(language)) {
                this.logger("Streami18n: registerTranslation(language, translation, customDayjsLocale) - " +
                    "Locale config for ".concat(language, " does not exist in Dayjs.") +
                    "Please import the locale file using \"import 'dayjs/locale/".concat(language, "';\" in your app or ") +
                    "register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)");
            }
            if (this.initialized) {
                this.i18nInstance.addResources(language, defaultNS, translation);
            }
        };
        Streami18n.prototype.addOrUpdateLocale = function (key, config) {
            if (this.localeExists(key)) {
                dayjs_minExports.updateLocale(key, __assign({}, config));
            }
            else {
                // Merging the custom locale config with en config, so missing keys can default to english.
                dayjs_minExports.locale(__assign(__assign({ name: key }, en_locale), config), undefined, true);
            }
        };
        Streami18n.prototype.setLanguage = function (language) {
            return __awaiter(this, void 0, void 0, function () {
                var t, error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.currentLanguage = language;
                            if (!this.initialized)
                                return [2 /*return*/];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.i18nInstance.changeLanguage(language)];
                        case 2:
                            t = _a.sent();
                            if (this.dayjsLocales[language]) {
                                this.addOrUpdateLocale(this.currentLanguage, this.dayjsLocales[this.currentLanguage]);
                            }
                            this.setLanguageCallback(t);
                            return [2 /*return*/, t];
                        case 3:
                            error_2 = _a.sent();
                            this.logger("Failed to set language: ".concat(JSON.stringify(error_2)));
                            return [2 /*return*/, this.t];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        Streami18n.prototype.registerSetLanguageCallback = function (callback) {
            this.setLanguageCallback = callback;
        };
        return Streami18n;
    }());

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};dayjs_minExports.extend(calendar);
    dayjs_minExports.extend(localizedFormat);
    var isLanguageSupported = function (language) {
        var translations = ['de', 'en', 'es', 'fr', 'hi', 'it', 'ja', 'ko', 'nl', 'pt', 'ru', 'tr'];
        return translations.some(function (translation) { return language === translation; });
    };
    var isDayOrMoment = function (output) {
        return !!(output === null || output === void 0 ? void 0 : output.isSame);
    };
    var isDate = function (output) {
        return !!(output === null || output === void 0 ? void 0 : output.getMonth);
    };
    var isNumberOrString = function (output) {
        return typeof output === 'string' || typeof output === 'number';
    };
    var defaultDateTimeParser = function (input) { return dayjs_minExports(input); };
    var TranslationContext = React__default["default"].createContext({
        t: defaultTranslatorFunction,
        tDateTimeParser: defaultDateTimeParser,
        userLanguage: 'en',
    });
    var TranslationProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(TranslationContext.Provider, { value: value }, children));
    };
    var useTranslationContext = function (componentName) {
        var contextValue = React$2.useContext(TranslationContext);
        if (!contextValue) {
            console.warn("The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    var withTranslationContext = function (Component) {
        var WithTranslationContextComponent = function (props) {
            var translationContext = useTranslationContext();
            return React__default["default"].createElement(Component, __assign({}, props, translationContext));
        };
        WithTranslationContextComponent.displayName = "WithTranslationContext".concat(getDisplayName(Component));
        return WithTranslationContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var TypingContext = React__default["default"].createContext(undefined);
    var TypingProvider = function (_a) {
        var children = _a.children, value = _a.value;
        return (React__default["default"].createElement(TypingContext.Provider, { value: value }, children));
    };
    var useTypingContext = function (componentName) {
        var contextValue = React$2.useContext(TypingContext);
        if (!contextValue) {
            console.warn("The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ".concat(componentName, " component."));
            return {};
        }
        return contextValue;
    };
    /**
     * Typescript currently does not support partial inference, so if TypingContext
     * typing is desired while using the HOC withTypingContext, the Props for the
     * wrapped component must be provided as the first generic.
     */
    var withTypingContext = function (Component) {
        var WithTypingContextComponent = function (props) {
            var typingContext = useTypingContext();
            return React__default["default"].createElement(Component, __assign({}, props, typingContext));
        };
        WithTypingContextComponent.displayName = (Component.displayName ||
            Component.name ||
            'Component').replace('Base', '');
        return WithTypingContextComponent;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedAttachmentActions = function (props) {
        var actionHandler = props.actionHandler, actions = props.actions, id = props.id, text = props.text;
        var t = useTranslationContext('UnMemoizedAttachmentActions').t;
        var handleActionClick = function (event, name, value) { return actionHandler === null || actionHandler === void 0 ? void 0 : actionHandler(name, value, event); };
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-actions' },
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-actions-form' },
                React__default["default"].createElement("span", null, text),
                actions.map(function (action) { return (React__default["default"].createElement("button", { className: "str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--".concat(action.style), "data-testid": "".concat(action.name), "data-value": action.value, key: "".concat(id, "-").concat(action.value), onClick: function (event) { return handleActionClick(event, action.name, action.value); } }, action.text ? t(action.text) : null)); }))));
    };
    /**
     * A component for rendering the actions you can take on an attachment.
     */
    var AttachmentActions = React__default["default"].memo(UnMemoizedAttachmentActions);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DownloadIcon$1 = function (_a) {
        var className = _a.className;
        return (React__default["default"].createElement("svg", { className: className, "data-testid": 'download', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z', fill: 'black' })));
    };
    var PlayTriangleIcon = function () { return (React__default["default"].createElement("svg", { fill: 'none', viewBox: '0 0 12 14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M0.5 0V14L11.5 7L0.5 0Z', fill: '#080707' }))); };
    var PauseIcon = function () { return (React__default["default"].createElement("svg", { fill: 'none', viewBox: '0 0 12 14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M0 14H4V0H0V14ZM8 0V14H12V0H8Z', fill: '#080707' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const BYTE_UNITS = [
    	'B',
    	'kB',
    	'MB',
    	'GB',
    	'TB',
    	'PB',
    	'EB',
    	'ZB',
    	'YB'
    ];

    const BIBYTE_UNITS = [
    	'B',
    	'kiB',
    	'MiB',
    	'GiB',
    	'TiB',
    	'PiB',
    	'EiB',
    	'ZiB',
    	'YiB'
    ];

    const BIT_UNITS = [
    	'b',
    	'kbit',
    	'Mbit',
    	'Gbit',
    	'Tbit',
    	'Pbit',
    	'Ebit',
    	'Zbit',
    	'Ybit'
    ];

    const BIBIT_UNITS = [
    	'b',
    	'kibit',
    	'Mibit',
    	'Gibit',
    	'Tibit',
    	'Pibit',
    	'Eibit',
    	'Zibit',
    	'Yibit'
    ];

    /*
    Formats the given number using `Number#toLocaleString`.
    - If locale is a string, the value is expected to be a locale-key (for example: `de`).
    - If locale is true, the system default locale is used for translation.
    - If no value for locale is specified, the number is returned unmodified.
    */
    const toLocaleString = (number, locale, options) => {
    	let result = number;
    	if (typeof locale === 'string' || Array.isArray(locale)) {
    		result = number.toLocaleString(locale, options);
    	} else if (locale === true || options !== undefined) {
    		result = number.toLocaleString(undefined, options);
    	}

    	return result;
    };

    var prettyBytes = (number, options) => {
    	if (!Number.isFinite(number)) {
    		throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
    	}

    	options = Object.assign({bits: false, binary: false}, options);

    	const UNITS = options.bits ?
    		(options.binary ? BIBIT_UNITS : BIT_UNITS) :
    		(options.binary ? BIBYTE_UNITS : BYTE_UNITS);

    	if (options.signed && number === 0) {
    		return ` 0 ${UNITS[0]}`;
    	}

    	const isNegative = number < 0;
    	const prefix = isNegative ? '-' : (options.signed ? '+' : '');

    	if (isNegative) {
    		number = -number;
    	}

    	let localeOptions;

    	if (options.minimumFractionDigits !== undefined) {
    		localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
    	}

    	if (options.maximumFractionDigits !== undefined) {
    		localeOptions = Object.assign({maximumFractionDigits: options.maximumFractionDigits}, localeOptions);
    	}

    	if (number < 1) {
    		const numberString = toLocaleString(number, options.locale, localeOptions);
    		return prefix + numberString + ' ' + UNITS[0];
    	}

    	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
    	// eslint-disable-next-line unicorn/prefer-exponentiation-operator
    	number /= Math.pow(options.binary ? 1024 : 1000, exponent);

    	if (!localeOptions) {
    		number = number.toPrecision(3);
    	}

    	const numberString = toLocaleString(Number(number), options.locale, localeOptions);

    	const unit = UNITS[exponent];

    	return prefix + numberString + ' ' + unit;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var FileSizeIndicator = function (_a) {
        var fileSize = _a.fileSize;
        if (!(fileSize && Number.isFinite(Number(fileSize))))
            return null;
        return (React__default["default"].createElement("span", { className: 'str-chat__message-attachment-file--item-size' }, prettyBytes(fileSize)));
    };

    var dist$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.sanitizeUrl = exports.BLANK_URL = void 0;
    	var invalidProtocolRegex = /^([^\w]*)(javascript|data|vbscript)/im;
    	var htmlEntitiesRegex = /&#(\w+)(^\w|;)?/g;
    	var htmlCtrlEntityRegex = /&(newline|tab);/gi;
    	var ctrlCharactersRegex = /[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim;
    	var urlSchemeRegex = /^.+(:|&colon;)/gim;
    	var relativeFirstCharacters = [".", "/"];
    	exports.BLANK_URL = "about:blank";
    	function isRelativeUrlWithoutProtocol(url) {
    	    return relativeFirstCharacters.indexOf(url[0]) > -1;
    	}
    	// adapted from https://stackoverflow.com/a/29824550/2601552
    	function decodeHtmlCharacters(str) {
    	    var removedNullByte = str.replace(ctrlCharactersRegex, "");
    	    return removedNullByte.replace(htmlEntitiesRegex, function (match, dec) {
    	        return String.fromCharCode(dec);
    	    });
    	}
    	function sanitizeUrl(url) {
    	    if (!url) {
    	        return exports.BLANK_URL;
    	    }
    	    var sanitizedUrl = decodeHtmlCharacters(url)
    	        .replace(htmlCtrlEntityRegex, "")
    	        .replace(ctrlCharactersRegex, "")
    	        .trim();
    	    if (!sanitizedUrl) {
    	        return exports.BLANK_URL;
    	    }
    	    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {
    	        return sanitizedUrl;
    	    }
    	    var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);
    	    if (!urlSchemeParseResults) {
    	        return sanitizedUrl;
    	    }
    	    var urlScheme = urlSchemeParseResults[0];
    	    if (invalidProtocolRegex.test(urlScheme)) {
    	        return exports.BLANK_URL;
    	    }
    	    return sanitizedUrl;
    	}
    	exports.sanitizeUrl = sanitizeUrl;
    } (dist$1));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedSafeAnchor = function (props) {
        var children = props.children, className = props.className, download = props.download, href = props.href, rel = props.rel, target = props.target;
        var t = useTranslationContext('SafeAnchor').t;
        if (!href)
            return null;
        var sanitized = dist$1.sanitizeUrl(href);
        return (React__default["default"].createElement("a", { "aria-label": t('aria/Attachment'), className: className, download: download, href: sanitized, rel: rel, target: target }, children));
    };
    var SafeAnchor = React__default["default"].memo(UnMemoizedSafeAnchor);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// export { default as SafeAnchor } from './SafeAnchor';

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DownloadButton = function (_a) {
        var assetUrl = _a.assetUrl;
        return (React__default["default"].createElement(SafeAnchor, { className: 'str-chat__message-attachment-file--item-download', download: true, href: assetUrl, target: '_blank' },
            React__default["default"].createElement(DownloadIcon$1, { className: 'str-chat__message-attachment-download-icon' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var PROGRESS_UPDATE_INTERVAL = 100;
    var useAudioController = function () {
        var _a = React$2.useState(false), isPlaying = _a[0], setIsPlaying = _a[1];
        var _b = React$2.useState(0), progress = _b[0], setProgress = _b[1];
        var audioRef = React$2.useRef(null);
        var togglePlay = React$2.useCallback(function () {
            setIsPlaying(function (playing) { return !playing; });
        }, []);
        var seek = React$2.useCallback(function (_a) {
            var clientX = _a.clientX, currentTarget = _a.currentTarget;
            if (!audioRef.current)
                return;
            var _b = currentTarget.getBoundingClientRect(), width = _b.width, x = _b.x;
            var ratio = (clientX - x) / width;
            if (!isPlaying)
                setProgress(ratio * 100);
            audioRef.current.currentTime = ratio * audioRef.current.duration;
        }, [isPlaying]);
        React$2.useEffect(function () {
            if (!audioRef.current || !isPlaying)
                return;
            var interval = window.setInterval(function () {
                if (!audioRef.current)
                    return;
                var _a = audioRef.current, currentTime = _a.currentTime, duration = _a.duration;
                setProgress((currentTime / duration) * 100);
                if (currentTime === duration)
                    setIsPlaying(false);
            }, PROGRESS_UPDATE_INTERVAL);
            audioRef.current.play();
            return function () {
                var _a;
                // eslint-disable-next-line react-hooks/exhaustive-deps
                (_a = audioRef.current) === null || _a === void 0 ? void 0 : _a.pause();
                window.clearInterval(interval);
            };
        }, [isPlaying]);
        return {
            audioRef: audioRef,
            isPlaying: isPlaying,
            progress: progress,
            seek: seek,
            togglePlay: togglePlay,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var AudioV1 = function (_a) {
        var og = _a.og;
        var asset_url = og.asset_url, description = og.description, image_url = og.image_url, text = og.text, title = og.title;
        var _b = useAudioController(), audioRef = _b.audioRef, isPlaying = _b.isPlaying, progress = _b.progress, togglePlay = _b.togglePlay;
        return (React__default["default"].createElement("div", { className: 'str-chat__audio' },
            React__default["default"].createElement("div", { className: 'str-chat__audio__wrapper' },
                React__default["default"].createElement("audio", { ref: audioRef },
                    React__default["default"].createElement("source", { "data-testid": 'audio-source', src: asset_url, type: 'audio/mp3' })),
                React__default["default"].createElement("div", { className: 'str-chat__audio__image' },
                    React__default["default"].createElement("div", { className: 'str-chat__audio__image--overlay' }, !isPlaying ? (React__default["default"].createElement("button", { className: 'str-chat__audio__image--button', "data-testid": 'play-audio', onClick: togglePlay },
                        React__default["default"].createElement("svg", { height: '40', viewBox: '0 0 64 64', width: '40', xmlns: 'http://www.w3.org/2000/svg' },
                            React__default["default"].createElement("path", { d: 'M32 58c14.36 0 26-11.64 26-26S46.36 6 32 6 6 17.64 6 32s11.64 26 26 26zm0 6C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm13.237-28.412L26.135 45.625a3.27 3.27 0 0 1-4.426-1.4 3.319 3.319 0 0 1-.372-1.47L21 23.36c-.032-1.823 1.41-3.327 3.222-3.358a3.263 3.263 0 0 1 1.473.322l19.438 9.36a3.311 3.311 0 0 1 .103 5.905z', fillRule: 'nonzero' })))) : (React__default["default"].createElement("button", { className: 'str-chat__audio__image--button', "data-testid": 'pause-audio', onClick: togglePlay },
                        React__default["default"].createElement("svg", { height: '40', viewBox: '0 0 64 64', width: '40', xmlns: 'http://www.w3.org/2000/svg' },
                            React__default["default"].createElement("path", { d: 'M32 58.215c14.478 0 26.215-11.737 26.215-26.215S46.478 5.785 32 5.785 5.785 17.522 5.785 32 17.522 58.215 32 58.215zM32 64C14.327 64 0 49.673 0 32 0 14.327 14.327 0 32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32zm-7.412-45.56h2.892a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.892a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17zm12.293 0h2.893a2.17 2.17 0 0 1 2.17 2.17v23.865a2.17 2.17 0 0 1-2.17 2.17h-2.893a2.17 2.17 0 0 1-2.17-2.17V20.61a2.17 2.17 0 0 1 2.17-2.17z', fillRule: 'nonzero' }))))),
                    image_url && React__default["default"].createElement("img", { alt: "".concat(description), src: image_url })),
                React__default["default"].createElement("div", { className: 'str-chat__audio__content' },
                    React__default["default"].createElement("span", { className: 'str-chat__audio__content--title' },
                        React__default["default"].createElement("strong", null, title)),
                    React__default["default"].createElement("span", { className: 'str-chat__audio__content--subtitle' }, text),
                    React__default["default"].createElement("div", { className: 'str-chat__audio__content--progress' },
                        React__default["default"].createElement("div", { "data-progress": progress, "data-testid": 'audio-progress', role: 'progressbar', style: { width: "".concat(progress, "%") } }))))));
    };
    var PlayButton = function (_a) {
        var isPlaying = _a.isPlaying, onClick = _a.onClick;
        return (React__default["default"].createElement("button", { className: 'str-chat__message-attachment-audio-widget--play-button', "data-testid": isPlaying ? 'pause-audio' : 'play-audio', onClick: onClick }, isPlaying ? React__default["default"].createElement(PauseIcon, null) : React__default["default"].createElement(PlayTriangleIcon, null)));
    };
    var ProgressBar = function (_a) {
        var onClick = _a.onClick, progress = _a.progress;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--progress-track', "data-progress": progress, "data-testid": 'audio-progress', onClick: onClick, role: 'progressbar', style: {
                background: "linear-gradient(\n\t\t to right,\n\t\t var(--str-chat__primary-color),\n\t\t var(--str-chat__primary-color) ".concat(progress, "%,\n\t\t var(--str-chat__disabled-color) ").concat(progress, "%,\n\t\t var(--str-chat__disabled-color)\n\t  )"),
            } },
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--progress-slider', style: { left: "".concat(progress, "px") } })));
    };
    var AudioV2 = function (_a) {
        var og = _a.og;
        var asset_url = og.asset_url, file_size = og.file_size, title = og.title;
        var _b = useAudioController(), audioRef = _b.audioRef, isPlaying = _b.isPlaying, progress = _b.progress, seek = _b.seek, togglePlay = _b.togglePlay;
        if (!asset_url)
            return null;
        var dataTestId = 'audio-widget';
        var rootClassName = 'str-chat__message-attachment-audio-widget';
        return (React__default["default"].createElement("div", { className: rootClassName, "data-testid": dataTestId },
            React__default["default"].createElement("audio", { ref: audioRef },
                React__default["default"].createElement("source", { "data-testid": 'audio-source', src: asset_url, type: 'audio/mp3' })),
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--play-controls' },
                React__default["default"].createElement(PlayButton, { isPlaying: isPlaying, onClick: togglePlay })),
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--text' },
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--text-first-row' },
                    React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--title' }, title),
                    React__default["default"].createElement(DownloadButton, { assetUrl: asset_url })),
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--text-second-row' },
                    React__default["default"].createElement(FileSizeIndicator, { fileSize: file_size }),
                    React__default["default"].createElement(ProgressBar, { onClick: seek, progress: progress })))));
    };
    var UnMemoizedAudio = function (props) {
        var themeVersion = useChatContext('Audio').themeVersion;
        return themeVersion === '1' ? React__default["default"].createElement(AudioV1, __assign({}, props)) : React__default["default"].createElement(AudioV2, __assign({}, props));
    };
    /**
     * Audio attachment with play/pause button and progress bar
     */
    var Audio = React__default["default"].memo(UnMemoizedAudio);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var BaseImage = React$2.forwardRef(function BaseImage(_a, ref) {
        var props = __rest(_a, []);
        var propsClassName = props.className, propsOnError = props.onError;
        var _b = React$2.useState(false), error = _b[0], setError = _b[1];
        React$2.useEffect(function () { return function () {
            setError(false);
        }; }, [props.src]);
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("img", __assign({ "data-testid": 'str-chat__base-image' }, props, { className: clsx(propsClassName, 'str-chat__base-image', {
                    'str-chat__base-image--load-failed': error,
                }), onError: function (e) {
                    setError(true);
                    propsOnError === null || propsOnError === void 0 ? void 0 : propsOnError(e);
                }, ref: ref })),
            error && React__default["default"].createElement(DownloadButton, { assetUrl: props.src })));
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (React__default["default"]).useLayoutEffect : ()=>{};


    const $431fbd86ca7dc216$export$b204af158042fbac = (el)=>{
        var _el_ownerDocument;
        return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
    };
    const $431fbd86ca7dc216$export$f21a1ffae260145a = (el)=>{
        if (el && "window" in el && el.window === el) return el;
        const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
        return doc.defaultView || window;
    };


    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
        if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
            preventScroll: true
        });
        else {
            let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
            element.focus();
            $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
        }
    }
    let $7215afc6de606d6b$var$supportsPreventScrollCached = null;
    function $7215afc6de606d6b$var$supportsPreventScroll() {
        if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
            $7215afc6de606d6b$var$supportsPreventScrollCached = false;
            try {
                let focusElem = document.createElement("div");
                focusElem.focus({
                    get preventScroll () {
                        $7215afc6de606d6b$var$supportsPreventScrollCached = true;
                        return true;
                    }
                });
            } catch (e) {
            // Ignore
            }
        }
        return $7215afc6de606d6b$var$supportsPreventScrollCached;
    }
    function $7215afc6de606d6b$var$getScrollableElements(element) {
        let parent = element.parentNode;
        let scrollableElements = [];
        let rootScrollingElement = document.scrollingElement || document.documentElement;
        while(parent instanceof HTMLElement && parent !== rootScrollingElement){
            if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
                element: parent,
                scrollTop: parent.scrollTop,
                scrollLeft: parent.scrollLeft
            });
            parent = parent.parentNode;
        }
        if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
            element: rootScrollingElement,
            scrollTop: rootScrollingElement.scrollTop,
            scrollLeft: rootScrollingElement.scrollLeft
        });
        return scrollableElements;
    }
    function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
        for (let { element: element, scrollTop: scrollTop, scrollLeft: scrollLeft } of scrollableElements){
            element.scrollTop = scrollTop;
            element.scrollLeft = scrollLeft;
        }
    }


    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $c87311424ea30a05$var$testUserAgent(re) {
        var _window_navigator_userAgentData;
        if (typeof window === "undefined" || window.navigator == null) return false;
        return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand)=>re.test(brand.brand))) || re.test(window.navigator.userAgent);
    }
    function $c87311424ea30a05$var$testPlatform(re) {
        var _window_navigator_userAgentData;
        return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
    }
    function $c87311424ea30a05$export$9ac100e40613ea10() {
        return $c87311424ea30a05$var$testPlatform(/^Mac/i);
    }
    function $c87311424ea30a05$export$a11b0059900ceec8() {
        return $c87311424ea30a05$var$testUserAgent(/Android/i);
    }


    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // We store a global list of elements that are currently transitioning,
    // mapped to a set of CSS properties that are transitioning for that element.
    // This is necessary rather than a simple count of transitions because of browser
    // bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
    // than one or the other. So we need to track what's actually transitioning so that
    // we can ignore these duplicate events.
    let $bbed8b41f857bcc0$var$transitionsByElement = new Map();
    // A list of callbacks to call once there are no transitioning elements.
    let $bbed8b41f857bcc0$var$transitionCallbacks = new Set();
    function $bbed8b41f857bcc0$var$setupGlobalEvents() {
        if (typeof window === "undefined") return;
        function isTransitionEvent(event) {
            return "propertyName" in event;
        }
        let onTransitionStart = (e)=>{
            if (!isTransitionEvent(e) || !e.target) return;
            // Add the transitioning property to the list for this element.
            let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
            if (!transitions) {
                transitions = new Set();
                $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
                // The transitioncancel event must be registered on the element itself, rather than as a global
                // event. This enables us to handle when the node is deleted from the document while it is transitioning.
                // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
                e.target.addEventListener("transitioncancel", onTransitionEnd, {
                    once: true
                });
            }
            transitions.add(e.propertyName);
        };
        let onTransitionEnd = (e)=>{
            if (!isTransitionEvent(e) || !e.target) return;
            // Remove property from list of transitioning properties.
            let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
            if (!properties) return;
            properties.delete(e.propertyName);
            // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
            if (properties.size === 0) {
                e.target.removeEventListener("transitioncancel", onTransitionEnd);
                $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
            }
            // If no transitioning elements, call all of the queued callbacks.
            if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
                for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();
                $bbed8b41f857bcc0$var$transitionCallbacks.clear();
            }
        };
        document.body.addEventListener("transitionrun", onTransitionStart);
        document.body.addEventListener("transitionend", onTransitionEnd);
    }
    if (typeof document !== "undefined") {
        if (document.readyState !== "loading") $bbed8b41f857bcc0$var$setupGlobalEvents();
        else document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
    }
    function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
        // Wait one frame to see if an animation starts, e.g. a transition on mount.
        requestAnimationFrame(()=>{
            // If no transitions are running, call the function immediately.
            // Otherwise, add it to a list of callbacks to run at the end of the animation.
            if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();
            else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
        });
    }



    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $6a7db85432448f7f$export$60278871457622de(event) {
        // JAWS/NVDA with Firefox.
        if (event.mozInputSource === 0 && event.isTrusted) return true;
        // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
        // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
        // to detect TalkBack virtual clicks.
        if (($c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === "click" && event.buttons === 1;
        return event.detail === 0 && !event.pointerType;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (React__default["default"]).createContext({
        register: ()=>{}
    });
    $ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";


    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions



    let $507fabe10e71c6fb$var$currentModality = null;
    let $507fabe10e71c6fb$var$changeHandlers = new Set();
    let $507fabe10e71c6fb$export$d90243b58daecda7 = new Map(); // We use a map here to support setting event listeners across multiple document objects.
    let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
    function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
        for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);
    }
    /**
     * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
     */ function $507fabe10e71c6fb$var$isValidKey(e) {
        // Control and Shift keys trigger when navigating back to the tab with keyboard.
        return !(e.metaKey || !($c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
    }
    function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        if ($507fabe10e71c6fb$var$isValidKey(e)) {
            $507fabe10e71c6fb$var$currentModality = "keyboard";
            $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
        }
    }
    function $507fabe10e71c6fb$var$handlePointerEvent(e) {
        $507fabe10e71c6fb$var$currentModality = "pointer";
        if (e.type === "mousedown" || e.type === "pointerdown") {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
        }
    }
    function $507fabe10e71c6fb$var$handleClickEvent(e) {
        if (($6a7db85432448f7f$export$60278871457622de)(e)) {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            $507fabe10e71c6fb$var$currentModality = "virtual";
        }
    }
    function $507fabe10e71c6fb$var$handleFocusEvent(e) {
        // Firefox fires two extra focus events when the user first clicks into an iframe:
        // first on the window, then on the document. We ignore these events so they don't
        // cause keyboard focus rings to appear.
        if (e.target === window || e.target === document) return;
        // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
        // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
        if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
            $507fabe10e71c6fb$var$currentModality = "virtual";
            $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
        }
        $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
        $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
    }
    function $507fabe10e71c6fb$var$handleWindowBlur() {
        // When the window is blurred, reset state. This is necessary when tabbing out of the window,
        // for example, since a subsequent focus event won't be fired.
        $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
        $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
    }
    /**
     * Setup global event listeners to control when keyboard focus style should be visible.
     */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
        if (typeof window === "undefined" || $507fabe10e71c6fb$export$d90243b58daecda7.get(($431fbd86ca7dc216$export$f21a1ffae260145a)(element))) return;
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        // Programmatic focus() calls shouldn't affect the current input modality.
        // However, we need to detect other cases when a focus event occurs without
        // a preceding user event (e.g. screen reader focus). Overriding the focus
        // method on HTMLElement.prototype is a bit hacky, but works.
        let focus = windowObject.HTMLElement.prototype.focus;
        windowObject.HTMLElement.prototype.focus = function() {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            focus.apply(this, arguments);
        };
        documentObject.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
        // Register focus events on the window so they are sure to happen
        // before React's event listeners (registered on the document).
        windowObject.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
        windowObject.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
        if (typeof PointerEvent !== "undefined") {
            documentObject.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
        } else {
            documentObject.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
        }
        // Add unmount handler
        windowObject.addEventListener("beforeunload", ()=>{
            $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
        }, {
            once: true
        });
        $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
            focus: focus
        });
    }
    const $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener)=>{
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        if (loadListener) documentObject.removeEventListener("DOMContentLoaded", loadListener);
        if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
        windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
        documentObject.removeEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.removeEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.removeEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
        windowObject.removeEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
        windowObject.removeEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
        if (typeof PointerEvent !== "undefined") {
            documentObject.removeEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
        } else {
            documentObject.removeEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
        }
        $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
    };
    function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        let loadListener;
        if (documentObject.readyState !== "loading") $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
        else {
            loadListener = ()=>{
                $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
            };
            documentObject.addEventListener("DOMContentLoaded", loadListener);
        }
        return ()=>$507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
    }
    // Server-side rendering does not have the document object defined
    // eslint-disable-next-line no-restricted-globals
    if (typeof document !== "undefined") $507fabe10e71c6fb$export$2f1888112f558a7d();
    function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
        return $507fabe10e71c6fb$var$currentModality;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $6a99195332edec8b$export$80f3e147d781571c(element) {
        // If the user is interacting with a virtual cursor, e.g. screen reader, then
        // wait until after any animated transitions that are currently occurring on
        // the page before shifting focus. This avoids issues with VoiceOver on iOS
        // causing the page to scroll when moving focus if the element is transitioning
        // from off the screen.
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        if (($507fabe10e71c6fb$export$630ff653c5ada6a9)() === "virtual") {
            let lastFocusedElement = ownerDocument.activeElement;
            ($bbed8b41f857bcc0$export$24490316f764c430)(()=>{
                // If focus did not move and the element is still in the document, focus it.
                if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
            });
        } else ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
    }



    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $645f2e67b85a24c9$var$isStyleVisible(element) {
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) return false;
        let { display: display, visibility: visibility } = element.style;
        let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
        if (isVisible) {
            const { getComputedStyle: getComputedStyle } = element.ownerDocument.defaultView;
            let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);
            isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
        }
        return isVisible;
    }
    function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
        return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
    }
    function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
        return element.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
    }



    const $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/ (React__default["default"]).createContext(null);
    let $9bf71ea28793e738$var$activeScope = null;
    function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
        let { children: children, contain: contain, restoreFocus: restoreFocus, autoFocus: autoFocus } = props;
        let startRef = (React$2.useRef)(null);
        let endRef = (React$2.useRef)(null);
        let scopeRef = (React$2.useRef)([]);
        let { parentNode: parentNode } = (React$2.useContext)($9bf71ea28793e738$var$FocusContext) || {};
        // Create a tree node here so we can add children to it even before it is added to the tree.
        let node = (React$2.useMemo)(()=>new $9bf71ea28793e738$var$TreeNode({
                scopeRef: scopeRef
            }), [
            scopeRef
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),
            // use the active scope as the parent instead of the parent from context. Layout effects run bottom
            // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope
            // that is being added should get the activeScope as its parent.
            let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
            if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
                let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
                if (activeNode) parent = activeNode;
            }
            // Add the node to the parent, and to the tree.
            parent.addChild(node);
            $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
        }, [
            node,
            parentNode
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (node) node.contain = !!contain;
        }, [
            contain
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            var _startRef_current;
            // Find all rendered nodes between the sentinels and add them to the scope.
            let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
            let nodes = [];
            while(node && node !== endRef.current){
                nodes.push(node);
                node = node.nextSibling;
            }
            scopeRef.current = nodes;
        }, [
            children
        ]);
        $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
        $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
        $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
        $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
        // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.
        // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.
        (React$2.useEffect)(()=>{
            const activeElement = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;
            let scope = null;
            if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
                // We need to traverse the focusScope tree and find the bottom most scope that
                // contains the active element and set that as the activeScope.
                for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;
                if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
            }
        }, [
            scopeRef
        ]);
        // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF
        // in useRestoreFocus cleanup runs.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            return ()=>{
                var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
                var _focusScopeTree_getTreeNode_parent_scopeRef;
                // Scope may have been re-parented.
                let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
                if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
                $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
            };
        }, [
            scopeRef
        ]);
        let focusManager = (React$2.useMemo)(()=>$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
        let value = (React$2.useMemo)(()=>({
                focusManager: focusManager,
                parentNode: node
            }), [
            node,
            focusManager
        ]);
        return /*#__PURE__*/ (React__default["default"]).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
            value: value
        }, /*#__PURE__*/ (React__default["default"]).createElement("span", {
            "data-focus-scope-start": true,
            hidden: true,
            ref: startRef
        }), children, /*#__PURE__*/ (React__default["default"]).createElement("span", {
            "data-focus-scope-end": true,
            hidden: true,
            ref: endRef
        }));
    }
    function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
        return {
            focusNext (opts = {}) {
                let scope = scopeRef.current;
                let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
                let sentinel = scope[0].previousElementSibling;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
                let nextNode = walker.nextNode();
                if (!nextNode && wrap) {
                    walker.currentNode = sentinel;
                    nextNode = walker.nextNode();
                }
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusPrevious (opts = {}) {
                let scope = scopeRef.current;
                let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
                let sentinel = scope[scope.length - 1].nextElementSibling;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
                let previousNode = walker.previousNode();
                if (!previousNode && wrap) {
                    walker.currentNode = sentinel;
                    previousNode = walker.previousNode();
                }
                if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
                return previousNode;
            },
            focusFirst (opts = {}) {
                let scope = scopeRef.current;
                let { tabbable: tabbable, accept: accept } = opts;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = scope[0].previousElementSibling;
                let nextNode = walker.nextNode();
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusLast (opts = {}) {
                let scope = scopeRef.current;
                let { tabbable: tabbable, accept: accept } = opts;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = scope[scope.length - 1].nextElementSibling;
                let previousNode = walker.previousNode();
                if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
                return previousNode;
            }
        };
    }
    const $9bf71ea28793e738$var$focusableElements = [
        "input:not([disabled]):not([type=hidden])",
        "select:not([disabled])",
        "textarea:not([disabled])",
        "button:not([disabled])",
        "a[href]",
        "area[href]",
        "summary",
        "iframe",
        "object",
        "embed",
        "audio[controls]",
        "video[controls]",
        "[contenteditable]"
    ];
    const $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
    $9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
    const $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
    function $9bf71ea28793e738$var$getScopeRoot(scope) {
        return scope[0].parentElement;
    }
    function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
        let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
        while(scope && scope.scopeRef !== scopeRef){
            if (scope.contain) return false;
            scope = scope.parent;
        }
        return true;
    }
    function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
        let focusedNode = (React$2.useRef)();
        let raf = (React$2.useRef)();
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let scope = scopeRef.current;
            if (!contain) {
                // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment
                if (raf.current) {
                    cancelAnimationFrame(raf.current);
                    raf.current = undefined;
                }
                return;
            }
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            // Handle the Tab key to contain focus within the scope
            let onKeyDown = (e)=>{
                if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;
                let focusedElement = ownerDocument.activeElement;
                let scope = scopeRef.current;
                if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: true
                }, scope);
                if (!focusedElement) return;
                walker.currentNode = focusedElement;
                let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                if (!nextElement) {
                    walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
                    nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                }
                e.preventDefault();
                if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
            };
            let onFocus = (e)=>{
                // If focusing an element in a child scope of the currently active scope, the child becomes active.
                // Moving out of the active scope to an ancestor is not allowed.
                if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
                    $9bf71ea28793e738$var$activeScope = scopeRef;
                    focusedNode.current = e.target;
                } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
                    // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
                    // restore focus to the previously focused node or the first tabbable element in the active scope.
                    if (focusedNode.current) focusedNode.current.focus();
                    else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
                } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;
            };
            let onBlur = (e)=>{
                // Firefox doesn't shift focus back to the Dialog properly without this
                if (raf.current) cancelAnimationFrame(raf.current);
                raf.current = requestAnimationFrame(()=>{
                    // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
                    if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {
                        $9bf71ea28793e738$var$activeScope = scopeRef;
                        if (ownerDocument.body.contains(e.target)) {
                            var _focusedNode_current;
                            focusedNode.current = e.target;
                            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
                        } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
                    }
                });
            };
            ownerDocument.addEventListener("keydown", onKeyDown, false);
            ownerDocument.addEventListener("focusin", onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener("focusin", onFocus, false));
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener("focusout", onBlur, false));
            return ()=>{
                ownerDocument.removeEventListener("keydown", onKeyDown, false);
                ownerDocument.removeEventListener("focusin", onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener("focusin", onFocus, false));
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener("focusout", onBlur, false));
            };
        }, [
            scopeRef,
            contain
        ]);
        // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur
        // eslint-disable-next-line arrow-body-style
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            return ()=>{
                if (raf.current) cancelAnimationFrame(raf.current);
            };
        }, [
            raf
        ]);
    }
    function $9bf71ea28793e738$var$isElementInAnyScope(element) {
        return $9bf71ea28793e738$var$isElementInChildScope(element);
    }
    function $9bf71ea28793e738$var$isElementInScope(element, scope) {
        if (!element) return false;
        if (!scope) return false;
        return scope.some((node)=>node.contains(element));
    }
    function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
        // If the element is within a top layer element (e.g. toasts), always allow moving focus there.
        if (element instanceof Element && element.closest("[data-react-aria-top-layer]")) return true;
        // node.contains in isElementInScope covers child scopes that are also DOM children,
        // but does not cover child scopes in portals.
        for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))){
            if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
        }
        return false;
    }
    function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
        var _focusScopeTree_getTreeNode;
        let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
        while(parent){
            if (parent.scopeRef === ancestor) return true;
            parent = parent.parent;
        }
        return false;
    }
    function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
        if (element != null && !scroll) try {
            (0, $6a99195332edec8b$export$80f3e147d781571c)(element);
        } catch (err) {
        // ignore
        }
        else if (element != null) try {
            element.focus();
        } catch (err) {
        // ignore
        }
    }
    function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
        let sentinel = scope[0].previousElementSibling;
        let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
        let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
            tabbable: tabbable
        }, scope);
        walker.currentNode = sentinel;
        let nextNode = walker.nextNode();
        // If the scope does not contain a tabbable element, use the first focusable element.
        if (tabbable && !nextNode) {
            scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: false
            }, scope);
            walker.currentNode = sentinel;
            nextNode = walker.nextNode();
        }
        $9bf71ea28793e738$var$focusElement(nextNode);
    }
    function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
        const autoFocusRef = (React__default["default"]).useRef(autoFocus);
        (React$2.useEffect)(()=>{
            if (autoFocusRef.current) {
                $9bf71ea28793e738$var$activeScope = scopeRef;
                const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
                if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
            }
            autoFocusRef.current = false;
        }, [
            scopeRef
        ]);
    }
    function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
        // tracks the active scope, in case restore and contain are both false.
        // if either are true, this is tracked in useRestoreFocus or useFocusContainment.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (restore || contain) return;
            let scope = scopeRef.current;
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            let onFocus = (e)=>{
                let target = e.target;
                if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
                else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
            };
            ownerDocument.addEventListener("focusin", onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener("focusin", onFocus, false));
            return ()=>{
                ownerDocument.removeEventListener("focusin", onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener("focusin", onFocus, false));
            };
        }, [
            scopeRef,
            restore,
            contain
        ]);
    }
    function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
        let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
        while(scope && scope.scopeRef !== scopeRef){
            if (scope.nodeToRestore) return false;
            scope = scope.parent;
        }
        return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
    }
    function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
        // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
        // eslint-disable-next-line no-restricted-globals
        const nodeToRestoreRef = (React$2.useRef)(typeof document !== "undefined" ? ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);
        // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus
        // restoring-non-containing scopes should only care if they become active so they can perform the restore
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let scope = scopeRef.current;
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            if (!restoreFocus || contain) return;
            let onFocus = ()=>{
                // If focusing an element in a child scope of the currently active scope, the child becomes active.
                // Moving out of the active scope to an ancestor is not allowed.
                if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
            };
            ownerDocument.addEventListener("focusin", onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener("focusin", onFocus, false));
            return ()=>{
                ownerDocument.removeEventListener("focusin", onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener("focusin", onFocus, false));
            };
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            scopeRef,
            contain
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
            if (!restoreFocus) return;
            // Handle the Tab key so that tabbing out of the scope goes to the next element
            // after the node that had focus when the scope mounted. This is important when
            // using portals for overlays, so that focus goes to the expected element when
            // tabbing out of the overlay.
            let onKeyDown = (e)=>{
                if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;
                let focusedElement = ownerDocument.activeElement;
                if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;
                let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
                if (!treeNode) return;
                let nodeToRestore = treeNode.nodeToRestore;
                // Create a DOM tree walker that matches all tabbable elements
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
                    tabbable: true
                });
                // Find the next tabbable element after the currently focused element
                walker.currentNode = focusedElement;
                let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {
                    nodeToRestore = undefined;
                    treeNode.nodeToRestore = undefined;
                }
                // If there is no next element, or it is outside the current scope, move focus to the
                // next element after the node to restore to instead.
                if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
                    walker.currentNode = nodeToRestore;
                    // Skip over elements within the scope, in case the scope immediately follows the node to restore.
                    do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                    while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
                    e.preventDefault();
                    e.stopPropagation();
                    if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
                    else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
                    // then move focus to the body.
                    // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
                    if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
                    else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
                }
            };
            if (!contain) ownerDocument.addEventListener("keydown", onKeyDown, true);
            return ()=>{
                if (!contain) ownerDocument.removeEventListener("keydown", onKeyDown, true);
            };
        }, [
            scopeRef,
            restoreFocus,
            contain
        ]);
        // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
            if (!restoreFocus) return;
            let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (!treeNode) return;
            var _nodeToRestoreRef_current;
            treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;
            return ()=>{
                let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
                if (!treeNode) return;
                let nodeToRestore = treeNode.nodeToRestore;
                // if we already lost focus to the body and this was the active scope, then we should attempt to restore
                if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
                ($9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
                    // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it
                    let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
                    requestAnimationFrame(()=>{
                        // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere
                        if (ownerDocument.activeElement === ownerDocument.body) {
                            // look up the tree starting with our scope to find a nodeToRestore still in the DOM
                            let treeNode = clonedTree.getTreeNode(scopeRef);
                            while(treeNode){
                                if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {
                                    $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);
                                    return;
                                }
                                treeNode = treeNode.parent;
                            }
                            // If no nodeToRestore was found, focus the first element in the nearest
                            // ancestor scope that is still in the tree.
                            treeNode = clonedTree.getTreeNode(scopeRef);
                            while(treeNode){
                                if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                                    $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);
                                    return;
                                }
                                treeNode = treeNode.parent;
                            }
                        }
                    });
                }
            };
        }, [
            scopeRef,
            restoreFocus
        ]);
    }
    function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
        let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
        let walker = ($431fbd86ca7dc216$export$b204af158042fbac)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
            acceptNode (node) {
                var _opts_from;
                // Skip nodes inside the starting node.
                if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
                if (node.matches(selector) && ($645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
                return NodeFilter.FILTER_SKIP;
            }
        });
        if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
        return walker;
    }
    class $9bf71ea28793e738$var$Tree {
        get size() {
            return this.fastMap.size;
        }
        getTreeNode(data) {
            return this.fastMap.get(data);
        }
        addTreeNode(scopeRef, parent, nodeToRestore) {
            let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
            if (!parentNode) return;
            let node = new $9bf71ea28793e738$var$TreeNode({
                scopeRef: scopeRef
            });
            parentNode.addChild(node);
            node.parent = parentNode;
            this.fastMap.set(scopeRef, node);
            if (nodeToRestore) node.nodeToRestore = nodeToRestore;
        }
        addNode(node) {
            this.fastMap.set(node.scopeRef, node);
        }
        removeTreeNode(scopeRef) {
            // never remove the root
            if (scopeRef === null) return;
            let node = this.fastMap.get(scopeRef);
            if (!node) return;
            let parentNode = node.parent;
            // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing
            // if we are, then replace the siblings restore with the restore from the scope we're removing
            for (let current of this.traverse())if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
            let children = node.children;
            if (parentNode) {
                parentNode.removeChild(node);
                if (children.size > 0) children.forEach((child)=>parentNode && parentNode.addChild(child));
            }
            this.fastMap.delete(node.scopeRef);
        }
        // Pre Order Depth First
        *traverse(node = this.root) {
            if (node.scopeRef != null) yield node;
            if (node.children.size > 0) for (let child of node.children)yield* this.traverse(child);
        }
        clone() {
            var _node_parent;
            let newTree = new $9bf71ea28793e738$var$Tree();
            var _node_parent_scopeRef;
            for (let node of this.traverse())newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);
            return newTree;
        }
        constructor(){
            this.fastMap = new Map();
            this.root = new $9bf71ea28793e738$var$TreeNode({
                scopeRef: null
            });
            this.fastMap.set(null, this.root);
        }
    }
    class $9bf71ea28793e738$var$TreeNode {
        addChild(node) {
            this.children.add(node);
            node.parent = this;
        }
        removeChild(node) {
            this.children.delete(node);
            node.parent = undefined;
        }
        constructor(props){
            this.children = new Set();
            this.contain = false;
            this.scopeRef = props.scopeRef;
        }
    }
    let $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CloseIconRound = function () { return (React__default["default"].createElement("svg", { "data-testid": 'close-icon-round', fill: 'none', height: '28', viewBox: '0 0 28 28', width: '28', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("rect", { fill: '#72767E', height: '28', rx: '14', width: '28' }),
        React__default["default"].createElement("circle", { cx: '14', cy: '14', fill: '#72767E', r: '12' }),
        React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z', fill: 'white', fillRule: 'evenodd' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Modal = function (_a) {
        var children = _a.children, onClose = _a.onClose, open = _a.open;
        var t = useTranslationContext('Modal').t;
        var themeVersion = useChatContext('Modal').themeVersion;
        var innerRef = React$2.useRef(null);
        var closeRef = React$2.useRef(null);
        var handleClick = function (event) {
            var target = event.target;
            if (!innerRef.current || !closeRef.current)
                return;
            if (!innerRef.current.contains(target) || closeRef.current.contains(target))
                onClose === null || onClose === void 0 ? void 0 : onClose(event);
        };
        React$2.useEffect(function () {
            if (!open)
                return;
            var handleKeyDown = function (event) {
                if (event.key === 'Escape')
                    onClose === null || onClose === void 0 ? void 0 : onClose(event);
            };
            document.addEventListener('keydown', handleKeyDown);
            return function () { return document.removeEventListener('keydown', handleKeyDown); };
        }, [onClose, open]);
        if (!open)
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__modal str-chat__modal--open', onClick: handleClick },
            React__default["default"].createElement($9bf71ea28793e738$export$20e40289641fbbb6, { autoFocus: true, contain: true },
                React__default["default"].createElement("button", { className: 'str-chat__modal__close-button', ref: closeRef, title: t('Close') },
                    themeVersion === '2' && React__default["default"].createElement(CloseIconRound, null),
                    themeVersion === '1' && (React__default["default"].createElement(React__default["default"].Fragment, null,
                        t('Close'),
                        React__default["default"].createElement("svg", { height: '10', width: '10', xmlns: 'http://www.w3.org/2000/svg' },
                            React__default["default"].createElement("path", { d: 'M9.916 1.027L8.973.084 5 4.058 1.027.084l-.943.943L4.058 5 .084 8.973l.943.943L5 5.942l3.973 3.974.943-.943L5.942 5z', fillRule: 'evenodd' }))))),
                React__default["default"].createElement("div", { className: 'str-chat__modal__inner str-chat-react__modal__inner', ref: innerRef }, children))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    var imageGallery = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,t){module.exports=t(React__default["default"]);}(commonjsGlobal,(function(e){return (()=>{var t={703:(e,t,n)=>{var i=n(414);function r(){}function a(){}a.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,a,s){if(s!==i){var o=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw o.name="Invariant Violation",o}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:r};return n.PropTypes=n,n};},697:(e,t,n)=>{e.exports=n(703)();},414:e=>{e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";},590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,i="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,s){if(e===s)return !0;if(e&&s&&"object"==typeof e&&"object"==typeof s){if(e.constructor!==s.constructor)return !1;var o,l,u,c;if(Array.isArray(e)){if((o=e.length)!=s.length)return !1;for(l=o;0!=l--;)if(!a(e[l],s[l]))return !1;return !0}if(n&&e instanceof Map&&s instanceof Map){if(e.size!==s.size)return !1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return !1;for(c=e.entries();!(l=c.next()).done;)if(!a(l.value[1],s.get(l.value[0])))return !1;return !0}if(i&&e instanceof Set&&s instanceof Set){if(e.size!==s.size)return !1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return !1;return !0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(s)){if((o=e.length)!=s.length)return !1;for(l=o;0!=l--;)if(e[l]!==s[l])return !1;return !0}if(e.constructor===RegExp)return e.source===s.source&&e.flags===s.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===s.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===s.toString();if((o=(u=Object.keys(e)).length)!==Object.keys(s).length)return !1;for(l=o;0!=l--;)if(!Object.prototype.hasOwnProperty.call(s,u[l]))return !1;if(t&&e instanceof Element)return !1;for(l=o;0!=l--;)if(("_owner"!==u[l]&&"__v"!==u[l]&&"__o"!==u[l]||!e.$$typeof)&&!a(e[u[l]],s[u[l]]))return !1;return !0}return e!=e&&s!=s}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}};},37:function(e,t,n){!function(e,t){function n(){return n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);}return e},n.apply(this,arguments)}var i="Left",r="Right",a="Down",s={delta:10,preventDefaultTouchmoveEvent:!1,rotationAngle:0,trackMouse:!1,trackTouch:!0},o={first:!0,initial:[0,0],start:0,swiping:!1,xy:[0,0]},l="mousemove",u="mouseup";function c(e,t){if(0===t)return e;var n=Math.PI/180*t;return [e[0]*Math.cos(n)+e[1]*Math.sin(n),e[1]*Math.cos(n)-e[0]*Math.sin(n)]}function h(e,t){var s=function(t){t&&"touches"in t&&t.touches.length>1||e((function(e,i){i.trackMouse&&(document.addEventListener(l,h),document.addEventListener(u,f));var r="touches"in t?t.touches[0]:t,a=c([r.clientX,r.clientY],i.rotationAngle);return n({},e,o,{initial:[].concat(a),xy:a,start:t.timeStamp||0})}));},h=function(t){e((function(e,s){if("touches"in t&&t.touches.length>1)return e;var o="touches"in t?t.touches[0]:t,l=c([o.clientX,o.clientY],s.rotationAngle),u=l[0],h=l[1],d=u-e.xy[0],f=h-e.xy[1],p=Math.abs(d),m=Math.abs(f),g=(t.timeStamp||0)-e.start,v=Math.sqrt(p*p+m*m)/(g||1),b=[d/(g||1),f/(g||1)];if(p<s.delta&&m<s.delta&&!e.swiping)return e;var y=function(e,t,n,s){return e>t?n>0?r:i:s>0?a:"Up"}(p,m,d,f),w={absX:p,absY:m,deltaX:d,deltaY:f,dir:y,event:t,first:e.first,initial:e.initial,velocity:v,vxvy:b};s.onSwiping&&s.onSwiping(w);var T=!1;return (s.onSwiping||s.onSwiped||"onSwiped"+y in s)&&(T=!0),T&&s.preventDefaultTouchmoveEvent&&s.trackTouch&&t.cancelable&&t.preventDefault(),n({},e,{first:!1,eventData:w,swiping:!0})}));},d=function(t){e((function(e,i){var r;if(e.swiping&&e.eventData){r=n({},e.eventData,{event:t}),i.onSwiped&&i.onSwiped(r);var a="onSwiped"+r.dir;a in i&&i[a](r);}else i.onTap&&i.onTap({event:t});return n({},e,o,{eventData:r})}));},f=function(e){document.removeEventListener(l,h),document.removeEventListener(u,f),d(e);},p=function(e,t){var n=function(){};if(e&&e.addEventListener){var i=[["touchstart",s],["touchmove",h],["touchend",d]];i.forEach((function(n){var i=n[0],r=n[1];return e.addEventListener(i,r,{passive:t})})),n=function(){return i.forEach((function(t){var n=t[0],i=t[1];return e.removeEventListener(n,i)}))};}return n},m={ref:function(t){null!==t&&e((function(e,i){if(e.el===t)return e;var r={};return e.el&&e.el!==t&&e.cleanUpTouch&&(e.cleanUpTouch(),r.cleanUpTouch=void 0),i.trackTouch&&t&&(r.cleanUpTouch=p(t,!i.preventDefaultTouchmoveEvent)),n({},e,{el:t},r)}));}};return t.trackMouse&&(m.onMouseDown=s),[m,p]}e.DOWN=a,e.LEFT=i,e.RIGHT=r,e.UP="Up",e.useSwipeable=function(e){var i=e.trackMouse,r=t.useRef(n({},o)),a=t.useRef(n({},s));a.current=n({},s,e);var l=t.useMemo((function(){return h((function(e){return r.current=e(r.current,a.current)}),{trackMouse:i})}),[i]),u=l[0],c=l[1];return r.current=function(e,t,i){var r={};return !t.trackTouch&&e.cleanUpTouch?(e.cleanUpTouch(),r.cleanUpTouch=void 0):t.trackTouch&&!e.cleanUpTouch&&e.el&&(r.cleanUpTouch=i(e.el,!t.preventDefaultTouchmoveEvent)),n({},e,r)}(r.current,a.current,c),u};}(t,n(888));},888:t=>{t.exports=e;}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var a=n[e]={exports:{}};return t[e].call(a.exports,a,a.exports,i),a.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]});},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});};var r={};return (()=>{function e(t){var n,i,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(n=0;n<t.length;n++)t[n]&&(i=e(t[n]))&&(r&&(r+=" "),r+=i);else for(n in t)t[n]&&(r&&(r+=" "),r+=n);return r}function t(){for(var t,n,i=0,r="";i<arguments.length;)(t=arguments[i++])&&(n=e(t))&&(r&&(r+=" "),r+=n);return r}i.r(r),i.d(r,{default:()=>Pe});var n=i(888),a=i.n(n);const s=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},o="object"==typeof commonjsGlobal&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;var l="object"==typeof self&&self&&self.Object===Object&&self;const u=o||l||Function("return this")(),c=function(){return u.Date.now()};var h=/\s/;var d=/^\s+/;const f=function(e){return e?e.slice(0,function(e){for(var t=e.length;t--&&h.test(e.charAt(t)););return t}(e)+1).replace(d,""):e},p=u.Symbol;var m=Object.prototype,g=m.hasOwnProperty,v=m.toString,b=p?p.toStringTag:void 0;var y=Object.prototype.toString;var w=p?p.toStringTag:void 0;const T=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":w&&w in Object(e)?function(e){var t=g.call(e,b),n=e[b];try{e[b]=void 0;var i=!0;}catch(e){}var r=v.call(e);return i&&(t?e[b]=n:delete e[b]),r}(e):function(e){return y.call(e)}(e)};var S=/^[-+]0x[0-9a-f]+$/i,O=/^0b[01]+$/i,E=/^0o[0-7]+$/i,k=parseInt;const I=function(e){if("number"==typeof e)return e;if(function(e){return "symbol"==typeof e||function(e){return null!=e&&"object"==typeof e}(e)&&"[object Symbol]"==T(e)}(e))return NaN;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t;}if("string"!=typeof e)return 0===e?e:+e;e=f(e);var n=O.test(e);return n||E.test(e)?k(e.slice(2),n?2:8):S.test(e)?NaN:+e};var x=Math.max,_=Math.min;const R=function(e,t,n){var i,r,a,o,l,u,h=0,d=!1,f=!1,p=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=i,a=r;return i=r=void 0,h=t,o=e.apply(a,n)}function g(e){return h=e,l=setTimeout(b,t),d?m(e):o}function v(e){var n=e-u;return void 0===u||n>=t||n<0||f&&e-h>=a}function b(){var e=c();if(v(e))return y(e);l=setTimeout(b,function(e){var n=t-(e-u);return f?_(n,a-(e-h)):n}(e));}function y(e){return l=void 0,p&&i?m(e):(i=r=void 0,o)}function w(){var e=c(),n=v(e);if(i=arguments,r=this,u=e,n){if(void 0===l)return g(u);if(f)return clearTimeout(l),l=setTimeout(b,t),m(u)}return void 0===l&&(l=setTimeout(b,t)),o}return t=I(t)||0,s(n)&&(d=!!n.leading,a=(f="maxWait"in n)?x(I(n.maxWait)||0,t):a,p="trailing"in n?!!n.trailing:p),w.cancel=function(){void 0!==l&&clearTimeout(l),h=0,i=u=r=l=void 0;},w.flush=function(){return void 0===l?o:y(c())},w},L=function(e,t,n){var i=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return s(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),R(e,t,{leading:i,maxWait:t,trailing:r})};var P=i(590),M=i.n(P),W=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,i){return e[0]===t&&(n=i,!0)})),n}return function(){function t(){this.__entries__=[];}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),i=this.__entries__[n];return i&&i[1]},t.prototype.set=function(t,n){var i=e(this.__entries__,t);~i?this.__entries__[i][1]=n:this.__entries__.push([t,n]);},t.prototype.delete=function(t){var n=this.__entries__,i=e(n,t);~i&&n.splice(i,1);},t.prototype.has=function(t){return !!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0);},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,i=this.__entries__;n<i.length;n++){var r=i[n];e.call(t,r[1],r[0]);}},t}()}(),D="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,F=void 0!==i.g&&i.g.Math===Math?i.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),C="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(F):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},N=["top","right","bottom","left","width","height","size","weight"],z="undefined"!=typeof MutationObserver,j=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,i=!1,r=0;function a(){n&&(n=!1,e()),i&&o();}function s(){C(a);}function o(){var e=Date.now();if(n){if(e-r<2)return;i=!0;}else n=!0,i=!1,setTimeout(s,20);r=e;}return o}(this.refresh.bind(this));}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_();},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_();},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh();},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){D&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),z?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0);},e.prototype.disconnect_=function(){D&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1);},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;N.some((function(e){return !!~n.indexOf(e)}))&&this.refresh();},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),B=function(e,t){for(var n=0,i=Object.keys(t);n<i.length;n++){var r=i[n];Object.defineProperty(e,r,{value:t[r],enumerable:!1,writable:!1,configurable:!0});}return e},A=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||F},G=V(0,0,0,0);function U(e){return parseFloat(e)||0}function H(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+U(e["border-"+n+"-width"])}),0)}var q="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof A(e).SVGGraphicsElement}:function(e){return e instanceof A(e).SVGElement&&"function"==typeof e.getBBox};function K(e){return D?q(e)?function(e){var t=e.getBBox();return V(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return G;var i=A(e).getComputedStyle(e),r=function(e){for(var t={},n=0,i=["top","right","bottom","left"];n<i.length;n++){var r=i[n],a=e["padding-"+r];t[r]=U(a);}return t}(i),a=r.left+r.right,s=r.top+r.bottom,o=U(i.width),l=U(i.height);if("border-box"===i.boxSizing&&(Math.round(o+a)!==t&&(o-=H(i,"left","right")+a),Math.round(l+s)!==n&&(l-=H(i,"top","bottom")+s)),!function(e){return e===A(e).document.documentElement}(e)){var u=Math.round(o+a)-t,c=Math.round(l+s)-n;1!==Math.abs(u)&&(o-=u),1!==Math.abs(c)&&(l-=c);}return V(r.left,r.top,o,l)}(e):G}function V(e,t,n,i){return {x:e,y:t,width:n,height:i}}var X=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=V(0,0,0,0),this.target=e;}return e.prototype.isActive=function(){var e=K(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Y=function(e,t){var n,i,r,a,s,o,l,u=(i=(n=t).x,r=n.y,a=n.width,s=n.height,o="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,l=Object.create(o.prototype),B(l,{x:i,y:r,width:a,height:s,top:r,right:i+a,bottom:s+r,left:i}),l);B(this,{target:e,contentRect:u});},$=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new W,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n;}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof A(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new X(e)),this.controller_.addObserver(this),this.controller_.refresh());}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof A(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this));}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this);},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t);}));},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Y(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive();}},e.prototype.clearActive=function(){this.activeObservations_.splice(0);},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),J="undefined"!=typeof WeakMap?new WeakMap:new W,Q=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=j.getInstance(),i=new $(t,n,this);J.set(this,i);};["observe","unobserve","disconnect"].forEach((function(e){Q.prototype[e]=function(){var t;return (t=J.get(this))[e].apply(t,arguments)};}));const Z=void 0!==F.ResizeObserver?F.ResizeObserver:Q;var ee=i(37),te=i(697),ne=a().memo((function(e){var t=e.description,n=e.fullscreen,i=e.handleImageLoaded,r=e.isFullscreen,s=e.onImageError,o=e.original,l=e.originalAlt,u=e.originalHeight,c=e.originalWidth,h=e.originalTitle,d=e.sizes,f=e.srcSet,p=e.loading,m=r&&n||o;return a().createElement(a().Fragment,null,a().createElement("img",{className:"image-gallery-image",src:m,alt:l,srcSet:f,height:u,width:c,sizes:d,title:h,onLoad:function(e){return i(e,o)},onError:s,loading:p}),t&&a().createElement("span",{className:"image-gallery-description"},t))}));ne.displayName="Item",ne.propTypes={description:te.string,fullscreen:te.string,handleImageLoaded:te.func.isRequired,isFullscreen:te.bool,onImageError:te.func.isRequired,original:te.string.isRequired,originalAlt:te.string,originalHeight:te.string,originalWidth:te.string,originalTitle:te.string,sizes:te.string,srcSet:te.string,loading:te.string},ne.defaultProps={description:"",fullscreen:"",isFullscreen:!1,originalAlt:"",originalHeight:"",originalWidth:"",originalTitle:"",sizes:"",srcSet:"",loading:"eager"};const ie=ne;var re={left:a().createElement("polyline",{points:"15 18 9 12 15 6"}),right:a().createElement("polyline",{points:"9 18 15 12 9 6"}),maximize:a().createElement("path",{d:"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"}),minimize:a().createElement("path",{d:"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"}),play:a().createElement("polygon",{points:"5 3 19 12 5 21 5 3"}),pause:a().createElement(a().Fragment,null,a().createElement("rect",{x:"6",y:"4",width:"4",height:"16"}),a().createElement("rect",{x:"14",y:"4",width:"4",height:"16"}))},ae=function(e){var t=e.strokeWidth,n=e.viewBox,i=e.icon;return a().createElement("svg",{className:"image-gallery-svg",xmlns:"http://www.w3.org/2000/svg",viewBox:n,fill:"none",stroke:"currentColor",strokeWidth:t,strokeLinecap:"round",strokeLinejoin:"round"},re[i])};ae.propTypes={strokeWidth:te.number,viewBox:te.string,icon:(0, te.oneOf)(["left","right","maximize","minimize","play","pause"]).isRequired},ae.defaultProps={strokeWidth:1,viewBox:"0 0 24 24"};const se=ae;var oe=a().memo((function(e){var t=e.isFullscreen,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-fullscreen-button",onClick:n,"aria-label":"Open Fullscreen"},a().createElement(se,{strokeWidth:2,icon:t?"minimize":"maximize"}))}));oe.displayName="Fullscreen",oe.propTypes={isFullscreen:te.bool.isRequired,onClick:te.func.isRequired};const le=oe;var ue=a().memo((function(e){var t=e.disabled,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-left-nav",disabled:t,onClick:n,"aria-label":"Previous Slide"},a().createElement(se,{icon:"left",viewBox:"6 0 12 24"}))}));ue.displayName="LeftNav",ue.propTypes={disabled:te.bool.isRequired,onClick:te.func.isRequired};const ce=ue;var he=a().memo((function(e){var t=e.disabled,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-right-nav",disabled:t,onClick:n,"aria-label":"Next Slide"},a().createElement(se,{icon:"right",viewBox:"6 0 12 24"}))}));he.displayName="RightNav",he.propTypes={disabled:te.bool.isRequired,onClick:te.func.isRequired};const de=he;var fe=a().memo((function(e){var t=e.isPlaying,n=e.onClick;return a().createElement("button",{type:"button",className:"image-gallery-icon image-gallery-play-button",onClick:n,"aria-label":"Play or Pause Slideshow"},a().createElement(se,{strokeWidth:2,icon:t?"pause":"play"}))}));fe.displayName="PlayPause",fe.propTypes={isPlaying:te.bool.isRequired,onClick:te.func.isRequired};const pe=fe;function me(){return me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);}return e},me.apply(this,arguments)}var ge=function(e){var t=e.children,n=e.className,i=e.delta,r=e.onSwiping,s=e.onSwiped,o=(0, ee.useSwipeable)({delta:i,onSwiping:r,onSwiped:s});return a().createElement("div",me({},o,{className:n}),t)};ge.propTypes={children:te.node.isRequired,className:te.string,delta:te.number,onSwiped:te.func,onSwiping:te.func},ge.defaultProps={className:"",delta:0,onSwiping:function(){},onSwiped:function(){}};const ve=ge;function be(e){return be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},be(e)}function ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i);}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ye(Object(n),!0).forEach((function(t){Te(e,t,n[t]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));}));}return e}function Te(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Se(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i);}}function Oe(e,t){return Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Oe(e,t)}function Ee(e,t){return !t||"object"!==be(t)&&"function"!=typeof t?ke(e):t}function ke(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ie(e){return Ie=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Ie(e)}var xe=["fullscreenchange","MSFullscreenChange","mozfullscreenchange","webkitfullscreenchange"],_e=(0, te.arrayOf)((0, te.shape)({srcSet:te.string,media:te.string}));function Re(e){var t=parseInt(e.keyCode||e.which||0,10);return 66===t||62===t}var Le=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Oe(e,t);}(l,e);var n,i,r,s,o=(r=l,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return !1}}(),function(){var e,t=Ie(r);if(s){var n=Ie(this).constructor;e=Reflect.construct(t,arguments,n);}else e=t.apply(this,arguments);return Ee(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=o.call(this,e)).state={currentIndex:e.startIndex,thumbsTranslate:0,thumbsSwipedTranslate:0,currentSlideOffset:0,galleryWidth:0,thumbnailsWrapperWidth:0,thumbnailsWrapperHeight:0,thumbsStyle:{transition:"all ".concat(e.slideDuration,"ms ease-out")},isFullscreen:!1,isSwipingThumbnail:!1,isPlaying:!1},t.loadedImages={},t.imageGallery=a().createRef(),t.thumbnailsWrapper=a().createRef(),t.thumbnails=a().createRef(),t.imageGallerySlideWrapper=a().createRef(),t.handleImageLoaded=t.handleImageLoaded.bind(ke(t)),t.handleKeyDown=t.handleKeyDown.bind(ke(t)),t.handleMouseDown=t.handleMouseDown.bind(ke(t)),t.handleResize=t.handleResize.bind(ke(t)),t.handleTouchMove=t.handleTouchMove.bind(ke(t)),t.handleOnSwiped=t.handleOnSwiped.bind(ke(t)),t.handleScreenChange=t.handleScreenChange.bind(ke(t)),t.handleSwiping=t.handleSwiping.bind(ke(t)),t.handleThumbnailSwiping=t.handleThumbnailSwiping.bind(ke(t)),t.handleOnThumbnailSwiped=t.handleOnThumbnailSwiped.bind(ke(t)),t.onThumbnailMouseLeave=t.onThumbnailMouseLeave.bind(ke(t)),t.handleImageError=t.handleImageError.bind(ke(t)),t.pauseOrPlay=t.pauseOrPlay.bind(ke(t)),t.renderThumbInner=t.renderThumbInner.bind(ke(t)),t.renderItem=t.renderItem.bind(ke(t)),t.slideLeft=t.slideLeft.bind(ke(t)),t.slideRight=t.slideRight.bind(ke(t)),t.toggleFullScreen=t.toggleFullScreen.bind(ke(t)),t.togglePlay=t.togglePlay.bind(ke(t)),t.unthrottledSlideToIndex=t.slideToIndex,t.slideToIndex=L(t.unthrottledSlideToIndex,e.slideDuration,{trailing:!1}),e.lazyLoad&&(t.lazyLoaded=[]),t}return n=l,i=[{key:"componentDidMount",value:function(){var e=this.props,t=e.autoPlay,n=e.useWindowKeyDown;t&&this.play(),n?window.addEventListener("keydown",this.handleKeyDown):this.imageGallery.current.addEventListener("keydown",this.handleKeyDown),window.addEventListener("mousedown",this.handleMouseDown),window.addEventListener("touchmove",this.handleTouchMove,{passive:!1}),this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper),this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper),this.addScreenChangeEvent();}},{key:"componentDidUpdate",value:function(e,t){var n=this.props,i=n.items,r=n.lazyLoad,a=n.slideDuration,s=n.slideInterval,o=n.startIndex,l=n.thumbnailPosition,u=n.showThumbnails,c=n.useWindowKeyDown,h=this.state,d=h.currentIndex,f=h.isPlaying,p=e.items.length!==i.length,m=!M()(e.items,i),g=e.startIndex!==o,v=e.thumbnailPosition!==l,b=e.showThumbnails!==u;s===e.slideInterval&&a===e.slideDuration||f&&(this.pause(),this.play()),v&&(this.removeResizeObserver(),this.initSlideWrapperResizeObserver(this.imageGallerySlideWrapper),this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper)),b&&u&&this.initThumbnailWrapperResizeObserver(this.thumbnailsWrapper),b&&!u&&this.removeThumbnailsResizeObserver(),(p||b)&&this.handleResize(),t.currentIndex!==d&&this.slideThumbnailBar(),e.slideDuration!==a&&(this.slideToIndex=L(this.unthrottledSlideToIndex,a,{trailing:!1})),!r||e.lazyLoad&&!m||(this.lazyLoaded=[]),c!==e.useWindowKeyDown&&(c?(this.imageGallery.current.removeEventListener("keydown",this.handleKeyDown),window.addEventListener("keydown",this.handleKeyDown)):(window.removeEventListener("keydown",this.handleKeyDown),this.imageGallery.current.addEventListener("keydown",this.handleKeyDown))),(g||m)&&this.setState({currentIndex:o,slideStyle:{transition:"none"}});}},{key:"componentWillUnmount",value:function(){var e=this.props.useWindowKeyDown;window.removeEventListener("mousedown",this.handleMouseDown),window.removeEventListener("touchmove",this.handleTouchMove),this.removeScreenChangeEvent(),this.removeResizeObserver(),this.playPauseIntervalId&&(window.clearInterval(this.playPauseIntervalId),this.playPauseIntervalId=null),this.transitionTimer&&window.clearTimeout(this.transitionTimer),e?window.removeEventListener("keydown",this.handleKeyDown):this.imageGallery.current.removeEventListener("keydown",this.handleKeyDown);}},{key:"onSliding",value:function(){var e=this,t=this.state,n=t.currentIndex,i=t.isTransitioning,r=this.props,a=r.onSlide,s=r.slideDuration;this.transitionTimer=window.setTimeout((function(){i&&(e.setState({isTransitioning:!i,isSwipingThumbnail:!1}),a&&a(n));}),s+50);}},{key:"onThumbnailClick",value:function(e,t){var n=this.props.onThumbnailClick;e.target.parentNode.parentNode.blur(),this.slideToIndex(t,e),n&&n(e,t);}},{key:"onThumbnailMouseOver",value:function(e,t){var n=this;this.thumbnailMouseOverTimer&&(window.clearTimeout(this.thumbnailMouseOverTimer),this.thumbnailMouseOverTimer=null),this.thumbnailMouseOverTimer=window.setTimeout((function(){n.slideToIndex(t),n.pause();}),300);}},{key:"onThumbnailMouseLeave",value:function(){if(this.thumbnailMouseOverTimer){var e=this.props.autoPlay;window.clearTimeout(this.thumbnailMouseOverTimer),this.thumbnailMouseOverTimer=null,e&&this.play();}}},{key:"setThumbsTranslate",value:function(e){this.setState({thumbsTranslate:e});}},{key:"setModalFullscreen",value:function(e){var t=this.props.onScreenChange;this.setState({modalFullscreen:e}),t&&t(e);}},{key:"getThumbsTranslate",value:function(e){var t,n=this.props,i=n.disableThumbnailScroll,r=n.items,a=this.state,s=a.thumbnailsWrapperWidth,o=a.thumbnailsWrapperHeight,l=this.thumbnails&&this.thumbnails.current;if(i)return 0;if(l){if(this.isThumbnailVertical()){if(l.scrollHeight<=o)return 0;t=l.scrollHeight-o;}else {if(l.scrollWidth<=s||s<=0)return 0;t=l.scrollWidth-s;}return e*(t/(r.length-1))}return 0}},{key:"getThumbnailPositionClassName",value:function(e){switch(e){case"left":e=" ".concat("image-gallery-thumbnails-left");break;case"right":e=" ".concat("image-gallery-thumbnails-right");break;case"bottom":e=" ".concat("image-gallery-thumbnails-bottom");break;case"top":e=" ".concat("image-gallery-thumbnails-top");}return e}},{key:"getAlignmentClassName",value:function(e){var t=this.state.currentIndex,n=this.props,i=n.infinite,r=n.items,a="",s="image-gallery-left",o="image-gallery-right";switch(e){case t-1:a=" ".concat(s);break;case t:a=" ".concat("image-gallery-center");break;case t+1:a=" ".concat(o);}return r.length>=3&&i&&(0===e&&t===r.length-1?a=" ".concat(o):e===r.length-1&&0===t&&(a=" ".concat(s))),a}},{key:"getTranslateXForTwoSlide",value:function(e){var t=this.state,n=t.currentIndex,i=t.currentSlideOffset,r=t.previousIndex,a=n!==r,s=0===e&&0===r,o=1===e&&1===r,l=0===e&&1===n,u=1===e&&0===n,c=0===i,h=-100*n+100*e+i;return i>0?this.direction="left":i<0&&(this.direction="right"),u&&i>0&&(h=-100+i),l&&i<0&&(h=100+i),a?s&&c&&"left"===this.direction?h=100:o&&c&&"right"===this.direction&&(h=-100):(u&&c&&"left"===this.direction&&(h=-100),l&&c&&"right"===this.direction&&(h=100)),h}},{key:"getThumbnailBarHeight",value:function(){return this.isThumbnailVertical()?{height:this.state.gallerySlideWrapperHeight}:{}}},{key:"getSlideStyle",value:function(e){var t=this.state,n=t.currentIndex,i=t.currentSlideOffset,r=t.slideStyle,a=this.props,s=a.infinite,o=a.items,l=a.useTranslate3D,u=a.isRTL,c=-100*n,h=o.length-1,d=(c+100*e)*(u?-1:1)+i;s&&o.length>2&&(0===n&&e===h?d=-100*(u?-1:1)+i:n===h&&0===e&&(d=100*(u?-1:1)+i)),s&&2===o.length&&(d=this.getTranslateXForTwoSlide(e));var f="translate(".concat(d,"%, 0)");return l&&(f="translate3d(".concat(d,"%, 0, 0)")),we({display:this.isSlideVisible(e)?"inherit":"none",WebkitTransform:f,MozTransform:f,msTransform:f,OTransform:f,transform:f},r)}},{key:"getCurrentIndex",value:function(){return this.state.currentIndex}},{key:"getThumbnailStyle",value:function(){var e,t=this.props,n=t.useTranslate3D,i=t.isRTL,r=this.state,a=r.thumbsTranslate,s=r.thumbsStyle,o=i?-1*a:a;return this.isThumbnailVertical()?(e="translate(0, ".concat(a,"px)"),n&&(e="translate3d(0, ".concat(a,"px, 0)"))):(e="translate(".concat(o,"px, 0)"),n&&(e="translate3d(".concat(o,"px, 0, 0)"))),we({WebkitTransform:e,MozTransform:e,msTransform:e,OTransform:e,transform:e},s)}},{key:"getSlideItems",value:function(){var e=this,n=this.state.currentIndex,i=this.props,r=i.items,s=i.slideOnThumbnailOver,o=i.onClick,l=i.lazyLoad,u=i.onTouchMove,c=i.onTouchEnd,h=i.onTouchStart,d=i.onMouseOver,f=i.onMouseLeave,p=i.renderItem,m=i.renderThumbInner,g=i.showThumbnails,v=i.showBullets,b=[],y=[],w=[];return r.forEach((function(i,r){var T=e.getAlignmentClassName(r),S=i.originalClass?" ".concat(i.originalClass):"",O=i.thumbnailClass?" ".concat(i.thumbnailClass):"",E=i.renderItem||p||e.renderItem,k=i.renderThumbInner||m||e.renderThumbInner,I=!l||T||e.lazyLoaded[r];I&&l&&!e.lazyLoaded[r]&&(e.lazyLoaded[r]=!0);var x=e.getSlideStyle(r),_=a().createElement("div",{"aria-label":"Go to Slide ".concat(r+1),key:"slide-".concat(r),tabIndex:"-1",className:"image-gallery-slide ".concat(T," ").concat(S),style:x,onClick:o,onKeyUp:e.handleSlideKeyUp,onTouchMove:u,onTouchEnd:c,onTouchStart:h,onMouseOver:d,onFocus:d,onMouseLeave:f,role:"button"},I?E(i):a().createElement("div",{style:{height:"100%"}}));if(b.push(_),g&&i.thumbnail){var R=t("image-gallery-thumbnail",O,{active:n===r});y.push(a().createElement("button",{key:"thumbnail-".concat(r),type:"button",tabIndex:"0","aria-pressed":n===r?"true":"false","aria-label":"Go to Slide ".concat(r+1),className:R,onMouseLeave:s?e.onThumbnailMouseLeave:null,onMouseOver:function(t){return e.handleThumbnailMouseOver(t,r)},onFocus:function(t){return e.handleThumbnailMouseOver(t,r)},onKeyUp:function(t){return e.handleThumbnailKeyUp(t,r)},onClick:function(t){return e.onThumbnailClick(t,r)}},k(i)));}if(v){var L=t("image-gallery-bullet",i.bulletClass,{active:n===r});w.push(a().createElement("button",{type:"button",key:"bullet-".concat(r),className:L,onClick:function(t){return i.bulletOnClick&&i.bulletOnClick({item:i,itemIndex:r,currentIndex:n}),t.target.blur(),e.slideToIndex.call(e,r,t)},"aria-pressed":n===r?"true":"false","aria-label":"Go to Slide ".concat(r+1)}));}})),{slides:b,thumbnails:y,bullets:w}}},{key:"ignoreIsTransitioning",value:function(){var e=this.props.items,t=this.state,n=t.previousIndex,i=t.currentIndex,r=e.length-1;return Math.abs(n-i)>1&&!(0===n&&i===r)&&!(n===r&&0===i)}},{key:"isFirstOrLastSlide",value:function(e){return e===this.props.items.length-1||0===e}},{key:"slideIsTransitioning",value:function(e){var t=this.state,n=t.isTransitioning,i=t.previousIndex,r=t.currentIndex;return n&&!(e===i||e===r)}},{key:"isSlideVisible",value:function(e){return !this.slideIsTransitioning(e)||this.ignoreIsTransitioning()&&!this.isFirstOrLastSlide(e)}},{key:"slideThumbnailBar",value:function(){var e=this.state,t=e.currentIndex,n=e.isSwipingThumbnail,i=-this.getThumbsTranslate(t);n||(0===t?this.setState({thumbsTranslate:0,thumbsSwipedTranslate:0}):this.setState({thumbsTranslate:i,thumbsSwipedTranslate:i}));}},{key:"canSlide",value:function(){return this.props.items.length>=2}},{key:"canSlideLeft",value:function(){var e=this.props,t=e.infinite,n=e.isRTL;return t||(n?this.canSlideNext():this.canSlidePrevious())}},{key:"canSlideRight",value:function(){var e=this.props,t=e.infinite,n=e.isRTL;return t||(n?this.canSlidePrevious():this.canSlideNext())}},{key:"canSlidePrevious",value:function(){return this.state.currentIndex>0}},{key:"canSlideNext",value:function(){return this.state.currentIndex<this.props.items.length-1}},{key:"handleSwiping",value:function(e){var t=e.event,n=e.absX,i=e.dir,r=this.props,a=r.disableSwipe,s=r.stopPropagation,o=this.state,l=o.galleryWidth,u=o.isTransitioning,c=o.swipingUpDown,h=o.swipingLeftRight;if(i!==ee.UP&&i!==ee.DOWN&&!c||h){if(i!==ee.LEFT&&i!==ee.RIGHT||h||this.setState({swipingLeftRight:!0}),!a){var d=this.props.swipingTransitionDuration;if(s&&t.preventDefault(),u)this.setState({currentSlideOffset:0});else {var f=i===ee.RIGHT?1:-1,p=n/l*100;Math.abs(p)>=100&&(p=100);var m={transition:"transform ".concat(d,"ms ease-out")};this.setState({currentSlideOffset:f*p,slideStyle:m});}}}else c||this.setState({swipingUpDown:!0});}},{key:"handleThumbnailSwiping",value:function(e){var t=e.event,n=e.absX,i=e.absY,r=e.dir,a=this.props,s=a.stopPropagation,o=a.swipingThumbnailTransitionDuration,l=this.state,u=l.thumbsSwipedTranslate,c=l.thumbnailsWrapperHeight,h=l.thumbnailsWrapperWidth,d=l.swipingUpDown,f=l.swipingLeftRight;if(this.isThumbnailVertical()){if((r===ee.LEFT||r===ee.RIGHT||f)&&!d)return void(f||this.setState({swipingLeftRight:!0}));r!==ee.UP&&r!==ee.DOWN||d||this.setState({swipingUpDown:!0});}else {if((r===ee.UP||r===ee.DOWN||d)&&!f)return void(d||this.setState({swipingUpDown:!0}));r!==ee.LEFT&&r!==ee.RIGHT||f||this.setState({swipingLeftRight:!0});}var p,m,g,v,b,y=this.thumbnails&&this.thumbnails.current;if(this.isThumbnailVertical()?(p=u+(r===ee.DOWN?i:-i),m=y.scrollHeight-c+20,g=Math.abs(p)>m,v=p>20,b=y.scrollHeight<=c):(p=u+(r===ee.RIGHT?n:-n),m=y.scrollWidth-h+20,g=Math.abs(p)>m,v=p>20,b=y.scrollWidth<=h),!b&&(r!==ee.LEFT&&r!==ee.UP||!g)&&(r!==ee.RIGHT&&r!==ee.DOWN||!v)){s&&t.stopPropagation();var w={transition:"transform ".concat(o,"ms ease-out")};this.setState({thumbsTranslate:p,thumbsStyle:w});}}},{key:"handleOnThumbnailSwiped",value:function(){var e=this.state.thumbsTranslate,t=this.props.slideDuration;this.resetSwipingDirection(),this.setState({isSwipingThumbnail:!0,thumbsSwipedTranslate:e,thumbsStyle:{transition:"all ".concat(t,"ms ease-out")}});}},{key:"sufficientSwipe",value:function(){var e=this.state.currentSlideOffset,t=this.props.swipeThreshold;return Math.abs(e)>t}},{key:"resetSwipingDirection",value:function(){var e=this.state,t=e.swipingUpDown,n=e.swipingLeftRight;t&&this.setState({swipingUpDown:!1}),n&&this.setState({swipingLeftRight:!1});}},{key:"handleOnSwiped",value:function(e){var t=e.event,n=e.dir,i=e.velocity,r=this.props,a=r.disableSwipe,s=r.stopPropagation,o=r.flickThreshold;if(!a){var l=this.props.isRTL;s&&t.stopPropagation(),this.resetSwipingDirection();var u=(n===ee.LEFT?1:-1)*(l?-1:1),c=n===ee.UP||n===ee.DOWN,h=i>o&&!c;this.handleOnSwipedTo(u,h);}}},{key:"handleOnSwipedTo",value:function(e,t){var n=this.state,i=n.currentIndex,r=n.isTransitioning,a=i;!this.sufficientSwipe()&&!t||r||(a+=e),(-1===e&&!this.canSlideLeft()||1===e&&!this.canSlideRight())&&(a=i),this.unthrottledSlideToIndex(a);}},{key:"handleTouchMove",value:function(e){this.state.swipingLeftRight&&e.preventDefault();}},{key:"handleMouseDown",value:function(){this.imageGallery.current.classList.add("image-gallery-using-mouse");}},{key:"handleKeyDown",value:function(e){var t=this.props,n=t.disableKeyDown,i=t.useBrowserFullscreen,r=this.state.isFullscreen;if(this.imageGallery.current.classList.remove("image-gallery-using-mouse"),!n)switch(parseInt(e.keyCode||e.which||0,10)){case 37:this.canSlideLeft()&&!this.playPauseIntervalId&&this.slideLeft(e);break;case 39:this.canSlideRight()&&!this.playPauseIntervalId&&this.slideRight(e);break;case 27:r&&!i&&this.exitFullScreen();}}},{key:"handleImageError",value:function(e){var t=this.props.onErrorImageURL;t&&-1===e.target.src.indexOf(t)&&(e.target.src=t);}},{key:"removeThumbnailsResizeObserver",value:function(){this.resizeThumbnailWrapperObserver&&this.thumbnailsWrapper&&this.thumbnailsWrapper.current&&(this.resizeThumbnailWrapperObserver.unobserve(this.thumbnailsWrapper.current),this.resizeThumbnailWrapperObserver=null);}},{key:"removeResizeObserver",value:function(){this.resizeSlideWrapperObserver&&this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current&&(this.resizeSlideWrapperObserver.unobserve(this.imageGallerySlideWrapper.current),this.resizeSlideWrapperObserver=null),this.removeThumbnailsResizeObserver();}},{key:"handleResize",value:function(){var e=this.state.currentIndex;this.imageGallery&&(this.imageGallery&&this.imageGallery.current&&this.setState({galleryWidth:this.imageGallery.current.offsetWidth}),this.imageGallerySlideWrapper&&this.imageGallerySlideWrapper.current&&this.setState({gallerySlideWrapperHeight:this.imageGallerySlideWrapper.current.offsetHeight}),this.setThumbsTranslate(-this.getThumbsTranslate(e)));}},{key:"initSlideWrapperResizeObserver",value:function(e){var t=this;e&&!e.current||(this.resizeSlideWrapperObserver=new Z(R((function(e){e&&e.forEach((function(e){t.setState({thumbnailsWrapperWidth:e.contentRect.width},t.handleResize);}));}),50)),this.resizeSlideWrapperObserver.observe(e.current));}},{key:"initThumbnailWrapperResizeObserver",value:function(e){var t=this;e&&!e.current||(this.resizeThumbnailWrapperObserver=new Z(R((function(e){e&&e.forEach((function(e){t.setState({thumbnailsWrapperHeight:e.contentRect.height},t.handleResize);}));}),50)),this.resizeThumbnailWrapperObserver.observe(e.current));}},{key:"toggleFullScreen",value:function(){this.state.isFullscreen?this.exitFullScreen():this.fullScreen();}},{key:"togglePlay",value:function(){this.playPauseIntervalId?this.pause():this.play();}},{key:"handleScreenChange",value:function(){var e=this.props,t=e.onScreenChange,n=e.useBrowserFullscreen,i=document.fullscreenElement||document.msFullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement,r=this.imageGallery.current===i;t&&t(r),n&&this.setState({isFullscreen:r});}},{key:"slideToIndex",value:function(e,t){var n=this.state,i=n.currentIndex,r=n.isTransitioning,a=this.props,s=a.items,o=a.slideDuration,l=a.onBeforeSlide;if(!r){t&&this.playPauseIntervalId&&(this.pause(!1),this.play(!1));var u=s.length-1,c=e;e<0?c=u:e>u&&(c=0),l&&c!==i&&l(c),this.setState({previousIndex:i,currentIndex:c,isTransitioning:c!==i,currentSlideOffset:0,slideStyle:{transition:"all ".concat(o,"ms ease-out")}},this.onSliding);}}},{key:"slideLeft",value:function(e){var t=this.props.isRTL;this.slideTo(e,t?"right":"left");}},{key:"slideRight",value:function(e){var t=this.props.isRTL;this.slideTo(e,t?"left":"right");}},{key:"slideTo",value:function(e,t){var n=this,i=this.state,r=i.currentIndex,a=i.currentSlideOffset,s=i.isTransitioning,o=this.props.items,l=r+("left"===t?-1:1);s||(2===o.length?this.setState({currentSlideOffset:a+("left"===t?.001:-.001),slideStyle:{transition:"none"}},(function(){window.setTimeout((function(){return n.slideToIndex(l,e)}),25);})):this.slideToIndex(l,e));}},{key:"handleThumbnailMouseOver",value:function(e,t){this.props.slideOnThumbnailOver&&this.onThumbnailMouseOver(e,t);}},{key:"handleThumbnailKeyUp",value:function(e,t){Re(e)&&this.onThumbnailClick(e,t);}},{key:"handleSlideKeyUp",value:function(e){Re(e)&&(0, this.props.onClick)(e);}},{key:"isThumbnailVertical",value:function(){var e=this.props.thumbnailPosition;return "left"===e||"right"===e}},{key:"addScreenChangeEvent",value:function(){var e=this;xe.forEach((function(t){document.addEventListener(t,e.handleScreenChange);}));}},{key:"removeScreenChangeEvent",value:function(){var e=this;xe.forEach((function(t){document.removeEventListener(t,e.handleScreenChange);}));}},{key:"fullScreen",value:function(){var e=this.props.useBrowserFullscreen,t=this.imageGallery.current;e?t.requestFullscreen?t.requestFullscreen():t.msRequestFullscreen?t.msRequestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():this.setModalFullscreen(!0):this.setModalFullscreen(!0),this.setState({isFullscreen:!0});}},{key:"exitFullScreen",value:function(){var e=this.state.isFullscreen,t=this.props.useBrowserFullscreen;e&&(t?document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen?document.msExitFullscreen():this.setModalFullscreen(!1):this.setModalFullscreen(!1),this.setState({isFullscreen:!1}));}},{key:"pauseOrPlay",value:function(){var e=this.props.infinite,t=this.state.currentIndex;e||this.canSlideRight()?this.slideToIndex(t+1):this.pause();}},{key:"play",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.props,n=t.onPlay,i=t.slideInterval,r=t.slideDuration,a=this.state.currentIndex;this.playPauseIntervalId||(this.setState({isPlaying:!0}),this.playPauseIntervalId=window.setInterval(this.pauseOrPlay,Math.max(i,r)),n&&e&&n(a));}},{key:"pause",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.props.onPause,n=this.state.currentIndex;this.playPauseIntervalId&&(window.clearInterval(this.playPauseIntervalId),this.playPauseIntervalId=null,this.setState({isPlaying:!1}),t&&e&&t(n));}},{key:"isImageLoaded",value:function(e){return !!this.loadedImages[e.original]||(this.loadedImages[e.original]=!0,!1)}},{key:"handleImageLoaded",value:function(e,t){var n=this.props.onImageLoad;!this.loadedImages[t]&&n&&(this.loadedImages[t]=!0,n(e));}},{key:"renderItem",value:function(e){var t=this.state.isFullscreen,n=this.props.onImageError||this.handleImageError;return a().createElement(ie,{description:e.description,fullscreen:e.fullscreen,handleImageLoaded:this.handleImageLoaded,isFullscreen:t,onImageError:n,original:e.original,originalAlt:e.originalAlt,originalHeight:e.originalHeight,originalWidth:e.originalWidth,originalTitle:e.originalTitle,sizes:e.sizes,loading:e.loading,srcSet:e.srcSet})}},{key:"renderThumbInner",value:function(e){var t=this.props.onThumbnailError||this.handleImageError;return a().createElement("span",{className:"image-gallery-thumbnail-inner"},a().createElement("img",{className:"image-gallery-thumbnail-image",src:e.thumbnail,height:e.thumbnailHeight,width:e.thumbnailWidth,alt:e.thumbnailAlt,title:e.thumbnailTitle,loading:e.thumbnailLoading,onError:t}),e.thumbnailLabel&&a().createElement("div",{className:"image-gallery-thumbnail-label"},e.thumbnailLabel))}},{key:"render",value:function(){var e=this.state,n=e.currentIndex,i=e.isFullscreen,r=e.modalFullscreen,s=e.isPlaying,o=this.props,l=o.additionalClass,u=o.disableThumbnailSwipe,c=o.indexSeparator,h=o.isRTL,d=o.items,f=o.thumbnailPosition,p=o.renderFullscreenButton,m=o.renderCustomControls,g=o.renderLeftNav,v=o.renderRightNav,b=o.showBullets,y=o.showFullscreenButton,w=o.showIndex,T=o.showThumbnails,S=o.showNav,O=o.showPlayButton,E=o.renderPlayPauseButton,k=this.getThumbnailStyle(),I=this.getSlideItems(),x=I.slides,_=I.thumbnails,R=I.bullets,L=t("image-gallery-slide-wrapper",this.getThumbnailPositionClassName(f),{"image-gallery-rtl":h}),P=a().createElement("div",{ref:this.imageGallerySlideWrapper,className:L},m&&m(),this.canSlide()?a().createElement(a().Fragment,null,S&&a().createElement(a().Fragment,null,g(this.slideLeft,!this.canSlideLeft()),v(this.slideRight,!this.canSlideRight())),a().createElement(ve,{className:"image-gallery-swipe",delta:0,onSwiping:this.handleSwiping,onSwiped:this.handleOnSwiped},a().createElement("div",{className:"image-gallery-slides"},x))):a().createElement("div",{className:"image-gallery-slides"},x),O&&E(this.togglePlay,s),b&&a().createElement("div",{className:"image-gallery-bullets"},a().createElement("div",{className:"image-gallery-bullets-container",role:"navigation","aria-label":"Bullet Navigation"},R)),y&&p(this.toggleFullScreen,i),w&&a().createElement("div",{className:"image-gallery-index"},a().createElement("span",{className:"image-gallery-index-current"},n+1),a().createElement("span",{className:"image-gallery-index-separator"},c),a().createElement("span",{className:"image-gallery-index-total"},d.length))),M=t("image-gallery",l,{"fullscreen-modal":r}),W=t("image-gallery-content",this.getThumbnailPositionClassName(f),{fullscreen:i}),D=t("image-gallery-thumbnails-wrapper",this.getThumbnailPositionClassName(f),{"thumbnails-wrapper-rtl":!this.isThumbnailVertical()&&h},{"thumbnails-swipe-horizontal":!this.isThumbnailVertical()&&!u},{"thumbnails-swipe-vertical":this.isThumbnailVertical()&&!u});return a().createElement("div",{ref:this.imageGallery,className:M,"aria-live":"polite"},a().createElement("div",{className:W},("bottom"===f||"right"===f)&&P,T&&_.length>0?a().createElement(ve,{className:D,delta:0,onSwiping:!u&&this.handleThumbnailSwiping,onSwiped:!u&&this.handleOnThumbnailSwiped},a().createElement("div",{className:"image-gallery-thumbnails",ref:this.thumbnailsWrapper,style:this.getThumbnailBarHeight()},a().createElement("nav",{ref:this.thumbnails,className:"image-gallery-thumbnails-container",style:k,"aria-label":"Thumbnail Navigation"},_))):null,("top"===f||"left"===f)&&P))}}],i&&Se(n.prototype,i),l}(a().Component);Le.propTypes={flickThreshold:te.number,items:(0, te.arrayOf)((0, te.shape)({bulletClass:te.string,bulletOnClick:te.func,description:te.string,original:te.string,originalHeight:te.number,originalWidth:te.number,loading:te.string,thumbnailHeight:te.number,thumbnailWidth:te.number,thumbnailLoading:te.string,fullscreen:te.string,originalAlt:te.string,originalTitle:te.string,thumbnail:te.string,thumbnailAlt:te.string,thumbnailLabel:te.string,thumbnailTitle:te.string,originalClass:te.string,thumbnailClass:te.string,renderItem:te.func,renderThumbInner:te.func,imageSet:_e,srcSet:te.string,sizes:te.string})).isRequired,showNav:te.bool,autoPlay:te.bool,lazyLoad:te.bool,infinite:te.bool,showIndex:te.bool,showBullets:te.bool,showThumbnails:te.bool,showPlayButton:te.bool,showFullscreenButton:te.bool,disableThumbnailScroll:te.bool,disableKeyDown:te.bool,disableSwipe:te.bool,disableThumbnailSwipe:te.bool,useBrowserFullscreen:te.bool,onErrorImageURL:te.string,indexSeparator:te.string,thumbnailPosition:(0, te.oneOf)(["top","bottom","left","right"]),startIndex:te.number,slideDuration:te.number,slideInterval:te.number,slideOnThumbnailOver:te.bool,swipeThreshold:te.number,swipingTransitionDuration:te.number,swipingThumbnailTransitionDuration:te.number,onSlide:te.func,onBeforeSlide:te.func,onScreenChange:te.func,onPause:te.func,onPlay:te.func,onClick:te.func,onImageLoad:te.func,onImageError:te.func,onTouchMove:te.func,onTouchEnd:te.func,onTouchStart:te.func,onMouseOver:te.func,onMouseLeave:te.func,onThumbnailError:te.func,onThumbnailClick:te.func,renderCustomControls:te.func,renderLeftNav:te.func,renderRightNav:te.func,renderPlayPauseButton:te.func,renderFullscreenButton:te.func,renderItem:te.func,renderThumbInner:te.func,stopPropagation:te.bool,additionalClass:te.string,useTranslate3D:te.bool,isRTL:te.bool,useWindowKeyDown:te.bool},Le.defaultProps={onErrorImageURL:"",additionalClass:"",showNav:!0,autoPlay:!1,lazyLoad:!1,infinite:!0,showIndex:!1,showBullets:!1,showThumbnails:!0,showPlayButton:!0,showFullscreenButton:!0,disableThumbnailScroll:!1,disableKeyDown:!1,disableSwipe:!1,disableThumbnailSwipe:!1,useTranslate3D:!0,isRTL:!1,useBrowserFullscreen:!0,flickThreshold:.4,stopPropagation:!1,indexSeparator:" / ",thumbnailPosition:"bottom",startIndex:0,slideDuration:450,swipingTransitionDuration:0,swipingThumbnailTransitionDuration:0,onSlide:null,onBeforeSlide:null,onScreenChange:null,onPause:null,onPlay:null,onClick:null,onImageLoad:null,onImageError:null,onTouchMove:null,onTouchEnd:null,onTouchStart:null,onMouseOver:null,onMouseLeave:null,onThumbnailError:null,onThumbnailClick:null,renderCustomControls:null,renderThumbInner:null,renderItem:null,slideInterval:3e3,slideOnThumbnailOver:!1,swipeThreshold:30,renderLeftNav:function(e,t){return a().createElement(ce,{onClick:e,disabled:t})},renderRightNav:function(e,t){return a().createElement(de,{onClick:e,disabled:t})},renderPlayPauseButton:function(e,t){return a().createElement(pe,{onClick:e,isPlaying:t})},renderFullscreenButton:function(e,t){return a().createElement(le,{onClick:e,isFullscreen:t})},useWindowKeyDown:!0};const Pe=Le;})(),r})()}));
    } (imageGallery));

    var ImageGallery = /*@__PURE__*/getDefaultExportFromCjs(imageGallery.exports);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var onError = function (e) {
        // Prevent having alt attribute on img as the img takes the height of the alt text
        // instead of the CSS / element width & height when the CSS mask (fallback) is applied.
        e.target.alt = '';
    };
    var renderItem = function (_a) {
        var original = _a.original, originalAlt = _a.originalAlt;
        return (React__default["default"].createElement(BaseImage, { alt: originalAlt, className: 'image-gallery-image', onError: onError, src: original }));
    };
    var ModalGallery = function (props) {
        var images = props.images, index = props.index;
        var t = useTranslationContext('ModalGallery').t;
        var formattedArray = React$2.useMemo(function () {
            return images.map(function (image) {
                var imageSrc = image.image_url || image.thumb_url || '';
                return {
                    original: imageSrc,
                    originalAlt: t('User uploaded content'),
                    source: imageSrc,
                };
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [images]);
        return (React__default["default"].createElement(ImageGallery, { items: formattedArray, renderItem: renderItem, showIndex: true, showPlayButton: false, showThumbnails: false, startIndex: index }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedGallery = function (props) {
        var images = props.images, innerRefs = props.innerRefs;
        var _a = React$2.useState(0), index = _a[0], setIndex = _a[1];
        var _b = React$2.useState(false), modalOpen = _b[0], setModalOpen = _b[1];
        var _c = useComponentContext('Gallery'), _d = _c.BaseImage, BaseImage$1 = _d === void 0 ? BaseImage : _d, _e = _c.ModalGallery, ModalGallery$1 = _e === void 0 ? ModalGallery : _e;
        var t = useTranslationContext('Gallery').t;
        var imageFallbackTitle = t('User uploaded content');
        var countImagesDisplayedInPreview = 4;
        var lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
        var toggleModal = function (selectedIndex) {
            if (modalOpen) {
                setModalOpen(false);
            }
            else {
                setIndex(selectedIndex);
                setModalOpen(true);
            }
        };
        var renderImages = images.slice(0, countImagesDisplayedInPreview).map(function (image, i) {
            return i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? (React__default["default"].createElement("button", __assign({ className: 'str-chat__gallery-placeholder', "data-testid": 'gallery-image-last', key: "gallery-image-".concat(i), onClick: function () { return toggleModal(i); }, style: __assign({ backgroundImage: "url(".concat(images[lastImageIndexInPreview].previewUrl ||
                        images[lastImageIndexInPreview].image_url ||
                        images[lastImageIndexInPreview].thumb_url, ")") }, image.style) }, ((innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && { ref: function (r) { return (innerRefs.current[i] = r); } })),
                React__default["default"].createElement("p", null, t('{{ imageCount }} more', {
                    imageCount: images.length - countImagesDisplayedInPreview,
                })))) : (React__default["default"].createElement("button", { className: 'str-chat__gallery-image', "data-testid": 'gallery-image', key: "gallery-image-".concat(i), onClick: function () { return toggleModal(i); } },
                React__default["default"].createElement(BaseImage$1, __assign({ alt: (image === null || image === void 0 ? void 0 : image.fallback) || imageFallbackTitle, src: dist$1.sanitizeUrl(image.previewUrl || image.image_url || image.thumb_url), style: image.style, title: (image === null || image === void 0 ? void 0 : image.fallback) || imageFallbackTitle }, ((innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && { ref: function (r) { return (innerRefs.current[i] = r); } })))));
        });
        var className = clsx('str-chat__gallery', {
            'str-chat__gallery--square': images.length > lastImageIndexInPreview,
            'str-chat__gallery-two-rows': images.length > 2,
        });
        return (React__default["default"].createElement("div", { className: className },
            renderImages,
            React__default["default"].createElement(Modal, { onClose: function () { return setModalOpen(function (modalOpen) { return !modalOpen; }); }, open: modalOpen },
                React__default["default"].createElement(ModalGallery$1, { images: images, index: index }))));
    };
    /**
     * Displays images in a simple responsive grid with a light box to view the images.
     */
    var Gallery = React__default["default"].memo(UnMemoizedGallery);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A simple component that displays an image.
     */
    var ImageComponent = function (props) {
        var _a = props.dimensions, dimensions = _a === void 0 ? {} : _a, fallback = props.fallback, image_url = props.image_url, thumb_url = props.thumb_url, innerRef = props.innerRef, previewUrl = props.previewUrl, style = props.style;
        var _b = React$2.useState(false), modalIsOpen = _b[0], setModalIsOpen = _b[1];
        var _c = useComponentContext('ImageComponent'), _d = _c.BaseImage, BaseImage$1 = _d === void 0 ? BaseImage : _d, _e = _c.ModalGallery, ModalGallery$1 = _e === void 0 ? ModalGallery : _e;
        var imageSrc = dist$1.sanitizeUrl(previewUrl || image_url || thumb_url);
        var toggleModal = function () { return setModalIsOpen(function (modalIsOpen) { return !modalIsOpen; }); };
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(BaseImage$1, __assign({ alt: fallback, className: 'str-chat__message-attachment--img', "data-testid": 'image-test', onClick: toggleModal, src: imageSrc, style: style, tabIndex: 0, title: fallback }, dimensions, (innerRef && { ref: innerRef }))),
            React__default["default"].createElement(Modal, { onClose: toggleModal, open: modalIsOpen },
                React__default["default"].createElement(ModalGallery$1, { images: [props], index: 0 }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getHostFromURL = function (url) {
        if (url !== undefined && url !== null) {
            var trimmedUrl = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, '').split('/')[0];
            return trimmedUrl;
        }
        return null;
    };
    var UnableToRenderCard = function (_a) {
        var _b;
        var type = _a.type;
        var t = useTranslationContext('Card').t;
        return (React__default["default"].createElement("div", { className: clsx('str-chat__message-attachment-card', (_b = {},
                _b["str-chat__message-attachment-card--".concat(type)] = type,
                _b)) },
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--content' },
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--text' }, t('this content could not be displayed')))));
    };
    var CardV1 = function (props) {
        var asset_url = props.asset_url, giphy = props.giphy, image_url = props.image_url, og_scrape_url = props.og_scrape_url, text = props.text, thumb_url = props.thumb_url, title = props.title, title_link = props.title_link, type = props.type;
        var giphyVersionName = useChannelStateContext('Card').giphyVersion;
        var image = thumb_url || image_url;
        var dimensions = {};
        if (type === 'giphy' && typeof giphy !== 'undefined') {
            var giphyVersion = giphy[giphyVersionName];
            image = giphyVersion.url;
            dimensions.height = giphyVersion.height;
            dimensions.width = giphyVersion.width;
        }
        if (!title && !title_link && !asset_url && !image) {
            return React__default["default"].createElement(UnableToRenderCard, { type: type });
        }
        if (!title_link && !og_scrape_url) {
            return null;
        }
        return (React__default["default"].createElement("div", { className: "str-chat__message-attachment-card str-chat__message-attachment-card--".concat(type) },
            React__default["default"].createElement(CardHeader$1, __assign({}, props, { dimensions: dimensions, image: image })),
            type !== 'video' && (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--content' },
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--flex' },
                    title && React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--title' }, title),
                    text && React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--text' }, text),
                    (title_link || og_scrape_url) && (React__default["default"].createElement(SafeAnchor, { className: 'str-chat__message-attachment-card--url', href: title_link || og_scrape_url, rel: 'noopener noreferrer', target: '_blank' }, getHostFromURL(title_link || og_scrape_url))))))));
    };
    var SourceLink = function (_a) {
        var author_name = _a.author_name, url = _a.url;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--source-link', "data-testid": 'card-source-link' },
            React__default["default"].createElement(SafeAnchor, { className: 'str-chat__message-attachment-card--url', href: url, rel: 'noopener noreferrer', target: '_blank' }, author_name || getHostFromURL(url))));
    };
    var CardHeader$1 = function (props) {
        var asset_url = props.asset_url, dimensions = props.dimensions, image = props.image, image_url = props.image_url, thumb_url = props.thumb_url, title = props.title, type = props.type;
        var visual = null;
        if (asset_url && type === 'video') {
            visual = (React__default["default"].createElement(ReactPlayer, { className: 'react-player', controls: true, height: '100%', url: asset_url, width: '100%' }));
        }
        else if (image) {
            visual = (React__default["default"].createElement(ImageComponent, { dimensions: dimensions, fallback: title || image, image_url: image_url, thumb_url: thumb_url }));
        }
        return visual ? (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header', "data-testid": 'card-header' }, visual)) : null;
    };
    var CardContent = function (props) {
        var author_name = props.author_name, og_scrape_url = props.og_scrape_url, text = props.text, title = props.title, title_link = props.title_link, type = props.type;
        var url = title_link || og_scrape_url;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--content' }, type === 'audio' ? (React__default["default"].createElement(CardAudio, { og: props })) : (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--flex' },
            url && React__default["default"].createElement(SourceLink, { author_name: author_name, url: url }),
            title && React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--title' }, title),
            text && React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card--text' }, text)))));
    };
    var CardV2 = function (props) {
        var asset_url = props.asset_url, giphy = props.giphy, image_url = props.image_url, thumb_url = props.thumb_url, title = props.title, title_link = props.title_link, type = props.type;
        var giphyVersionName = useChannelStateContext('CardHeader').giphyVersion;
        var image = thumb_url || image_url;
        var dimensions = {};
        if (type === 'giphy' && typeof giphy !== 'undefined') {
            var giphyVersion = giphy[giphyVersionName];
            image = giphyVersion.url;
            dimensions.height = giphyVersion.height;
            dimensions.width = giphyVersion.width;
        }
        if (!title && !title_link && !asset_url && !image) {
            return React__default["default"].createElement(UnableToRenderCard, null);
        }
        return (React__default["default"].createElement("div", { className: "str-chat__message-attachment-card str-chat__message-attachment-card--".concat(type) },
            React__default["default"].createElement(CardHeader$1, __assign({}, props, { dimensions: dimensions, image: image })),
            React__default["default"].createElement(CardContent, __assign({}, props))));
    };
    var CardAudio = function (_a) {
        var _b = _a.og, asset_url = _b.asset_url, author_name = _b.author_name, og_scrape_url = _b.og_scrape_url, text = _b.text, title = _b.title, title_link = _b.title_link;
        var _c = useAudioController(), audioRef = _c.audioRef, isPlaying = _c.isPlaying, progress = _c.progress, seek = _c.seek, togglePlay = _c.togglePlay;
        var url = title_link || og_scrape_url;
        var dataTestId = 'card-audio-widget';
        var rootClassName = 'str-chat__message-attachment-card-audio-widget';
        return (React__default["default"].createElement("div", { className: rootClassName, "data-testid": dataTestId },
            asset_url && (React__default["default"].createElement(React__default["default"].Fragment, null,
                React__default["default"].createElement("audio", { ref: audioRef },
                    React__default["default"].createElement("source", { "data-testid": 'audio-source', src: asset_url, type: 'audio/mp3' })),
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-card-audio-widget--first-row' },
                    React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--play-controls' },
                        React__default["default"].createElement(PlayButton, { isPlaying: isPlaying, onClick: togglePlay })),
                    React__default["default"].createElement(ProgressBar, { onClick: seek, progress: progress })))),
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--second-row' },
                url && React__default["default"].createElement(SourceLink, { author_name: author_name, url: url }),
                title && React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--title' }, title),
                text && (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-audio-widget--description' }, text)))));
    };
    var UnMemoizedCard = function (props) {
        var themeVersion = useChatContext('Card').themeVersion;
        return themeVersion === '2' ? React__default["default"].createElement(CardV2, __assign({}, props)) : React__default["default"].createElement(CardV1, __assign({}, props));
    };
    /**
     * Simple Card Layout for displaying links
     */
    var Card$1 = React__default["default"].memo(UnMemoizedCard);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_SIZE$1 = 20;
    var FilePdfIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-pdf', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm250.2-143.7c-12.2-12-47-8.7-64.4-6.5-17.2-10.5-28.7-25-36.8-46.3 3.9-16.1 10.1-40.6 5.4-56-4.2-26.2-37.8-23.6-42.6-5.9-4.4 16.1-.4 38.5 7 67.1-10 23.9-24.9 56-35.4 74.4-20 10.3-47 26.2-51 46.2-3.3 15.8 26 55.2 76.1-31.2 22.4-7.4 46.8-16.5 68.4-20.1 18.9 10.2 41 17 55.8 17 25.5 0 28-28.2 17.5-38.7zm-198.1 77.8c5.1-13.7 24.5-29.5 30.4-35-19 30.3-30.4 35.7-30.4 35zm81.6-190.6c7.4 0 6.7 32.1 1.8 40.8-4.4-13.9-4.3-40.8-1.8-40.8zm-24.4 136.6c9.7-16.9 18-37 24.7-54.7 8.3 15.1 18.9 27.2 30.1 35.5-20.8 4.3-38.9 13.1-54.8 19.2zm131.6-5s-5 6-37.3-7.8c35.1-2.6 40.9 5.4 37.3 7.8z', fill: '#f82903' })));
    };
    var FileWordIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-word', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm220.1-208c-5.7 0-10.6 4-11.7 9.5-20.6 97.7-20.4 95.4-21 103.5-.2-1.2-.4-2.6-.7-4.3-.8-5.1.3.2-23.6-99.5-1.3-5.4-6.1-9.2-11.7-9.2h-13.3c-5.5 0-10.3 3.8-11.7 9.1-24.4 99-24 96.2-24.8 103.7-.1-1.1-.2-2.5-.5-4.2-.7-5.2-14.1-73.3-19.1-99-1.1-5.6-6-9.7-11.8-9.7h-16.8c-7.8 0-13.5 7.3-11.7 14.8 8 32.6 26.7 109.5 33.2 136 1.3 5.4 6.1 9.1 11.7 9.1h25.2c5.5 0 10.3-3.7 11.6-9.1l17.9-71.4c1.5-6.2 2.5-12 3-17.3l2.9 17.3c.1.4 12.6 50.5 17.9 71.4 1.3 5.3 6.1 9.1 11.6 9.1h24.7c5.5 0 10.3-3.7 11.6-9.1 20.8-81.9 30.2-119 34.5-136 1.9-7.6-3.8-14.9-11.6-14.9h-15.8z', fill: '#2c599d' })));
    };
    var FilePowerPointIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-powerpoint', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm72-60V236c0-6.6 5.4-12 12-12h69.2c36.7 0 62.8 27 62.8 66.3 0 74.3-68.7 66.5-95.5 66.5V404c0 6.6-5.4 12-12 12H132c-6.6 0-12-5.4-12-12zm48.5-87.4h23c7.9 0 13.9-2.4 18.1-7.2 8.5-9.8 8.4-28.5.1-37.8-4.1-4.6-9.9-7-17.4-7h-23.9v52z', fill: '#cb4a32' })));
    };
    var FileExcelIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-excel', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm212-240h-28.8c-4.4 0-8.4 2.4-10.5 6.3-18 33.1-22.2 42.4-28.6 57.7-13.9-29.1-6.9-17.3-28.6-57.7-2.1-3.9-6.2-6.3-10.6-6.3H124c-9.3 0-15 10-10.4 18l46.3 78-46.3 78c-4.7 8 1.1 18 10.4 18h28.9c4.4 0 8.4-2.4 10.5-6.3 21.7-40 23-45 28.6-57.7 14.9 30.2 5.9 15.9 28.6 57.7 2.1 3.9 6.2 6.3 10.6 6.3H260c9.3 0 15-10 10.4-18L224 320c.7-1.1 30.3-50.5 46.3-78 4.7-8-1.1-18-10.3-18z', fill: '#207245' })));
    };
    var FileArchiveIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-archive', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M128.3 160v32h32v-32zm64-96h-32v32h32zm-64 32v32h32V96zm64 32h-32v32h32zm177.6-30.1L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h79.7v16h32V48H208v104c0 13.3 10.7 24 24 24h104zM194.2 265.7c-1.1-5.6-6-9.7-11.8-9.7h-22.1v-32h-32v32l-19.7 97.1C102 385.6 126.8 416 160 416c33.1 0 57.9-30.2 51.5-62.6zm-33.9 124.4c-17.9 0-32.4-12.1-32.4-27s14.5-27 32.4-27 32.4 12.1 32.4 27-14.5 27-32.4 27zm32-198.1h-32v32h32z', fill: '#414D54' })));
    };
    var FileCodeIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-code', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M149.9 349.1l-.2-.2-32.8-28.9 32.8-28.9c3.6-3.2 4-8.8.8-12.4l-.2-.2-17.4-18.6c-3.4-3.6-9-3.7-12.4-.4l-57.7 54.1c-3.7 3.5-3.7 9.4 0 12.8l57.7 54.1c1.6 1.5 3.8 2.4 6 2.4 2.4 0 4.8-1 6.4-2.8l17.4-18.6c3.3-3.5 3.1-9.1-.4-12.4zm220-251.2L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM256 51.9l76.1 76.1H256zM336 464H48V48h160v104c0 13.3 10.7 24 24 24h104zM209.6 214c-4.7-1.4-9.5 1.3-10.9 6L144 408.1c-1.4 4.7 1.3 9.6 6 10.9l24.4 7.1c4.7 1.4 9.6-1.4 10.9-6L240 231.9c1.4-4.7-1.3-9.6-6-10.9zm24.5 76.9l.2.2 32.8 28.9-32.8 28.9c-3.6 3.2-4 8.8-.8 12.4l.2.2 17.4 18.6c3.3 3.5 8.9 3.7 12.4.4l57.7-54.1c3.7-3.5 3.7-9.4 0-12.8l-57.7-54.1c-3.5-3.3-9.1-3.2-12.4.4l-17.4 18.6c-3.3 3.5-3.1 9.1.4 12.4z', fill: '#414D54' })));
    };
    var FileAudioIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-audio', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm144-76.024c0 10.691-12.926 16.045-20.485 8.485L136 360.486h-28c-6.627 0-12-5.373-12-12v-56c0-6.627 5.373-12 12-12h28l35.515-36.947c7.56-7.56 20.485-2.206 20.485 8.485v135.952zm41.201-47.13c9.051-9.297 9.06-24.133.001-33.439-22.149-22.752 12.235-56.246 34.395-33.481 27.198 27.94 27.212 72.444.001 100.401-21.793 22.386-56.947-10.315-34.397-33.481z', fill: '#414D54' })));
    };
    var FileVideoIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-video', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.941 97.941l-83.882-83.882A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V131.882a48 48 0 0 0-14.059-33.941zM332.118 128H256V51.882L332.118 128zM48 464V48h160v104c0 13.255 10.745 24 24 24h104v288H48zm228.687-211.303L224 305.374V268c0-11.046-8.954-20-20-20H100c-11.046 0-20 8.954-20 20v104c0 11.046 8.954 20 20 20h104c11.046 0 20-8.954 20-20v-37.374l52.687 52.674C286.704 397.318 304 390.28 304 375.986V264.011c0-14.311-17.309-21.319-27.313-11.314z', fill: '#414D54' })));
    };
    var FileImageIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-image', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z', fill: '#414D54' })));
    };
    var FileAltIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-alt', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M288 248v28c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-28c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm-12 72H108c-6.6 0-12 5.4-12 12v28c0 6.6 5.4 12 12 12h168c6.6 0 12-5.4 12-12v-28c0-6.6-5.4-12-12-12zm108-188.1V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48C0 21.5 21.5 0 48 0h204.1C264.8 0 277 5.1 286 14.1L369.9 98c9 8.9 14.1 21.2 14.1 33.9zm-128-80V128h76.1L256 51.9zM336 464V176H232c-13.3 0-24-10.7-24-24V48H48v416h288z', fill: '#414D54' })));
    };
    var FileFallbackIcon$1 = function (_a) {
        var _b = _a.size, size = _b === void 0 ? DEFAULT_SIZE$1 : _b, props = __rest(_a, ["size"]);
        return (React__default["default"].createElement("svg", __assign({ className: 'rfu-file-icon--small fa-file-fallback', height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z', fill: '#414D54' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_SIZE = 40;
    var FilePdfIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-pdf ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#E71A01' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M16.39 8.90641C16.215 8.27341 15.787 7.95841 15.426 8.00441C14.99 8.06141 14.526 8.32041 14.34 8.72941C13.854 9.82141 14.768 12.8934 15.028 13.7674L15.073 13.9194C14.015 17.1134 10.394 23.4264 8.62002 23.8534C8.58302 23.4364 8.80602 22.2294 11.146 20.7244C11.266 20.5944 11.406 20.4374 11.471 20.3344C9.49302 21.3004 6.93108 22.8514 8.47102 24.0114C8.55602 24.0774 8.68502 24.1314 8.83402 24.1874C10.014 24.6244 11.666 23.1954 13.327 19.9544C15.157 19.3504 16.633 18.8964 18.722 18.5804C21.005 20.1304 22.538 20.4464 23.578 20.0474C23.866 19.9354 24.32 19.5734 24.45 19.1004C24.515 18.8774 24.608 18.5154 24.432 18.2274C23.842 17.2664 21.452 17.5954 20.032 17.7904C19.779 17.8254 19.557 17.8564 19.381 17.8744C17.552 16.7704 16.289 14.8014 15.778 13.3804C15.857 13.0784 15.936 12.7894 16.012 12.5124C16.397 11.1124 16.701 10.0064 16.392 8.90641H16.39ZM24.45 19.1004C23.605 20.1404 21.628 19.4164 20.05 18.4224C21.507 18.2644 23.01 18.1724 23.661 18.3764C24.488 18.6364 24.459 19.0444 24.451 19.1004H24.45ZM15.601 12.7404C15.296 11.6544 14.868 9.24041 15.555 8.46041C16.701 9.11641 16.266 10.5384 15.825 11.9834C15.748 12.2364 15.671 12.4894 15.601 12.7404ZM13.439 19.5834C15.156 18.9054 16.354 18.4494 18.118 18.1254C16.818 16.9554 16.028 15.6834 15.378 14.3834C14.915 16.0554 13.948 18.5894 13.438 19.5834H13.439Z', fill: '#E71A01', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M13.1719 33.0127V37.4219H12.1875V32.3018H13.1001L13.1719 33.0127ZM15.5132 34.1099V34.1816C15.5132 34.4505 15.4813 34.7 15.4175 34.9302C15.356 35.1603 15.2648 35.3608 15.144 35.5317C15.0233 35.7004 14.8729 35.8325 14.6929 35.9282C14.5151 36.0216 14.3101 36.0684 14.0776 36.0684C13.8521 36.0684 13.6561 36.0228 13.4897 35.9316C13.3234 35.8405 13.1833 35.7129 13.0693 35.5488C12.9577 35.3825 12.8677 35.1899 12.7993 34.9712C12.731 34.7524 12.6785 34.5177 12.6421 34.2671V34.0791C12.6785 33.8102 12.731 33.5641 12.7993 33.3408C12.8677 33.1152 12.9577 32.9204 13.0693 32.7563C13.1833 32.59 13.3223 32.4613 13.4863 32.3701C13.6527 32.279 13.8475 32.2334 14.0708 32.2334C14.3055 32.2334 14.5117 32.2778 14.6895 32.3667C14.8695 32.4556 15.0199 32.5832 15.1406 32.7495C15.2637 32.9159 15.356 33.1141 15.4175 33.3442C15.4813 33.5744 15.5132 33.8296 15.5132 34.1099ZM14.5254 34.1816V34.1099C14.5254 33.9526 14.5117 33.8079 14.4844 33.6758C14.4593 33.5413 14.4183 33.424 14.3613 33.3237C14.3066 33.2235 14.2337 33.146 14.1426 33.0913C14.0537 33.0343 13.9455 33.0059 13.8179 33.0059C13.6834 33.0059 13.5684 33.0275 13.4727 33.0708C13.3792 33.1141 13.3029 33.1768 13.2437 33.2588C13.1844 33.3408 13.14 33.4388 13.1104 33.5527C13.0807 33.6667 13.0625 33.7954 13.0557 33.939V34.4141C13.0671 34.5827 13.099 34.7342 13.1514 34.8687C13.2038 35.0008 13.2847 35.1056 13.394 35.1831C13.5034 35.2606 13.647 35.2993 13.8247 35.2993C13.9546 35.2993 14.064 35.2708 14.1528 35.2139C14.2417 35.1546 14.3135 35.0737 14.3682 34.9712C14.4251 34.8687 14.465 34.7502 14.4878 34.6157C14.5129 34.4813 14.5254 34.3366 14.5254 34.1816ZM18.3091 35.1934V30.75H19.3003V36H18.4082L18.3091 35.1934ZM15.9712 34.1953V34.1235C15.9712 33.841 16.0031 33.5846 16.0669 33.3545C16.1307 33.1221 16.2241 32.9227 16.3472 32.7563C16.4702 32.59 16.6217 32.4613 16.8018 32.3701C16.9818 32.279 17.1868 32.2334 17.417 32.2334C17.6335 32.2334 17.8226 32.279 17.9844 32.3701C18.1484 32.4613 18.2874 32.5911 18.4014 32.7598C18.5176 32.9261 18.611 33.1232 18.6816 33.3511C18.7523 33.5767 18.8035 33.8239 18.8354 34.0928V34.25C18.8035 34.5075 18.7523 34.7467 18.6816 34.9678C18.611 35.1888 18.5176 35.3825 18.4014 35.5488C18.2874 35.7129 18.1484 35.8405 17.9844 35.9316C17.8203 36.0228 17.6289 36.0684 17.4102 36.0684C17.18 36.0684 16.9749 36.0216 16.7949 35.9282C16.6172 35.8348 16.4668 35.7038 16.3438 35.5352C16.223 35.3665 16.1307 35.1683 16.0669 34.9404C16.0031 34.7126 15.9712 34.4642 15.9712 34.1953ZM16.9556 34.1235V34.1953C16.9556 34.348 16.967 34.4904 16.9897 34.6226C17.0148 34.7547 17.0547 34.8721 17.1094 34.9746C17.1663 35.0749 17.2393 35.1535 17.3281 35.2104C17.4193 35.2651 17.5298 35.2925 17.6597 35.2925C17.8283 35.2925 17.9673 35.2549 18.0767 35.1797C18.186 35.1022 18.2692 34.9963 18.3262 34.8618C18.3854 34.7274 18.4196 34.5724 18.4287 34.397V33.9492C18.4219 33.8057 18.4014 33.6769 18.3672 33.563C18.3353 33.4468 18.2874 33.3477 18.2236 33.2656C18.1621 33.1836 18.0846 33.1198 17.9912 33.0742C17.9001 33.0286 17.7918 33.0059 17.6665 33.0059C17.5389 33.0059 17.4295 33.0355 17.3384 33.0947C17.2472 33.1517 17.1732 33.2303 17.1162 33.3306C17.0615 33.4308 17.0205 33.5493 16.9932 33.686C16.9681 33.8205 16.9556 33.9663 16.9556 34.1235ZM21.3237 36H20.3325V31.9736C20.3325 31.6934 20.3872 31.4575 20.4966 31.2661C20.6082 31.0724 20.7643 30.9266 20.9648 30.8286C21.1676 30.7284 21.408 30.6782 21.686 30.6782C21.7772 30.6782 21.8649 30.6851 21.9492 30.6987C22.0335 30.7101 22.1156 30.7249 22.1953 30.7432L22.1851 31.4849C22.1418 31.4735 22.0962 31.4655 22.0483 31.4609C22.0005 31.4564 21.9447 31.4541 21.8809 31.4541C21.7624 31.4541 21.661 31.4746 21.5767 31.5156C21.4946 31.5544 21.432 31.6125 21.3887 31.6899C21.3454 31.7674 21.3237 31.862 21.3237 31.9736V36ZM22.062 32.3018V32.999H19.7822V32.3018H22.062Z', fill: 'white' })));
    };
    var FileWordIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-word ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#4285F4' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 13H23V15H8V13Z', fill: '#4285F4', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 17H18V19H8V17Z', fill: '#4285F4', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 21H23V23H8V21Z', fill: '#4285F4', fillRule: 'evenodd' })));
    };
    var FileWordIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-word-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11084_64)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#3670D3' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 13H23V15H8V13Z', fill: '#C1D8FF', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 17H18V19H8V17Z', fill: '#C1D8FF', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 21H23V23H8V21Z', fill: '#C1D8FF', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11084_64', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#79A4F2' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#3375E2' })))));
    };
    var FilePowerPointIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-powerpoint ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z', fill: 'white', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#D65537' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z', fill: '#D65537', fillRule: 'evenodd' })));
    };
    var FilePowerPointIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-powerpoint-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11084_76)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#AB381D' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z', fill: '#FFB3A0', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11084_76', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#DC7259' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#D14423' })))));
    };
    var FileExcelIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-excel ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z', fill: 'white', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#0F9D58' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z', fill: '#0F9D58', fillRule: 'evenodd' })));
    };
    var FileExcelIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-excel-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11084_326)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#0C864B' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z', fill: '#A8E7C9', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11084_326', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#64AD8A' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#0C864B' })))));
    };
    var FileArchiveIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-archive ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z', fill: 'white', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#F8B859' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z', fill: '#F8B859', fillRule: 'evenodd' })));
    };
    var FileArchiveIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-archive-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11086_246)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#B67A24' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z', fill: '#FFE9C8', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11086_246', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#FFC775' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#E69E34' })))));
    };
    var FileCodeIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-code ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#00ACA1' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z', fill: '#00ACA1', fillRule: 'evenodd' })));
    };
    var FileCodeIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-code-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11086_611)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#00ACA1' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z', fill: '#A3DCD8', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11086_611', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#7FC4BD' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#00ACA1' })))));
    };
    var FileAudioIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-audio ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z', fill: 'white', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#2727B0' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z', fill: '#2727B0', fillRule: 'evenodd' })));
    };
    var FileAudioIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-audio-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_11086_420)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#1919A5' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z', fill: '#AAAAFF', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_11086_420', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#4A4AB8' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#2727B0' })))));
    };
    var FileVideoIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-video ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z', fill: 'white', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { d: 'M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z', fill: '#9D27B0' }),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z', fill: '#F5F5F5' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { d: 'M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z', fill: '#9D27B0' })));
    };
    var FileVideoIconAlt = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-video-alt ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear_18604_164254)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#7A1589' }),
            React__default["default"].createElement("path", { d: 'M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z', fill: '#F3A8FF' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear_18604_164254', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: '#A94AB8' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#9D27B0' })))));
    };
    var FileFallbackIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-fallback ".concat(className).trim(), fill: 'none', height: size, viewBox: '0 0 34 40', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z', fill: 'url(#paint0_linear)' }),
            React__default["default"].createElement("path", { d: 'M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z', fill: '#DBDBDB' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 13H23V15H8V13Z', fill: '#CFCFCF', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 17H18V19H8V17Z', fill: '#CFCFCF', fillRule: 'evenodd' }),
            React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8 21H23V23H8V21Z', fill: '#CFCFCF', fillRule: 'evenodd' }),
            React__default["default"].createElement("defs", null,
                React__default["default"].createElement("linearGradient", { gradientUnits: 'userSpaceOnUse', id: 'paint0_linear', x1: '0', x2: '0', y1: '0', y2: '40' },
                    React__default["default"].createElement("stop", { stopColor: 'white' }),
                    React__default["default"].createElement("stop", { offset: '1', stopColor: '#DBDBDB' })))));
    };
    // v1 icon without possibility to specify size via props
    var FileImageIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c, props = __rest(_a, ["className", "size"]);
        return (React__default["default"].createElement("svg", __assign({ className: "rfu-file-image  ".concat(className).trim(), height: size, viewBox: '0 0 384 512', width: size, xmlns: 'http://www.w3.org/2000/svg' }, props),
            React__default["default"].createElement("path", { d: 'M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z', fill: '#414D54' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var wordMimeTypes = [
        // Microsoft Word
        // .doc .dot
        'application/msword',
        // .doc .dot
        'application/msword-template',
        // .docx
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        // .dotx (no test)
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
        // .docm
        'application/vnd.ms-word.document.macroEnabled.12',
        // .dotm (no test)
        'application/vnd.ms-word.template.macroEnabled.12',
        // LibreOffice/OpenOffice Writer
        // .odt
        'application/vnd.oasis.opendocument.text',
        // .ott
        'application/vnd.oasis.opendocument.text-template',
        // .fodt
        'application/vnd.oasis.opendocument.text-flat-xml',
        // .uot
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var excelMimeTypes = [
        // .csv
        'text/csv',
        // TODO: maybe more data files
        // Microsoft Excel
        // .xls .xlt .xla (no test for .xla)
        'application/vnd.ms-excel',
        // .xlsx
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        // .xltx (no test)
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        // .xlsm
        'application/vnd.ms-excel.sheet.macroEnabled.12',
        // .xltm (no test)
        'application/vnd.ms-excel.template.macroEnabled.12',
        // .xlam (no test)
        'application/vnd.ms-excel.addin.macroEnabled.12',
        // .xlsb (no test)
        'application/vnd.ms-excel.addin.macroEnabled.12',
        // LibreOffice/OpenOffice Calc
        // .ods
        'application/vnd.oasis.opendocument.spreadsheet',
        // .ots
        'application/vnd.oasis.opendocument.spreadsheet-template',
        // .fods
        'application/vnd.oasis.opendocument.spreadsheet-flat-xml',
        // .uos
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var powerpointMimeTypes = [
        // Microsoft Word
        // .ppt .pot .pps .ppa (no test for .ppa)
        'application/vnd.ms-powerpoint',
        // .pptx
        'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        // .potx (no test)
        'application/vnd.openxmlformats-officedocument.presentationml.template',
        // .ppsx
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
        // .ppam
        'application/vnd.ms-powerpoint.addin.macroEnabled.12',
        // .pptm
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
        // .potm
        'application/vnd.ms-powerpoint.template.macroEnabled.12',
        // .ppsm
        'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',
        // LibreOffice/OpenOffice Writer
        // .odp
        'application/vnd.oasis.opendocument.presentation',
        // .otp
        'application/vnd.oasis.opendocument.presentation-template',
        // .fodp
        'application/vnd.oasis.opendocument.presentation-flat-xml',
        // .uop
        // NOTE: firefox doesn't know mimetype so maybe ignore
    ];
    var archiveFileTypes = [
        // .zip
        'application/zip',
        // .z7
        'application/x-7z-compressed',
        // .ar
        'application/x-archive',
        // .tar
        'application/x-tar',
        // .tar.gz
        'application/gzip',
        // .tar.Z
        'application/x-compress',
        // .tar.bz2
        'application/x-bzip',
        // .tar.lz
        'application/x-lzip',
        // .tar.lz4
        'application/x-lz4',
        // .tar.lzma
        'application/x-lzma',
        // .tar.lzo (no test)
        'application/x-lzop',
        // .tar.xz
        'application/x-xz',
        // .war
        'application/x-webarchive',
        // .rar
        'application/vnd.rar',
    ];
    var codeFileTypes = [
        // .html .htm
        'text/html',
        // .css
        'text/css',
        // .js
        'application/x-javascript',
        'text/javascript',
        // .json
        'application/json',
        // .py
        'text/x-python',
        // .go
        'text/x-go',
        // .c
        'text/x-csrc',
        // .cpp
        'text/x-c++src',
        // .rb
        'application/x-ruby',
        // .rust
        'text/rust',
        // .java
        'text/x-java',
        // .php
        'application/x-php',
        // .cs
        'text/x-csharp',
        // .scala
        'text/x-scala',
        // .erl
        'text/x-erlang',
        // .sh
        'application/x-shellscript',
    ];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function generateMimeTypeToIconMap(_a) {
        var FileArchiveIcon = _a.FileArchiveIcon, FileCodeIcon = _a.FileCodeIcon, FileExcelIcon = _a.FileExcelIcon, FilePdfIcon = _a.FilePdfIcon, FilePowerPointIcon = _a.FilePowerPointIcon, FileWordIcon = _a.FileWordIcon;
        var mimeTypeToIconMap = {
            'application/pdf': FilePdfIcon,
        };
        for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {
            var type = wordMimeTypes_1[_i];
            mimeTypeToIconMap[type] = FileWordIcon;
        }
        for (var _b = 0, excelMimeTypes_1 = excelMimeTypes; _b < excelMimeTypes_1.length; _b++) {
            var type = excelMimeTypes_1[_b];
            mimeTypeToIconMap[type] = FileExcelIcon;
        }
        for (var _c = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _c < powerpointMimeTypes_1.length; _c++) {
            var type = powerpointMimeTypes_1[_c];
            mimeTypeToIconMap[type] = FilePowerPointIcon;
        }
        for (var _d = 0, archiveFileTypes_1 = archiveFileTypes; _d < archiveFileTypes_1.length; _d++) {
            var type = archiveFileTypes_1[_d];
            mimeTypeToIconMap[type] = FileArchiveIcon;
        }
        for (var _e = 0, codeFileTypes_1 = codeFileTypes; _e < codeFileTypes_1.length; _e++) {
            var type = codeFileTypes_1[_e];
            mimeTypeToIconMap[type] = FileCodeIcon;
        }
        return mimeTypeToIconMap;
    }
    function generateGeneralTypeToIconMap(_a) {
        var FileAltIcon = _a.FileAltIcon, FileAudioIcon = _a.FileAudioIcon, FileImageIcon = _a.FileImageIcon, FileVideoIcon = _a.FileVideoIcon;
        return {
            'audio/': FileAudioIcon,
            'image/': FileImageIcon,
            'text/': FileAltIcon,
            'video/': FileVideoIcon,
        };
    }
    var iconMap = {
        '1': {
            alt: {},
            standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
                FileArchiveIcon: FileArchiveIcon$1,
                FileCodeIcon: FileCodeIcon$1,
                FileExcelIcon: FileExcelIcon$1,
                FilePdfIcon: FilePdfIcon$1,
                FilePowerPointIcon: FilePowerPointIcon$1,
                FileWordIcon: FileWordIcon$1,
            })), generateGeneralTypeToIconMap({
                FileAltIcon: FileAltIcon,
                FileAudioIcon: FileAudioIcon$1,
                FileImageIcon: FileImageIcon$1,
                FileVideoIcon: FileVideoIcon$1,
            })), { fallback: FileFallbackIcon$1 }),
        },
        '2': {
            alt: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
                FileArchiveIcon: FileArchiveIconAlt,
                FileCodeIcon: FileCodeIconAlt,
                FileExcelIcon: FileExcelIconAlt,
                FilePdfIcon: FilePdfIcon,
                FilePowerPointIcon: FilePowerPointIconAlt,
                FileWordIcon: FileWordIconAlt,
            })), generateGeneralTypeToIconMap({
                FileAltIcon: FileFallbackIcon,
                FileAudioIcon: FileAudioIconAlt,
                FileImageIcon: FileImageIcon,
                FileVideoIcon: FileVideoIconAlt,
            })), { fallback: FileFallbackIcon }),
            standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({
                FileArchiveIcon: FileArchiveIcon,
                FileCodeIcon: FileCodeIcon,
                FileExcelIcon: FileExcelIcon,
                FilePdfIcon: FilePdfIcon,
                FilePowerPointIcon: FilePowerPointIcon,
                FileWordIcon: FileWordIcon,
            })), generateGeneralTypeToIconMap({
                FileAltIcon: FileFallbackIcon,
                FileAudioIcon: FileAudioIcon,
                FileImageIcon: FileImageIcon,
                FileVideoIcon: FileVideoIcon,
            })), { fallback: FileFallbackIcon }),
        },
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function mimeTypeToIcon(type, version, mimeType) {
        var _a;
        if (type === void 0) { type = 'standard'; }
        if (version === void 0) { version = '1'; }
        var theMap = ((_a = iconMap[version]) === null || _a === void 0 ? void 0 : _a[type]) || iconMap[version]['standard'];
        if (!mimeType)
            return theMap.fallback;
        var icon = theMap[mimeType];
        if (icon)
            return icon;
        if (mimeType.startsWith('audio/'))
            return theMap['audio/'];
        if (mimeType.startsWith('video/'))
            return theMap['video/'];
        if (mimeType.startsWith('image/'))
            return theMap['image/'];
        if (mimeType.startsWith('text/'))
            return theMap['text/'];
        return theMap.fallback;
    }
    var FileIcon = function (props) {
        var _a = props.big, big = _a === void 0 ? false : _a, mimeType = props.mimeType, _b = props.size, size = _b === void 0 ? 50 : _b, _c = props.sizeSmall, sizeSmall = _c === void 0 ? 20 : _c, _d = props.type, type = _d === void 0 ? 'standard' : _d, _e = props.version, version = _e === void 0 ? '1' : _e, rest = __rest(props, ["big", "mimeType", "size", "sizeSmall", "type", "version"]);
        var Icon = mimeTypeToIcon(type, version, mimeType);
        return React__default["default"].createElement(Icon, __assign({}, rest, { size: big ? size : sizeSmall }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LoadingIndicator$1 = function (_a) {
        var backgroundColor = _a.backgroundColor, color = _a.color, _b = _a.size, size = _b === void 0 ? 20 : _b, _c = _a.width, width = _c === void 0 ? 2 : _c;
        return (React__default["default"].createElement("div", { className: 'rfu-loading-indicator__spinner', style: {
                borderColor: backgroundColor ? backgroundColor : '',
                borderTopColor: color ? color : '',
                borderWidth: width ? width : '',
                height: size ? size : '',
                margin: '0 auto',
                width: size ? size : '',
            } }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Component that displays files which are being uploaded
     */
    var FilePreviewer = function (_a) {
        var _b = _a.fileIconProps, fileIconProps = _b === void 0 ? {} : _b, uploads = _a.uploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry;
        return (React__default["default"].createElement("div", { className: 'rfu-file-previewer' },
            React__default["default"].createElement("ol", null, uploads === null || uploads === void 0 ? void 0 : uploads.map(function (upload) { return (React__default["default"].createElement("li", { className: "rfu-file-previewer__file ".concat(upload.state === 'uploading' ? 'rfu-file-previewer__file--uploading' : '', " ").concat(upload.state === 'failed' ? 'rfu-file-previewer__file--failed' : ''), key: upload.id },
                React__default["default"].createElement(FileIcon, __assign({ mimeType: upload.file.type }, fileIconProps)),
                React__default["default"].createElement("a", { download: true, href: upload.url },
                    upload.file.name,
                    upload.state === 'failed' && (React__default["default"].createElement(React__default["default"].Fragment, null,
                        React__default["default"].createElement("div", { className: 'rfu-file-previewer__failed', onClick: function () { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id); } }, "failed"),
                        React__default["default"].createElement("div", { className: 'rfu-file-previewer__retry', onClick: function () { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(upload.id); } }, "retry")))),
                React__default["default"].createElement("span", { className: 'rfu-file-previewer__close-button', onClick: handleRemove && (function () { return handleRemove(upload.id); }) }, "\u2718"),
                upload.state === 'uploading' && (React__default["default"].createElement("div", { className: 'rfu-file-previewer__loading-indicator' },
                    React__default["default"].createElement(LoadingIndicator$1, null))))); }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * An icon of a paperclip, which is used as the default icon for FileUploadButton
     */
    var AttachmentIcon = function () { return (React__default["default"].createElement("svg", { height: '20', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M16.5 6v11.5c0 2.21-1.79 4-4 4s-4-1.79-4-4V5a2.5 2.5 0 0 1 5 0v10.5c0 .55-.45 1-1 1s-1-.45-1-1V6H10v9.5a2.5 2.5 0 0 0 5 0V5c0-2.21-1.79-4-4-4S7 2.79 7 5v12.5c0 3.04 2.46 5.5 5.5 5.5s5.5-2.46 5.5-5.5V6h-1.5z' }),
        React__default["default"].createElement("path", { d: 'M0 0h24v24H0z', fill: 'none' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CloseIcon$3 = function () { return (React__default["default"].createElement("svg", { height: '28', viewBox: '0 0 28 28', width: '28', xmlns: 'http://www.w3.org/2000/svg', xmlnsXlink: 'http://www.w3.org/1999/xlink' },
        React__default["default"].createElement("defs", null,
            React__default["default"].createElement("path", { d: 'M465 5c5.53 0 10 4.47 10 10s-4.47 10-10 10-10-4.47-10-10 4.47-10 10-10zm3.59 5L465 13.59 461.41 10 460 11.41l3.59 3.59-3.59 3.59 1.41 1.41 3.59-3.59 3.59 3.59 1.41-1.41-3.59-3.59 3.59-3.59-1.41-1.41z', id: 'b' }),
            React__default["default"].createElement("filter", { filterUnits: 'objectBoundingBox', height: '160%', id: 'a', width: '160%', x: '-30%', y: '-30%' },
                React__default["default"].createElement("feOffset", { in: 'SourceAlpha', result: 'shadowOffsetOuter1' }),
                React__default["default"].createElement("feGaussianBlur", { in: 'shadowOffsetOuter1', result: 'shadowBlurOuter1', stdDeviation: '2' }),
                React__default["default"].createElement("feColorMatrix", { in: 'shadowBlurOuter1', values: '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0' }))),
        React__default["default"].createElement("g", { fill: 'none', fillRule: 'nonzero', transform: 'translate(-451 -1)' },
            React__default["default"].createElement("use", { fill: '#000', filter: 'url(#a)', xlinkHref: '#b' }),
            React__default["default"].createElement("use", { fill: '#FFF', fillRule: 'evenodd', xlinkHref: '#b' })))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var FilePlaceholderIcon = function (props) { return (React__default["default"].createElement("svg", __assign({ role: 'img', viewBox: '0 0 400 400', xmlns: 'http://www.w3.org/2000/svg' }, props),
        React__default["default"].createElement("g", null,
            React__default["default"].createElement("path", { d: 'M0.000 200.000 L 0.000 400.000 200.000 400.000 L 400.000 400.000 400.000 200.000 L 400.000 0.000 200.000 0.000 L 0.000 0.000 0.000 200.000 M243.085 68.180 C 251.168 72.240,252.758 82.164,246.332 88.456 C 242.609 92.102,249.072 91.774,176.600 92.000 L 112.600 92.200 111.000 93.165 C 107.620 95.203,105.382 98.131,104.780 101.304 C 104.548 102.526,104.400 132.258,104.400 177.461 C 104.400 261.065,104.646 254.561,101.340 258.340 C 95.134 265.435,84.540 263.898,80.562 255.326 L 79.600 253.251 79.600 170.356 L 79.600 87.460 80.613 84.526 C 83.246 76.897,91.469 68.511,96.439 68.386 C 96.747 68.378,97.450 68.114,98.000 67.800 C 98.856 67.311,109.214 67.226,170.067 67.214 L 241.134 67.200 243.085 68.180 M230.400 116.002 C 236.845 117.273,237.603 117.566,242.024 120.500 C 243.269 121.327,256.977 134.788,274.002 151.902 C 299.664 177.700,305.143 183.306,307.142 185.815 C 307.838 186.688,309.600 190.497,309.602 191.133 C 309.604 191.500,309.919 192.340,310.302 193.000 C 310.956 194.125,311.007 197.998,311.108 254.600 L 311.215 315.000 310.241 318.000 C 307.327 326.967,302.400 332.072,293.800 335.031 L 291.000 335.994 219.630 335.997 L 148.260 336.000 145.430 335.018 C 140.319 333.244,139.684 332.841,134.862 328.318 C 132.616 326.212,129.907 321.565,129.427 318.997 C 129.263 318.118,128.920 317.147,128.664 316.839 C 128.315 316.416,128.200 294.170,128.200 227.039 L 128.200 137.800 129.067 134.600 C 129.543 132.840,130.393 130.590,130.954 129.600 C 131.515 128.610,132.247 127.320,132.580 126.733 C 134.155 123.961,138.478 120.313,143.000 117.940 C 144.003 117.414,146.644 116.725,151.000 115.853 C 152.661 115.520,228.681 115.664,230.400 116.002 M226.250 137.650 C 225.849 139.656,225.987 187.508,226.403 190.713 C 227.174 196.647,230.700 200.107,237.136 201.245 C 239.519 201.666,290.972 201.562,291.398 201.135 C 291.727 200.807,227.629 136.400,226.974 136.400 C 226.713 136.400,226.388 136.963,226.250 137.650', fill: '#fcfcfc', fillRule: 'evenodd', stroke: 'none' }),
            React__default["default"].createElement("path", { d: 'M98.000 67.800 C 97.450 68.114,96.747 68.378,96.439 68.386 C 91.469 68.511,83.246 76.897,80.613 84.526 L 79.600 87.460 79.600 170.356 L 79.600 253.251 80.562 255.326 C 84.540 263.898,95.134 265.435,101.340 258.340 C 104.646 254.561,104.400 261.065,104.400 177.461 C 104.400 132.258,104.548 102.526,104.780 101.304 C 105.382 98.131,107.620 95.203,111.000 93.165 L 112.600 92.200 176.600 92.000 C 249.072 91.774,242.609 92.102,246.332 88.456 C 252.758 82.164,251.168 72.240,243.085 68.180 L 241.134 67.200 170.067 67.214 C 109.214 67.226,98.856 67.311,98.000 67.800 M151.000 115.853 C 146.644 116.725,144.003 117.414,143.000 117.940 C 138.478 120.313,134.155 123.961,132.580 126.733 C 132.247 127.320,131.515 128.610,130.954 129.600 C 130.393 130.590,129.543 132.840,129.067 134.600 L 128.200 137.800 128.200 227.039 C 128.200 294.170,128.315 316.416,128.664 316.839 C 128.920 317.147,129.263 318.118,129.427 318.997 C 129.907 321.565,132.616 326.212,134.862 328.318 C 139.684 332.841,140.319 333.244,145.430 335.018 L 148.260 336.000 219.630 335.997 L 291.000 335.994 293.800 335.031 C 302.400 332.072,307.327 326.967,310.241 318.000 L 311.215 315.000 311.108 254.600 C 311.007 197.998,310.956 194.125,310.302 193.000 C 309.919 192.340,309.604 191.500,309.602 191.133 C 309.600 190.497,307.838 186.688,307.142 185.815 C 305.143 183.306,299.664 177.700,274.002 151.902 C 238.906 116.622,240.594 118.012,230.400 116.002 C 228.681 115.664,152.661 115.520,151.000 115.853 M259.556 168.635 C 277.215 186.364,291.544 200.989,291.398 201.135 C 290.972 201.562,239.519 201.666,237.136 201.245 C 230.700 200.107,227.174 196.647,226.403 190.713 C 225.460 183.450,225.955 136.400,226.974 136.400 C 227.235 136.400,241.897 150.906,259.556 168.635', fill: '#e4e4e4', fillRule: 'evenodd', stroke: 'none' })))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * An icon of a picture, which is used as the default icon for ImageUploadButton
     */
    var PictureIcon = function () { return (React__default["default"].createElement("svg", { height: '20', viewBox: '0 0 20 20', width: '20', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M2 0h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm3 2a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM2 16v2h16v-6l-3-3-6 6-3-3-4 4z', fillRule: 'nonzero' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var RetryIcon$1 = function () { return (React__default["default"].createElement("svg", { height: '20', viewBox: '0 0 22 20', width: '22', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M20 5.535V2a1 1 0 0 1 2 0v6a1 1 0 0 1-1 1h-6a1 1 0 0 1 0-2h3.638l-2.975-2.653a8 8 0 1 0 1.884 8.32 1 1 0 1 1 1.886.666A10 10 0 1 1 5.175 1.245c3.901-2.15 8.754-1.462 11.88 1.667L20 5.535z', fill: '#FFF', fillRule: 'nonzero' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useHandleFileChangeWrapper = function (resetOnChange, handler) {
        if (resetOnChange === void 0) { resetOnChange = false; }
        return React$2.useCallback(function (_a) {
            var currentTarget = _a.currentTarget;
            var files = currentTarget.files;
            if (!files)
                return;
            try {
                handler === null || handler === void 0 ? void 0 : handler(Array.from(files));
            }
            catch (error) {
                console.error(error);
            }
            if (resetOnChange)
                currentTarget.value = '';
        }, [handler, resetOnChange]);
    };
    function dataTransferItemsHaveFiles(items) {
        if (!items || !items.length) {
            return false;
        }
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (item.kind === 'file' || item.type === 'text/html') {
                return true;
            }
        }
        return false;
    }
    function dataTransferItemsToFiles(items) {
        return __awaiter(this, void 0, void 0, function () {
            var fileLikes, blobPromises, _loop_1, _i, items_2, item;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!items || !items.length) {
                            return [2 /*return*/, []];
                        }
                        fileLikes = getFileLikes(items);
                        if (fileLikes.length) {
                            return [2 /*return*/, fileLikes];
                        }
                        blobPromises = [];
                        _loop_1 = function (item) {
                            if (item.type === 'text/html') {
                                blobPromises.push(new Promise(function (accept) {
                                    item.getAsString(function (s) { return __awaiter(_this, void 0, void 0, function () {
                                        var imagePromises;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    imagePromises = extractImageSources(s).map(function (src) {
                                                        return getImageSource(fileLikes, src);
                                                    });
                                                    return [4 /*yield*/, Promise.all(imagePromises)];
                                                case 1:
                                                    _a.sent();
                                                    accept();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); });
                                }));
                            }
                        };
                        for (_i = 0, items_2 = items; _i < items_2.length; _i++) {
                            item = items_2[_i];
                            _loop_1(item);
                        }
                        return [4 /*yield*/, Promise.all(blobPromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, fileLikes];
                }
            });
        });
    }
    function getFileLikes(items) {
        var fileLikes = [];
        for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
            var item = items_3[_i];
            if (item.kind === 'file') {
                var file = item.getAsFile();
                if (file) {
                    fileLikes.push(file);
                }
            }
        }
        return fileLikes;
    }
    function getImageSource(fileLikes, src) {
        return __awaiter(this, void 0, void 0, function () {
            var res, contentType, buf, blob;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetch(src)];
                    case 1:
                        res = _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                    case 3:
                        contentType = res.headers.get('Content-type') || 'application/octet-stream';
                        return [4 /*yield*/, res.arrayBuffer()];
                    case 4:
                        buf = _a.sent();
                        blob = new Blob([buf], { type: contentType });
                        fileLikes.push(blob);
                        return [2 /*return*/];
                }
            });
        });
    }
    var extractImageSources = function (s) {
        var imageTags = new DOMParser().parseFromString(s, 'text/html').getElementsByTagName('img');
        return Array.from(imageTags, function (tag) { return tag.src; }).filter(function (tag) { return tag; });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UploadButton = function (_a) {
        var onFileChange = _a.onFileChange, _b = _a.resetOnChange, resetOnChange = _b === void 0 ? true : _b, rest = __rest(_a, ["onFileChange", "resetOnChange"]);
        var handleInputChange = useHandleFileChangeWrapper(resetOnChange, onFileChange);
        return React__default["default"].createElement("input", __assign({ onChange: handleInputChange, type: 'file' }, rest));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @deprecated will be removed in the next major release
     */
    var FileUploadButton = function (_a) {
        var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.multiple, multiple = _c === void 0 ? false : _c, _d = _a.children, children = _d === void 0 ? React__default["default"].createElement(AttachmentIcon, null) : _d, handleFiles = _a.handleFiles, accepts = _a.accepts, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? true : _e;
        var t = useTranslationContext('FileUploadButton').t;
        var className = 'rfu-file-upload-button';
        if (disabled) {
            className = "".concat(className, " rfu-file-upload-button--disabled");
        }
        return (React__default["default"].createElement("div", { className: className },
            React__default["default"].createElement("label", null,
                React__default["default"].createElement(UploadButton, { accept: Array.isArray(accepts) ? accepts.join(',') : accepts, "aria-label": t('aria/File input'), className: 'rfu-file-input', disabled: disabled, multiple: multiple, onFileChange: handleFiles, resetOnChange: resetOnChange }),
                children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var COMMON_MIME_TYPES = new Map([
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
        ['aac', 'audio/aac'],
        ['abw', 'application/x-abiword'],
        ['arc', 'application/x-freearc'],
        ['avif', 'image/avif'],
        ['avi', 'video/x-msvideo'],
        ['azw', 'application/vnd.amazon.ebook'],
        ['bin', 'application/octet-stream'],
        ['bmp', 'image/bmp'],
        ['bz', 'application/x-bzip'],
        ['bz2', 'application/x-bzip2'],
        ['cda', 'application/x-cdf'],
        ['csh', 'application/x-csh'],
        ['css', 'text/css'],
        ['csv', 'text/csv'],
        ['doc', 'application/msword'],
        ['docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
        ['eot', 'application/vnd.ms-fontobject'],
        ['epub', 'application/epub+zip'],
        ['gz', 'application/gzip'],
        ['gif', 'image/gif'],
        ['heic', 'image/heic'],
        ['heif', 'image/heif'],
        ['htm', 'text/html'],
        ['html', 'text/html'],
        ['ico', 'image/vnd.microsoft.icon'],
        ['ics', 'text/calendar'],
        ['jar', 'application/java-archive'],
        ['jpeg', 'image/jpeg'],
        ['jpg', 'image/jpeg'],
        ['js', 'text/javascript'],
        ['json', 'application/json'],
        ['jsonld', 'application/ld+json'],
        ['mid', 'audio/midi'],
        ['midi', 'audio/midi'],
        ['mjs', 'text/javascript'],
        ['mp3', 'audio/mpeg'],
        ['mp4', 'video/mp4'],
        ['mpeg', 'video/mpeg'],
        ['mpkg', 'application/vnd.apple.installer+xml'],
        ['odp', 'application/vnd.oasis.opendocument.presentation'],
        ['ods', 'application/vnd.oasis.opendocument.spreadsheet'],
        ['odt', 'application/vnd.oasis.opendocument.text'],
        ['oga', 'audio/ogg'],
        ['ogv', 'video/ogg'],
        ['ogx', 'application/ogg'],
        ['opus', 'audio/opus'],
        ['otf', 'font/otf'],
        ['png', 'image/png'],
        ['pdf', 'application/pdf'],
        ['php', 'application/x-httpd-php'],
        ['ppt', 'application/vnd.ms-powerpoint'],
        ['pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'],
        ['rar', 'application/vnd.rar'],
        ['rtf', 'application/rtf'],
        ['sh', 'application/x-sh'],
        ['svg', 'image/svg+xml'],
        ['swf', 'application/x-shockwave-flash'],
        ['tar', 'application/x-tar'],
        ['tif', 'image/tiff'],
        ['tiff', 'image/tiff'],
        ['ts', 'video/mp2t'],
        ['ttf', 'font/ttf'],
        ['txt', 'text/plain'],
        ['vsd', 'application/vnd.visio'],
        ['wav', 'audio/wav'],
        ['weba', 'audio/webm'],
        ['webm', 'video/webm'],
        ['webp', 'image/webp'],
        ['woff', 'font/woff'],
        ['woff2', 'font/woff2'],
        ['xhtml', 'application/xhtml+xml'],
        ['xls', 'application/vnd.ms-excel'],
        ['xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
        ['xml', 'application/xml'],
        ['xul', 'application/vnd.mozilla.xul+xml'],
        ['zip', 'application/zip'],
        ['7z', 'application/x-7z-compressed'],
        // Others
        ['mkv', 'video/x-matroska'],
        ['mov', 'video/quicktime'],
        ['msg', 'application/vnd.ms-outlook']
    ]);
    function toFileWithPath(file, path) {
        var f = withMimeType(file);
        if (typeof f.path !== 'string') { // on electron, path is already set to the absolute path
            var webkitRelativePath = file.webkitRelativePath;
            Object.defineProperty(f, 'path', {
                value: typeof path === 'string'
                    ? path
                    // If <input webkitdirectory> is set,
                    // the File will have a {webkitRelativePath} property
                    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory
                    : typeof webkitRelativePath === 'string' && webkitRelativePath.length > 0
                        ? webkitRelativePath
                        : file.name,
                writable: false,
                configurable: false,
                enumerable: true
            });
        }
        return f;
    }
    function withMimeType(file) {
        var name = file.name;
        var hasExtension = name && name.lastIndexOf('.') !== -1;
        if (hasExtension && !file.type) {
            var ext = name.split('.')
                .pop().toLowerCase();
            var type = COMMON_MIME_TYPES.get(ext);
            if (type) {
                Object.defineProperty(file, 'type', {
                    value: type,
                    writable: false,
                    configurable: false,
                    enumerable: true
                });
            }
        }
        return file;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var FILES_TO_IGNORE = [
        // Thumbnail cache files for macOS and Windows
        '.DS_Store',
        'Thumbs.db' // Windows
    ];
    /**
     * Convert a DragEvent's DataTrasfer object to a list of File objects
     * NOTE: If some of the items are folders,
     * everything will be flattened and placed in the same list but the paths will be kept as a {path} property.
     *
     * EXPERIMENTAL: A list of https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle objects can also be passed as an arg
     * and a list of File objects will be returned.
     *
     * @param evt
     */
    function fromEvent(evt) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (isObject$2(evt) && isDataTransfer(evt.dataTransfer)) {
                    return [2 /*return*/, getDataTransferFiles(evt.dataTransfer, evt.type)];
                }
                else if (isChangeEvt(evt)) {
                    return [2 /*return*/, getInputFiles(evt)];
                }
                else if (Array.isArray(evt) && evt.every(function (item) { return 'getFile' in item && typeof item.getFile === 'function'; })) {
                    return [2 /*return*/, getFsHandleFiles(evt)];
                }
                return [2 /*return*/, []];
            });
        });
    }
    function isDataTransfer(value) {
        return isObject$2(value);
    }
    function isChangeEvt(value) {
        return isObject$2(value) && isObject$2(value.target);
    }
    function isObject$2(v) {
        return typeof v === 'object' && v !== null;
    }
    function getInputFiles(evt) {
        return fromList(evt.target.files).map(function (file) { return toFileWithPath(file); });
    }
    // Ee expect each handle to be https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileHandle
    function getFsHandleFiles(handles) {
        return __awaiter(this, void 0, void 0, function () {
            var files;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(handles.map(function (h) { return h.getFile(); }))];
                    case 1:
                        files = _a.sent();
                        return [2 /*return*/, files.map(function (file) { return toFileWithPath(file); })];
                }
            });
        });
    }
    function getDataTransferFiles(dt, type) {
        return __awaiter(this, void 0, void 0, function () {
            var items, files;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!dt.items) return [3 /*break*/, 2];
                        items = fromList(dt.items)
                            .filter(function (item) { return item.kind === 'file'; });
                        // According to https://html.spec.whatwg.org/multipage/dnd.html#dndevents,
                        // only 'dragstart' and 'drop' has access to the data (source node)
                        if (type !== 'drop') {
                            return [2 /*return*/, items];
                        }
                        return [4 /*yield*/, Promise.all(items.map(toFilePromises))];
                    case 1:
                        files = _a.sent();
                        return [2 /*return*/, noIgnoredFiles(flatten(files))];
                    case 2: return [2 /*return*/, noIgnoredFiles(fromList(dt.files)
                            .map(function (file) { return toFileWithPath(file); }))];
                }
            });
        });
    }
    function noIgnoredFiles(files) {
        return files.filter(function (file) { return FILES_TO_IGNORE.indexOf(file.name) === -1; });
    }
    // IE11 does not support Array.from()
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility
    // https://developer.mozilla.org/en-US/docs/Web/API/FileList
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList
    function fromList(items) {
        if (items === null) {
            return [];
        }
        var files = [];
        // tslint:disable: prefer-for-of
        for (var i = 0; i < items.length; i++) {
            var file = items[i];
            files.push(file);
        }
        return files;
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem
    function toFilePromises(item) {
        if (typeof item.webkitGetAsEntry !== 'function') {
            return fromDataTransferItem(item);
        }
        var entry = item.webkitGetAsEntry();
        // Safari supports dropping an image node from a different window and can be retrieved using
        // the DataTransferItem.getAsFile() API
        // NOTE: FileSystemEntry.file() throws if trying to get the file
        if (entry && entry.isDirectory) {
            return fromDirEntry(entry);
        }
        return fromDataTransferItem(item);
    }
    function flatten(items) {
        return items.reduce(function (acc, files) { return __spreadArray(__spreadArray([], __read(acc), false), __read((Array.isArray(files) ? flatten(files) : [files])), false); }, []);
    }
    function fromDataTransferItem(item) {
        var file = item.getAsFile();
        if (!file) {
            return Promise.reject("".concat(item, " is not a File"));
        }
        var fwp = toFileWithPath(file);
        return Promise.resolve(fwp);
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry
    function fromEntry(entry) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
            });
        });
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry
    function fromDirEntry(entry) {
        var reader = entry.createReader();
        return new Promise(function (resolve, reject) {
            var entries = [];
            function readEntries() {
                var _this = this;
                // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry/createReader
                // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryReader/readEntries
                reader.readEntries(function (batch) { return __awaiter(_this, void 0, void 0, function () {
                    var files, err_1, items;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!batch.length) return [3 /*break*/, 5];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, Promise.all(entries)];
                            case 2:
                                files = _a.sent();
                                resolve(files);
                                return [3 /*break*/, 4];
                            case 3:
                                err_1 = _a.sent();
                                reject(err_1);
                                return [3 /*break*/, 4];
                            case 4: return [3 /*break*/, 6];
                            case 5:
                                items = Promise.all(batch.map(fromEntry));
                                entries.push(items);
                                // Continue reading
                                readEntries();
                                _a.label = 6;
                            case 6: return [2 /*return*/];
                        }
                    });
                }); }, function (err) {
                    reject(err);
                });
            }
            readEntries();
        });
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry
    function fromFileEntry(entry) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        entry.file(function (file) {
                            var fwp = toFileWithPath(file, entry.fullPath);
                            resolve(fwp);
                        }, function (err) {
                            reject(err);
                        });
                    })];
            });
        });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var _default = function (file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
        var fileName = file.name || '';
        var mimeType = (file.type || '').toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, '');
        return acceptedFilesArray.some(function (type) {
          var validType = type.trim().toLowerCase();

          if (validType.charAt(0) === '.') {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith('/*')) {
            // This is something like a image/* mime type
            return baseMimeType === validType.replace(/\/.*$/, '');
          }

          return mimeType === validType;
        });
      }

      return true;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _toConsumableArray$1(arr) { return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$1(); }

    function _nonIterableSpread$1() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _iterableToArray$1(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

    function _arrayWithoutHoles$1(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$2(arr); }

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

    function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _slicedToArray$1(arr, i) { return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1(); }

    function _nonIterableRest$1() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

    function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit$1(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles$1(arr) { if (Array.isArray(arr)) return arr; }

    var FILE_INVALID_TYPE = "file-invalid-type";
    var FILE_TOO_LARGE = "file-too-large";
    var FILE_TOO_SMALL = "file-too-small";
    var TOO_MANY_FILES = "too-many-files";

    var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr(accept) {
      accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
      var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(", ")) : accept;
      return {
        code: FILE_INVALID_TYPE,
        message: "File type must be ".concat(messageSuffix)
      };
    };
    var getTooLargeRejectionErr = function getTooLargeRejectionErr(maxSize) {
      return {
        code: FILE_TOO_LARGE,
        message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
      };
    };
    var getTooSmallRejectionErr = function getTooSmallRejectionErr(minSize) {
      return {
        code: FILE_TOO_SMALL,
        message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
      };
    };
    var TOO_MANY_FILES_REJECTION = {
      code: TOO_MANY_FILES,
      message: "Too many files"
    }; // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
    // that MIME type will always be accepted

    function fileAccepted(file, accept) {
      var isAcceptable = file.type === "application/x-moz-file" || _default(file, accept);
      return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
    }
    function fileMatchSize(file, minSize, maxSize) {
      if (isDefined(file.size)) {
        if (isDefined(minSize) && isDefined(maxSize)) {
          if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
          if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
        } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      }

      return [true, null];
    }

    function isDefined(value) {
      return value !== undefined && value !== null;
    }
    /**
     *
     * @param {object} options
     * @param {File[]} options.files
     * @param {string|string[]} [options.accept]
     * @param {number} [options.minSize]
     * @param {number} [options.maxSize]
     * @param {boolean} [options.multiple]
     * @param {number} [options.maxFiles]
     * @param {(f: File) => FileError|FileError[]|null} [options.validator]
     * @returns
     */


    function allFilesAccepted(_ref) {
      var files = _ref.files,
          accept = _ref.accept,
          minSize = _ref.minSize,
          maxSize = _ref.maxSize,
          multiple = _ref.multiple,
          maxFiles = _ref.maxFiles,
          validator = _ref.validator;

      if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
        return false;
      }

      return files.every(function (file) {
        var _fileAccepted = fileAccepted(file, accept),
            _fileAccepted2 = _slicedToArray$1(_fileAccepted, 1),
            accepted = _fileAccepted2[0];

        var _fileMatchSize = fileMatchSize(file, minSize, maxSize),
            _fileMatchSize2 = _slicedToArray$1(_fileMatchSize, 1),
            sizeMatch = _fileMatchSize2[0];

        var customErrors = validator ? validator(file) : null;
        return accepted && sizeMatch && !customErrors;
      });
    } // React's synthetic events has event.isPropagationStopped,
    // but to remain compatibility with other libs (Preact) fall back
    // to check event.cancelBubble

    function isPropagationStopped(event) {
      if (typeof event.isPropagationStopped === "function") {
        return event.isPropagationStopped();
      } else if (typeof event.cancelBubble !== "undefined") {
        return event.cancelBubble;
      }

      return false;
    }
    function isEvtWithFiles(event) {
      if (!event.dataTransfer) {
        return !!event.target && !!event.target.files;
      } // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file


      return Array.prototype.some.call(event.dataTransfer.types, function (type) {
        return type === "Files" || type === "application/x-moz-file";
      });
    }

    function onDocumentDragOver(event) {
      event.preventDefault();
    }

    function isIe(userAgent) {
      return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
    }

    function isEdge(userAgent) {
      return userAgent.indexOf("Edge/") !== -1;
    }

    function isIeOrEdge() {
      var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.navigator.userAgent;
      return isIe(userAgent) || isEdge(userAgent);
    }
    /**
     * This is intended to be used to compose event handlers
     * They are executed in order until one of them calls `event.isPropagationStopped()`.
     * Note that the check is done on the first invoke too,
     * meaning that if propagation was stopped before invoking the fns,
     * no handlers will be executed.
     *
     * @param {Function} fns the event hanlder functions
     * @return {Function} the event handler to add to an element
     */

    function composeEventHandlers() {
      for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
        fns[_key] = arguments[_key];
      }

      return function (event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        return fns.some(function (fn) {
          if (!isPropagationStopped(event) && fn) {
            fn.apply(void 0, [event].concat(args));
          }

          return isPropagationStopped(event);
        });
      };
    }
    /**
     * canUseFileSystemAccessAPI checks if the [File System Access API](https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API)
     * is supported by the browser.
     * @returns {boolean}
     */

    function canUseFileSystemAccessAPI() {
      return "showOpenFilePicker" in window;
    }
    /**
     * Convert the `{accept}` dropzone prop to the
     * `{types}` option for https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker
     *
     * @param {AcceptProp} accept
     * @returns {{accept: string[]}[]}
     */

    function pickerOptionsFromAccept(accept) {
      if (isDefined(accept)) {
        var acceptForPicker = Object.entries(accept).filter(function (_ref2) {
          var _ref3 = _slicedToArray$1(_ref2, 2),
              mimeType = _ref3[0],
              ext = _ref3[1];

          var ok = true;

          if (!isMIMEType(mimeType)) {
            console.warn("Skipped \"".concat(mimeType, "\" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types."));
            ok = false;
          }

          if (!Array.isArray(ext) || !ext.every(isExt)) {
            console.warn("Skipped \"".concat(mimeType, "\" because an invalid file extension was provided."));
            ok = false;
          }

          return ok;
        }).reduce(function (agg, _ref4) {
          var _ref5 = _slicedToArray$1(_ref4, 2),
              mimeType = _ref5[0],
              ext = _ref5[1];

          return _objectSpread$1(_objectSpread$1({}, agg), {}, _defineProperty$2({}, mimeType, ext));
        }, {});
        return [{
          // description is required due to https://crbug.com/1264708
          description: "Files",
          accept: acceptForPicker
        }];
      }

      return accept;
    }
    /**
     * Convert the `{accept}` dropzone prop to an array of MIME types/extensions.
     * @param {AcceptProp} accept
     * @returns {string}
     */

    function acceptPropAsAcceptAttr(accept) {
      if (isDefined(accept)) {
        return Object.entries(accept).reduce(function (a, _ref6) {
          var _ref7 = _slicedToArray$1(_ref6, 2),
              mimeType = _ref7[0],
              ext = _ref7[1];

          return [].concat(_toConsumableArray$1(a), [mimeType], _toConsumableArray$1(ext));
        }, []) // Silently discard invalid entries as pickerOptionsFromAccept warns about these
        .filter(function (v) {
          return isMIMEType(v) || isExt(v);
        }).join(",");
      }

      return undefined;
    }
    /**
     * Check if v is an exception caused by aborting a request (e.g window.showOpenFilePicker()).
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.
     * @param {any} v
     * @returns {boolean} True if v is an abort exception.
     */

    function isAbort(v) {
      return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
    }
    /**
     * Check if v is a security error.
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/DOMException.
     * @param {any} v
     * @returns {boolean} True if v is a security error.
     */

    function isSecurityError(v) {
      return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
    }
    /**
     * Check if v is a MIME type string.
     *
     * See accepted format: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers.
     *
     * @param {string} v
     */

    function isMIMEType(v) {
      return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
    }
    /**
     * Check if v is a file extension.
     * @param {string} v
     */

    function isExt(v) {
      return /^.*\.[\w]+$/.test(v);
    }
    /**
     * @typedef {Object.<string, string[]>} AcceptProp
     */

    /**
     * @typedef {object} FileError
     * @property {string} message
     * @property {ErrorCode|string} code
     */

    /**
     * @typedef {"file-invalid-type"|"file-too-large"|"file-too-small"|"too-many-files"} ErrorCode
     */

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var _excluded$1 = ["children"],
        _excluded2 = ["open"],
        _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"],
        _excluded4 = ["refKey", "onChange", "onClick"];

    function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread(); }

    function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

    function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray$1(arr); }

    function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest(); }

    function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

    function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

    function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

    function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$1(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

    function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
    /**
     * Convenience wrapper component for the `useDropzone` hook
     *
     * ```jsx
     * <Dropzone>
     *   {({getRootProps, getInputProps}) => (
     *     <div {...getRootProps()}>
     *       <input {...getInputProps()} />
     *       <p>Drag 'n' drop some files here, or click to select files</p>
     *     </div>
     *   )}
     * </Dropzone>
     * ```
     */

    var Dropzone = /*#__PURE__*/React$2.forwardRef(function (_ref, ref) {
      var children = _ref.children,
          params = _objectWithoutProperties(_ref, _excluded$1);

      var _useDropzone = useDropzone(params),
          open = _useDropzone.open,
          props = _objectWithoutProperties(_useDropzone, _excluded2);

      React$2.useImperativeHandle(ref, function () {
        return {
          open: open
        };
      }, [open]); // TODO: Figure out why react-styleguidist cannot create docs if we don't return a jsx element

      return /*#__PURE__*/React__default["default"].createElement(React$2.Fragment, null, children(_objectSpread(_objectSpread({}, props), {}, {
        open: open
      })));
    });
    Dropzone.displayName = "Dropzone"; // Add default props for react-docgen

    var defaultProps = {
      disabled: false,
      getFilesFromEvent: fromEvent,
      maxSize: Infinity,
      minSize: 0,
      multiple: true,
      maxFiles: 0,
      preventDropOnDocument: true,
      noClick: false,
      noKeyboard: false,
      noDrag: false,
      noDragEventsBubbling: false,
      validator: null,
      useFsAccessApi: true,
      autoFocus: false
    };
    Dropzone.defaultProps = defaultProps;
    Dropzone.propTypes = {
      /**
       * Render function that exposes the dropzone state and prop getter fns
       *
       * @param {object} params
       * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
       * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
       * @param {Function} params.open Open the native file selection dialog
       * @param {boolean} params.isFocused Dropzone area is in focus
       * @param {boolean} params.isFileDialogActive File dialog is opened
       * @param {boolean} params.isDragActive Active drag is in progress
       * @param {boolean} params.isDragAccept Dragged files are accepted
       * @param {boolean} params.isDragReject Some dragged files are rejected
       * @param {File[]} params.acceptedFiles Accepted files
       * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
       */
      children: propTypes$1.exports.func,

      /**
       * Set accepted file types.
       * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
       * Keep in mind that mime type determination is not reliable across platforms. CSV files,
       * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
       * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
       */
      accept: propTypes$1.exports.objectOf(propTypes$1.exports.arrayOf(propTypes$1.exports.string)),

      /**
       * Allow drag 'n' drop (or selection from the file dialog) of multiple files
       */
      multiple: propTypes$1.exports.bool,

      /**
       * If false, allow dropped items to take over the current browser window
       */
      preventDropOnDocument: propTypes$1.exports.bool,

      /**
       * If true, disables click to open the native file selection dialog
       */
      noClick: propTypes$1.exports.bool,

      /**
       * If true, disables SPACE/ENTER to open the native file selection dialog.
       * Note that it also stops tracking the focus state.
       */
      noKeyboard: propTypes$1.exports.bool,

      /**
       * If true, disables drag 'n' drop
       */
      noDrag: propTypes$1.exports.bool,

      /**
       * If true, stops drag event propagation to parents
       */
      noDragEventsBubbling: propTypes$1.exports.bool,

      /**
       * Minimum file size (in bytes)
       */
      minSize: propTypes$1.exports.number,

      /**
       * Maximum file size (in bytes)
       */
      maxSize: propTypes$1.exports.number,

      /**
       * Maximum accepted number of files
       * The default value is 0 which means there is no limitation to how many files are accepted.
       */
      maxFiles: propTypes$1.exports.number,

      /**
       * Enable/disable the dropzone
       */
      disabled: propTypes$1.exports.bool,

      /**
       * Use this to provide a custom file aggregator
       *
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      getFilesFromEvent: propTypes$1.exports.func,

      /**
       * Cb for when closing the file dialog with no selection
       */
      onFileDialogCancel: propTypes$1.exports.func,

      /**
       * Cb for when opening the file dialog
       */
      onFileDialogOpen: propTypes$1.exports.func,

      /**
       * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
       * to open the file picker instead of using an `<input type="file">` click event.
       */
      useFsAccessApi: propTypes$1.exports.bool,

      /**
       * Set to true to focus the root element on render
       */
      autoFocus: propTypes$1.exports.bool,

      /**
       * Cb for when the `dragenter` event occurs.
       *
       * @param {DragEvent} event
       */
      onDragEnter: propTypes$1.exports.func,

      /**
       * Cb for when the `dragleave` event occurs
       *
       * @param {DragEvent} event
       */
      onDragLeave: propTypes$1.exports.func,

      /**
       * Cb for when the `dragover` event occurs
       *
       * @param {DragEvent} event
       */
      onDragOver: propTypes$1.exports.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
       *
       * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
       * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
       * If `multiple` is set to false and additional files are dropped,
       * all files besides the first will be rejected.
       * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
       *
       * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
       * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
       *
       * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
       * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
       *
       * ```js
       * function onDrop(acceptedFiles) {
       *   const req = request.post('/upload')
       *   acceptedFiles.forEach(file => {
       *     req.attach(file.name, file)
       *   })
       *   req.end(callback)
       * }
       * ```
       *
       * @param {File[]} acceptedFiles
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
       */
      onDrop: propTypes$1.exports.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are accepted, this callback is not invoked.
       *
       * @param {File[]} files
       * @param {(DragEvent|Event)} event
       */
      onDropAccepted: propTypes$1.exports.func,

      /**
       * Cb for when the `drop` event occurs.
       * Note that if no files are rejected, this callback is not invoked.
       *
       * @param {FileRejection[]} fileRejections
       * @param {(DragEvent|Event)} event
       */
      onDropRejected: propTypes$1.exports.func,

      /**
       * Cb for when there's some error from any of the promises.
       *
       * @param {Error} error
       */
      onError: propTypes$1.exports.func,

      /**
       * Custom validation function. It must return null if there's no errors.
       * @param {File} file
       * @returns {FileError|FileError[]|null}
       */
      validator: propTypes$1.exports.func
    };
    /**
     * A function that is invoked for the `dragenter`,
     * `dragover` and `dragleave` events.
     * It is not invoked if the items are not files (such as link, text, etc.).
     *
     * @callback dragCb
     * @param {DragEvent} event
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     * It is not invoked if the items are not files (such as link, text, etc.).
     *
     * @callback dropCb
     * @param {File[]} acceptedFiles List of accepted files
     * @param {FileRejection[]} fileRejections List of rejected files and why they were rejected
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     * It is not invoked if the items are files (such as link, text, etc.).
     *
     * @callback dropAcceptedCb
     * @param {File[]} files List of accepted files that meet the given criteria
     * (`accept`, `multiple`, `minSize`, `maxSize`)
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is invoked for the `drop` or input change event.
     *
     * @callback dropRejectedCb
     * @param {File[]} files List of rejected files that do not meet the given criteria
     * (`accept`, `multiple`, `minSize`, `maxSize`)
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     */

    /**
     * A function that is used aggregate files,
     * in a asynchronous fashion, from drag or input change events.
     *
     * @callback getFilesFromEvent
     * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
     * @returns {(File[]|Promise<File[]>)}
     */

    /**
     * An object with the current dropzone state.
     *
     * @typedef {object} DropzoneState
     * @property {boolean} isFocused Dropzone area is in focus
     * @property {boolean} isFileDialogActive File dialog is opened
     * @property {boolean} isDragActive Active drag is in progress
     * @property {boolean} isDragAccept Dragged files are accepted
     * @property {boolean} isDragReject Some dragged files are rejected
     * @property {File[]} acceptedFiles Accepted files
     * @property {FileRejection[]} fileRejections Rejected files and why they were rejected
     */

    /**
     * An object with the dropzone methods.
     *
     * @typedef {object} DropzoneMethods
     * @property {Function} getRootProps Returns the props you should apply to the root drop container you render
     * @property {Function} getInputProps Returns the props you should apply to hidden file input you render
     * @property {Function} open Open the native file selection dialog
     */

    var initialState$1 = {
      isFocused: false,
      isFileDialogActive: false,
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false,
      acceptedFiles: [],
      fileRejections: []
    };
    /**
     * A React hook that creates a drag 'n' drop area.
     *
     * ```jsx
     * function MyDropzone(props) {
     *   const {getRootProps, getInputProps} = useDropzone({
     *     onDrop: acceptedFiles => {
     *       // do something with the File objects, e.g. upload to some server
     *     }
     *   });
     *   return (
     *     <div {...getRootProps()}>
     *       <input {...getInputProps()} />
     *       <p>Drag and drop some files here, or click to select files</p>
     *     </div>
     *   )
     * }
     * ```
     *
     * @function useDropzone
     *
     * @param {object} props
     * @param {import("./utils").AcceptProp} [props.accept] Set accepted file types.
     * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
     * Keep in mind that mime type determination is not reliable across platforms. CSV files,
     * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
     * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
     * @param {boolean} [props.multiple=true] Allow drag 'n' drop (or selection from the file dialog) of multiple files
     * @param {boolean} [props.preventDropOnDocument=true] If false, allow dropped items to take over the current browser window
     * @param {boolean} [props.noClick=false] If true, disables click to open the native file selection dialog
     * @param {boolean} [props.noKeyboard=false] If true, disables SPACE/ENTER to open the native file selection dialog.
     * Note that it also stops tracking the focus state.
     * @param {boolean} [props.noDrag=false] If true, disables drag 'n' drop
     * @param {boolean} [props.noDragEventsBubbling=false] If true, stops drag event propagation to parents
     * @param {number} [props.minSize=0] Minimum file size (in bytes)
     * @param {number} [props.maxSize=Infinity] Maximum file size (in bytes)
     * @param {boolean} [props.disabled=false] Enable/disable the dropzone
     * @param {getFilesFromEvent} [props.getFilesFromEvent] Use this to provide a custom file aggregator
     * @param {Function} [props.onFileDialogCancel] Cb for when closing the file dialog with no selection
     * @param {boolean} [props.useFsAccessApi] Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
     * to open the file picker instead of using an `<input type="file">` click event.
     * @param {boolean} autoFocus Set to true to auto focus the root element.
     * @param {Function} [props.onFileDialogOpen] Cb for when opening the file dialog
     * @param {dragCb} [props.onDragEnter] Cb for when the `dragenter` event occurs.
     * @param {dragCb} [props.onDragLeave] Cb for when the `dragleave` event occurs
     * @param {dragCb} [props.onDragOver] Cb for when the `dragover` event occurs
     * @param {dropCb} [props.onDrop] Cb for when the `drop` event occurs.
     * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
     *
     * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
     * `accept` must be an object with keys as a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) and the value an array of file extensions (optional).
     * If `multiple` is set to false and additional files are dropped,
     * all files besides the first will be rejected.
     * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
     *
     * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
     * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
     *
     * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
     * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
     *
     * ```js
     * function onDrop(acceptedFiles) {
     *   const req = request.post('/upload')
     *   acceptedFiles.forEach(file => {
     *     req.attach(file.name, file)
     *   })
     *   req.end(callback)
     * }
     * ```
     * @param {dropAcceptedCb} [props.onDropAccepted]
     * @param {dropRejectedCb} [props.onDropRejected]
     * @param {(error: Error) => void} [props.onError]
     *
     * @returns {DropzoneState & DropzoneMethods}
     */

    function useDropzone() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _defaultProps$props = _objectSpread(_objectSpread({}, defaultProps), props),
          accept = _defaultProps$props.accept,
          disabled = _defaultProps$props.disabled,
          getFilesFromEvent = _defaultProps$props.getFilesFromEvent,
          maxSize = _defaultProps$props.maxSize,
          minSize = _defaultProps$props.minSize,
          multiple = _defaultProps$props.multiple,
          maxFiles = _defaultProps$props.maxFiles,
          onDragEnter = _defaultProps$props.onDragEnter,
          onDragLeave = _defaultProps$props.onDragLeave,
          onDragOver = _defaultProps$props.onDragOver,
          onDrop = _defaultProps$props.onDrop,
          onDropAccepted = _defaultProps$props.onDropAccepted,
          onDropRejected = _defaultProps$props.onDropRejected,
          onFileDialogCancel = _defaultProps$props.onFileDialogCancel,
          onFileDialogOpen = _defaultProps$props.onFileDialogOpen,
          useFsAccessApi = _defaultProps$props.useFsAccessApi,
          autoFocus = _defaultProps$props.autoFocus,
          preventDropOnDocument = _defaultProps$props.preventDropOnDocument,
          noClick = _defaultProps$props.noClick,
          noKeyboard = _defaultProps$props.noKeyboard,
          noDrag = _defaultProps$props.noDrag,
          noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling,
          onError = _defaultProps$props.onError,
          validator = _defaultProps$props.validator;

      var acceptAttr = React$2.useMemo(function () {
        return acceptPropAsAcceptAttr(accept);
      }, [accept]);
      var pickerTypes = React$2.useMemo(function () {
        return pickerOptionsFromAccept(accept);
      }, [accept]);
      var onFileDialogOpenCb = React$2.useMemo(function () {
        return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop$5;
      }, [onFileDialogOpen]);
      var onFileDialogCancelCb = React$2.useMemo(function () {
        return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop$5;
      }, [onFileDialogCancel]);
      /**
       * @constant
       * @type {React.MutableRefObject<HTMLElement>}
       */

      var rootRef = React$2.useRef(null);
      var inputRef = React$2.useRef(null);

      var _useReducer = React$2.useReducer(reducer, initialState$1),
          _useReducer2 = _slicedToArray(_useReducer, 2),
          state = _useReducer2[0],
          dispatch = _useReducer2[1];

      var isFocused = state.isFocused,
          isFileDialogActive = state.isFileDialogActive;
      var fsAccessApiWorksRef = React$2.useRef(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI()); // Update file dialog active state when the window is focused on

      var onWindowFocus = function onWindowFocus() {
        // Execute the timeout only if the file dialog is opened in the browser
        if (!fsAccessApiWorksRef.current && isFileDialogActive) {
          setTimeout(function () {
            if (inputRef.current) {
              var files = inputRef.current.files;

              if (!files.length) {
                dispatch({
                  type: "closeDialog"
                });
                onFileDialogCancelCb();
              }
            }
          }, 300);
        }
      };

      React$2.useEffect(function () {
        window.addEventListener("focus", onWindowFocus, false);
        return function () {
          window.removeEventListener("focus", onWindowFocus, false);
        };
      }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
      var dragTargetsRef = React$2.useRef([]);

      var onDocumentDrop = function onDocumentDrop(event) {
        if (rootRef.current && rootRef.current.contains(event.target)) {
          // If we intercepted an event for our instance, let it propagate down to the instance's onDrop handler
          return;
        }

        event.preventDefault();
        dragTargetsRef.current = [];
      };

      React$2.useEffect(function () {
        if (preventDropOnDocument) {
          document.addEventListener("dragover", onDocumentDragOver, false);
          document.addEventListener("drop", onDocumentDrop, false);
        }

        return function () {
          if (preventDropOnDocument) {
            document.removeEventListener("dragover", onDocumentDragOver);
            document.removeEventListener("drop", onDocumentDrop);
          }
        };
      }, [rootRef, preventDropOnDocument]); // Auto focus the root when autoFocus is true

      React$2.useEffect(function () {
        if (!disabled && autoFocus && rootRef.current) {
          rootRef.current.focus();
        }

        return function () {};
      }, [rootRef, autoFocus, disabled]);
      var onErrCb = React$2.useCallback(function (e) {
        if (onError) {
          onError(e);
        } else {
          // Let the user know something's gone wrong if they haven't provided the onError cb.
          console.error(e);
        }
      }, [onError]);
      var onDragEnterCb = React$2.useCallback(function (event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done

        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [].concat(_toConsumableArray(dragTargetsRef.current), [event.target]);

        if (isEvtWithFiles(event)) {
          Promise.resolve(getFilesFromEvent(event)).then(function (files) {
            if (isPropagationStopped(event) && !noDragEventsBubbling) {
              return;
            }

            var fileCount = files.length;
            var isDragAccept = fileCount > 0 && allFilesAccepted({
              files: files,
              accept: acceptAttr,
              minSize: minSize,
              maxSize: maxSize,
              multiple: multiple,
              maxFiles: maxFiles,
              validator: validator
            });
            var isDragReject = fileCount > 0 && !isDragAccept;
            dispatch({
              isDragAccept: isDragAccept,
              isDragReject: isDragReject,
              isDragActive: true,
              type: "setDraggedFiles"
            });

            if (onDragEnter) {
              onDragEnter(event);
            }
          }).catch(function (e) {
            return onErrCb(e);
          });
        }
      }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
      var onDragOverCb = React$2.useCallback(function (event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event);
        var hasFiles = isEvtWithFiles(event);

        if (hasFiles && event.dataTransfer) {
          try {
            event.dataTransfer.dropEffect = "copy";
          } catch (_unused) {}
          /* eslint-disable-line no-empty */

        }

        if (hasFiles && onDragOver) {
          onDragOver(event);
        }

        return false;
      }, [onDragOver, noDragEventsBubbling]);
      var onDragLeaveCb = React$2.useCallback(function (event) {
        event.preventDefault();
        event.persist();
        stopPropagation(event); // Only deactivate once the dropzone and all children have been left

        var targets = dragTargetsRef.current.filter(function (target) {
          return rootRef.current && rootRef.current.contains(target);
        }); // Make sure to remove a target present multiple times only once
        // (Firefox may fire dragenter/dragleave multiple times on the same element)

        var targetIdx = targets.indexOf(event.target);

        if (targetIdx !== -1) {
          targets.splice(targetIdx, 1);
        }

        dragTargetsRef.current = targets;

        if (targets.length > 0) {
          return;
        }

        dispatch({
          type: "setDraggedFiles",
          isDragActive: false,
          isDragAccept: false,
          isDragReject: false
        });

        if (isEvtWithFiles(event) && onDragLeave) {
          onDragLeave(event);
        }
      }, [rootRef, onDragLeave, noDragEventsBubbling]);
      var setFiles = React$2.useCallback(function (files, event) {
        var acceptedFiles = [];
        var fileRejections = [];
        files.forEach(function (file) {
          var _fileAccepted = fileAccepted(file, acceptAttr),
              _fileAccepted2 = _slicedToArray(_fileAccepted, 2),
              accepted = _fileAccepted2[0],
              acceptError = _fileAccepted2[1];

          var _fileMatchSize = fileMatchSize(file, minSize, maxSize),
              _fileMatchSize2 = _slicedToArray(_fileMatchSize, 2),
              sizeMatch = _fileMatchSize2[0],
              sizeError = _fileMatchSize2[1];

          var customErrors = validator ? validator(file) : null;

          if (accepted && sizeMatch && !customErrors) {
            acceptedFiles.push(file);
          } else {
            var errors = [acceptError, sizeError];

            if (customErrors) {
              errors = errors.concat(customErrors);
            }

            fileRejections.push({
              file: file,
              errors: errors.filter(function (e) {
                return e;
              })
            });
          }
        });

        if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
          // Reject everything and empty accepted files
          acceptedFiles.forEach(function (file) {
            fileRejections.push({
              file: file,
              errors: [TOO_MANY_FILES_REJECTION]
            });
          });
          acceptedFiles.splice(0);
        }

        dispatch({
          acceptedFiles: acceptedFiles,
          fileRejections: fileRejections,
          type: "setFiles"
        });

        if (onDrop) {
          onDrop(acceptedFiles, fileRejections, event);
        }

        if (fileRejections.length > 0 && onDropRejected) {
          onDropRejected(fileRejections, event);
        }

        if (acceptedFiles.length > 0 && onDropAccepted) {
          onDropAccepted(acceptedFiles, event);
        }
      }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
      var onDropCb = React$2.useCallback(function (event) {
        event.preventDefault(); // Persist here because we need the event later after getFilesFromEvent() is done

        event.persist();
        stopPropagation(event);
        dragTargetsRef.current = [];

        if (isEvtWithFiles(event)) {
          Promise.resolve(getFilesFromEvent(event)).then(function (files) {
            if (isPropagationStopped(event) && !noDragEventsBubbling) {
              return;
            }

            setFiles(files, event);
          }).catch(function (e) {
            return onErrCb(e);
          });
        }

        dispatch({
          type: "reset"
        });
      }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]); // Fn for opening the file dialog programmatically

      var openFileDialog = React$2.useCallback(function () {
        // No point to use FS access APIs if context is not secure
        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection
        if (fsAccessApiWorksRef.current) {
          dispatch({
            type: "openDialog"
          });
          onFileDialogOpenCb(); // https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker

          var opts = {
            multiple: multiple,
            types: pickerTypes
          };
          window.showOpenFilePicker(opts).then(function (handles) {
            return getFilesFromEvent(handles);
          }).then(function (files) {
            setFiles(files, null);
            dispatch({
              type: "closeDialog"
            });
          }).catch(function (e) {
            // AbortError means the user canceled
            if (isAbort(e)) {
              onFileDialogCancelCb(e);
              dispatch({
                type: "closeDialog"
              });
            } else if (isSecurityError(e)) {
              fsAccessApiWorksRef.current = false; // CORS, so cannot use this API
              // Try using the input

              if (inputRef.current) {
                inputRef.current.value = null;
                inputRef.current.click();
              } else {
                onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
              }
            } else {
              onErrCb(e);
            }
          });
          return;
        }

        if (inputRef.current) {
          dispatch({
            type: "openDialog"
          });
          onFileDialogOpenCb();
          inputRef.current.value = null;
          inputRef.current.click();
        }
      }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]); // Cb to open the file dialog when SPACE/ENTER occurs on the dropzone

      var onKeyDownCb = React$2.useCallback(function (event) {
        // Ignore keyboard events bubbling up the DOM tree
        if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
          return;
        }

        if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
          event.preventDefault();
          openFileDialog();
        }
      }, [rootRef, openFileDialog]); // Update focus state for the dropzone

      var onFocusCb = React$2.useCallback(function () {
        dispatch({
          type: "focus"
        });
      }, []);
      var onBlurCb = React$2.useCallback(function () {
        dispatch({
          type: "blur"
        });
      }, []); // Cb to open the file dialog when click occurs on the dropzone

      var onClickCb = React$2.useCallback(function () {
        if (noClick) {
          return;
        } // In IE11/Edge the file-browser dialog is blocking, therefore, use setTimeout()
        // to ensure React can handle state changes
        // See: https://github.com/react-dropzone/react-dropzone/issues/450


        if (isIeOrEdge()) {
          setTimeout(openFileDialog, 0);
        } else {
          openFileDialog();
        }
      }, [noClick, openFileDialog]);

      var composeHandler = function composeHandler(fn) {
        return disabled ? null : fn;
      };

      var composeKeyboardHandler = function composeKeyboardHandler(fn) {
        return noKeyboard ? null : composeHandler(fn);
      };

      var composeDragHandler = function composeDragHandler(fn) {
        return noDrag ? null : composeHandler(fn);
      };

      var stopPropagation = function stopPropagation(event) {
        if (noDragEventsBubbling) {
          event.stopPropagation();
        }
      };

      var getRootProps = React$2.useMemo(function () {
        return function () {
          var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref2$refKey = _ref2.refKey,
              refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey,
              role = _ref2.role,
              onKeyDown = _ref2.onKeyDown,
              onFocus = _ref2.onFocus,
              onBlur = _ref2.onBlur,
              onClick = _ref2.onClick,
              onDragEnter = _ref2.onDragEnter,
              onDragOver = _ref2.onDragOver,
              onDragLeave = _ref2.onDragLeave,
              onDrop = _ref2.onDrop,
              rest = _objectWithoutProperties(_ref2, _excluded3);

          return _objectSpread(_objectSpread(_defineProperty$1({
            onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
            onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
            onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
            onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
            onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter, onDragEnterCb)),
            onDragOver: composeDragHandler(composeEventHandlers(onDragOver, onDragOverCb)),
            onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave, onDragLeaveCb)),
            onDrop: composeDragHandler(composeEventHandlers(onDrop, onDropCb)),
            role: typeof role === "string" && role !== "" ? role : "presentation"
          }, refKey, rootRef), !disabled && !noKeyboard ? {
            tabIndex: 0
          } : {}), rest);
        };
      }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
      var onInputElementClick = React$2.useCallback(function (event) {
        event.stopPropagation();
      }, []);
      var getInputProps = React$2.useMemo(function () {
        return function () {
          var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref3$refKey = _ref3.refKey,
              refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey,
              onChange = _ref3.onChange,
              onClick = _ref3.onClick,
              rest = _objectWithoutProperties(_ref3, _excluded4);

          var inputProps = _defineProperty$1({
            accept: acceptAttr,
            multiple: multiple,
            type: "file",
            style: {
              display: "none"
            },
            onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
            onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
            tabIndex: -1
          }, refKey, inputRef);

          return _objectSpread(_objectSpread({}, inputProps), rest);
        };
      }, [inputRef, accept, multiple, onDropCb, disabled]);
      return _objectSpread(_objectSpread({}, state), {}, {
        isFocused: isFocused && !disabled,
        getRootProps: getRootProps,
        getInputProps: getInputProps,
        rootRef: rootRef,
        inputRef: inputRef,
        open: composeHandler(openFileDialog)
      });
    }
    /**
     * @param {DropzoneState} state
     * @param {{type: string} & DropzoneState} action
     * @returns {DropzoneState}
     */

    function reducer(state, action) {
      /* istanbul ignore next */
      switch (action.type) {
        case "focus":
          return _objectSpread(_objectSpread({}, state), {}, {
            isFocused: true
          });

        case "blur":
          return _objectSpread(_objectSpread({}, state), {}, {
            isFocused: false
          });

        case "openDialog":
          return _objectSpread(_objectSpread({}, initialState$1), {}, {
            isFileDialogActive: true
          });

        case "closeDialog":
          return _objectSpread(_objectSpread({}, state), {}, {
            isFileDialogActive: false
          });

        case "setDraggedFiles":
          return _objectSpread(_objectSpread({}, state), {}, {
            isDragActive: action.isDragActive,
            isDragAccept: action.isDragAccept,
            isDragReject: action.isDragReject
          });

        case "setFiles":
          return _objectSpread(_objectSpread({}, state), {}, {
            acceptedFiles: action.acceptedFiles,
            fileRejections: action.fileRejections
          });

        case "reset":
          return _objectSpread({}, initialState$1);

        default:
          return state;
      }
    }

    function noop$5() {}

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ImageDropzone = function (_a) {
        var _b = _a.accept, acceptedFiles = _b === void 0 ? [] : _b, children = _a.children, disabled = _a.disabled, handleFiles = _a.handleFiles, maxNumberOfFiles = _a.maxNumberOfFiles, multiple = _a.multiple;
        var t = useTranslationContext('ImageDropzone').t;
        var handleDrop = React$2.useCallback(function (accepted) {
            if (!handleFiles) {
                return;
            }
            if (accepted && accepted.length) {
                handleFiles(accepted);
            }
        }, [handleFiles]);
        var accept = React$2.useMemo(function () {
            return (typeof acceptedFiles === 'string' ? acceptedFiles.split(',') : acceptedFiles).reduce(function (mediaTypeMap, mediaType) {
                var _a;
                (_a = mediaTypeMap[mediaType]) !== null && _a !== void 0 ? _a : (mediaTypeMap[mediaType] = []);
                return mediaTypeMap;
            }, {});
        }, [acceptedFiles]);
        var _c = useDropzone({
            accept: accept,
            disabled: disabled,
            maxFiles: maxNumberOfFiles,
            multiple: multiple,
            noClick: true,
            onDrop: handleDrop,
        }), getRootProps = _c.getRootProps, isDragAccept = _c.isDragAccept, isDragReject = _c.isDragReject;
        return (React__default["default"].createElement("div", __assign({}, getRootProps({
            className: clsx('rfu-dropzone', {
                'rfu-dropzone--accept': isDragAccept,
                'rfu-dropzone--reject': isDragReject,
            }),
            style: { position: 'relative' },
        }), { tabIndex: -1 }),
            React__default["default"].createElement("div", { className: 'rfu-dropzone__notifier' },
                React__default["default"].createElement("div", { className: 'rfu-dropzone__inner' },
                    React__default["default"].createElement("svg", { height: '41', viewBox: '0 0 41 41', width: '41', xmlns: 'http://www.w3.org/2000/svg' },
                        React__default["default"].createElement("path", { d: 'M40.517 28.002V3.997c0-2.197-1.808-3.992-4.005-3.992H12.507a4.004 4.004 0 0 0-3.992 3.993v24.004a4.004 4.004 0 0 0 3.992 3.993h24.005c2.197 0 4.005-1.795 4.005-3.993zm-22.002-7.997l4.062 5.42 5.937-7.423 7.998 10H12.507l6.008-7.997zM.517 8.003V36c0 2.198 1.795 4.005 3.993 4.005h27.997V36H4.51V8.002H.517z', fill: '#000', fillRule: 'nonzero' })),
                    React__default["default"].createElement("p", null, t('Drag your files here to add to your post')))),
            children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * This is simply a button wrapper, adds a div with `role="button"` and a onClick
     */
    var IconButton = function (_a) {
        var children = _a.children, onClick = _a.onClick;
        var t = useTranslationContext('IconButton').t;
        return (React__default["default"].createElement("button", { "aria-label": t('aria/Cancel upload'), className: 'rfu-icon-button', "data-testid": 'cancel-upload-button', onClick: onClick, type: 'button' }, children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Thumbnail = function (_a) {
        var alt = _a.alt, handleClose = _a.handleClose, image = _a.image, _b = _a.size, size = _b === void 0 ? 100 : _b;
        var onClose = React$2.useCallback(function (event) { return handleClose === null || handleClose === void 0 ? void 0 : handleClose(event); }, [handleClose]);
        return (React__default["default"].createElement("div", { className: 'rfu-thumbnail__wrapper', style: { height: size, width: size } },
            React__default["default"].createElement("div", { className: 'rfu-thumbnail__overlay' }, handleClose ? (React__default["default"].createElement(IconButton, { onClick: onClose },
                React__default["default"].createElement(CloseIcon$3, null))) : null),
            image ? (React__default["default"].createElement("img", { alt: alt !== null && alt !== void 0 ? alt : '', className: 'rfu-thumbnail__image', src: image })) : (React__default["default"].createElement(FilePlaceholderIcon, { className: 'rfu-thumbnail__image', preserveAspectRatio: 'xMinYMin slice' }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @deprecated will be removed in the next major release
     */
    var ImageUploadButton = function (_a) {
        var _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, handleFiles = _a.handleFiles, _d = _a.children, children = _d === void 0 ? React__default["default"].createElement(PictureIcon, null) : _d, _e = _a.resetOnChange, resetOnChange = _e === void 0 ? false : _e;
        var t = useTranslationContext('ImageUploadButton').t;
        return (React__default["default"].createElement("div", { className: 'rfu-image-upload-button' },
            React__default["default"].createElement("label", null,
                React__default["default"].createElement(UploadButton, { accept: 'image/*', "aria-label": t('aria/Image input'), className: 'rfu-image-input', disabled: disabled, multiple: multiple, onFileChange: handleFiles, resetOnChange: resetOnChange }),
                children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ThumbnailPlaceholder = function (_a) {
        var handleFiles = _a.handleFiles, _b = _a.multiple, multiple = _b === void 0 ? false : _b;
        return (React__default["default"].createElement(ImageUploadButton, { handleFiles: handleFiles, multiple: multiple },
            React__default["default"].createElement("div", { className: 'rfu-thumbnail-placeholder' },
                React__default["default"].createElement("svg", { height: '15', viewBox: '0 0 14 15', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
                    React__default["default"].createElement("path", { d: 'M14 8.998H8v6H6v-6H0v-2h6v-6h2v6h6z', fill: '#A0B2B8', fillRule: 'nonzero' })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ImagePreviewer = function (_a) {
        var _b = _a.disabled, disabled = _b === void 0 ? false : _b, handleFiles = _a.handleFiles, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry, imageUploads = _a.imageUploads, _c = _a.multiple, multiple = _c === void 0 ? true : _c;
        var t = useTranslationContext('ImagePreviewer').t;
        var onClose = React$2.useCallback(function (id, event) {
            if (!id)
                return console.warn("image.id of closed image was \"null\", this shouldn't happen");
            handleRemove === null || handleRemove === void 0 ? void 0 : handleRemove(id, event);
        }, [handleRemove]);
        return (React__default["default"].createElement("div", { className: 'rfu-image-previewer' }, imageUploads === null || imageUploads === void 0 ? void 0 :
            imageUploads.map(function (image) {
                var url = image.url || image.previewUri;
                return (React__default["default"].createElement("div", { className: clsx('rfu-image-previewer__image', image.state === 'finished' && 'rfu-image-previewer__image--loaded'), key: image.id },
                    image.state === 'failed' && (React__default["default"].createElement("button", { "aria-label": t('aria/Retry upload'), className: 'rfu-image-previewer__retry', onClick: function (event) { return handleRetry === null || handleRetry === void 0 ? void 0 : handleRetry(image.id, event); }, type: 'button' },
                        React__default["default"].createElement(RetryIcon$1, null))),
                    url && React__default["default"].createElement(Thumbnail, { handleClose: function (event) { return onClose(image.id, event); }, image: url }),
                    image.state === 'uploading' && (React__default["default"].createElement(LoadingIndicator$1, { backgroundColor: '#ffffff19', color: '#ffffffb2' }))));
            }),
            handleFiles && !disabled && (React__default["default"].createElement(ThumbnailPlaceholder, { handleFiles: handleFiles, multiple: multiple }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedFileAttachmentV1 = function (_a) {
        var attachment = _a.attachment;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item', "data-testid": 'attachment-file' },
            React__default["default"].createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 30 }),
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item-text' },
                React__default["default"].createElement(SafeAnchor, { download: true, href: attachment.asset_url, target: '_blank' }, attachment.title),
                React__default["default"].createElement(FileSizeIndicator, { fileSize: attachment.file_size }))));
    };
    var UnMemoizedFileAttachmentV2 = function (_a) {
        var attachment = _a.attachment;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item', "data-testid": 'attachment-file' },
            React__default["default"].createElement(FileIcon, { className: 'str-chat__file-icon', mimeType: attachment.mime_type, version: '2' }),
            React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item-text' },
                React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item-first-row' },
                    React__default["default"].createElement("div", { className: 'str-chat__message-attachment-file--item-name', "data-testid": 'file-title' }, attachment.title),
                    React__default["default"].createElement(DownloadButton, { assetUrl: attachment.asset_url })),
                React__default["default"].createElement(FileSizeIndicator, { fileSize: attachment.file_size }))));
    };
    var UnMemoizedFileAttachment = function (_a) {
        var attachment = _a.attachment;
        var themeVersion = useChatContext('FileAttachment').themeVersion;
        return themeVersion === '2' ? (React__default["default"].createElement(UnMemoizedFileAttachmentV2, { attachment: attachment })) : (React__default["default"].createElement(UnMemoizedFileAttachmentV1, { attachment: attachment }));
    };
    var FileAttachment = React__default["default"].memo(UnMemoizedFileAttachment);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SUPPORTED_VIDEO_FORMATS = ['video/mp4', 'video/ogg', 'video/webm', 'video/quicktime'];
    var isScrapedContent = function (attachment) { return attachment.og_scrape_url || attachment.title_link; };
    var isUploadedImage = function (attachment) { return attachment.type === 'image' && !isScrapedContent(attachment); };
    var isGalleryAttachmentType = function (output) { return Array.isArray(output.images); };
    var isAudioAttachment = function (attachment) { return attachment.type === 'audio'; };
    var isFileAttachment = function (attachment) {
        return attachment.type === 'file' ||
            (attachment.mime_type &&
                SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) === -1 &&
                attachment.type !== 'video');
    };
    var isMediaAttachment = function (attachment) {
        return (attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) !== -1) ||
            attachment.type === 'video';
    };
    var isSvgAttachment = function (attachment) {
        var filename = attachment.fallback || '';
        return filename.toLowerCase().endsWith('.svg');
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/AttachmentWithinContainer`
     */
    var renderAttachmentWithinContainer = function (props) {
        var _a;
        var _b;
        var attachment = props.attachment, children = props.children, componentType = props.componentType;
        var isGAT = isGalleryAttachmentType(attachment);
        var extra = '';
        if (!isGAT) {
            extra =
                componentType === 'card' && !(attachment === null || attachment === void 0 ? void 0 : attachment.image_url) && !(attachment === null || attachment === void 0 ? void 0 : attachment.thumb_url)
                    ? 'no-image'
                    : ((_b = attachment === null || attachment === void 0 ? void 0 : attachment.actions) === null || _b === void 0 ? void 0 : _b.length)
                        ? 'actions'
                        : '';
        }
        var classNames = clsx('str-chat__message-attachment', (_a = {},
            _a["str-chat__message-attachment--".concat(componentType)] = componentType,
            _a["str-chat__message-attachment--".concat(attachment === null || attachment === void 0 ? void 0 : attachment.type)] = attachment === null || attachment === void 0 ? void 0 : attachment.type,
            _a["str-chat__message-attachment--".concat(componentType, "--").concat(extra)] = componentType && extra,
            _a['str-chat__message-attachment--svg-image'] = isSvgAttachment(attachment),
            _a['str-chat__message-attachment-with-actions'] = extra === 'actions',
            _a));
        return React__default["default"].createElement("div", { className: classNames }, children);
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/AttachmentActionsContainer`
     */
    var renderAttachmentActions = function (props) {
        var _a;
        var actionHandler = props.actionHandler, attachment = props.attachment, _b = props.AttachmentActions, AttachmentActions$1 = _b === void 0 ? AttachmentActions : _b;
        if (!((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length))
            return null;
        return (React__default["default"].createElement(AttachmentActions$1, __assign({}, attachment, { actionHandler: function (event, name, value) { return actionHandler === null || actionHandler === void 0 ? void 0 : actionHandler(event, name, value); }, actions: attachment.actions, id: attachment.id || '', key: "key-actions-".concat(attachment.id), text: attachment.text || '' })));
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/GalleryContainer`
     */
    var renderGallery = function (props) {
        var attachment = props.attachment, _a = props.Gallery, Gallery$1 = _a === void 0 ? Gallery : _a;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default["default"].createElement(Gallery$1, { images: attachment.images || [], key: 'gallery' }),
            componentType: 'gallery',
        });
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/ImageContainer`
     */
    var renderImage = function (props) {
        var attachment = props.attachment, _a = props.Image, Image = _a === void 0 ? ImageComponent : _a;
        if (attachment.actions && attachment.actions.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default["default"].createElement("div", { className: 'str-chat__attachment', key: "key-image-".concat(attachment.id) },
                    React__default["default"].createElement(Image, __assign({}, attachment)),
                    renderAttachmentActions(props))),
                componentType: 'image',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default["default"].createElement(Image, __assign({}, attachment, { key: "key-image-".concat(attachment.id) })),
            componentType: 'image',
        });
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/CardContainer`
     */
    var renderCard = function (props) {
        var attachment = props.attachment, _a = props.Card, Card = _a === void 0 ? Card$1 : _a;
        if (attachment.actions && attachment.actions.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default["default"].createElement("div", { className: 'str-chat__attachment', key: "key-image-".concat(attachment.id) },
                    React__default["default"].createElement(Card, __assign({}, attachment, { key: "key-card-".concat(attachment.id) })),
                    renderAttachmentActions(props))),
                componentType: 'card',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default["default"].createElement(Card, __assign({}, attachment, { key: "key-card-".concat(attachment.id) })),
            componentType: 'card',
        });
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/FileContainer`
     */
    var renderFile = function (props) {
        var attachment = props.attachment, _a = props.File, File = _a === void 0 ? FileAttachment : _a;
        if (!attachment.asset_url)
            return null;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: React__default["default"].createElement(File, { attachment: attachment, key: "key-file-".concat(attachment.id) }),
            componentType: 'file',
        });
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/AudioContainer`
     */
    var renderAudio = function (props) {
        var attachment = props.attachment, _a = props.Audio, Audio$1 = _a === void 0 ? Audio : _a;
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: (React__default["default"].createElement("div", { className: 'str-chat__attachment', key: "key-video-".concat(attachment.id) },
                React__default["default"].createElement(Audio$1, { og: attachment }))),
            componentType: 'audio',
        });
    };
    /**
     * @deprecated will be removed in the next major release,
     * replaced with the proper component equivalent `AttachmentContainer/MediaContainer`
     */
    var renderMedia = function (props) {
        var _a;
        var attachment = props.attachment, _b = props.Media, Media = _b === void 0 ? ReactPlayer : _b;
        if ((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length) {
            return renderAttachmentWithinContainer({
                attachment: attachment,
                children: (React__default["default"].createElement("div", { className: 'str-chat__attachment str-chat__attachment-media', key: "key-video-".concat(attachment.id) },
                    React__default["default"].createElement("div", { className: 'str-chat__player-wrapper' },
                        React__default["default"].createElement(Media, { className: 'react-player', controls: true, height: '100%', url: attachment.asset_url, width: '100%' })),
                    renderAttachmentActions(props))),
                componentType: 'media',
            });
        }
        return renderAttachmentWithinContainer({
            attachment: attachment,
            children: (React__default["default"].createElement("div", { className: 'str-chat__player-wrapper', key: "key-video-".concat(attachment.id) },
                React__default["default"].createElement(Media, { className: 'react-player', controls: true, height: '100%', url: attachment.asset_url, width: '100%' }))),
            componentType: 'media',
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY
    // See update-tlds.js for encoding/decoding format
    // https://data.iana.org/TLD/tlds-alpha-by-domain.txt
    const encodedTlds = 'aaa1rp3barth4b_ott3vie4c1le2ogado5udhabi7c_ademy5centure6ountant_s9o1tor4d_s1ult4e_g1ro2tna4f_l1rica5g_akhan5ency5i_g1rbus3force5tel5kdn3l_faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m_azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o_l2partments8p_le4q_uarelle8r_ab1mco4chi3my2pa2t_e3s_da2ia2sociates9t_hleta5torney7u_ction5di_ble3o3spost5thor3o_s4vianca6w_s2x_a2z_ure5ba_by2idu3namex3narepublic11d1k2r_celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b_c1t1va3cg1n2d1e_ats2uty4er2ntley5rlin4st_buy5t2f1g1h_arti5i_ble3d1ke2ng_o3o1z2j1lack_friday9ockbuster8g1omberg7ue3m_s1w2n_pparibas9o_ats3ehringer8fa2m1nd2o_k_ing5sch2tik2on4t1utique6x2r_adesco6idgestone9oadway5ker3ther5ussels7s1t1uild_ers6siness6y1zz3v1w1y1z_h3ca_b1fe2l_l1vinklein9m_era3p2non3petown5ital_one8r_avan4ds2e_er_s4s2sa1e1h1ino4t_ering5holic7ba1n1re2s2c1d1enter4o1rn3f_a1d2g1h_anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i_priani6rcle4sco3tadel4i_c2y_eats7k1l_aims4eaning6ick2nic1que6othing5ud3ub_med6m1n1o_ach3des3ffee4llege4ogne5m_cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking_channel11l1p2rsica5untry4pon_s4rses6pa2r_edit_card4union9icket5own3s1uise_s6u_isinella9v1w1x1y_mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e_al_er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si_gn4v2hl2iamonds6et2gital5rect_ory7scount3ver5h2y2j1k1m1np2o_cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c_o2deka3u_cation8e1g1mail3erck5nergy4gineer_ing9terprises10pson4quipment8r_icsson6ni3s_q1tate5t_isalat7u_rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n_s2rm_ers5shion4t3edex3edback6rrari3ero6i_at2delity5o2lm2nal1nce1ial7re_stone6mdale6sh_ing5t_ness6j1k1lickr3ghts4r2orist4wers5y2m1o_o_d_network8tball6rd1ex2sale4um3undation8x2r_ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n_d2rniture7tbol5yi3ga_l_lery3o1up4me_s3p1rden4y2b_iz3d_n2e_a1nt_ing5orge5f1g_ee3h1i_ft_s3ves2ing5l_ass3e1obal2o4m_ail3bh2o1x2n1odaddy5ld_point6f2o_dyear5g_le4p1t1v2p1q1r_ainger5phics5tis4een3ipe3ocery4up4s1t1u_ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc_bank7ealth_care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k_t2m1n1ockey4ldings5iday5medepot5goods5s_ense7nda3rse3spital5t_ing5t_eles2s3mail5use3w2r1sbc3t1u_ghes5yatt3undai7ibm2cbc2e1u2d1e_ee3fm2kano4l1m_amat4db2mo_bilien9n_c1dustries8finiti5o2g1k1stitute6urance4e4t_ernational10uit4vestments10o1piranga7q1r_ish4s_maili5t_anbul7t_au2v3jaguar4va3cb2e_ep2tzt3welry6io2ll2m_p2nj2o_bs1urg4t1y2p_morgan6rs3uegos4niper7kaufen5ddi3e_rryhotels6logistics9properties14fh2g1h1i_a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p_mg2n2r_d1ed3uokgroup8w1y_oto4z2la_caixa5mborghini8er3ncaster5ia3d_rover6xess5salle5t_ino3robe5w_yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i_dl2fe_insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan_s3cker3us3l1ndon4tte1o3ve3pl_financial11r1s1t_d_a3u_ndbeck6xe1ury5v1y2ma_cys3drid4if1son4keup4n_agement7go3p1rket_ing3s4riott5shalls7serati6ttel5ba2c_kinsey7d1e_d_ia3et2lbourne7me1orial6n_u2rckmsd7g1h1iami3crosoft7l1ni1t2t_subishi9k1l_b1s2m_a2n1o_bi_le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to_rcycles9v_ie4p1q1r1s_d2t_n1r2u_seum3ic3tual5v1w1x1y1z2na_b1goya4me2tura4vy3ba2c1e_c1t_bank4flix4work5ustar5w_s2xt_direct7us4f_l2g_o2hk2i_co2ke1on3nja3ssan1y5l1o_kia3rthwesternmutual14on4w_ruz3tv4p1r_a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan_group9dnavy5lo3m_ega4ne1g1l_ine5oo2pen3racle3nge4g_anic5igins6saka4tsuka4t2vh3pa_ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e_t2f_izer5g1h_armacy6d1ilips5one2to_graphy6s4ysio5ics1tet2ures6d1n_g1k2oneer5zza4k1l_ace2y_station9umbing5s3m1n_c2ohl2ker3litie5rn2st3r_america6xi3ess3ime3o_d_uctions8f1gressive8mo2perties3y5tection8u_dential9s1t1ub2w_c2y2qa1pon3uebec3st5racing4dio4e_ad1lestate6tor2y4cipes5d_stone5umbrella9hab3ise_n3t2liance6n_t_als5pair3ort3ublican8st_aurant8view_s5xroth6ich_ardli6oh3l1o1p2o_cher3ks3deo3gers4om3s_vp3u_gby3hr2n2w_e2yukyu6sa_arland6fe_ty4kura4le1on3msclub4ung5ndvik_coromant12ofi4p1rl2s1ve2xo3b_i1s2c_a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e_arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x_y3fr2g1h_angrila6rp2w2ell3ia1ksha5oes2p_ping5uji3w_time7i_lk2na1gles5te3j1k_i_n2y_pe4l_ing4m_art3ile4n_cf3o_ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa_ce3ort2t3r_l2s1t_ada2ples4r1tebank4farm7c_group6ockholm6rage3e3ream4udio2y3yle4u_cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y_dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x_i3c_i2d_k2eam2ch_nology8l1masek5nnis4va3f1g1h_d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j_maxx4x2k_maxx5l1m_all4n1o_day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r_ade1ing4ining5vel_channel7ers_insurance16ust3v2t1ube2i1nes3shu4v_s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va_cations7na1guard7c1e_gas3ntures6risign5mögensberater2ung14sicherung10t2g1i_ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u_elos6wales2mart4ter4ng_gou5tch_es6eather_channel12bcam3er2site5d_ding5ibo2r3f1hoswho6ien2ki2lliamhill9n_dows4e1ners6me2olterskluwer11odside6rk_s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u_tube6t1un3za_ppos4ra3ero3ip2m1one3uerich6w2';
    // Internationalized domain names containing non-ASCII
    const encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत_म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里_大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';

    /**
     * @template A
     * @template B
     * @param {A} target
     * @param {B} properties
     * @return {A & B}
     */
    const assign$6 = (target, properties) => {
      for (const key in properties) {
        target[key] = properties[key];
      }
      return target;
    };

    /**
     * Finite State Machine generation utilities
     */

    /**
     * @template T
     * @typedef {{ [group: string]: T[] }} Collections
     */

    /**
     * @typedef {{ [group: string]: true }} Flags
     */

    // Keys in scanner Collections instances
    const numeric = 'numeric';
    const ascii = 'ascii';
    const alpha$1 = 'alpha';
    const asciinumeric = 'asciinumeric';
    const alphanumeric = 'alphanumeric';
    const domain$1 = 'domain';
    const emoji = 'emoji';
    const scheme = 'scheme';
    const slashscheme = 'slashscheme';
    const whitespace$1 = 'whitespace';

    /**
     * @template T
     * @param {string} name
     * @param {Collections<T>} groups to register in
     * @returns {T[]} Current list of tokens in the given collection
     */
    function registerGroup(name, groups) {
      if (!(name in groups)) {
        groups[name] = [];
      }
      return groups[name];
    }

    /**
     * @template T
     * @param {T} t token to add
     * @param {Collections<T>} groups
     * @param {Flags} flags
     */
    function addToGroups(t, flags, groups) {
      if (flags[numeric]) {
        flags[asciinumeric] = true;
        flags[alphanumeric] = true;
      }
      if (flags[ascii]) {
        flags[asciinumeric] = true;
        flags[alpha$1] = true;
      }
      if (flags[asciinumeric]) {
        flags[alphanumeric] = true;
      }
      if (flags[alpha$1]) {
        flags[alphanumeric] = true;
      }
      if (flags[alphanumeric]) {
        flags[domain$1] = true;
      }
      if (flags[emoji]) {
        flags[domain$1] = true;
      }
      for (const k in flags) {
        const group = registerGroup(k, groups);
        if (group.indexOf(t) < 0) {
          group.push(t);
        }
      }
    }

    /**
     * @template T
     * @param {T} t token to check
     * @param {Collections<T>} groups
     * @returns {Flags} group flags that contain this token
     */
    function flagsForToken(t, groups) {
      const result = {};
      for (const c in groups) {
        if (groups[c].indexOf(t) >= 0) {
          result[c] = true;
        }
      }
      return result;
    }

    /**
     * @template T
     * @typedef {null | T } Transition
     */

    /**
     * Define a basic state machine state. j is the list of character transitions,
     * jr is the list of regex-match transitions, jd is the default state to
     * transition to t is the accepting token type, if any. If this is the terminal
     * state, then it does not emit a token.
     *
     * The template type T represents the type of the token this state accepts. This
     * should be a string (such as of the token exports in `text.js`) or a
     * MultiToken subclass (from `multi.js`)
     *
     * @template T
     * @param {T} [token] Token that this state emits
     */
    function State(token) {
      if (token === void 0) {
        token = null;
      }
      // this.n = null; // DEBUG: State name
      /** @type {{ [input: string]: State<T> }} j */
      this.j = {}; // IMPLEMENTATION 1
      // this.j = []; // IMPLEMENTATION 2
      /** @type {[RegExp, State<T>][]} jr */
      this.jr = [];
      /** @type {?State<T>} jd */
      this.jd = null;
      /** @type {?T} t */
      this.t = token;
    }

    /**
     * Scanner token groups
     * @type Collections<string>
     */
    State.groups = {};
    State.prototype = {
      accepts() {
        return !!this.t;
      },
      /**
       * Follow an existing transition from the given input to the next state.
       * Does not mutate.
       * @param {string} input character or token type to transition on
       * @returns {?State<T>} the next state, if any
       */
      go(input) {
        const state = this;
        const nextState = state.j[input];
        if (nextState) {
          return nextState;
        }
        for (let i = 0; i < state.jr.length; i++) {
          const regex = state.jr[i][0];
          const nextState = state.jr[i][1]; // note: might be empty to prevent default jump
          if (nextState && regex.test(input)) {
            return nextState;
          }
        }
        // Nowhere left to jump! Return default, if any
        return state.jd;
      },
      /**
       * Whether the state has a transition for the given input. Set the second
       * argument to true to only look for an exact match (and not a default or
       * regular-expression-based transition)
       * @param {string} input
       * @param {boolean} exactOnly
       */
      has(input, exactOnly) {
        if (exactOnly === void 0) {
          exactOnly = false;
        }
        return exactOnly ? input in this.j : !!this.go(input);
      },
      /**
       * Short for "transition all"; create a transition from the array of items
       * in the given list to the same final resulting state.
       * @param {string | string[]} inputs Group of inputs to transition on
       * @param {Transition<T> | State<T>} [next] Transition options
       * @param {Flags} [flags] Collections flags to add token to
       * @param {Collections<T>} [groups] Master list of token groups
       */
      ta(inputs, next, flags, groups) {
        for (let i = 0; i < inputs.length; i++) {
          this.tt(inputs[i], next, flags, groups);
        }
      },
      /**
       * Short for "take regexp transition"; defines a transition for this state
       * when it encounters a token which matches the given regular expression
       * @param {RegExp} regexp Regular expression transition (populate first)
       * @param {T | State<T>} [next] Transition options
       * @param {Flags} [flags] Collections flags to add token to
       * @param {Collections<T>} [groups] Master list of token groups
       * @returns {State<T>} taken after the given input
       */
      tr(regexp, next, flags, groups) {
        groups = groups || State.groups;
        let nextState;
        if (next && next.j) {
          nextState = next;
        } else {
          // Token with maybe token groups
          nextState = new State(next);
          if (flags && groups) {
            addToGroups(next, flags, groups);
          }
        }
        this.jr.push([regexp, nextState]);
        return nextState;
      },
      /**
       * Short for "take transitions", will take as many sequential transitions as
       * the length of the given input and returns the
       * resulting final state.
       * @param {string | string[]} input
       * @param {T | State<T>} [next] Transition options
       * @param {Flags} [flags] Collections flags to add token to
       * @param {Collections<T>} [groups] Master list of token groups
       * @returns {State<T>} taken after the given input
       */
      ts(input, next, flags, groups) {
        let state = this;
        const len = input.length;
        if (!len) {
          return state;
        }
        for (let i = 0; i < len - 1; i++) {
          state = state.tt(input[i]);
        }
        return state.tt(input[len - 1], next, flags, groups);
      },
      /**
       * Short for "take transition", this is a method for building/working with
       * state machines.
       *
       * If a state already exists for the given input, returns it.
       *
       * If a token is specified, that state will emit that token when reached by
       * the linkify engine.
       *
       * If no state exists, it will be initialized with some default transitions
       * that resemble existing default transitions.
       *
       * If a state is given for the second argument, that state will be
       * transitioned to on the given input regardless of what that input
       * previously did.
       *
       * Specify a token group flags to define groups that this token belongs to.
       * The token will be added to corresponding entires in the given groups
       * object.
       *
       * @param {string} input character, token type to transition on
       * @param {T | State<T>} [next] Transition options
       * @param {Flags} [flags] Collections flags to add token to
       * @param {Collections<T>} [groups] Master list of groups
       * @returns {State<T>} taken after the given input
       */
      tt(input, next, flags, groups) {
        groups = groups || State.groups;
        const state = this;

        // Check if existing state given, just a basic transition
        if (next && next.j) {
          state.j[input] = next;
          return next;
        }
        const t = next;

        // Take the transition with the usual default mechanisms and use that as
        // a template for creating the next state
        let nextState,
          templateState = state.go(input);
        if (templateState) {
          nextState = new State();
          assign$6(nextState.j, templateState.j);
          nextState.jr.push.apply(nextState.jr, templateState.jr);
          nextState.jd = templateState.jd;
          nextState.t = templateState.t;
        } else {
          nextState = new State();
        }
        if (t) {
          // Ensure newly token is in the same groups as the old token
          if (groups) {
            if (nextState.t && typeof nextState.t === 'string') {
              const allFlags = assign$6(flagsForToken(nextState.t, groups), flags);
              addToGroups(t, allFlags, groups);
            } else if (flags) {
              addToGroups(t, flags, groups);
            }
          }
          nextState.t = t; // overwrite anything that was previously there
        }

        state.j[input] = nextState;
        return nextState;
      }
    };

    // Helper functions to improve minification (not exported outside linkifyjs module)

    /**
     * @template T
     * @param {State<T>} state
     * @param {string | string[]} input
     * @param {Flags} [flags]
     * @param {Collections<T>} [groups]
     */
    const ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);

    /**
     * @template T
     * @param {State<T>} state
     * @param {RegExp} regexp
     * @param {T | State<T>} [next]
     * @param {Flags} [flags]
     * @param {Collections<T>} [groups]
     */
    const tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);

    /**
     * @template T
     * @param {State<T>} state
     * @param {string | string[]} input
     * @param {T | State<T>} [next]
     * @param {Flags} [flags]
     * @param {Collections<T>} [groups]
     */
    const ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);

    /**
     * @template T
     * @param {State<T>} state
     * @param {string} input
     * @param {T | State<T>} [next]
     * @param {Collections<T>} [groups]
     * @param {Flags} [flags]
     */
    const tt$1 = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);

    /******************************************************************************
    Text Tokens
    Identifiers for token outputs from the regexp scanner
    ******************************************************************************/

    // A valid web domain token
    const WORD = 'WORD'; // only contains a-z
    const UWORD = 'UWORD'; // contains letters other than a-z, used for IDN

    // Special case of word
    const LOCALHOST$1 = 'LOCALHOST';

    // Valid top-level domain, special case of WORD (see tlds.js)
    const TLD$1 = 'TLD';

    // Valid IDN TLD, special case of UWORD (see tlds.js)
    const UTLD = 'UTLD';

    // The scheme portion of a web URI protocol. Supported types include: `mailto`,
    // `file`, and user-defined custom protocols. Limited to schemes that contain
    // only letters
    const SCHEME = 'SCHEME';

    // Similar to SCHEME, except makes distinction for schemes that must always be
    // followed by `://`, not just `:`. Supported types include `http`, `https`,
    // `ftp`, `ftps`
    const SLASH_SCHEME = 'SLASH_SCHEME';

    // Any sequence of digits 0-9
    const NUM$1 = 'NUM';

    // Any number of consecutive whitespace characters that are not newline
    const WS$1 = 'WS';

    // New line (unix style)
    const NL$1$1 = 'NL'; // \n

    // Opening/closing bracket classes
    const OPENBRACE$1 = 'OPENBRACE'; // {
    const OPENBRACKET$1 = 'OPENBRACKET'; // [
    const OPENANGLEBRACKET$1 = 'OPENANGLEBRACKET'; // <
    const OPENPAREN$1 = 'OPENPAREN'; // (
    const CLOSEBRACE$1 = 'CLOSEBRACE'; // }
    const CLOSEBRACKET$1 = 'CLOSEBRACKET'; // ]
    const CLOSEANGLEBRACKET$1 = 'CLOSEANGLEBRACKET'; // >
    const CLOSEPAREN$1 = 'CLOSEPAREN'; // )

    // Various symbols
    const AMPERSAND$1 = 'AMPERSAND'; // &
    const APOSTROPHE = 'APOSTROPHE'; // '
    const ASTERISK$1 = 'ASTERISK'; // *
    const AT$1 = 'AT'; // @
    const BACKSLASH = 'BACKSLASH'; // \
    const BACKTICK = 'BACKTICK'; // `
    const CARET = 'CARET'; // ^
    const COLON$1 = 'COLON'; // :
    const COMMA = 'COMMA'; // ,
    const DOLLAR = 'DOLLAR'; // $
    const DOT$1 = 'DOT'; // .
    const EQUALS = 'EQUALS'; // =
    const EXCLAMATION = 'EXCLAMATION'; // !
    const HYPHEN = 'HYPHEN'; // -
    const PERCENT = 'PERCENT'; // %
    const PIPE = 'PIPE'; // |
    const PLUS$1 = 'PLUS'; // +
    const POUND$1 = 'POUND'; // #
    const QUERY$1 = 'QUERY'; // ?
    const QUOTE = 'QUOTE'; // "

    const SEMI = 'SEMI'; // ;
    const SLASH$1 = 'SLASH'; // /
    const TILDE = 'TILDE'; // ~
    const UNDERSCORE$1 = 'UNDERSCORE'; // _

    // Emoji symbol
    const EMOJI$1 = 'EMOJI';

    // Default token - anything that is not one of the above
    const SYM$1 = 'SYM';

    var tk = /*#__PURE__*/Object.freeze({
    	__proto__: null,
    	WORD: WORD,
    	UWORD: UWORD,
    	LOCALHOST: LOCALHOST$1,
    	TLD: TLD$1,
    	UTLD: UTLD,
    	SCHEME: SCHEME,
    	SLASH_SCHEME: SLASH_SCHEME,
    	NUM: NUM$1,
    	WS: WS$1,
    	NL: NL$1$1,
    	OPENBRACE: OPENBRACE$1,
    	OPENBRACKET: OPENBRACKET$1,
    	OPENANGLEBRACKET: OPENANGLEBRACKET$1,
    	OPENPAREN: OPENPAREN$1,
    	CLOSEBRACE: CLOSEBRACE$1,
    	CLOSEBRACKET: CLOSEBRACKET$1,
    	CLOSEANGLEBRACKET: CLOSEANGLEBRACKET$1,
    	CLOSEPAREN: CLOSEPAREN$1,
    	AMPERSAND: AMPERSAND$1,
    	APOSTROPHE: APOSTROPHE,
    	ASTERISK: ASTERISK$1,
    	AT: AT$1,
    	BACKSLASH: BACKSLASH,
    	BACKTICK: BACKTICK,
    	CARET: CARET,
    	COLON: COLON$1,
    	COMMA: COMMA,
    	DOLLAR: DOLLAR,
    	DOT: DOT$1,
    	EQUALS: EQUALS,
    	EXCLAMATION: EXCLAMATION,
    	HYPHEN: HYPHEN,
    	PERCENT: PERCENT,
    	PIPE: PIPE,
    	PLUS: PLUS$1,
    	POUND: POUND$1,
    	QUERY: QUERY$1,
    	QUOTE: QUOTE,
    	SEMI: SEMI,
    	SLASH: SLASH$1,
    	TILDE: TILDE,
    	UNDERSCORE: UNDERSCORE$1,
    	EMOJI: EMOJI$1,
    	SYM: SYM$1
    });

    // Note that these two Unicode ones expand into a really big one with Babel
    const ASCII_LETTER = /[a-z]/;
    const LETTER = /\p{L}/u; // Any Unicode character with letter data type
    const EMOJI = /\p{Emoji}/u; // Any Unicode emoji character
    const DIGIT = /\d/;
    const SPACE = /\s/;

    /**
    	The scanner provides an interface that takes a string of text as input, and
    	outputs an array of tokens instances that can be used for easy URL parsing.
    */
    const NL$2 = '\n'; // New line character
    const EMOJI_VARIATION = '\ufe0f'; // Variation selector, follows heart and others
    const EMOJI_JOINER = '\u200d'; // zero-width joiner

    let tlds$1 = null,
      utlds = null; // don't change so only have to be computed once

    /**
     * Scanner output token:
     * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')
     * - `v` is the value of the token (e.g., '123', '❤️', 'com')
     * - `s` is the start index of the token in the original string
     * - `e` is the end index of the token in the original string
     * @typedef {{t: string, v: string, s: number, e: number}} Token
     */

    /**
     * @template T
     * @typedef {{ [collection: string]: T[] }} Collections
     */

    /**
     * Initialize the scanner character-based state machine for the given start
     * state
     * @param {[string, boolean][]} customSchemes List of custom schemes, where each
     * item is a length-2 tuple with the first element set to the string scheme, and
     * the second element set to `true` if the `://` after the scheme is optional
     */
    function init$2(customSchemes) {
      if (customSchemes === void 0) {
        customSchemes = [];
      }
      // Frequently used states (name argument removed during minification)
      /** @type Collections<string> */
      const groups = {}; // of tokens
      State.groups = groups;
      /** @type State<string> */
      const Start = new State();
      if (tlds$1 == null) {
        tlds$1 = decodeTlds(encodedTlds);
      }
      if (utlds == null) {
        utlds = decodeTlds(encodedUtlds);
      }

      // States for special URL symbols that accept immediately after start
      tt$1(Start, "'", APOSTROPHE);
      tt$1(Start, '{', OPENBRACE$1);
      tt$1(Start, '[', OPENBRACKET$1);
      tt$1(Start, '<', OPENANGLEBRACKET$1);
      tt$1(Start, '(', OPENPAREN$1);
      tt$1(Start, '}', CLOSEBRACE$1);
      tt$1(Start, ']', CLOSEBRACKET$1);
      tt$1(Start, '>', CLOSEANGLEBRACKET$1);
      tt$1(Start, ')', CLOSEPAREN$1);
      tt$1(Start, '&', AMPERSAND$1);
      tt$1(Start, '*', ASTERISK$1);
      tt$1(Start, '@', AT$1);
      tt$1(Start, '`', BACKTICK);
      tt$1(Start, '^', CARET);
      tt$1(Start, ':', COLON$1);
      tt$1(Start, ',', COMMA);
      tt$1(Start, '$', DOLLAR);
      tt$1(Start, '.', DOT$1);
      tt$1(Start, '=', EQUALS);
      tt$1(Start, '!', EXCLAMATION);
      tt$1(Start, '-', HYPHEN);
      tt$1(Start, '%', PERCENT);
      tt$1(Start, '|', PIPE);
      tt$1(Start, '+', PLUS$1);
      tt$1(Start, '#', POUND$1);
      tt$1(Start, '?', QUERY$1);
      tt$1(Start, '"', QUOTE);
      tt$1(Start, '/', SLASH$1);
      tt$1(Start, ';', SEMI);
      tt$1(Start, '~', TILDE);
      tt$1(Start, '_', UNDERSCORE$1);
      tt$1(Start, '\\', BACKSLASH);
      const Num = tr(Start, DIGIT, NUM$1, {
        [numeric]: true
      });
      tr(Num, DIGIT, Num);

      // State which emits a word token
      const Word = tr(Start, ASCII_LETTER, WORD, {
        [ascii]: true
      });
      tr(Word, ASCII_LETTER, Word);

      // Same as previous, but specific to non-fsm.ascii alphabet words
      const UWord = tr(Start, LETTER, UWORD, {
        [alpha$1]: true
      });
      tr(UWord, ASCII_LETTER); // Non-accepting
      tr(UWord, LETTER, UWord);

      // Whitespace jumps
      // Tokens of only non-newline whitespace are arbitrarily long
      // If any whitespace except newline, more whitespace!
      const Ws = tr(Start, SPACE, WS$1, {
        [whitespace$1]: true
      });
      tt$1(Start, NL$2, NL$1$1, {
        [whitespace$1]: true
      });
      tt$1(Ws, NL$2); // non-accepting state to avoid mixing whitespaces
      tr(Ws, SPACE, Ws);

      // Emoji tokens. They are not grouped by the scanner except in cases where a
      // zero-width joiner is present
      const Emoji = tr(Start, EMOJI, EMOJI$1, {
        [emoji]: true
      });
      tr(Emoji, EMOJI, Emoji);
      tt$1(Emoji, EMOJI_VARIATION, Emoji);
      // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy

      const EmojiJoiner = tt$1(Emoji, EMOJI_JOINER);
      tr(EmojiJoiner, EMOJI, Emoji);
      // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy

      // Generates states for top-level domains
      // Note that this is most accurate when tlds are in alphabetical order
      const wordjr = [[ASCII_LETTER, Word]];
      const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];
      for (let i = 0; i < tlds$1.length; i++) {
        fastts(Start, tlds$1[i], TLD$1, WORD, wordjr);
      }
      for (let i = 0; i < utlds.length; i++) {
        fastts(Start, utlds[i], UTLD, UWORD, uwordjr);
      }
      addToGroups(TLD$1, {
        tld: true,
        ascii: true
      }, groups);
      addToGroups(UTLD, {
        utld: true,
        alpha: true
      }, groups);

      // Collect the states generated by different protocols. NOTE: If any new TLDs
      // get added that are also protocols, set the token to be the same as the
      // protocol to ensure parsing works as expected.
      fastts(Start, 'file', SCHEME, WORD, wordjr);
      fastts(Start, 'mailto', SCHEME, WORD, wordjr);
      fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);
      fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);
      fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);
      fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);
      addToGroups(SCHEME, {
        scheme: true,
        ascii: true
      }, groups);
      addToGroups(SLASH_SCHEME, {
        slashscheme: true,
        ascii: true
      }, groups);

      // Register custom schemes. Assumes each scheme is asciinumeric with hyphens
      customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);
      for (let i = 0; i < customSchemes.length; i++) {
        const sch = customSchemes[i][0];
        const optionalSlashSlash = customSchemes[i][1];
        const flags = optionalSlashSlash ? {
          [scheme]: true
        } : {
          [slashscheme]: true
        };
        if (sch.indexOf('-') >= 0) {
          flags[domain$1] = true;
        } else if (!ASCII_LETTER.test(sch)) {
          flags[numeric] = true; // numbers only
        } else if (DIGIT.test(sch)) {
          flags[asciinumeric] = true;
        } else {
          flags[ascii] = true;
        }
        ts(Start, sch, sch, flags);
      }

      // Localhost token
      ts(Start, 'localhost', LOCALHOST$1, {
        ascii: true
      });

      // Set default transition for start state (some symbol)
      Start.jd = new State(SYM$1);
      return {
        start: Start,
        tokens: assign$6({
          groups
        }, tk)
      };
    }

    /**
    	Given a string, returns an array of TOKEN instances representing the
    	composition of that string.

    	@method run
    	@param {State<string>} start scanner starting state
    	@param {string} str input string to scan
    	@return {Token[]} list of tokens, each with a type and value
    */
    function run$1$1(start, str) {
      // State machine is not case sensitive, so input is tokenized in lowercased
      // form (still returns regular case). Uses selective `toLowerCase` because
      // lowercasing the entire string causes the length and character position to
      // vary in some non-English strings with V8-based runtimes.
      const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));
      const charCount = iterable.length; // <= len if there are emojis, etc
      const tokens = []; // return value

      // cursor through the string itself, accounting for characters that have
      // width with length 2 such as emojis
      let cursor = 0;

      // Cursor through the array-representation of the string
      let charCursor = 0;

      // Tokenize the string
      while (charCursor < charCount) {
        let state = start;
        let nextState = null;
        let tokenLength = 0;
        let latestAccepting = null;
        let sinceAccepts = -1;
        let charsSinceAccepts = -1;
        while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
          state = nextState;

          // Keep track of the latest accepting state
          if (state.accepts()) {
            sinceAccepts = 0;
            charsSinceAccepts = 0;
            latestAccepting = state;
          } else if (sinceAccepts >= 0) {
            sinceAccepts += iterable[charCursor].length;
            charsSinceAccepts++;
          }
          tokenLength += iterable[charCursor].length;
          cursor += iterable[charCursor].length;
          charCursor++;
        }

        // Roll back to the latest accepting state
        cursor -= sinceAccepts;
        charCursor -= charsSinceAccepts;
        tokenLength -= sinceAccepts;

        // No more jumps, just make a new token from the last accepting one
        tokens.push({
          t: latestAccepting.t,
          // token type/name
          v: str.slice(cursor - tokenLength, cursor),
          // string value
          s: cursor - tokenLength,
          // start index
          e: cursor // end index (excluding)
        });
      }

      return tokens;
    }

    /**
     * Convert a String to an Array of characters, taking into account that some
     * characters like emojis take up two string indexes.
     *
     * Adapted from core-js (MIT license)
     * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js
     *
     * @function stringToArray
     * @param {string} str
     * @returns {string[]}
     */
    function stringToArray(str) {
      const result = [];
      const len = str.length;
      let index = 0;
      while (index < len) {
        let first = str.charCodeAt(index);
        let second;
        let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character
        : str.slice(index, index + 2); // two-index characters
        result.push(char);
        index += char.length;
      }
      return result;
    }

    /**
     * Fast version of ts function for when transition defaults are well known
     * @param {State<string>} state
     * @param {string} input
     * @param {string} t
     * @param {string} defaultt
     * @param {[RegExp, State<string>][]} jr
     * @returns {State<string>}
     */
    function fastts(state, input, t, defaultt, jr) {
      let next;
      const len = input.length;
      for (let i = 0; i < len - 1; i++) {
        const char = input[i];
        if (state.j[char]) {
          next = state.j[char];
        } else {
          next = new State(defaultt);
          next.jr = jr.slice();
          state.j[char] = next;
        }
        state = next;
      }
      next = new State(t);
      next.jr = jr.slice();
      state.j[input[len - 1]] = next;
      return next;
    }

    /**
     * Converts a string of Top-Level Domain names encoded in update-tlds.js back
     * into a list of strings.
     * @param {str} encoded encoded TLDs string
     * @returns {str[]} original TLDs list
     */
    function decodeTlds(encoded) {
      const words = [];
      const stack = [];
      let i = 0;
      let digits = '0123456789';
      while (i < encoded.length) {
        let popDigitCount = 0;
        while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {
          popDigitCount++; // encountered some digits, have to pop to go one level up trie
        }

        if (popDigitCount > 0) {
          words.push(stack.join('')); // whatever preceded the pop digits must be a word
          let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10);
          for (; popCount > 0; popCount--) {
            stack.pop();
          }
          i += popDigitCount;
        } else if (encoded[i] === '_') {
          words.push(stack.join('')); // found a word, will be followed by another
          i++;
        } else {
          stack.push(encoded[i]); // drop down a level into the trie
          i++;
        }
      }
      return words;
    }

    /**
     * An object where each key is a valid DOM Event Name such as `click` or `focus`
     * and each value is an event handler function.
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Element#events
     * @typedef {?{ [event: string]: Function }} EventListeners
     */

    /**
     * All formatted properties required to render a link, including `tagName`,
     * `attributes`, `content` and `eventListeners`.
     * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,
     * eventListeners: EventListeners }} IntermediateRepresentation
     */

    /**
     * Specify either an object described by the template type `O` or a function.
     *
     * The function takes a string value (usually the link's href attribute), the
     * link type (`'url'`, `'hashtag`', etc.) and an internal token representation
     * of the link. It should return an object of the template type `O`
     * @template O
     * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj
     */

    /**
     * Specify either a function described by template type `F` or an object.
     *
     * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each
     * value should be a function with template type `F` that is called when the
     * corresponding link type is encountered.
     * @template F
     * @typedef {F | { [type: string]: F}} OptFn
     */

    /**
     * Specify either a value with template type `V`, a function that returns `V` or
     * an object where each value resolves to `V`.
     *
     * The function takes a string value (usually the link's href attribute), the
     * link type (`'url'`, `'hashtag`', etc.) and an internal token representation
     * of the link. It should return an object of the template type `V`
     *
     * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).
     * Each value should either have type `V` or a function that returns V. This
     * function similarly takes a string value and a token.
     *
     * Example valid types for `Opt<string>`:
     *
     * ```js
     * 'hello'
     * (value, type, token) => 'world'
     * { url: 'hello', email: (value, token) => 'world'}
     * ```
     * @template V
     * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt
     */

    /**
     * See available options: https://linkify.js.org/docs/options.html
     * @typedef {{
     * 	defaultProtocol?: string,
     *  events?: OptObj<EventListeners>,
     * 	format?: Opt<string>,
     * 	formatHref?: Opt<string>,
     * 	nl2br?: boolean,
     * 	tagName?: Opt<any>,
     * 	target?: Opt<string>,
     * 	rel?: Opt<string>,
     * 	validate?: Opt<boolean>,
     * 	truncate?: Opt<number>,
     * 	className?: Opt<string>,
     * 	attributes?: OptObj<({ [attr: string]: any })>,
     *  ignoreTags?: string[],
     * 	render?: OptFn<((ir: IntermediateRepresentation) => any)>
     * }} Opts
     */

    /**
     * @type Required<Opts>
     */
    const defaults$1 = {
      defaultProtocol: 'http',
      events: null,
      format: noop$4,
      formatHref: noop$4,
      nl2br: false,
      tagName: 'a',
      target: null,
      rel: null,
      validate: true,
      truncate: Infinity,
      className: null,
      attributes: null,
      ignoreTags: [],
      render: null
    };

    /**
     * Utility class for linkify interfaces to apply specified
     * {@link Opts formatting and rendering options}.
     *
     * @param {Opts | Options} [opts] Option value overrides.
     * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For
     *   internal use) default render function that determines how to generate an
     *   HTML element based on a link token's derived tagName, attributes and HTML.
     *   Similar to render option
     */
    function Options$1(opts, defaultRender) {
      if (defaultRender === void 0) {
        defaultRender = null;
      }
      let o = assign$6({}, defaults$1);
      if (opts) {
        o = assign$6(o, opts instanceof Options$1 ? opts.o : opts);
      }

      // Ensure all ignored tags are uppercase
      const ignoredTags = o.ignoreTags;
      const uppercaseIgnoredTags = [];
      for (let i = 0; i < ignoredTags.length; i++) {
        uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());
      }
      /** @protected */
      this.o = o;
      if (defaultRender) {
        this.defaultRender = defaultRender;
      }
      this.ignoreTags = uppercaseIgnoredTags;
    }
    Options$1.prototype = {
      o: defaults$1,
      /**
       * @type string[]
       */
      ignoreTags: [],
      /**
       * @param {IntermediateRepresentation} ir
       * @returns {any}
       */
      defaultRender(ir) {
        return ir;
      },
      /**
       * Returns true or false based on whether a token should be displayed as a
       * link based on the user options.
       * @param {MultiToken} token
       * @returns {boolean}
       */
      check(token) {
        return this.get('validate', token.toString(), token);
      },
      // Private methods

      /**
       * Resolve an option's value based on the value of the option and the given
       * params. If operator and token are specified and the target option is
       * callable, automatically calls the function with the given argument.
       * @template {keyof Opts} K
       * @param {K} key Name of option to use
       * @param {string} [operator] will be passed to the target option if it's a
       * function. If not specified, RAW function value gets returned
       * @param {MultiToken} [token] The token from linkify.tokenize
       * @returns {Opts[K] | any}
       */
      get(key, operator, token) {
        const isCallable = operator != null;
        let option = this.o[key];
        if (!option) {
          return option;
        }
        if (typeof option === 'object') {
          option = token.t in option ? option[token.t] : defaults$1[key];
          if (typeof option === 'function' && isCallable) {
            option = option(operator, token);
          }
        } else if (typeof option === 'function' && isCallable) {
          option = option(operator, token.t, token);
        }
        return option;
      },
      /**
       * @template {keyof Opts} L
       * @param {L} key Name of options object to use
       * @param {string} [operator]
       * @param {MultiToken} [token]
       * @returns {Opts[L] | any}
       */
      getObj(key, operator, token) {
        let obj = this.o[key];
        if (typeof obj === 'function' && operator != null) {
          obj = obj(operator, token.t, token);
        }
        return obj;
      },
      /**
       * Convert the given token to a rendered element that may be added to the
       * calling-interface's DOM
       * @param {MultiToken} token Token to render to an HTML element
       * @returns {any} Render result; e.g., HTML string, DOM element, React
       *   Component, etc.
       */
      render(token) {
        const ir = token.render(this); // intermediate representation
        const renderFn = this.get('render', null, token) || this.defaultRender;
        return renderFn(ir, token.t, token);
      }
    };
    function noop$4(val) {
      return val;
    }

    /******************************************************************************
    	Multi-Tokens
    	Tokens composed of arrays of TextTokens
    ******************************************************************************/

    /**
     * @param {string} value
     * @param {Token[]} tokens
     */
    function MultiToken$1(value, tokens) {
      this.t = 'token';
      this.v = value;
      this.tk = tokens;
    }

    /**
     * Abstract class used for manufacturing tokens of text tokens. That is rather
     * than the value for a token being a small string of text, it's value an array
     * of text tokens.
     *
     * Used for grouping together URLs, emails, hashtags, and other potential
     * creations.
     * @class MultiToken
     * @property {string} t
     * @property {string} v
     * @property {Token[]} tk
     * @abstract
     */
    MultiToken$1.prototype = {
      isLink: false,
      /**
       * Return the string this token represents.
       * @return {string}
       */
      toString() {
        return this.v;
      },
      /**
       * What should the value for this token be in the `href` HTML attribute?
       * Returns the `.toString` value by default.
       * @param {string} [scheme]
       * @return {string}
      */
      toHref(scheme) {
        return this.toString();
      },
      /**
       * @param {Options} options Formatting options
       * @returns {string}
       */
      toFormattedString(options) {
        const val = this.toString();
        const truncate = options.get('truncate', val, this);
        const formatted = options.get('format', val, this);
        return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;
      },
      /**
       *
       * @param {Options} options
       * @returns {string}
       */
      toFormattedHref(options) {
        return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);
      },
      /**
       * The start index of this token in the original input string
       * @returns {number}
       */
      startIndex() {
        return this.tk[0].s;
      },
      /**
       * The end index of this token in the original input string (up to this
       * index but not including it)
       * @returns {number}
       */
      endIndex() {
        return this.tk[this.tk.length - 1].e;
      },
      /**
      	Returns an object  of relevant values for this token, which includes keys
      	* type - Kind of token ('url', 'email', etc.)
      	* value - Original text
      	* href - The value that should be added to the anchor tag's href
      		attribute
      		@method toObject
      	@param {string} [protocol] `'http'` by default
      */
      toObject(protocol) {
        if (protocol === void 0) {
          protocol = defaults$1.defaultProtocol;
        }
        return {
          type: this.t,
          value: this.toString(),
          isLink: this.isLink,
          href: this.toHref(protocol),
          start: this.startIndex(),
          end: this.endIndex()
        };
      },
      /**
       *
       * @param {Options} options Formatting option
       */
      toFormattedObject(options) {
        return {
          type: this.t,
          value: this.toFormattedString(options),
          isLink: this.isLink,
          href: this.toFormattedHref(options),
          start: this.startIndex(),
          end: this.endIndex()
        };
      },
      /**
       * Whether this token should be rendered as a link according to the given options
       * @param {Options} options
       * @returns {boolean}
       */
      validate(options) {
        return options.get('validate', this.toString(), this);
      },
      /**
       * Return an object that represents how this link should be rendered.
       * @param {Options} options Formattinng options
       */
      render(options) {
        const token = this;
        const href = this.toFormattedHref(options);
        const tagName = options.get('tagName', href, token);
        const content = this.toFormattedString(options);
        const attributes = {};
        const className = options.get('className', href, token);
        const target = options.get('target', href, token);
        const rel = options.get('rel', href, token);
        const attrs = options.getObj('attributes', href, token);
        const eventListeners = options.getObj('events', href, token);
        attributes.href = href;
        if (className) {
          attributes.class = className;
        }
        if (target) {
          attributes.target = target;
        }
        if (rel) {
          attributes.rel = rel;
        }
        if (attrs) {
          assign$6(attributes, attrs);
        }
        return {
          tagName,
          attributes,
          content,
          eventListeners
        };
      }
    };

    /**
     * Create a new token that can be emitted by the parser state machine
     * @param {string} type readable type of the token
     * @param {object} props properties to assign or override, including isLink = true or false
     * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class
     */
    function createTokenClass$2(type, props) {
      class Token extends MultiToken$1 {
        constructor(value, tokens) {
          super(value, tokens);
          this.t = type;
        }
      }
      for (const p in props) {
        Token.prototype[p] = props[p];
      }
      Token.t = type;
      return Token;
    }

    /**
    	Represents a list of tokens making up a valid email address
    */
    const Email = createTokenClass$2('email', {
      isLink: true,
      toHref() {
        return 'mailto:' + this.toString();
      }
    });

    /**
    	Represents some plain text
    */
    const Text$1 = createTokenClass$2('text');

    /**
    	Multi-linebreak token - represents a line break
    	@class Nl
    */
    const Nl = createTokenClass$2('nl');

    /**
    	Represents a list of text tokens making up a valid URL
    	@class Url
    */
    const Url = createTokenClass$2('url', {
      isLink: true,
      /**
      	Lowercases relevant parts of the domain and adds the protocol if
      	required. Note that this will not escape unsafe HTML characters in the
      	URL.
      		@param {string} [scheme] default scheme (e.g., 'https')
      	@return {string} the full href
      */
      toHref(scheme) {
        if (scheme === void 0) {
          scheme = defaults$1.defaultProtocol;
        }
        // Check if already has a prefix scheme
        return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;
      },
      /**
       * Check whether this URL token has a protocol
       * @return {boolean}
       */
      hasProtocol() {
        const tokens = this.tk;
        return tokens.length >= 2 && tokens[0].t !== LOCALHOST$1 && tokens[1].t === COLON$1;
      }
    });

    /**
    	Not exactly parser, more like the second-stage scanner (although we can
    	theoretically hotswap the code here with a real parser in the future... but
    	for a little URL-finding utility abstract syntax trees may be a little
    	overkill).

    	URL format: http://en.wikipedia.org/wiki/URI_scheme
    	Email format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in
    	reference)

    	@module linkify
    	@submodule parser
    	@main run
    */
    const makeState$2 = arg => new State(arg);

    /**
     * Generate the parser multi token-based state machine
     * @param {{ groups: Collections<string> }} tokens
     */
    function init$1(_ref) {
      let {
        groups
      } = _ref;
      // Types of characters the URL can definitely end in
      const qsAccepting = groups.domain.concat([AMPERSAND$1, ASTERISK$1, AT$1, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM$1, PERCENT, PIPE, PLUS$1, POUND$1, SLASH$1, SYM$1, TILDE, UNDERSCORE$1]);

      // Types of tokens that can follow a URL and be part of the query string
      // but cannot be the very last characters
      // Characters that cannot appear in the URL at all should be excluded
      const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET$1, CLOSEBRACE$1, CLOSEBRACKET$1, CLOSEPAREN$1, COLON$1, COMMA, DOT$1, EXCLAMATION, OPENANGLEBRACKET$1, OPENBRACE$1, OPENBRACKET$1, OPENPAREN$1, QUERY$1, QUOTE, SEMI];

      // For addresses without the mailto prefix
      // Tokens allowed in the localpart of the email
      const localpartAccepting = [AMPERSAND$1, APOSTROPHE, ASTERISK$1, BACKSLASH, BACKTICK, CARET, CLOSEBRACE$1, DOLLAR, EQUALS, HYPHEN, NUM$1, OPENBRACE$1, PERCENT, PIPE, PLUS$1, POUND$1, QUERY$1, SLASH$1, SYM$1, TILDE, UNDERSCORE$1];

      // The universal starting state.
      /**
       * @type State<Token>
       */
      const Start = makeState$2();
      const Localpart = tt$1(Start, TILDE); // Local part of the email address
      ta(Localpart, localpartAccepting, Localpart);
      ta(Localpart, groups.domain, Localpart);
      const Domain = makeState$2(),
        Scheme = makeState$2(),
        SlashScheme = makeState$2();
      ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)
      ta(Start, groups.scheme, Scheme); // e.g., 'mailto'
      ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'

      ta(Domain, localpartAccepting, Localpart);
      ta(Domain, groups.domain, Domain);
      const LocalpartAt = tt$1(Domain, AT$1); // Local part of the email address plus @

      tt$1(Localpart, AT$1, LocalpartAt); // close to an email address now

      // Local part of an email address can be e.g. 'http' or 'mailto'
      tt$1(Scheme, AT$1, LocalpartAt);
      tt$1(SlashScheme, AT$1, LocalpartAt);
      const LocalpartDot = tt$1(Localpart, DOT$1); // Local part of the email address plus '.' (localpart cannot end in .)
      ta(LocalpartDot, localpartAccepting, Localpart);
      ta(LocalpartDot, groups.domain, Localpart);
      const EmailDomain = makeState$2();
      ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name
      ta(EmailDomain, groups.domain, EmailDomain);
      const EmailDomainDot = tt$1(EmailDomain, DOT$1); // domain followed by DOT
      ta(EmailDomainDot, groups.domain, EmailDomain);
      const Email$1 = makeState$2(Email); // Possible email address (could have more tlds)
      ta(EmailDomainDot, groups.tld, Email$1);
      ta(EmailDomainDot, groups.utld, Email$1);
      tt$1(LocalpartAt, LOCALHOST$1, Email$1);

      // Hyphen can jump back to a domain name
      const EmailDomainHyphen = tt$1(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name
      ta(EmailDomainHyphen, groups.domain, EmailDomain);
      ta(Email$1, groups.domain, EmailDomain);
      tt$1(Email$1, DOT$1, EmailDomainDot);
      tt$1(Email$1, HYPHEN, EmailDomainHyphen);

      // Final possible email states
      const EmailColon = tt$1(Email$1, COLON$1); // URL followed by colon (potential port number here)
      /*const EmailColonPort = */
      ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner

      // Account for dots and hyphens. Hyphens are usually parts of domain names
      // (but not TLDs)
      const DomainHyphen = tt$1(Domain, HYPHEN); // domain followed by hyphen
      const DomainDot = tt$1(Domain, DOT$1); // domain followed by DOT
      ta(DomainHyphen, groups.domain, Domain);
      ta(DomainDot, localpartAccepting, Localpart);
      ta(DomainDot, groups.domain, Domain);
      const DomainDotTld = makeState$2(Url); // Simplest possible URL with no query string
      ta(DomainDot, groups.tld, DomainDotTld);
      ta(DomainDot, groups.utld, DomainDotTld);
      ta(DomainDotTld, groups.domain, Domain);
      ta(DomainDotTld, localpartAccepting, Localpart);
      tt$1(DomainDotTld, DOT$1, DomainDot);
      tt$1(DomainDotTld, HYPHEN, DomainHyphen);
      tt$1(DomainDotTld, AT$1, LocalpartAt);
      const DomainDotTldColon = tt$1(DomainDotTld, COLON$1); // URL followed by colon (potential port number here)
      const DomainDotTldColonPort = makeState$2(Url); // TLD followed by a port number
      ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);

      // Long URL with optional port and maybe query string
      const Url$1 = makeState$2(Url);

      // URL with extra symbols at the end, followed by an opening bracket
      const UrlNonaccept = makeState$2(); // URL followed by some symbols (will not be part of the final URL)

      // Query strings
      ta(Url$1, qsAccepting, Url$1);
      ta(Url$1, qsNonAccepting, UrlNonaccept);
      ta(UrlNonaccept, qsAccepting, Url$1);
      ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);

      // Become real URLs after `SLASH` or `COLON NUM SLASH`
      // Here works with or without scheme:// prefix
      tt$1(DomainDotTld, SLASH$1, Url$1);
      tt$1(DomainDotTldColonPort, SLASH$1, Url$1);

      // Note that domains that begin with schemes are treated slighly differently
      const UriPrefix = tt$1(Scheme, COLON$1); // e.g., 'mailto:' or 'http://'
      const SlashSchemeColon = tt$1(SlashScheme, COLON$1); // e.g., 'http:'
      const SlashSchemeColonSlash = tt$1(SlashSchemeColon, SLASH$1); // e.g., 'http:/'

      tt$1(SlashSchemeColonSlash, SLASH$1, UriPrefix);

      // Scheme states can transition to domain states
      ta(Scheme, groups.domain, Domain);
      tt$1(Scheme, DOT$1, DomainDot);
      tt$1(Scheme, HYPHEN, DomainHyphen);
      ta(SlashScheme, groups.domain, Domain);
      tt$1(SlashScheme, DOT$1, DomainDot);
      tt$1(SlashScheme, HYPHEN, DomainHyphen);

      // Force URL with scheme prefix followed by anything sane
      ta(UriPrefix, groups.domain, Url$1);
      tt$1(UriPrefix, SLASH$1, Url$1);

      // URL, followed by an opening bracket
      const UrlOpenbrace = tt$1(Url$1, OPENBRACE$1); // URL followed by {
      const UrlOpenbracket = tt$1(Url$1, OPENBRACKET$1); // URL followed by [
      const UrlOpenanglebracket = tt$1(Url$1, OPENANGLEBRACKET$1); // URL followed by <
      const UrlOpenparen = tt$1(Url$1, OPENPAREN$1); // URL followed by (

      tt$1(UrlNonaccept, OPENBRACE$1, UrlOpenbrace);
      tt$1(UrlNonaccept, OPENBRACKET$1, UrlOpenbracket);
      tt$1(UrlNonaccept, OPENANGLEBRACKET$1, UrlOpenanglebracket);
      tt$1(UrlNonaccept, OPENPAREN$1, UrlOpenparen);

      // Closing bracket component. This character WILL be included in the URL
      tt$1(UrlOpenbrace, CLOSEBRACE$1, Url$1);
      tt$1(UrlOpenbracket, CLOSEBRACKET$1, Url$1);
      tt$1(UrlOpenanglebracket, CLOSEANGLEBRACKET$1, Url$1);
      tt$1(UrlOpenparen, CLOSEPAREN$1, Url$1);
      tt$1(UrlOpenbrace, CLOSEBRACE$1, Url$1);

      // URL that beings with an opening bracket, followed by a symbols.
      // Note that the final state can still be `UrlOpenbrace` (if the URL only
      // has a single opening bracket for some reason).
      const UrlOpenbraceQ = makeState$2(Url); // URL followed by { and some symbols that the URL can end it
      const UrlOpenbracketQ = makeState$2(Url); // URL followed by [ and some symbols that the URL can end it
      const UrlOpenanglebracketQ = makeState$2(Url); // URL followed by < and some symbols that the URL can end it
      const UrlOpenparenQ = makeState$2(Url); // URL followed by ( and some symbols that the URL can end it
      ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);
      ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);
      ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);
      ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);
      const UrlOpenbraceSyms = makeState$2(); // UrlOpenbrace followed by some symbols it cannot end it
      const UrlOpenbracketSyms = makeState$2(); // UrlOpenbracketQ followed by some symbols it cannot end it
      const UrlOpenanglebracketSyms = makeState$2(); // UrlOpenanglebracketQ followed by some symbols it cannot end it
      const UrlOpenparenSyms = makeState$2(); // UrlOpenparenQ followed by some symbols it cannot end it
      ta(UrlOpenbrace, qsNonAccepting);
      ta(UrlOpenbracket, qsNonAccepting);
      ta(UrlOpenanglebracket, qsNonAccepting);
      ta(UrlOpenparen, qsNonAccepting);

      // URL that begins with an opening bracket, followed by some symbols
      ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);
      ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);
      ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);
      ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);
      ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);
      ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);
      ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);
      ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);
      ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);
      ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);
      ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);
      ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);
      ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);
      ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);
      ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);
      ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);

      // Close brace/bracket to become regular URL
      tt$1(UrlOpenbracketQ, CLOSEBRACKET$1, Url$1);
      tt$1(UrlOpenanglebracketQ, CLOSEANGLEBRACKET$1, Url$1);
      tt$1(UrlOpenparenQ, CLOSEPAREN$1, Url$1);
      tt$1(UrlOpenbraceQ, CLOSEBRACE$1, Url$1);
      tt$1(UrlOpenbracketSyms, CLOSEBRACKET$1, Url$1);
      tt$1(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET$1, Url$1);
      tt$1(UrlOpenparenSyms, CLOSEPAREN$1, Url$1);
      tt$1(UrlOpenbraceSyms, CLOSEPAREN$1, Url$1);
      tt$1(Start, LOCALHOST$1, DomainDotTld); // localhost is a valid URL state
      tt$1(Start, NL$1$1, Nl); // single new line

      return {
        start: Start,
        tokens: tk
      };
    }

    /**
     * Run the parser state machine on a list of scanned string-based tokens to
     * create a list of multi tokens, each of which represents a URL, email address,
     * plain text, etc.
     *
     * @param {State<MultiToken>} start parser start state
     * @param {string} input the original input used to generate the given tokens
     * @param {Token[]} tokens list of scanned tokens
     * @returns {MultiToken[]}
     */
    function run$2(start, input, tokens) {
      let len = tokens.length;
      let cursor = 0;
      let multis = [];
      let textTokens = [];
      while (cursor < len) {
        let state = start;
        let secondState = null;
        let nextState = null;
        let multiLength = 0;
        let latestAccepting = null;
        let sinceAccepts = -1;
        while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {
          // Starting tokens with nowhere to jump to.
          // Consider these to be just plain text
          textTokens.push(tokens[cursor++]);
        }
        while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {
          // Get the next state
          secondState = null;
          state = nextState;

          // Keep track of the latest accepting state
          if (state.accepts()) {
            sinceAccepts = 0;
            latestAccepting = state;
          } else if (sinceAccepts >= 0) {
            sinceAccepts++;
          }
          cursor++;
          multiLength++;
        }
        if (sinceAccepts < 0) {
          // No accepting state was found, part of a regular text token add
          // the first text token to the text tokens array and try again from
          // the next
          cursor -= multiLength;
          if (cursor < len) {
            textTokens.push(tokens[cursor]);
            cursor++;
          }
        } else {
          // Accepting state!
          // First close off the textTokens (if available)
          if (textTokens.length > 0) {
            multis.push(initMultiToken(Text$1, input, textTokens));
            textTokens = [];
          }

          // Roll back to the latest accepting state
          cursor -= sinceAccepts;
          multiLength -= sinceAccepts;

          // Create a new multitoken
          const Multi = latestAccepting.t;
          const subtokens = tokens.slice(cursor - multiLength, cursor);
          multis.push(initMultiToken(Multi, input, subtokens));
        }
      }

      // Finally close off the textTokens (if available)
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text$1, input, textTokens));
      }
      return multis;
    }

    /**
     * Utility function for instantiating a new multitoken with all the relevant
     * fields during parsing.
     * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate
     * @param {string} input original input string
     * @param {Token[]} tokens consecutive tokens scanned from input string
     * @returns {MultiToken}
     */
    function initMultiToken(Multi, input, tokens) {
      const startIdx = tokens[0].s;
      const endIdx = tokens[tokens.length - 1].e;
      const value = input.slice(startIdx, endIdx);
      return new Multi(value, tokens);
    }

    // Side-effect initialization state
    const INIT = {
      scanner: null,
      parser: null,
      tokenQueue: [],
      pluginQueue: [],
      customSchemes: [],
      initialized: false
    };

    /**
     * Initialize the linkify state machine. Called automatically the first time
     * linkify is called on a string, but may be called manually as well.
     */
    function init$3() {
      // Initialize scanner state machine and plugins
      INIT.scanner = init$2(INIT.customSchemes);
      for (let i = 0; i < INIT.tokenQueue.length; i++) {
        INIT.tokenQueue[i][1]({
          scanner: INIT.scanner
        });
      }

      // Initialize parser state machine and plugins
      INIT.parser = init$1(INIT.scanner.tokens);
      for (let i = 0; i < INIT.pluginQueue.length; i++) {
        INIT.pluginQueue[i][1]({
          scanner: INIT.scanner,
          parser: INIT.parser
        });
      }
      INIT.initialized = true;
    }

    /**
     * Parse a string into tokens that represent linkable and non-linkable sub-components
     * @param {string} str
     * @return {MultiToken[]} tokens
     */
    function tokenize$4(str) {
      if (!INIT.initialized) {
        init$3();
      }
      return run$2(INIT.parser.start, str, run$1$1(INIT.scanner.start, str));
    }

    /**
     * Find a list of linkable items in the given string.
     * @param {string} str string to find links in
     * @param {string | Opts} [type] either formatting options or specific type of
     * links to find, e.g., 'url' or 'email'
     * @param {Opts} [opts] formatting options for final output. Cannot be specified
     * if opts already provided in `type` argument
    */
    function find$2(str, type, opts) {
      if (type === void 0) {
        type = null;
      }
      if (opts === void 0) {
        opts = null;
      }
      if (type && typeof type === 'object') {
        if (opts) {
          throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
        }
        opts = type;
        type = null;
      }
      const options = new Options$1(opts);
      const tokens = tokenize$4(str);
      const filtered = [];
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        if (token.isLink && (!type || token.t === type)) {
          filtered.push(token.toFormattedObject(options));
        }
      }
      return filtered;
    }

    /**
     * Is the given string valid linkable text of some sort. Note that this does not
     * trim the text for you.
     *
     * Optionally pass in a second `type` param, which is the type of link to test
     * for.
     *
     * For example,
     *
     *     linkify.test(str, 'email');
     *
     * Returns `true` if str is a valid email.
     * @param {string} str string to test for links
     * @param {string} [type] optional specific link type to look for
     * @returns boolean true/false
     */
    function test$1(str, type) {
      if (type === void 0) {
        type = null;
      }
      const tokens = tokenize$4(str);
      return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnsupportedAttachment = function (_a) {
        var _b;
        var attachment = _a.attachment;
        return (React__default["default"].createElement("div", null,
            React__default["default"].createElement("div", null,
                "Unsupported attachment type ",
                React__default["default"].createElement("strong", null, (_b = attachment.type) !== null && _b !== void 0 ? _b : 'unknown')),
            React__default["default"].createElement("code", null, JSON.stringify(attachment, null, 4)),
            ";"));
    };
    var NullComponent = function () { return null; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var AttachmentWithinContainer = function (_a) {
        var _b;
        var _c;
        var attachment = _a.attachment, children = _a.children, componentType = _a.componentType;
        var isGAT = isGalleryAttachmentType(attachment);
        var extra = '';
        if (!isGAT) {
            extra =
                componentType === 'card' && !(attachment === null || attachment === void 0 ? void 0 : attachment.image_url) && !(attachment === null || attachment === void 0 ? void 0 : attachment.thumb_url)
                    ? 'no-image'
                    : ((_c = attachment === null || attachment === void 0 ? void 0 : attachment.actions) === null || _c === void 0 ? void 0 : _c.length)
                        ? 'actions'
                        : '';
        }
        var classNames = clsx('str-chat__message-attachment str-chat__message-attachment-dynamic-size', (_b = {},
            _b["str-chat__message-attachment--".concat(componentType)] = componentType,
            _b["str-chat__message-attachment--".concat(attachment === null || attachment === void 0 ? void 0 : attachment.type)] = attachment === null || attachment === void 0 ? void 0 : attachment.type,
            _b["str-chat__message-attachment--".concat(componentType, "--").concat(extra)] = componentType && extra,
            _b['str-chat__message-attachment--svg-image'] = isSvgAttachment(attachment),
            _b['str-chat__message-attachment-with-actions'] = extra === 'actions',
            _b));
        return React__default["default"].createElement("div", { className: classNames }, children);
    };
    var AttachmentActionsContainer = function (_a) {
        var _b;
        var actionHandler = _a.actionHandler, attachment = _a.attachment, _c = _a.AttachmentActions, AttachmentActions$1 = _c === void 0 ? AttachmentActions : _c;
        if (!((_b = attachment.actions) === null || _b === void 0 ? void 0 : _b.length))
            return null;
        return (React__default["default"].createElement(AttachmentActions$1, __assign({}, attachment, { actionHandler: actionHandler, actions: attachment.actions, id: attachment.id || '', text: attachment.text || '' })));
    };
    function getCssDimensionsVariables(url) {
        var cssVars = {
            '--original-height': 1000000,
            '--original-width': 1000000,
        };
        if (test$1(url, 'url')) {
            var urlParams = new URL(url).searchParams;
            var oh = Number(urlParams.get('oh'));
            var ow = Number(urlParams.get('ow'));
            var originalHeight = oh > 1 ? oh : 1000000;
            var originalWidth = ow > 1 ? ow : 1000000;
            cssVars['--original-width'] = originalWidth;
            cssVars['--original-height'] = originalHeight;
        }
        return cssVars;
    }
    var GalleryContainer = function (_a) {
        var attachment = _a.attachment, _b = _a.Gallery, Gallery$1 = _b === void 0 ? Gallery : _b;
        var imageElements = React$2.useRef([]);
        var imageAttachmentSizeHandler = useChannelStateContext().imageAttachmentSizeHandler;
        var _c = React$2.useState([]), attachmentConfigurations = _c[0], setAttachmentConfigurations = _c[1];
        React$2.useLayoutEffect(function () {
            if (imageElements.current &&
                imageElements.current.every(function (element) { return !!element; }) &&
                imageAttachmentSizeHandler) {
                var newConfigurations_1 = [];
                imageElements.current.forEach(function (element, i) {
                    var config = imageAttachmentSizeHandler(attachment.images[i], element);
                    newConfigurations_1.push(config);
                });
                setAttachmentConfigurations(newConfigurations_1);
            }
        }, [imageElements, imageAttachmentSizeHandler, attachment]);
        var images = attachment.images.map(function (image, i) {
            var _a, _b, _c;
            return (__assign(__assign({}, image), { previewUrl: ((_a = attachmentConfigurations[i]) === null || _a === void 0 ? void 0 : _a.url) || 'about:blank', style: getCssDimensionsVariables(((_b = attachment.images[i]) === null || _b === void 0 ? void 0 : _b.image_url) || ((_c = attachment.images[i]) === null || _c === void 0 ? void 0 : _c.thumb_url) || '') }));
        });
        return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: 'gallery' },
            React__default["default"].createElement(Gallery$1, { images: images || [], innerRefs: imageElements, key: 'gallery' })));
    };
    var ImageContainer = function (props) {
        var attachment = props.attachment, _a = props.Image, Image = _a === void 0 ? ImageComponent : _a;
        var componentType = 'image';
        var imageElement = React$2.useRef(null);
        var imageAttachmentSizeHandler = useChannelStateContext().imageAttachmentSizeHandler;
        var _b = React$2.useState(undefined), attachmentConfiguration = _b[0], setAttachmentConfiguration = _b[1];
        React$2.useLayoutEffect(function () {
            if (imageElement.current && imageAttachmentSizeHandler) {
                var config = imageAttachmentSizeHandler(attachment, imageElement.current);
                setAttachmentConfiguration(config);
            }
        }, [imageElement, imageAttachmentSizeHandler, attachment]);
        var imageConfig = __assign(__assign({}, attachment), { previewUrl: (attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.url) || 'about:blank', style: getCssDimensionsVariables(attachment.image_url || attachment.thumb_url || '') });
        if (attachment.actions && attachment.actions.length) {
            return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType },
                React__default["default"].createElement("div", { className: 'str-chat__attachment' },
                    React__default["default"].createElement(Image, __assign({}, imageConfig, { innerRef: imageElement })),
                    React__default["default"].createElement(AttachmentActionsContainer, __assign({}, props)))));
        }
        return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType },
            React__default["default"].createElement(Image, __assign({}, imageConfig, { innerRef: imageElement }))));
    };
    var CardContainer = function (props) {
        var attachment = props.attachment, _a = props.Card, Card = _a === void 0 ? Card$1 : _a;
        var componentType = 'card';
        if (attachment.actions && attachment.actions.length) {
            return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType },
                React__default["default"].createElement("div", { className: 'str-chat__attachment' },
                    React__default["default"].createElement(Card, __assign({}, attachment)),
                    React__default["default"].createElement(AttachmentActionsContainer, __assign({}, props)))));
        }
        return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType },
            React__default["default"].createElement(Card, __assign({}, attachment))));
    };
    var FileContainer = function (_a) {
        var attachment = _a.attachment, _b = _a.File, File = _b === void 0 ? FileAttachment : _b;
        if (!attachment.asset_url)
            return null;
        return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: 'file' },
            React__default["default"].createElement(File, { attachment: attachment })));
    };
    var AudioContainer = function (_a) {
        var attachment = _a.attachment, _b = _a.Audio, Audio$1 = _b === void 0 ? Audio : _b;
        return (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: 'audio' },
            React__default["default"].createElement("div", { className: 'str-chat__attachment' },
                React__default["default"].createElement(Audio$1, { og: attachment }))));
    };
    var MediaContainer = function (props) {
        var _a;
        var attachment = props.attachment, _b = props.Media, Media = _b === void 0 ? ReactPlayer : _b;
        var componentType = 'media';
        var _c = useChannelStateContext(), shouldGenerateVideoThumbnail = _c.shouldGenerateVideoThumbnail, videoAttachmentSizeHandler = _c.videoAttachmentSizeHandler;
        var videoElement = React$2.useRef(null);
        var _d = React$2.useState(), attachmentConfiguration = _d[0], setAttachmentConfiguration = _d[1];
        React$2.useLayoutEffect(function () {
            if (videoElement.current && videoAttachmentSizeHandler) {
                var config = videoAttachmentSizeHandler(attachment, videoElement.current, shouldGenerateVideoThumbnail);
                setAttachmentConfiguration(config);
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [videoElement, videoAttachmentSizeHandler, attachment]);
        var content = (React__default["default"].createElement("div", { className: 'str-chat__player-wrapper', "data-testid": 'video-wrapper', ref: videoElement, style: getCssDimensionsVariables(attachment.thumb_url || '') },
            React__default["default"].createElement(Media, { className: 'react-player', config: { file: { attributes: { poster: attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.thumbUrl } } }, controls: true, height: '100%', url: attachmentConfiguration === null || attachmentConfiguration === void 0 ? void 0 : attachmentConfiguration.url, width: '100%' })));
        return ((_a = attachment.actions) === null || _a === void 0 ? void 0 : _a.length) ? (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType },
            React__default["default"].createElement("div", { className: 'str-chat__attachment str-chat__attachment-media' },
                content,
                React__default["default"].createElement(AttachmentActionsContainer, __assign({}, props))))) : (React__default["default"].createElement(AttachmentWithinContainer, { attachment: attachment, componentType: componentType }, content));
    };
    var UnsupportedAttachmentContainer = function (_a) {
        var attachment = _a.attachment, _b = _a.UnsupportedAttachment, UnsupportedAttachment = _b === void 0 ? NullComponent : _b;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(UnsupportedAttachment, { attachment: attachment })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CONTAINER_MAP = {
        audio: AudioContainer,
        card: CardContainer,
        file: FileContainer,
        media: MediaContainer,
        unsupported: UnsupportedAttachmentContainer,
    };
    var ATTACHMENT_GROUPS_ORDER = [
        'card',
        'gallery',
        'image',
        'media',
        'audio',
        'file',
        'unsupported',
    ];
    /**
     * A component used for rendering message attachments. By default, the component supports: AttachmentActions, Audio, Card, File, Gallery, Image, and Video
     */
    var Attachment = function (props) {
        var attachments = props.attachments;
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var groupedAttachments = React$2.useMemo(function () { return renderGroupedAttachments(props); }, [attachments]);
        return (React__default["default"].createElement("div", { className: 'str-chat__attachment-list' }, ATTACHMENT_GROUPS_ORDER.reduce(function (acc, groupName) { return __spreadArray(__spreadArray([], acc, true), groupedAttachments[groupName], true); }, [])));
    };
    var renderGroupedAttachments = function (_a) {
        var attachments = _a.attachments, rest = __rest(_a, ["attachments"]);
        var uploadedImages = attachments.filter(function (attachment) {
            return isUploadedImage(attachment);
        });
        var containers = attachments
            .filter(function (attachment) { return !isUploadedImage(attachment); })
            .reduce(function (typeMap, attachment) {
            var attachmentType = getAttachmentType(attachment);
            var Container = CONTAINER_MAP[attachmentType];
            typeMap[attachmentType].push(React__default["default"].createElement(Container, __assign({ key: "".concat(attachmentType, "-").concat(typeMap[attachmentType].length) }, rest, { attachment: attachment })));
            return typeMap;
        }, {
            audio: [],
            card: [],
            file: [],
            media: [],
            unsupported: [],
            // not used in reduce
            // eslint-disable-next-line sort-keys
            image: [],
            // eslint-disable-next-line sort-keys
            gallery: [],
        });
        if (uploadedImages.length > 1) {
            containers['gallery'] = [
                React__default["default"].createElement(GalleryContainer, __assign({ key: 'gallery-container' }, rest, { attachment: {
                        images: uploadedImages,
                        type: 'gallery',
                    } })),
            ];
        }
        else if (uploadedImages.length === 1) {
            containers['image'] = [
                React__default["default"].createElement(ImageContainer, __assign({ key: 'image-container' }, rest, { attachment: uploadedImages[0] })),
            ];
        }
        return containers;
    };
    var getAttachmentType = function (attachment) {
        if (isScrapedContent(attachment)) {
            return 'card';
        }
        else if (isMediaAttachment(attachment)) {
            return 'media';
        }
        else if (isAudioAttachment(attachment)) {
            return 'audio';
        }
        else if (isFileAttachment(attachment)) {
            return 'file';
        }
        return 'unsupported';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const Item$2 = /*#__PURE__*/React__default["default"].forwardRef(function Item(props, innerRef) {
      const {
        className,
        component: Component,
        item,
        onClickHandler,
        onSelectHandler,
        selected,
        style
      } = props;
      const {
        themeVersion
      } = useChatContext('SuggestionItem');
      const handleSelect = React$2.useCallback(() => onSelectHandler(item), [item, onSelectHandler]);
      const handleClick = React$2.useCallback(event => onClickHandler(event, item), [item, onClickHandler]);
      if (themeVersion === '2') return /*#__PURE__*/React__default["default"].createElement("li", {
        className: clsx(className, {
          'str-chat__suggestion-item--selected': selected
        }),
        style: style
      }, /*#__PURE__*/React__default["default"].createElement("a", {
        href: "",
        onClick: handleClick,
        onFocus: handleSelect,
        onMouseEnter: handleSelect,
        ref: innerRef
      }, /*#__PURE__*/React__default["default"].createElement(Component, {
        entity: item,
        selected: selected
      })));
      return /*#__PURE__*/React__default["default"].createElement("li", {
        className: clsx('rta__item', className),
        style: style
      }, /*#__PURE__*/React__default["default"].createElement("button", {
        className: clsx('rta__entity', {
          'rta__entity--selected': selected
        }),
        onClick: handleClick,
        onFocus: handleSelect,
        onMouseEnter: handleSelect,
        ref: innerRef
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        tabIndex: -1
      }, /*#__PURE__*/React__default["default"].createElement(Component, {
        entity: item,
        selected: selected
      }))));
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultSuggestionListHeader = function (props) {
        var currentTrigger = props.currentTrigger, value = props.value;
        var t = useTranslationContext('DefaultSuggestionListHeader').t;
        var triggerIndex = value.lastIndexOf(currentTrigger);
        if (currentTrigger === '/') {
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                t('Commands matching'),
                " ",
                React__default["default"].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        if (currentTrigger === ':') {
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                t('Emoji matching'),
                " ",
                React__default["default"].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        if (currentTrigger === '@') {
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                t('People matching'),
                " ",
                React__default["default"].createElement("strong", null, value.slice(triggerIndex + 1))));
        }
        return null;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function escapeRegExp(text) {
        return text.replace(/[-[\]{}()*+?.,/\\^$|#]/g, '\\$&');
    }
    var detectHttp = /(http(s?):\/\/)?(www\.)?/;
    var messageCodeBlocks = function (message) {
        var codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
        var matches = message.match(codeRegex);
        return matches || [];
    };
    var matchMarkdownLinks$1 = function (message) {
        var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
        var matches = message.match(regexMdLinks);
        var singleMatch = /\[([^[]+)\]\((.*)\)/;
        var links = matches
            ? matches.map(function (match) {
                var i = singleMatch.exec(match);
                return i && [i[1], i[2]];
            })
            : [];
        return links.flat();
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Parent} Parent
     */

    /**
     * Generate an assertion from a test.
     *
     * Useful if you’re going to test many nodes, for example when creating a
     * utility where something else passes a compatible test.
     *
     * The created function is a bit faster because it expects valid input only:
     * a `node`, `index`, and `parent`.
     *
     * @param {Test} test
     *   *   when nullish, checks if `node` is a `Node`.
     *   *   when `string`, works like passing `(node) => node.type === test`.
     *   *   when `function` checks if function passed the node is true.
     *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
     *   *   when `array`, checks if any one of the subtests pass.
     * @returns {Check}
     *   An assertion.
     */
    const convert$2 =
      // Note: overloads in JSDoc can’t yet use different `@template`s.
      /**
       * @type {(
       *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
       *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
       *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
       *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
       *   ((test?: Test) => Check)
       * )}
       */
      (
        /**
         * @param {Test} [test]
         * @returns {Check}
         */
        function (test) {
          if (test === null || test === undefined) {
            return ok$2
          }

          if (typeof test === 'function') {
            return castFactory$1(test)
          }

          if (typeof test === 'object') {
            return Array.isArray(test) ? anyFactory$2(test) : propsFactory(test)
          }

          if (typeof test === 'string') {
            return typeFactory$1(test)
          }

          throw new Error('Expected function, string, or object as test')
        }
      );

    /**
     * @param {Array<Props | TestFunction | string>} tests
     * @returns {Check}
     */
    function anyFactory$2(tests) {
      /** @type {Array<Check>} */
      const checks = [];
      let index = -1;

      while (++index < tests.length) {
        checks[index] = convert$2(tests[index]);
      }

      return castFactory$1(any)

      /**
       * @this {unknown}
       * @type {TestFunction}
       */
      function any(...parameters) {
        let index = -1;

        while (++index < checks.length) {
          if (checks[index].apply(this, parameters)) return true
        }

        return false
      }
    }

    /**
     * Turn an object into a test for a node with a certain fields.
     *
     * @param {Props} check
     * @returns {Check}
     */
    function propsFactory(check) {
      const checkAsRecord = /** @type {Record<string, unknown>} */ (check);

      return castFactory$1(all)

      /**
       * @param {Node} node
       * @returns {boolean}
       */
      function all(node) {
        const nodeAsRecord = /** @type {Record<string, unknown>} */ (
          /** @type {unknown} */ (node)
        );

        /** @type {string} */
        let key;

        for (key in check) {
          if (nodeAsRecord[key] !== checkAsRecord[key]) return false
        }

        return true
      }
    }

    /**
     * Turn a string into a test for a node with a certain type.
     *
     * @param {string} check
     * @returns {Check}
     */
    function typeFactory$1(check) {
      return castFactory$1(type)

      /**
       * @param {Node} node
       */
      function type(node) {
        return node && node.type === check
      }
    }

    /**
     * Turn a custom test into a test for a node that passes that test.
     *
     * @param {TestFunction} testFunction
     * @returns {Check}
     */
    function castFactory$1(testFunction) {
      return check

      /**
       * @this {unknown}
       * @type {Check}
       */
      function check(value, index, parent) {
        return Boolean(
          looksLikeANode(value) &&
            testFunction.call(
              this,
              value,
              typeof index === 'number' ? index : undefined,
              parent || undefined
            )
        )
      }
    }

    function ok$2() {
      return true
    }

    /**
     * @param {unknown} value
     * @returns {value is Node}
     */
    function looksLikeANode(value) {
      return value !== null && typeof value === 'object' && 'type' in value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @param {string} d
     * @returns {string}
     */
    function color$2(d) {
      return d
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} UnistNode
     * @typedef {import('unist').Parent} UnistParent
     */

    /** @type {Readonly<ActionTuple>} */
    const empty$2 = [];

    /**
     * Continue traversing as normal.
     */
    const CONTINUE$2 = true;

    /**
     * Stop traversing immediately.
     */
    const EXIT$2 = false;

    /**
     * Do not traverse this node’s children.
     */
    const SKIP$2 = 'skip';

    /**
     * Visit nodes, with ancestral information.
     *
     * This algorithm performs *depth-first* *tree traversal* in *preorder*
     * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
     *
     * You can choose for which nodes `visitor` is called by passing a `test`.
     * For complex tests, you should test yourself in `visitor`, as it will be
     * faster and will have improved type information.
     *
     * Walking the tree is an intensive task.
     * Make use of the return values of the visitor when possible.
     * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
     * to check if a node matches, and then perform different operations.
     *
     * You can change the tree.
     * See `Visitor` for more info.
     *
     * @overload
     * @param {Tree} tree
     * @param {Check} check
     * @param {BuildVisitor<Tree, Check>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {undefined}
     *
     * @overload
     * @param {Tree} tree
     * @param {BuildVisitor<Tree>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {undefined}
     *
     * @param {UnistNode} tree
     *   Tree to traverse.
     * @param {Visitor | Test} test
     *   `unist-util-is`-compatible test
     * @param {Visitor | boolean | null | undefined} [visitor]
     *   Handle each node.
     * @param {boolean | null | undefined} [reverse]
     *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
     * @returns {undefined}
     *   Nothing.
     *
     * @template {UnistNode} Tree
     *   Node type.
     * @template {Test} Check
     *   `unist-util-is`-compatible test.
     */
    function visitParents$3(tree, test, visitor, reverse) {
      /** @type {Test} */
      let check;

      if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        // @ts-expect-error no visitor given, so `visitor` is test.
        visitor = test;
      } else {
        // @ts-expect-error visitor given, so `test` isn’t a visitor.
        check = test;
      }

      const is = convert$2(check);
      const step = reverse ? -1 : 1;

      factory(tree, undefined, [])();

      /**
       * @param {UnistNode} node
       * @param {number | undefined} index
       * @param {Array<UnistParent>} parents
       */
      function factory(node, index, parents) {
        const value = /** @type {Record<string, unknown>} */ (
          node && typeof node === 'object' ? node : {}
        );

        if (typeof value.type === 'string') {
          const name =
            // `hast`
            typeof value.tagName === 'string'
              ? value.tagName
              : // `xast`
              typeof value.name === 'string'
              ? value.name
              : undefined;

          Object.defineProperty(visit, 'name', {
            value:
              'node (' + color$2(node.type + (name ? '<' + name + '>' : '')) + ')'
          });
        }

        return visit

        function visit() {
          /** @type {Readonly<ActionTuple>} */
          let result = empty$2;
          /** @type {Readonly<ActionTuple>} */
          let subresult;
          /** @type {number} */
          let offset;
          /** @type {Array<UnistParent>} */
          let grandparents;

          if (!test || is(node, index, parents[parents.length - 1] || undefined)) {
            // @ts-expect-error: `visitor` is now a visitor.
            result = toResult$1(visitor(node, parents));

            if (result[0] === EXIT$2) {
              return result
            }
          }

          if ('children' in node && node.children) {
            const nodeAsParent = /** @type {UnistParent} */ (node);

            if (nodeAsParent.children && result[0] !== SKIP$2) {
              offset = (reverse ? nodeAsParent.children.length : -1) + step;
              grandparents = parents.concat(nodeAsParent);

              while (offset > -1 && offset < nodeAsParent.children.length) {
                const child = nodeAsParent.children[offset];

                subresult = factory(child, offset, grandparents)();

                if (subresult[0] === EXIT$2) {
                  return subresult
                }

                offset =
                  typeof subresult[1] === 'number' ? subresult[1] : offset + step;
              }
            }
          }

          return result
        }
      }
    }

    /**
     * Turn a return value into a clean result.
     *
     * @param {VisitorResult} value
     *   Valid return values from visitors.
     * @returns {Readonly<ActionTuple>}
     *   Clean result.
     */
    function toResult$1(value) {
      if (Array.isArray(value)) {
        return value
      }

      if (typeof value === 'number') {
        return [CONTINUE$2, value]
      }

      return value === null || value === undefined ? empty$2 : [value]
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Parents} Parents
     */

    /**
     * Generate a check from a test.
     *
     * Useful if you’re going to test many nodes, for example when creating a
     * utility where something else passes a compatible test.
     *
     * The created function is a bit faster because it expects valid input only:
     * an `element`, `index`, and `parent`.
     *
     * @param test
     *   A test for a specific element.
     * @returns
     *   A check.
     */
    const convertElement =
      // Note: overloads in JSDoc can’t yet use different `@template`s.
      /**
       * @type {(
       *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
       *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
       *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
       *   ((test?: Test) => Check)
       * )}
       */
      (
        /**
         * @param {Test | null | undefined} [test]
         * @returns {Check}
         */
        function (test) {
          if (test === null || test === undefined) {
            return element$1
          }

          if (typeof test === 'string') {
            return tagNameFactory(test)
          }

          // Assume array.
          if (typeof test === 'object') {
            return anyFactory$1(test)
          }

          if (typeof test === 'function') {
            return castFactory(test)
          }

          throw new Error('Expected function, string, or array as `test`')
        }
      );

    /**
     * Handle multiple tests.
     *
     * @param {Array<TestFunction | string>} tests
     * @returns {Check}
     */
    function anyFactory$1(tests) {
      /** @type {Array<Check>} */
      const checks = [];
      let index = -1;

      while (++index < tests.length) {
        checks[index] = convertElement(tests[index]);
      }

      return castFactory(any)

      /**
       * @this {unknown}
       * @type {TestFunction}
       */
      function any(...parameters) {
        let index = -1;

        while (++index < checks.length) {
          if (checks[index].apply(this, parameters)) return true
        }

        return false
      }
    }

    /**
     * Turn a string into a test for an element with a certain type.
     *
     * @param {string} check
     * @returns {Check}
     */
    function tagNameFactory(check) {
      return castFactory(tagName)

      /**
       * @param {Element} element
       * @returns {boolean}
       */
      function tagName(element) {
        return element.tagName === check
      }
    }

    /**
     * Turn a custom test into a test for an element that passes that test.
     *
     * @param {TestFunction} testFunction
     * @returns {Check}
     */
    function castFactory(testFunction) {
      return check

      /**
       * @this {unknown}
       * @type {Check}
       */
      function check(value, index, parent) {
        return Boolean(
          looksLikeAnElement(value) &&
            testFunction.call(
              this,
              value,
              typeof index === 'number' ? index : undefined,
              parent || undefined
            )
        )
      }
    }

    /**
     * Make sure something is an element.
     *
     * @param {unknown} element
     * @returns {element is Element}
     */
    function element$1(element) {
      return Boolean(
        element &&
          typeof element === 'object' &&
          'type' in element &&
          element.type === 'element' &&
          'tagName' in element &&
          typeof element.tagName === 'string'
      )
    }

    /**
     * @param {unknown} value
     * @returns {value is Element}
     */
    function looksLikeAnElement(value) {
      return (
        value !== null &&
        typeof value === 'object' &&
        'type' in value &&
        'tagName' in value
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function escapeStringRegexp$1(string) {
    	if (typeof string !== 'string') {
    		throw new TypeError('Expected a string');
    	}

    	// Escape characters with special meaning either inside or outside character sets.
    	// Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
    	return string
    		.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
    		.replace(/-/g, '\\x2d');
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Nodes} Nodes
     * @typedef {import('hast').Parents} Parents
     * @typedef {import('hast').Root} Root
     * @typedef {import('hast').RootContent} RootContent
     * @typedef {import('hast').Text} Text
     * @typedef {import('hast-util-is-element').Test} Test
     * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
     */

    /** @type {Options} */
    const emptyOptions$3 = {};

    /**
     * Default tag names to ignore.
     *
     * The defaults are `math`, `script`, `style`, `svg`, and `title`.
     *
     * @type {Array<string>}
     */
    const defaultIgnore = ['math', 'script', 'style', 'svg', 'title'];

    /**
     * Find patterns in a tree and replace them.
     *
     * The algorithm searches the tree in *preorder* for complete values in `Text`
     * nodes.
     * Partial matches are not supported.
     *
     * @param {Nodes} tree
     *   Tree to change.
     * @param {FindAndReplaceList | FindAndReplaceTuple} list
     *   One or more find-and-replace pairs.
     * @param {Readonly<Options> | null | undefined} [options]
     *   Configuration (when `find` is not `Find`).
     * @returns {undefined}
     *   Nothing.
     */
    function findAndReplace$1(tree, list, options) {
      const settings = options || emptyOptions$3;
      const ignored = convertElement(settings.ignore || defaultIgnore);
      const pairs = toPairs$1(list);
      let pairIndex = -1;

      while (++pairIndex < pairs.length) {
        visitParents$3(tree, 'text', visitor);
      }

      /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */
      function visitor(node, parents) {
        let index = -1;
        /** @type {Parents | undefined} */
        let grandparent;

        while (++index < parents.length) {
          const parent = parents[index];
          /** @type {Array<Nodes> | undefined} */
          const siblings = grandparent ? grandparent.children : undefined;

          if (
            ignored(
              parent,
              siblings ? siblings.indexOf(parent) : undefined,
              grandparent
            )
          ) {
            return
          }

          grandparent = parent;
        }

        if (grandparent) {
          return handler(node, parents)
        }
      }

      /**
       * Handle a text node which is not in an ignored parent.
       *
       * @param {Text} node
       *   Text node.
       * @param {Array<Parents>} parents
       *   Parents.
       * @returns {VisitorResult}
       *   Result.
       */
      function handler(node, parents) {
        const parent = parents[parents.length - 1];
        const find = pairs[pairIndex][0];
        const replace = pairs[pairIndex][1];
        let start = 0;
        /** @type {Array<Nodes>} */
        const siblings = parent.children;
        const index = siblings.indexOf(node);
        let change = false;
        /** @type {Array<RootContent>} */
        let nodes = [];

        find.lastIndex = 0;

        let match = find.exec(node.value);

        while (match) {
          const position = match.index;
          /** @type {RegExpMatchObject} */
          const matchObject = {
            index: match.index,
            input: match.input,
            stack: [...parents, node]
          };
          let value = replace(...match, matchObject);

          if (typeof value === 'string') {
            value = value.length > 0 ? {type: 'text', value} : undefined;
          }

          // It wasn’t a match after all.
          if (value === false) {
            // False acts as if there was no match.
            // So we need to reset `lastIndex`, which currently being at the end of
            // the current match, to the beginning.
            find.lastIndex = position + 1;
          } else {
            if (start !== position) {
              nodes.push({type: 'text', value: node.value.slice(start, position)});
            }

            if (Array.isArray(value)) {
              nodes.push(...value);
            } else if (value) {
              nodes.push(value);
            }

            start = position + match[0].length;
            change = true;
          }

          if (!find.global) {
            break
          }

          match = find.exec(node.value);
        }

        if (change) {
          if (start < node.value.length) {
            nodes.push({type: 'text', value: node.value.slice(start)});
          }

          parent.children.splice(index, 1, ...nodes);
        } else {
          nodes = [node];
        }

        return index + nodes.length
      }
    }

    /**
     * Turn a tuple or a list of tuples into pairs.
     *
     * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList
     *   Schema.
     * @returns {Pairs}
     *   Clean pairs.
     */
    function toPairs$1(tupleOrList) {
      /** @type {Pairs} */
      const result = [];

      if (!Array.isArray(tupleOrList)) {
        throw new TypeError('Expected find and replace tuple or list of tuples')
      }

      /** @type {FindAndReplaceList} */
      // @ts-expect-error: correct.
      const list =
        !tupleOrList[0] || Array.isArray(tupleOrList[0])
          ? tupleOrList
          : [tupleOrList];

      let index = -1;

      while (++index < list.length) {
        const tuple = list[index];
        result.push([toExpression$1(tuple[0]), toFunction$1(tuple[1])]);
      }

      return result
    }

    /**
     * Turn a find into an expression.
     *
     * @param {Find} find
     *   Find.
     * @returns {RegExp}
     *   Expression.
     */
    function toExpression$1(find) {
      return typeof find === 'string' ? new RegExp(escapeStringRegexp$1(find), 'g') : find
    }

    /**
     * Turn a replace into a function.
     *
     * @param {Replace} replace
     *   Replace.
     * @returns {ReplaceFunction}
     *   Function.
     */
    function toFunction$1(replace) {
      return typeof replace === 'function'
        ? replace
        : function () {
            return replace
          }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Parent} Parent
     * @typedef {import('unist').Literal} Literal
     * @typedef {Object.<string, unknown>} Props
     * @typedef {Array.<Node>|string} ChildrenOrValue
     *
     * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps
     * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps
     * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps
     * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent
     * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral
     * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid
     */

    var u$2 = /**
     * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}
     */ (
      /**
       * @param {string} type Type of node
       * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)
       * @param {ChildrenOrValue} [value] `children` or `value` of node
       * @returns {Node}
       */
      function (type, props, value) {
        /** @type {Node} */
        var node = {type: String(type)};

        if (
          (value === undefined || value === null) &&
          (typeof props === 'string' || Array.isArray(props))
        ) {
          value = props;
        } else {
          Object.assign(node, props);
        }

        if (Array.isArray(value)) {
          node.children = value;
        } else if (value !== undefined && value !== null) {
          node.value = String(value);
        }

        return node
      }
    );

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var emojiRegex = function () {
      // https://mths.be/emoji
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var emojiMarkdownPlugin = function () {
        var replace = function (match) {
            return u$2('element', { properties: {}, tagName: 'emoji' }, [u$2('text', match)]);
        };
        var transform = function (node) { return findAndReplace$1(node, [emojiRegex(), replace]); };
        return transform;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} UnistNode
     * @typedef {import('unist').Parent} UnistParent
     * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
     */

    /**
     * Visit nodes.
     *
     * This algorithm performs *depth-first* *tree traversal* in *preorder*
     * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
     *
     * You can choose for which nodes `visitor` is called by passing a `test`.
     * For complex tests, you should test yourself in `visitor`, as it will be
     * faster and will have improved type information.
     *
     * Walking the tree is an intensive task.
     * Make use of the return values of the visitor when possible.
     * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
     * to check if a node matches, and then perform different operations.
     *
     * You can change the tree.
     * See `Visitor` for more info.
     *
     * @overload
     * @param {Tree} tree
     * @param {Check} check
     * @param {BuildVisitor<Tree, Check>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {undefined}
     *
     * @overload
     * @param {Tree} tree
     * @param {BuildVisitor<Tree>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {undefined}
     *
     * @param {UnistNode} tree
     *   Tree to traverse.
     * @param {Visitor | Test} testOrVisitor
     *   `unist-util-is`-compatible test (optional, omit to pass a visitor).
     * @param {Visitor | boolean | null | undefined} [visitorOrReverse]
     *   Handle each node (when test is omitted, pass `reverse`).
     * @param {boolean | null | undefined} [maybeReverse=false]
     *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
     * @returns {undefined}
     *   Nothing.
     *
     * @template {UnistNode} Tree
     *   Node type.
     * @template {Test} Check
     *   `unist-util-is`-compatible test.
     */
    function visit$5(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
      /** @type {boolean | null | undefined} */
      let reverse;
      /** @type {Test} */
      let test;
      /** @type {Visitor} */
      let visitor;

      if (
        typeof testOrVisitor === 'function' &&
        typeof visitorOrReverse !== 'function'
      ) {
        test = undefined;
        visitor = testOrVisitor;
        reverse = visitorOrReverse;
      } else {
        // @ts-expect-error: assume the overload with test was given.
        test = testOrVisitor;
        // @ts-expect-error: assume the overload with test was given.
        visitor = visitorOrReverse;
        reverse = maybeReverse;
      }

      visitParents$3(tree, test, overload, reverse);

      /**
       * @param {UnistNode} node
       * @param {Array<UnistParent>} parents
       */
      function overload(node, parents) {
        const parent = parents[parents.length - 1];
        const index = parent ? parent.children.indexOf(node) : undefined;
        return visitor(node, index, parent)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var mentionsMarkdownPlugin = function (mentioned_users) { return function () {
        var mentioned_usernames = mentioned_users
            .map(function (user) { return user.name || user.id; })
            .filter(Boolean)
            .map(escapeRegExp);
        var mentionedUsersRegex = new RegExp(mentioned_usernames.map(function (username) { return "@".concat(username); }).join('|'), 'g');
        var replace = function (match) {
            var usernameOrId = match.replace('@', '');
            var user = mentioned_users.find(function (_a) {
                var id = _a.id, name = _a.name;
                return name === usernameOrId || id === usernameOrId;
            });
            return u$2('element', { mentionedUser: user, properties: {}, tagName: 'mention' }, [
                u$2('text', match),
            ]);
        };
        var transform = function (tree) {
            if (!mentioned_usernames.length)
                return;
            // handles special cases of mentions where user.name is an e-mail
            // Remark GFM translates all e-mail-like text nodes to links creating
            // two separate child nodes "@" and "your.name@as.email" instead of
            // keeping it as one text node with value "@your.name@as.email"
            // this piece finds these two separated nodes and merges them together
            // before "replace" function takes over
            visit$5(tree, function (node, index, parent) {
                var _a;
                if (typeof index === 'undefined')
                    return;
                if (!parent)
                    return;
                var nextChild = parent.children.at(index + 1);
                var nextChildHref = (_a = nextChild === null || nextChild === void 0 ? void 0 : nextChild.properties) === null || _a === void 0 ? void 0 : _a.href;
                if (node.type === 'text' &&
                    // text value has to have @ sign at the end of the string
                    // and no other characters except whitespace can precede it
                    // valid cases:   "text @", "@", " @"
                    // invalid cases: "text@", "@text",
                    /.?\s?@$|^@$/.test(node.value) &&
                    (nextChildHref === null || nextChildHref === void 0 ? void 0 : nextChildHref.startsWith('mailto:'))) {
                    var newTextValue = node.value.replace(/@$/, '');
                    var username = nextChildHref.replace('mailto:', '');
                    parent.children[index] = u$2('text', newTextValue);
                    parent.children[index + 1] = u$2('text', "@".concat(username));
                }
            });
            findAndReplace$1(tree, [mentionedUsersRegex, replace]);
        };
        return transform;
    }; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var visitor$1 = function (node) {
        if (node.type !== 'html')
            return;
        node.type = 'text';
    };
    var transform$1 = function (tree) {
        visit$5(tree, visitor$1);
    };
    var htmlToTextPlugin = function () { return transform$1; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var visitor = function (node, index, parent) {
        if (typeof index === 'undefined' || index === 0)
            return;
        if (typeof parent === 'undefined')
            return;
        if (!node.position)
            return;
        var prevSibling = parent.children.at(index - 1);
        if (!(prevSibling === null || prevSibling === void 0 ? void 0 : prevSibling.position))
            return;
        if (node.position.start.line === prevSibling.position.start.line)
            return false;
        var ownStartLine = node.position.start.line;
        var prevEndLine = prevSibling.position.end.line;
        // the -1 is adjustment for the single line break into which multiple line breaks are converted
        var countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;
        if (countTruncatedLineBreaks < 1)
            return;
        var lineBreaks = Array.from({ length: countTruncatedLineBreaks }, function () {
            return u$2('break', { tagName: 'br' });
        });
        parent.children = __spreadArray(__spreadArray(__spreadArray([], parent.children.slice(0, index), true), lineBreaks, true), parent.children.slice(index), true);
        return;
    };
    var transform = function (tree) {
        visit$5(tree, visitor);
    };
    var keepLineBreaksPlugin = function () { return transform; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function ok$1() {}

    function unreachable() {}

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef Options
     *   Configuration for `stringify`.
     * @property {boolean} [padLeft=true]
     *   Whether to pad a space before a token.
     * @property {boolean} [padRight=false]
     *   Whether to pad a space after a token.
     */

    /**
     * Serialize an array of strings or numbers to comma-separated tokens.
     *
     * @param {Array<string|number>} values
     *   List of tokens.
     * @param {Options} [options]
     *   Configuration for `stringify` (optional).
     * @returns {string}
     *   Comma-separated tokens.
     */
    function stringify$3(values, options) {
      const settings = options || {};

      // Ensure the last empty entry is seen.
      const input = values[values.length - 1] === '' ? [...values, ''] : values;

      return input
        .join(
          (settings.padRight ? ' ' : '') +
            ',' +
            (settings.padLeft === false ? '' : ' ')
        )
        .trim()
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Nodes} Nodes
     */

    // HTML whitespace expression.
    // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
    const re$2 = /[ \t\n\f\r]/g;

    /**
     * Check if the given value is *inter-element whitespace*.
     *
     * @param {Nodes | string} thing
     *   Thing to check (`Node` or `string`).
     * @returns {boolean}
     *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
     *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
     *   (`\r`), or form feed (`\f`); if a node is passed it must be a `Text` node,
     *   whose `value` field is checked.
     */
    function whitespace(thing) {
      return typeof thing === 'object'
        ? thing.type === 'text'
          ? empty$1(thing.value)
          : false
        : empty$1(thing)
    }

    /**
     * @param {string} value
     * @returns {boolean}
     */
    function empty$1(value) {
      return value.replace(re$2, '') === ''
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('./info.js').Info} Info
     * @typedef {Record<string, Info>} Properties
     * @typedef {Record<string, string>} Normal
     */

    class Schema {
      /**
       * @constructor
       * @param {Properties} property
       * @param {Normal} normal
       * @param {string} [space]
       */
      constructor(property, normal, space) {
        this.property = property;
        this.normal = normal;
        if (space) {
          this.space = space;
        }
      }
    }

    /** @type {Properties} */
    Schema.prototype.property = {};
    /** @type {Normal} */
    Schema.prototype.normal = {};
    /** @type {string|null} */
    Schema.prototype.space = null;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('./schema.js').Properties} Properties
     * @typedef {import('./schema.js').Normal} Normal
     */

    /**
     * @param {Schema[]} definitions
     * @param {string} [space]
     * @returns {Schema}
     */
    function merge$1(definitions, space) {
      /** @type {Properties} */
      const property = {};
      /** @type {Normal} */
      const normal = {};
      let index = -1;

      while (++index < definitions.length) {
        Object.assign(property, definitions[index].property);
        Object.assign(normal, definitions[index].normal);
      }

      return new Schema(property, normal, space)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @param {string} value
     * @returns {string}
     */
    function normalize$2(value) {
      return value.toLowerCase()
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};class Info {
      /**
       * @constructor
       * @param {string} property
       * @param {string} attribute
       */
      constructor(property, attribute) {
        /** @type {string} */
        this.property = property;
        /** @type {string} */
        this.attribute = attribute;
      }
    }

    /** @type {string|null} */
    Info.prototype.space = null;
    Info.prototype.boolean = false;
    Info.prototype.booleanish = false;
    Info.prototype.overloadedBoolean = false;
    Info.prototype.number = false;
    Info.prototype.commaSeparated = false;
    Info.prototype.spaceSeparated = false;
    Info.prototype.commaOrSpaceSeparated = false;
    Info.prototype.mustUseProperty = false;
    Info.prototype.defined = false;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};let powers = 0;

    const boolean = increment();
    const booleanish = increment();
    const overloadedBoolean = increment();
    const number = increment();
    const spaceSeparated = increment();
    const commaSeparated = increment();
    const commaOrSpaceSeparated = increment();

    function increment() {
      return 2 ** ++powers
    }

    var types$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        boolean: boolean,
        booleanish: booleanish,
        overloadedBoolean: overloadedBoolean,
        number: number,
        spaceSeparated: spaceSeparated,
        commaSeparated: commaSeparated,
        commaOrSpaceSeparated: commaOrSpaceSeparated
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /** @type {Array<keyof types>} */
    // @ts-expect-error: hush.
    const checks = Object.keys(types$1);

    class DefinedInfo extends Info {
      /**
       * @constructor
       * @param {string} property
       * @param {string} attribute
       * @param {number|null} [mask]
       * @param {string} [space]
       */
      constructor(property, attribute, mask, space) {
        let index = -1;

        super(property, attribute);

        mark(this, 'space', space);

        if (typeof mask === 'number') {
          while (++index < checks.length) {
            const check = checks[index];
            mark(this, checks[index], (mask & types$1[check]) === types$1[check]);
          }
        }
      }
    }

    DefinedInfo.prototype.defined = true;

    /**
     * @param {DefinedInfo} values
     * @param {string} key
     * @param {unknown} value
     */
    function mark(values, key, value) {
      if (value) {
        // @ts-expect-error: assume `value` matches the expected value of `key`.
        values[key] = value;
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('./schema.js').Properties} Properties
     * @typedef {import('./schema.js').Normal} Normal
     *
     * @typedef {Record<string, string>} Attributes
     *
     * @typedef {Object} Definition
     * @property {Record<string, number|null>} properties
     * @property {(attributes: Attributes, property: string) => string} transform
     * @property {string} [space]
     * @property {Attributes} [attributes]
     * @property {Array<string>} [mustUseProperty]
     */

    const own$a = {}.hasOwnProperty;

    /**
     * @param {Definition} definition
     * @returns {Schema}
     */
    function create(definition) {
      /** @type {Properties} */
      const property = {};
      /** @type {Normal} */
      const normal = {};
      /** @type {string} */
      let prop;

      for (prop in definition.properties) {
        if (own$a.call(definition.properties, prop)) {
          const value = definition.properties[prop];
          const info = new DefinedInfo(
            prop,
            definition.transform(definition.attributes || {}, prop),
            value,
            definition.space
          );

          if (
            definition.mustUseProperty &&
            definition.mustUseProperty.includes(prop)
          ) {
            info.mustUseProperty = true;
          }

          property[prop] = info;

          normal[normalize$2(prop)] = prop;
          normal[normalize$2(info.attribute)] = prop;
        }
      }

      return new Schema(property, normal, definition.space)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const xlink = create({
      space: 'xlink',
      transform(_, prop) {
        return 'xlink:' + prop.slice(5).toLowerCase()
      },
      properties: {
        xLinkActuate: null,
        xLinkArcRole: null,
        xLinkHref: null,
        xLinkRole: null,
        xLinkShow: null,
        xLinkTitle: null,
        xLinkType: null
      }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const xml = create({
      space: 'xml',
      transform(_, prop) {
        return 'xml:' + prop.slice(3).toLowerCase()
      },
      properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @param {Record<string, string>} attributes
     * @param {string} attribute
     * @returns {string}
     */
    function caseSensitiveTransform(attributes, attribute) {
      return attribute in attributes ? attributes[attribute] : attribute
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * @param {Record<string, string>} attributes
     * @param {string} property
     * @returns {string}
     */
    function caseInsensitiveTransform(attributes, property) {
      return caseSensitiveTransform(attributes, property.toLowerCase())
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const xmlns = create({
      space: 'xmlns',
      attributes: {xmlnsxlink: 'xmlns:xlink'},
      transform: caseInsensitiveTransform,
      properties: {xmlns: null, xmlnsXLink: null}
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const aria = create({
      transform(_, prop) {
        return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
      },
      properties: {
        ariaActiveDescendant: null,
        ariaAtomic: booleanish,
        ariaAutoComplete: null,
        ariaBusy: booleanish,
        ariaChecked: booleanish,
        ariaColCount: number,
        ariaColIndex: number,
        ariaColSpan: number,
        ariaControls: spaceSeparated,
        ariaCurrent: null,
        ariaDescribedBy: spaceSeparated,
        ariaDetails: null,
        ariaDisabled: booleanish,
        ariaDropEffect: spaceSeparated,
        ariaErrorMessage: null,
        ariaExpanded: booleanish,
        ariaFlowTo: spaceSeparated,
        ariaGrabbed: booleanish,
        ariaHasPopup: null,
        ariaHidden: booleanish,
        ariaInvalid: null,
        ariaKeyShortcuts: null,
        ariaLabel: null,
        ariaLabelledBy: spaceSeparated,
        ariaLevel: number,
        ariaLive: null,
        ariaModal: booleanish,
        ariaMultiLine: booleanish,
        ariaMultiSelectable: booleanish,
        ariaOrientation: null,
        ariaOwns: spaceSeparated,
        ariaPlaceholder: null,
        ariaPosInSet: number,
        ariaPressed: booleanish,
        ariaReadOnly: booleanish,
        ariaRelevant: null,
        ariaRequired: booleanish,
        ariaRoleDescription: spaceSeparated,
        ariaRowCount: number,
        ariaRowIndex: number,
        ariaRowSpan: number,
        ariaSelected: booleanish,
        ariaSetSize: number,
        ariaSort: null,
        ariaValueMax: number,
        ariaValueMin: number,
        ariaValueNow: number,
        ariaValueText: null,
        role: null
      }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const html$3 = create({
      space: 'html',
      attributes: {
        acceptcharset: 'accept-charset',
        classname: 'class',
        htmlfor: 'for',
        httpequiv: 'http-equiv'
      },
      transform: caseInsensitiveTransform,
      mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
      properties: {
        // Standard Properties.
        abbr: null,
        accept: commaSeparated,
        acceptCharset: spaceSeparated,
        accessKey: spaceSeparated,
        action: null,
        allow: null,
        allowFullScreen: boolean,
        allowPaymentRequest: boolean,
        allowUserMedia: boolean,
        alt: null,
        as: null,
        async: boolean,
        autoCapitalize: null,
        autoComplete: spaceSeparated,
        autoFocus: boolean,
        autoPlay: boolean,
        blocking: spaceSeparated,
        capture: boolean,
        charSet: null,
        checked: boolean,
        cite: null,
        className: spaceSeparated,
        cols: number,
        colSpan: null,
        content: null,
        contentEditable: booleanish,
        controls: boolean,
        controlsList: spaceSeparated,
        coords: number | commaSeparated,
        crossOrigin: null,
        data: null,
        dateTime: null,
        decoding: null,
        default: boolean,
        defer: boolean,
        dir: null,
        dirName: null,
        disabled: boolean,
        download: overloadedBoolean,
        draggable: booleanish,
        encType: null,
        enterKeyHint: null,
        fetchPriority: null,
        form: null,
        formAction: null,
        formEncType: null,
        formMethod: null,
        formNoValidate: boolean,
        formTarget: null,
        headers: spaceSeparated,
        height: number,
        hidden: boolean,
        high: number,
        href: null,
        hrefLang: null,
        htmlFor: spaceSeparated,
        httpEquiv: spaceSeparated,
        id: null,
        imageSizes: null,
        imageSrcSet: null,
        inert: boolean,
        inputMode: null,
        integrity: null,
        is: null,
        isMap: boolean,
        itemId: null,
        itemProp: spaceSeparated,
        itemRef: spaceSeparated,
        itemScope: boolean,
        itemType: spaceSeparated,
        kind: null,
        label: null,
        lang: null,
        language: null,
        list: null,
        loading: null,
        loop: boolean,
        low: number,
        manifest: null,
        max: null,
        maxLength: number,
        media: null,
        method: null,
        min: null,
        minLength: number,
        multiple: boolean,
        muted: boolean,
        name: null,
        nonce: null,
        noModule: boolean,
        noValidate: boolean,
        onAbort: null,
        onAfterPrint: null,
        onAuxClick: null,
        onBeforeMatch: null,
        onBeforePrint: null,
        onBeforeToggle: null,
        onBeforeUnload: null,
        onBlur: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onContextLost: null,
        onContextMenu: null,
        onContextRestored: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFormData: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLanguageChange: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadEnd: null,
        onLoadStart: null,
        onMessage: null,
        onMessageError: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRejectionHandled: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onScrollEnd: null,
        onSecurityPolicyViolation: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onSlotChange: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnhandledRejection: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onWheel: null,
        open: boolean,
        optimum: number,
        pattern: null,
        ping: spaceSeparated,
        placeholder: null,
        playsInline: boolean,
        popover: null,
        popoverTarget: null,
        popoverTargetAction: null,
        poster: null,
        preload: null,
        readOnly: boolean,
        referrerPolicy: null,
        rel: spaceSeparated,
        required: boolean,
        reversed: boolean,
        rows: number,
        rowSpan: number,
        sandbox: spaceSeparated,
        scope: null,
        scoped: boolean,
        seamless: boolean,
        selected: boolean,
        shadowRootDelegatesFocus: boolean,
        shadowRootMode: null,
        shape: null,
        size: number,
        sizes: null,
        slot: null,
        span: number,
        spellCheck: booleanish,
        src: null,
        srcDoc: null,
        srcLang: null,
        srcSet: null,
        start: number,
        step: null,
        style: null,
        tabIndex: number,
        target: null,
        title: null,
        translate: null,
        type: null,
        typeMustMatch: boolean,
        useMap: null,
        value: booleanish,
        width: number,
        wrap: null,

        // Legacy.
        // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
        align: null, // Several. Use CSS `text-align` instead,
        aLink: null, // `<body>`. Use CSS `a:active {color}` instead
        archive: spaceSeparated, // `<object>`. List of URIs to archives
        axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
        background: null, // `<body>`. Use CSS `background-image` instead
        bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
        border: number, // `<table>`. Use CSS `border-width` instead,
        borderColor: null, // `<table>`. Use CSS `border-color` instead,
        bottomMargin: number, // `<body>`
        cellPadding: null, // `<table>`
        cellSpacing: null, // `<table>`
        char: null, // Several table elements. When `align=char`, sets the character to align on
        charOff: null, // Several table elements. When `char`, offsets the alignment
        classId: null, // `<object>`
        clear: null, // `<br>`. Use CSS `clear` instead
        code: null, // `<object>`
        codeBase: null, // `<object>`
        codeType: null, // `<object>`
        color: null, // `<font>` and `<hr>`. Use CSS instead
        compact: boolean, // Lists. Use CSS to reduce space between items instead
        declare: boolean, // `<object>`
        event: null, // `<script>`
        face: null, // `<font>`. Use CSS instead
        frame: null, // `<table>`
        frameBorder: null, // `<iframe>`. Use CSS `border` instead
        hSpace: number, // `<img>` and `<object>`
        leftMargin: number, // `<body>`
        link: null, // `<body>`. Use CSS `a:link {color: *}` instead
        longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
        lowSrc: null, // `<img>`. Use a `<picture>`
        marginHeight: number, // `<body>`
        marginWidth: number, // `<body>`
        noResize: boolean, // `<frame>`
        noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
        noShade: boolean, // `<hr>`. Use background-color and height instead of borders
        noWrap: boolean, // `<td>` and `<th>`
        object: null, // `<applet>`
        profile: null, // `<head>`
        prompt: null, // `<isindex>`
        rev: null, // `<link>`
        rightMargin: number, // `<body>`
        rules: null, // `<table>`
        scheme: null, // `<meta>`
        scrolling: booleanish, // `<frame>`. Use overflow in the child context
        standby: null, // `<object>`
        summary: null, // `<table>`
        text: null, // `<body>`. Use CSS `color` instead
        topMargin: number, // `<body>`
        valueType: null, // `<param>`
        version: null, // `<html>`. Use a doctype.
        vAlign: null, // Several. Use CSS `vertical-align` instead
        vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
        vSpace: number, // `<img>` and `<object>`

        // Non-standard Properties.
        allowTransparency: null,
        autoCorrect: null,
        autoSave: null,
        disablePictureInPicture: boolean,
        disableRemotePlayback: boolean,
        prefix: null,
        property: null,
        results: number,
        security: null,
        unselectable: null
      }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const svg$1 = create({
      space: 'svg',
      attributes: {
        accentHeight: 'accent-height',
        alignmentBaseline: 'alignment-baseline',
        arabicForm: 'arabic-form',
        baselineShift: 'baseline-shift',
        capHeight: 'cap-height',
        className: 'class',
        clipPath: 'clip-path',
        clipRule: 'clip-rule',
        colorInterpolation: 'color-interpolation',
        colorInterpolationFilters: 'color-interpolation-filters',
        colorProfile: 'color-profile',
        colorRendering: 'color-rendering',
        crossOrigin: 'crossorigin',
        dataType: 'datatype',
        dominantBaseline: 'dominant-baseline',
        enableBackground: 'enable-background',
        fillOpacity: 'fill-opacity',
        fillRule: 'fill-rule',
        floodColor: 'flood-color',
        floodOpacity: 'flood-opacity',
        fontFamily: 'font-family',
        fontSize: 'font-size',
        fontSizeAdjust: 'font-size-adjust',
        fontStretch: 'font-stretch',
        fontStyle: 'font-style',
        fontVariant: 'font-variant',
        fontWeight: 'font-weight',
        glyphName: 'glyph-name',
        glyphOrientationHorizontal: 'glyph-orientation-horizontal',
        glyphOrientationVertical: 'glyph-orientation-vertical',
        hrefLang: 'hreflang',
        horizAdvX: 'horiz-adv-x',
        horizOriginX: 'horiz-origin-x',
        horizOriginY: 'horiz-origin-y',
        imageRendering: 'image-rendering',
        letterSpacing: 'letter-spacing',
        lightingColor: 'lighting-color',
        markerEnd: 'marker-end',
        markerMid: 'marker-mid',
        markerStart: 'marker-start',
        navDown: 'nav-down',
        navDownLeft: 'nav-down-left',
        navDownRight: 'nav-down-right',
        navLeft: 'nav-left',
        navNext: 'nav-next',
        navPrev: 'nav-prev',
        navRight: 'nav-right',
        navUp: 'nav-up',
        navUpLeft: 'nav-up-left',
        navUpRight: 'nav-up-right',
        onAbort: 'onabort',
        onActivate: 'onactivate',
        onAfterPrint: 'onafterprint',
        onBeforePrint: 'onbeforeprint',
        onBegin: 'onbegin',
        onCancel: 'oncancel',
        onCanPlay: 'oncanplay',
        onCanPlayThrough: 'oncanplaythrough',
        onChange: 'onchange',
        onClick: 'onclick',
        onClose: 'onclose',
        onCopy: 'oncopy',
        onCueChange: 'oncuechange',
        onCut: 'oncut',
        onDblClick: 'ondblclick',
        onDrag: 'ondrag',
        onDragEnd: 'ondragend',
        onDragEnter: 'ondragenter',
        onDragExit: 'ondragexit',
        onDragLeave: 'ondragleave',
        onDragOver: 'ondragover',
        onDragStart: 'ondragstart',
        onDrop: 'ondrop',
        onDurationChange: 'ondurationchange',
        onEmptied: 'onemptied',
        onEnd: 'onend',
        onEnded: 'onended',
        onError: 'onerror',
        onFocus: 'onfocus',
        onFocusIn: 'onfocusin',
        onFocusOut: 'onfocusout',
        onHashChange: 'onhashchange',
        onInput: 'oninput',
        onInvalid: 'oninvalid',
        onKeyDown: 'onkeydown',
        onKeyPress: 'onkeypress',
        onKeyUp: 'onkeyup',
        onLoad: 'onload',
        onLoadedData: 'onloadeddata',
        onLoadedMetadata: 'onloadedmetadata',
        onLoadStart: 'onloadstart',
        onMessage: 'onmessage',
        onMouseDown: 'onmousedown',
        onMouseEnter: 'onmouseenter',
        onMouseLeave: 'onmouseleave',
        onMouseMove: 'onmousemove',
        onMouseOut: 'onmouseout',
        onMouseOver: 'onmouseover',
        onMouseUp: 'onmouseup',
        onMouseWheel: 'onmousewheel',
        onOffline: 'onoffline',
        onOnline: 'ononline',
        onPageHide: 'onpagehide',
        onPageShow: 'onpageshow',
        onPaste: 'onpaste',
        onPause: 'onpause',
        onPlay: 'onplay',
        onPlaying: 'onplaying',
        onPopState: 'onpopstate',
        onProgress: 'onprogress',
        onRateChange: 'onratechange',
        onRepeat: 'onrepeat',
        onReset: 'onreset',
        onResize: 'onresize',
        onScroll: 'onscroll',
        onSeeked: 'onseeked',
        onSeeking: 'onseeking',
        onSelect: 'onselect',
        onShow: 'onshow',
        onStalled: 'onstalled',
        onStorage: 'onstorage',
        onSubmit: 'onsubmit',
        onSuspend: 'onsuspend',
        onTimeUpdate: 'ontimeupdate',
        onToggle: 'ontoggle',
        onUnload: 'onunload',
        onVolumeChange: 'onvolumechange',
        onWaiting: 'onwaiting',
        onZoom: 'onzoom',
        overlinePosition: 'overline-position',
        overlineThickness: 'overline-thickness',
        paintOrder: 'paint-order',
        panose1: 'panose-1',
        pointerEvents: 'pointer-events',
        referrerPolicy: 'referrerpolicy',
        renderingIntent: 'rendering-intent',
        shapeRendering: 'shape-rendering',
        stopColor: 'stop-color',
        stopOpacity: 'stop-opacity',
        strikethroughPosition: 'strikethrough-position',
        strikethroughThickness: 'strikethrough-thickness',
        strokeDashArray: 'stroke-dasharray',
        strokeDashOffset: 'stroke-dashoffset',
        strokeLineCap: 'stroke-linecap',
        strokeLineJoin: 'stroke-linejoin',
        strokeMiterLimit: 'stroke-miterlimit',
        strokeOpacity: 'stroke-opacity',
        strokeWidth: 'stroke-width',
        tabIndex: 'tabindex',
        textAnchor: 'text-anchor',
        textDecoration: 'text-decoration',
        textRendering: 'text-rendering',
        transformOrigin: 'transform-origin',
        typeOf: 'typeof',
        underlinePosition: 'underline-position',
        underlineThickness: 'underline-thickness',
        unicodeBidi: 'unicode-bidi',
        unicodeRange: 'unicode-range',
        unitsPerEm: 'units-per-em',
        vAlphabetic: 'v-alphabetic',
        vHanging: 'v-hanging',
        vIdeographic: 'v-ideographic',
        vMathematical: 'v-mathematical',
        vectorEffect: 'vector-effect',
        vertAdvY: 'vert-adv-y',
        vertOriginX: 'vert-origin-x',
        vertOriginY: 'vert-origin-y',
        wordSpacing: 'word-spacing',
        writingMode: 'writing-mode',
        xHeight: 'x-height',
        // These were camelcased in Tiny. Now lowercased in SVG 2
        playbackOrder: 'playbackorder',
        timelineBegin: 'timelinebegin'
      },
      transform: caseSensitiveTransform,
      properties: {
        about: commaOrSpaceSeparated,
        accentHeight: number,
        accumulate: null,
        additive: null,
        alignmentBaseline: null,
        alphabetic: number,
        amplitude: number,
        arabicForm: null,
        ascent: number,
        attributeName: null,
        attributeType: null,
        azimuth: number,
        bandwidth: null,
        baselineShift: null,
        baseFrequency: null,
        baseProfile: null,
        bbox: null,
        begin: null,
        bias: number,
        by: null,
        calcMode: null,
        capHeight: number,
        className: spaceSeparated,
        clip: null,
        clipPath: null,
        clipPathUnits: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        colorProfile: null,
        colorRendering: null,
        content: null,
        contentScriptType: null,
        contentStyleType: null,
        crossOrigin: null,
        cursor: null,
        cx: null,
        cy: null,
        d: null,
        dataType: null,
        defaultAction: null,
        descent: number,
        diffuseConstant: number,
        direction: null,
        display: null,
        dur: null,
        divisor: number,
        dominantBaseline: null,
        download: boolean,
        dx: null,
        dy: null,
        edgeMode: null,
        editable: null,
        elevation: number,
        enableBackground: null,
        end: null,
        event: null,
        exponent: number,
        externalResourcesRequired: null,
        fill: null,
        fillOpacity: number,
        fillRule: null,
        filter: null,
        filterRes: null,
        filterUnits: null,
        floodColor: null,
        floodOpacity: null,
        focusable: null,
        focusHighlight: null,
        fontFamily: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontVariant: null,
        fontWeight: null,
        format: null,
        fr: null,
        from: null,
        fx: null,
        fy: null,
        g1: commaSeparated,
        g2: commaSeparated,
        glyphName: commaSeparated,
        glyphOrientationHorizontal: null,
        glyphOrientationVertical: null,
        glyphRef: null,
        gradientTransform: null,
        gradientUnits: null,
        handler: null,
        hanging: number,
        hatchContentUnits: null,
        hatchUnits: null,
        height: null,
        href: null,
        hrefLang: null,
        horizAdvX: number,
        horizOriginX: number,
        horizOriginY: number,
        id: null,
        ideographic: number,
        imageRendering: null,
        initialVisibility: null,
        in: null,
        in2: null,
        intercept: number,
        k: number,
        k1: number,
        k2: number,
        k3: number,
        k4: number,
        kernelMatrix: commaOrSpaceSeparated,
        kernelUnitLength: null,
        keyPoints: null, // SEMI_COLON_SEPARATED
        keySplines: null, // SEMI_COLON_SEPARATED
        keyTimes: null, // SEMI_COLON_SEPARATED
        kerning: null,
        lang: null,
        lengthAdjust: null,
        letterSpacing: null,
        lightingColor: null,
        limitingConeAngle: number,
        local: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        markerHeight: null,
        markerUnits: null,
        markerWidth: null,
        mask: null,
        maskContentUnits: null,
        maskUnits: null,
        mathematical: null,
        max: null,
        media: null,
        mediaCharacterEncoding: null,
        mediaContentEncodings: null,
        mediaSize: number,
        mediaTime: null,
        method: null,
        min: null,
        mode: null,
        name: null,
        navDown: null,
        navDownLeft: null,
        navDownRight: null,
        navLeft: null,
        navNext: null,
        navPrev: null,
        navRight: null,
        navUp: null,
        navUpLeft: null,
        navUpRight: null,
        numOctaves: null,
        observer: null,
        offset: null,
        onAbort: null,
        onActivate: null,
        onAfterPrint: null,
        onBeforePrint: null,
        onBegin: null,
        onCancel: null,
        onCanPlay: null,
        onCanPlayThrough: null,
        onChange: null,
        onClick: null,
        onClose: null,
        onCopy: null,
        onCueChange: null,
        onCut: null,
        onDblClick: null,
        onDrag: null,
        onDragEnd: null,
        onDragEnter: null,
        onDragExit: null,
        onDragLeave: null,
        onDragOver: null,
        onDragStart: null,
        onDrop: null,
        onDurationChange: null,
        onEmptied: null,
        onEnd: null,
        onEnded: null,
        onError: null,
        onFocus: null,
        onFocusIn: null,
        onFocusOut: null,
        onHashChange: null,
        onInput: null,
        onInvalid: null,
        onKeyDown: null,
        onKeyPress: null,
        onKeyUp: null,
        onLoad: null,
        onLoadedData: null,
        onLoadedMetadata: null,
        onLoadStart: null,
        onMessage: null,
        onMouseDown: null,
        onMouseEnter: null,
        onMouseLeave: null,
        onMouseMove: null,
        onMouseOut: null,
        onMouseOver: null,
        onMouseUp: null,
        onMouseWheel: null,
        onOffline: null,
        onOnline: null,
        onPageHide: null,
        onPageShow: null,
        onPaste: null,
        onPause: null,
        onPlay: null,
        onPlaying: null,
        onPopState: null,
        onProgress: null,
        onRateChange: null,
        onRepeat: null,
        onReset: null,
        onResize: null,
        onScroll: null,
        onSeeked: null,
        onSeeking: null,
        onSelect: null,
        onShow: null,
        onStalled: null,
        onStorage: null,
        onSubmit: null,
        onSuspend: null,
        onTimeUpdate: null,
        onToggle: null,
        onUnload: null,
        onVolumeChange: null,
        onWaiting: null,
        onZoom: null,
        opacity: null,
        operator: null,
        order: null,
        orient: null,
        orientation: null,
        origin: null,
        overflow: null,
        overlay: null,
        overlinePosition: number,
        overlineThickness: number,
        paintOrder: null,
        panose1: null,
        path: null,
        pathLength: number,
        patternContentUnits: null,
        patternTransform: null,
        patternUnits: null,
        phase: null,
        ping: spaceSeparated,
        pitch: null,
        playbackOrder: null,
        pointerEvents: null,
        points: null,
        pointsAtX: number,
        pointsAtY: number,
        pointsAtZ: number,
        preserveAlpha: null,
        preserveAspectRatio: null,
        primitiveUnits: null,
        propagate: null,
        property: commaOrSpaceSeparated,
        r: null,
        radius: null,
        referrerPolicy: null,
        refX: null,
        refY: null,
        rel: commaOrSpaceSeparated,
        rev: commaOrSpaceSeparated,
        renderingIntent: null,
        repeatCount: null,
        repeatDur: null,
        requiredExtensions: commaOrSpaceSeparated,
        requiredFeatures: commaOrSpaceSeparated,
        requiredFonts: commaOrSpaceSeparated,
        requiredFormats: commaOrSpaceSeparated,
        resource: null,
        restart: null,
        result: null,
        rotate: null,
        rx: null,
        ry: null,
        scale: null,
        seed: null,
        shapeRendering: null,
        side: null,
        slope: null,
        snapshotTime: null,
        specularConstant: number,
        specularExponent: number,
        spreadMethod: null,
        spacing: null,
        startOffset: null,
        stdDeviation: null,
        stemh: null,
        stemv: null,
        stitchTiles: null,
        stopColor: null,
        stopOpacity: null,
        strikethroughPosition: number,
        strikethroughThickness: number,
        string: null,
        stroke: null,
        strokeDashArray: commaOrSpaceSeparated,
        strokeDashOffset: null,
        strokeLineCap: null,
        strokeLineJoin: null,
        strokeMiterLimit: number,
        strokeOpacity: number,
        strokeWidth: null,
        style: null,
        surfaceScale: number,
        syncBehavior: null,
        syncBehaviorDefault: null,
        syncMaster: null,
        syncTolerance: null,
        syncToleranceDefault: null,
        systemLanguage: commaOrSpaceSeparated,
        tabIndex: number,
        tableValues: null,
        target: null,
        targetX: number,
        targetY: number,
        textAnchor: null,
        textDecoration: null,
        textRendering: null,
        textLength: null,
        timelineBegin: null,
        title: null,
        transformBehavior: null,
        type: null,
        typeOf: commaOrSpaceSeparated,
        to: null,
        transform: null,
        transformOrigin: null,
        u1: null,
        u2: null,
        underlinePosition: number,
        underlineThickness: number,
        unicode: null,
        unicodeBidi: null,
        unicodeRange: null,
        unitsPerEm: number,
        values: null,
        vAlphabetic: number,
        vMathematical: number,
        vectorEffect: null,
        vHanging: number,
        vIdeographic: number,
        version: null,
        vertAdvY: number,
        vertOriginX: number,
        vertOriginY: number,
        viewBox: null,
        viewTarget: null,
        visibility: null,
        width: null,
        widths: null,
        wordSpacing: null,
        writingMode: null,
        x: null,
        x1: null,
        x2: null,
        xChannelSelector: null,
        xHeight: number,
        y: null,
        y1: null,
        y2: null,
        yChannelSelector: null,
        z: null,
        zoomAndPan: null
      }
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('./util/schema.js').Schema} Schema
     */

    const valid = /^data[-\w.:]+$/i;
    const dash$1 = /-[a-z]/g;
    const cap$2 = /[A-Z]/g;

    /**
     * @param {Schema} schema
     * @param {string} value
     * @returns {Info}
     */
    function find$1(schema, value) {
      const normal = normalize$2(value);
      let prop = value;
      let Type = Info;

      if (normal in schema.normal) {
        return schema.property[schema.normal[normal]]
      }

      if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
        // Attribute or property.
        if (value.charAt(4) === '-') {
          // Turn it into a property.
          const rest = value.slice(5).replace(dash$1, camelcase);
          prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
        } else {
          // Turn it into an attribute.
          const rest = value.slice(4);

          if (!dash$1.test(rest)) {
            let dashes = rest.replace(cap$2, kebab);

            if (dashes.charAt(0) !== '-') {
              dashes = '-' + dashes;
            }

            value = 'data' + dashes;
          }
        }

        Type = DefinedInfo;
      }

      return new Type(prop, value)
    }

    /**
     * @param {string} $0
     * @returns {string}
     */
    function kebab($0) {
      return '-' + $0.toLowerCase()
    }

    /**
     * @param {string} $0
     * @returns {string}
     */
    function camelcase($0) {
      return $0.charAt(1).toUpperCase()
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * `hast` is close to `React`, but differs in a couple of cases.
     *
     * To get a React property from a hast property, check if it is in
     * `hastToReact`, if it is, then use the corresponding value,
     * otherwise, use the hast property.
     *
     * @type {Record<string, string>}
     */
    const hastToReact = {
      classId: 'classID',
      dataType: 'datatype',
      itemId: 'itemID',
      strokeDashArray: 'strokeDasharray',
      strokeDashOffset: 'strokeDashoffset',
      strokeLineCap: 'strokeLinecap',
      strokeLineJoin: 'strokeLinejoin',
      strokeMiterLimit: 'strokeMiterlimit',
      typeOf: 'typeof',
      xLinkActuate: 'xlinkActuate',
      xLinkArcRole: 'xlinkArcrole',
      xLinkHref: 'xlinkHref',
      xLinkRole: 'xlinkRole',
      xLinkShow: 'xlinkShow',
      xLinkTitle: 'xlinkTitle',
      xLinkType: 'xlinkType',
      xmlnsXLink: 'xmlnsXlink'
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('./lib/util/info.js').Info} Info
     * @typedef {import('./lib/util/schema.js').Schema} Schema
     */
    const html$2 = merge$1([xml, xlink, xmlns, aria, html$3], 'html');
    const svg = merge$1([xml, xlink, xmlns, aria, svg$1], 'svg');

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Parse space-separated tokens to an array of strings.
     *
     * @param {string} value
     *   Space-separated tokens.
     * @returns {Array<string>}
     *   List of tokens.
     */

    /**
     * Serialize an array of strings as space separated-tokens.
     *
     * @param {Array<string|number>} values
     *   List of tokens.
     * @returns {string}
     *   Space-separated tokens.
     */
    function stringify$2(values) {
      return values.join(' ').trim()
    }

    var styleToObject$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // http://www.w3.org/TR/CSS21/grammar.html
    // https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;

    // declaration
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;

    // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
    var TRIM_REGEX = /^\s+|\s+$/g;

    // strings
    var NEWLINE = '\n';
    var FORWARD_SLASH = '/';
    var ASTERISK = '*';
    var EMPTY_STRING = '';

    // types
    var TYPE_COMMENT = 'comment';
    var TYPE_DECLARATION = 'declaration';

    /**
     * @param {String} style
     * @param {Object} [options]
     * @return {Object[]}
     * @throws {TypeError}
     * @throws {Error}
     */
    var inlineStyleParser = function(style, options) {
      if (typeof style !== 'string') {
        throw new TypeError('First argument must be a string');
      }

      if (!style) return [];

      options = options || {};

      /**
       * Positional.
       */
      var lineno = 1;
      var column = 1;

      /**
       * Update lineno and column based on `str`.
       *
       * @param {String} str
       */
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
      }

      /**
       * Mark position and patch `node.position`.
       *
       * @return {Function}
       */
      function position() {
        var start = { line: lineno, column: column };
        return function(node) {
          node.position = new Position(start);
          whitespace();
          return node;
        };
      }

      /**
       * Store position information for a node.
       *
       * @constructor
       * @property {Object} start
       * @property {Object} end
       * @property {undefined|String} source
       */
      function Position(start) {
        this.start = start;
        this.end = { line: lineno, column: column };
        this.source = options.source;
      }

      /**
       * Non-enumerable source string.
       */
      Position.prototype.content = style;

      /**
       * Error `msg`.
       *
       * @param {String} msg
       * @throws {Error}
       */
      function error(msg) {
        var err = new Error(
          options.source + ':' + lineno + ':' + column + ': ' + msg
        );
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;

        if (options.silent) ; else {
          throw err;
        }
      }

      /**
       * Match `re` and return captures.
       *
       * @param {RegExp} re
       * @return {undefined|Array}
       */
      function match(re) {
        var m = re.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
      }

      /**
       * Parse whitespace.
       */
      function whitespace() {
        match(WHITESPACE_REGEX);
      }

      /**
       * Parse comments.
       *
       * @param {Object[]} [rules]
       * @return {Object[]}
       */
      function comments(rules) {
        var c;
        rules = rules || [];
        while ((c = comment())) {
          if (c !== false) {
            rules.push(c);
          }
        }
        return rules;
      }

      /**
       * Parse comment.
       *
       * @return {Object}
       * @throws {Error}
       */
      function comment() {
        var pos = position();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;

        var i = 2;
        while (
          EMPTY_STRING != style.charAt(i) &&
          (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))
        ) {
          ++i;
        }
        i += 2;

        if (EMPTY_STRING === style.charAt(i - 1)) {
          return error('End of comment missing');
        }

        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;

        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }

      /**
       * Parse declaration.
       *
       * @return {Object}
       * @throws {Error}
       */
      function declaration() {
        var pos = position();

        // prop
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();

        // :
        if (!match(COLON_REGEX)) return error("property missing ':'");

        // val
        var val = match(VALUE_REGEX);

        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val
            ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))
            : EMPTY_STRING
        });

        // ;
        match(SEMICOLON_REGEX);

        return ret;
      }

      /**
       * Parse declarations.
       *
       * @return {Object[]}
       */
      function declarations() {
        var decls = [];

        comments(decls);

        // declarations
        var decl;
        while ((decl = declaration())) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }

        return decls;
      }

      whitespace();
      return declarations();
    };

    /**
     * Trim `str`.
     *
     * @param {String} str
     * @return {String}
     */
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var parse$4 = inlineStyleParser;

    /**
     * Parses inline style to object.
     *
     * @example
     * // returns { 'line-height': '42' }
     * StyleToObject('line-height: 42;');
     *
     * @param  {String}      style      - The inline style.
     * @param  {Function}    [iterator] - The iterator function.
     * @return {null|Object}
     */
    function StyleToObject(style, iterator) {
      var output = null;
      if (!style || typeof style !== 'string') {
        return output;
      }

      var declaration;
      var declarations = parse$4(style);
      var hasIterator = typeof iterator === 'function';
      var property;
      var value;

      for (var i = 0, len = declarations.length; i < len; i++) {
        declaration = declarations[i];
        property = declaration.property;
        value = declaration.value;

        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          output || (output = {});
          output[property] = value;
        }
      }

      return output;
    }

    styleToObject$1.exports = StyleToObject;
    styleToObject$1.exports.default = StyleToObject; // ESM support

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var styleToObject = styleToObject$1.exports;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Point} Point
     * @typedef {import('unist').Position} Position
     */

    /**
     * @typedef NodeLike
     * @property {string} type
     * @property {PositionLike | null | undefined} [position]
     *
     * @typedef PositionLike
     * @property {PointLike | null | undefined} [start]
     * @property {PointLike | null | undefined} [end]
     *
     * @typedef PointLike
     * @property {number | null | undefined} [line]
     * @property {number | null | undefined} [column]
     * @property {number | null | undefined} [offset]
     */

    /**
     * Get the ending point of `node`.
     *
     * @param node
     *   Node.
     * @returns
     *   Point.
     */
    const pointEnd = point$4('end');

    /**
     * Get the starting point of `node`.
     *
     * @param node
     *   Node.
     * @returns
     *   Point.
     */
    const pointStart = point$4('start');

    /**
     * Get the positional info of `node`.
     *
     * @param {'end' | 'start'} type
     *   Side.
     * @returns
     *   Getter.
     */
    function point$4(type) {
      return point

      /**
       * Get the point info of `node` at a bound side.
       *
       * @param {Node | NodeLike | null | undefined} [node]
       * @returns {Point | undefined}
       */
      function point(node) {
        const point = (node && node.position && node.position[type]) || {};

        if (
          typeof point.line === 'number' &&
          point.line > 0 &&
          typeof point.column === 'number' &&
          point.column > 0
        ) {
          return {
            line: point.line,
            column: point.column,
            offset:
              typeof point.offset === 'number' && point.offset > -1
                ? point.offset
                : undefined
          }
        }
      }
    }

    /**
     * Get the positional info of `node`.
     *
     * @param {Node | NodeLike | null | undefined} [node]
     *   Node.
     * @returns {Position | undefined}
     *   Position.
     */
    function position$3(node) {
      const start = pointStart(node);
      const end = pointEnd(node);

      if (start && end) {
        return {start, end}
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Point} Point
     * @typedef {import('unist').Position} Position
     */

    /**
     * @typedef NodeLike
     * @property {string} type
     * @property {PositionLike | null | undefined} [position]
     *
     * @typedef PointLike
     * @property {number | null | undefined} [line]
     * @property {number | null | undefined} [column]
     * @property {number | null | undefined} [offset]
     *
     * @typedef PositionLike
     * @property {PointLike | null | undefined} [start]
     * @property {PointLike | null | undefined} [end]
     */

    /**
     * Serialize the positional info of a point, position (start and end points),
     * or node.
     *
     * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
     *   Node, position, or point.
     * @returns {string}
     *   Pretty printed positional info of a node (`string`).
     *
     *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
     *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
     *   column, `s` for `start`, and `e` for end.
     *   An empty string (`''`) is returned if the given value is neither `node`,
     *   `position`, nor `point`.
     */
    function stringifyPosition$2(value) {
      // Nothing.
      if (!value || typeof value !== 'object') {
        return ''
      }

      // Node.
      if ('position' in value || 'type' in value) {
        return position$2(value.position)
      }

      // Position.
      if ('start' in value || 'end' in value) {
        return position$2(value)
      }

      // Point.
      if ('line' in value || 'column' in value) {
        return point$3(value)
      }

      // ?
      return ''
    }

    /**
     * @param {Point | PointLike | null | undefined} point
     * @returns {string}
     */
    function point$3(point) {
      return index$4(point && point.line) + ':' + index$4(point && point.column)
    }

    /**
     * @param {Position | PositionLike | null | undefined} pos
     * @returns {string}
     */
    function position$2(pos) {
      return point$3(pos && pos.start) + '-' + point$3(pos && pos.end)
    }

    /**
     * @param {number | null | undefined} value
     * @returns {number}
     */
    function index$4(value) {
      return value && typeof value === 'number' ? value : 1
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Point} Point
     * @typedef {import('unist').Position} Position
     */

    /**
     * Message.
     */
    class VFileMessage extends Error {
      /**
       * Create a message for `reason`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {Options | null | undefined} [options]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns
       *   Instance of `VFileMessage`.
       */
      // eslint-disable-next-line complexity
      constructor(causeOrReason, optionsOrParentOrPlace, origin) {
        super();

        if (typeof optionsOrParentOrPlace === 'string') {
          origin = optionsOrParentOrPlace;
          optionsOrParentOrPlace = undefined;
        }

        /** @type {string} */
        let reason = '';
        /** @type {Options} */
        let options = {};
        let legacyCause = false;

        if (optionsOrParentOrPlace) {
          // Point.
          if (
            'line' in optionsOrParentOrPlace &&
            'column' in optionsOrParentOrPlace
          ) {
            options = {place: optionsOrParentOrPlace};
          }
          // Position.
          else if (
            'start' in optionsOrParentOrPlace &&
            'end' in optionsOrParentOrPlace
          ) {
            options = {place: optionsOrParentOrPlace};
          }
          // Node.
          else if ('type' in optionsOrParentOrPlace) {
            options = {
              ancestors: [optionsOrParentOrPlace],
              place: optionsOrParentOrPlace.position
            };
          }
          // Options.
          else {
            options = {...optionsOrParentOrPlace};
          }
        }

        if (typeof causeOrReason === 'string') {
          reason = causeOrReason;
        }
        // Error.
        else if (!options.cause && causeOrReason) {
          legacyCause = true;
          reason = causeOrReason.message;
          options.cause = causeOrReason;
        }

        if (!options.ruleId && !options.source && typeof origin === 'string') {
          const index = origin.indexOf(':');

          if (index === -1) {
            options.ruleId = origin;
          } else {
            options.source = origin.slice(0, index);
            options.ruleId = origin.slice(index + 1);
          }
        }

        if (!options.place && options.ancestors && options.ancestors) {
          const parent = options.ancestors[options.ancestors.length - 1];

          if (parent) {
            options.place = parent.position;
          }
        }

        const start =
          options.place && 'start' in options.place
            ? options.place.start
            : options.place;

        /* eslint-disable no-unused-expressions */
        /**
         * Stack of ancestor nodes surrounding the message.
         *
         * @type {Array<Node> | undefined}
         */
        this.ancestors = options.ancestors || undefined;

        /**
         * Original error cause of the message.
         *
         * @type {Error | undefined}
         */
        this.cause = options.cause || undefined;

        /**
         * Starting column of message.
         *
         * @type {number | undefined}
         */
        this.column = start ? start.column : undefined;

        /**
         * State of problem.
         *
         * * `true` — error, file not usable
         * * `false` — warning, change may be needed
         * * `undefined` — change likely not needed
         *
         * @type {boolean | null | undefined}
         */
        this.fatal = undefined;

        /**
         * Path of a file (used throughout the `VFile` ecosystem).
         *
         * @type {string | undefined}
         */
        this.file;

        // Field from `Error`.
        /**
         * Reason for message.
         *
         * @type {string}
         */
        this.message = reason;

        /**
         * Starting line of error.
         *
         * @type {number | undefined}
         */
        this.line = start ? start.line : undefined;

        // Field from `Error`.
        /**
         * Serialized positional info of message.
         *
         * On normal errors, this would be something like `ParseError`, buit in
         * `VFile` messages we use this space to show where an error happened.
         */
        this.name = stringifyPosition$2(options.place) || '1:1';

        /**
         * Place of message.
         *
         * @type {Point | Position | undefined}
         */
        this.place = options.place || undefined;

        /**
         * Reason for message, should use markdown.
         *
         * @type {string}
         */
        this.reason = this.message;

        /**
         * Category of message (example: `'my-rule'`).
         *
         * @type {string | undefined}
         */
        this.ruleId = options.ruleId || undefined;

        /**
         * Namespace of message (example: `'my-package'`).
         *
         * @type {string | undefined}
         */
        this.source = options.source || undefined;

        // Field from `Error`.
        /**
         * Stack of message.
         *
         * This is used by normal errors to show where something happened in
         * programming code, irrelevant for `VFile` messages,
         *
         * @type {string}
         */
        this.stack =
          legacyCause && options.cause && typeof options.cause.stack === 'string'
            ? options.cause.stack
            : '';

        // The following fields are “well known”.
        // Not standard.
        // Feel free to add other non-standard fields to your messages.

        /**
         * Specify the source value that’s being reported, which is deemed
         * incorrect.
         *
         * @type {string | undefined}
         */
        this.actual;

        /**
         * Suggest acceptable values that can be used instead of `actual`.
         *
         * @type {Array<string> | undefined}
         */
        this.expected;

        /**
         * Long form description of the message (you should use markdown).
         *
         * @type {string | undefined}
         */
        this.note;

        /**
         * Link to docs for the message.
         *
         * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
         * > to `new URL(x)`.
         *
         * @type {string | undefined}
         */
        this.url;
        /* eslint-enable no-unused-expressions */
      }
    }

    VFileMessage.prototype.file = '';
    VFileMessage.prototype.name = '';
    VFileMessage.prototype.reason = '';
    VFileMessage.prototype.message = '';
    VFileMessage.prototype.stack = '';
    VFileMessage.prototype.column = undefined;
    VFileMessage.prototype.line = undefined;
    VFileMessage.prototype.ancestors = undefined;
    VFileMessage.prototype.cause = undefined;
    VFileMessage.prototype.fatal = undefined;
    VFileMessage.prototype.place = undefined;
    VFileMessage.prototype.ruleId = undefined;
    VFileMessage.prototype.source = undefined;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Nodes} Nodes
     * @typedef {import('hast').Parents} Parents
     *
     * @typedef {import('property-information').Schema} Schema
     *
     * @typedef {import('./components.js').Components} Components
     */

    const own$9 = {}.hasOwnProperty;

    /** @type {Map<string, number>} */
    const emptyMap = new Map();

    const cap$1 = /[A-Z]/g;
    const dashSomething = /-([a-z])/g;

    // `react-dom` triggers a warning for *any* white space in tables.
    // To follow GFM, `mdast-util-to-hast` injects line endings between elements.
    // Other tools might do so too, but they don’t do here, so we remove all of
    // that.

    // See: <https://github.com/facebook/react/pull/7081>.
    // See: <https://github.com/facebook/react/pull/7515>.
    // See: <https://github.com/remarkjs/remark-react/issues/64>.
    // See: <https://github.com/rehypejs/rehype-react/pull/29>.
    // See: <https://github.com/rehypejs/rehype-react/pull/32>.
    // See: <https://github.com/rehypejs/rehype-react/pull/45>.
    const tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr']);

    const tableCellElement = new Set(['td', 'th']);

    /**
     * Transform a hast tree to preact, react, solid, svelte, vue, etc.,
     * with an automatic JSX runtime.
     *
     * @param {Nodes} tree
     *   Tree to transform.
     * @param {Options} options
     *   Configuration (required).
     * @returns {JSX.Element}
     *   JSX element.
     */

    function toJsxRuntime(tree, options) {
      if (!options || options.Fragment === undefined) {
        throw new TypeError('Expected `Fragment` in options')
      }

      const filePath = options.filePath || undefined;
      /** @type {Create} */
      let create;

      if (options.development) {
        if (typeof options.jsxDEV !== 'function') {
          throw new TypeError(
            'Expected `jsxDEV` in options when `development: true`'
          )
        }

        create = developmentCreate(filePath, options.jsxDEV);
      } else {
        if (typeof options.jsx !== 'function') {
          throw new TypeError('Expected `jsx` in production options')
        }

        if (typeof options.jsxs !== 'function') {
          throw new TypeError('Expected `jsxs` in production options')
        }

        create = productionCreate(filePath, options.jsx, options.jsxs);
      }

      /** @type {State} */
      const state = {
        Fragment: options.Fragment,
        ancestors: [],
        components: options.components || {},
        create,
        elementAttributeNameCase: options.elementAttributeNameCase || 'react',
        filePath,
        ignoreInvalidStyle: options.ignoreInvalidStyle || false,
        passKeys: options.passKeys !== false,
        passNode: options.passNode || false,
        schema: options.space === 'svg' ? svg : html$2,
        stylePropertyNameCase: options.stylePropertyNameCase || 'dom',
        tableCellAlignToStyle: options.tableCellAlignToStyle !== false
      };

      const result = one$1(state, tree, undefined);

      // JSX element.
      if (result && typeof result !== 'string') {
        return result
      }

      // Text node or something that turned into nothing.
      return state.create(
        tree,
        state.Fragment,
        {children: result || undefined},
        undefined
      )
    }

    /**
     * Transform a node.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Nodes} node
     *   Current node.
     * @param {string | undefined} key
     *   Key.
     * @returns {Child | undefined}
     *   Child, optional.
     */
    function one$1(state, node, key) {
      if (node.type === 'element' || node.type === 'root') {
        const parentSchema = state.schema;
        let schema = parentSchema;

        if (
          node.type === 'element' &&
          node.tagName.toLowerCase() === 'svg' &&
          parentSchema.space === 'html'
        ) {
          schema = svg;
          state.schema = schema;
        }

        state.ancestors.push(node);

        let children = createChildren(state, node);
        const props = createProperties(state, state.ancestors);
        let type = state.Fragment;

        state.ancestors.pop();

        if (node.type === 'element') {
          if (children && tableElements.has(node.tagName)) {
            children = children.filter(function (child) {
              return typeof child === 'string' ? !whitespace(child) : true
            });
          }

          if (own$9.call(state.components, node.tagName)) {
            const key = /** @type {keyof JSX.IntrinsicElements} */ (node.tagName);
            type = state.components[key];

            // If this is swapped out for a component:
            if (
              typeof type !== 'string' &&
              type !== state.Fragment &&
              state.passNode
            ) {
              props.node = node;
            }
          } else {
            type = node.tagName;
          }
        }

        if (children.length > 0) {
          const value = children.length > 1 ? children : children[0];

          if (value) {
            props.children = value;
          }
        }

        // Restore parent schema.
        state.schema = parentSchema;

        return state.create(node, type, props, key)
      }

      if (node.type === 'text') {
        return node.value
      }
    }

    /**
     * @param {string | undefined} _
     *   Path to file.
     * @param {Jsx} jsx
     *   Dynamic.
     * @param {Jsx} jsxs
     *   Static.
     * @returns {Create}
     *   Create a production element.
     */
    function productionCreate(_, jsx, jsxs) {
      return create
      /** @type {Create} */
      function create(_, type, props, key) {
        // Only an array when there are 2 or more children.
        const isStaticChildren = Array.isArray(props.children);
        const fn = isStaticChildren ? jsxs : jsx;
        return key ? fn(type, props, key) : fn(type, props)
      }
    }

    /**
     * @param {string | undefined} filePath
     *   Path to file.
     * @param {JsxDev} jsxDEV
     *   Development.
     * @returns {Create}
     *   Create a development element.
     */
    function developmentCreate(filePath, jsxDEV) {
      return create
      /** @type {Create} */
      function create(node, type, props, key) {
        // Only an array when there are 2 or more children.
        const isStaticChildren = Array.isArray(props.children);
        const point = pointStart(node);
        return jsxDEV(
          type,
          props,
          key,
          isStaticChildren,
          {
            columnNumber: point ? point.column - 1 : undefined,
            fileName: filePath,
            lineNumber: point ? point.line : undefined
          },
          undefined
        )
      }
    }

    /**
     * Create children.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Parents} node
     *   Current element.
     * @returns {Array<Child>}
     *   Children.
     */
    function createChildren(state, node) {
      /** @type {Array<Child>} */
      const children = [];
      let index = -1;
      /** @type {Map<string, number>} */
      // Note: test this when Solid doesn’t want to merge my upcoming PR.
      /* c8 ignore next */
      const countsByTagName = state.passKeys ? new Map() : emptyMap;

      while (++index < node.children.length) {
        const child = node.children[index];
        /** @type {string | undefined} */
        let key;

        if (state.passKeys && child.type === 'element') {
          const count = countsByTagName.get(child.tagName) || 0;
          key = child.tagName + '-' + count;
          countsByTagName.set(child.tagName, count + 1);
        }

        const result = one$1(state, child, key);
        if (result !== undefined) children.push(result);
      }

      return children
    }

    /**
     * Handle properties.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Array<Parents>} ancestors
     *   Stack of parents.
     * @returns {Props}
     *   Props for runtime.
     */
    function createProperties(state, ancestors) {
      const node = ancestors[ancestors.length - 1];
      /** @type {Props} */
      const props = {};
      /** @type {string} */
      let prop;

      if ('properties' in node && node.properties) {
        /** @type {string | undefined} */
        let alignValue;

        for (prop in node.properties) {
          if (prop !== 'children' && own$9.call(node.properties, prop)) {
            const result = createProperty(
              state,
              ancestors,
              prop,
              node.properties[prop]
            );

            if (result) {
              const [key, value] = result;

              if (
                state.tableCellAlignToStyle &&
                key === 'align' &&
                typeof value === 'string' &&
                tableCellElement.has(node.tagName)
              ) {
                alignValue = value;
              } else {
                props[key] = value;
              }
            }
          }
        }

        if (alignValue) {
          // Assume style is an object.
          const style = /** @type {Style} */ (props.style || (props.style = {}));
          style[
            state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'
          ] = alignValue;
        }
      }

      return props
    }

    /**
     * Handle a property.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Array<Parents>} ancestors
     *   Stack of parents.
     * @param {string} prop
     *   Key.
     * @param {Array<number | string> | boolean | number | string | null | undefined} value
     *   hast property value.
     * @returns {Field | undefined}
     *   Field for runtime, optional.
     */
    function createProperty(state, ancestors, prop, value) {
      const info = find$1(state.schema, prop);

      // Ignore nullish and `NaN` values.
      if (
        value === null ||
        value === undefined ||
        (typeof value === 'number' && Number.isNaN(value))
      ) {
        return
      }

      if (Array.isArray(value)) {
        // Accept `array`.
        // Most props are space-separated.
        value = info.commaSeparated ? stringify$3(value) : stringify$2(value);
      }

      // React only accepts `style` as object.
      if (info.property === 'style') {
        let styleObject =
          typeof value === 'object'
            ? value
            : parseStyle(state, ancestors, String(value));

        if (state.stylePropertyNameCase === 'css') {
          styleObject = transformStylesToCssCasing(styleObject);
        }

        return ['style', styleObject]
      }

      return [
        state.elementAttributeNameCase === 'react' && info.space
          ? hastToReact[info.property] || info.property
          : info.attribute,
        value
      ]
    }

    /**
     * Parse a CSS declaration to an object.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Array<Nodes>} ancestors
     *   Stack of nodes.
     * @param {string} value
     *   CSS declarations.
     * @returns {Style}
     *   Properties.
     * @throws
     *   Throws `VFileMessage` when CSS cannot be parsed.
     */
    function parseStyle(state, ancestors, value) {
      /** @type {Style} */
      const result = {};

      try {
        styleToObject(value, replacer);
      } catch (error) {
        if (!state.ignoreInvalidStyle) {
          const cause = /** @type {Error} */ (error);
          const message = new VFileMessage('Cannot parse `style` attribute', {
            ancestors,
            cause,
            source: 'hast-util-to-jsx-runtime',
            ruleId: 'style'
          });
          message.file = state.filePath || undefined;
          message.url =
            'https://github.com/syntax-tree/hast-util-to-jsx-runtime#cannot-parse-style-attribute';

          throw message
        }
      }

      return result

      /**
       * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS
       * property.
       *
       * @param {string} name
       *   Key.
       * @param {string} value
       *   Value
       * @returns {undefined}
       *   Nothing.
       */
      function replacer(name, value) {
        let key = name;

        if (key.slice(0, 2) !== '--') {
          if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4);
          key = key.replace(dashSomething, toCamel);
        }

        result[key] = value;
      }
    }

    /**
     * Transform a DOM casing style object to a CSS casing style object.
     *
     * @param {Style} domCasing
     * @returns {Style}
     */
    function transformStylesToCssCasing(domCasing) {
      /** @type {Style} */
      const cssCasing = {};
      /** @type {string} */
      let from;

      for (from in domCasing) {
        if (own$9.call(domCasing, from)) {
          cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
        }
      }

      return cssCasing
    }

    /**
     * Transform a DOM casing style field to a CSS casing style field.
     *
     * @param {string} from
     * @returns {string}
     */
    function transformStyleToCssCasing(from) {
      let to = from.replace(cap$1, toDash);
      // Handle `ms-xxx` -> `-ms-xxx`.
      if (to.slice(0, 3) === 'ms-') to = '-' + to;
      return to
    }

    /**
     * Make `$1` capitalized.
     *
     * @param {string} _
     *   Whatever.
     * @param {string} $1
     *   Single ASCII alphabetical.
     * @returns {string}
     *   Capitalized `$1`.
     */
    function toCamel(_, $1) {
      return $1.toUpperCase()
    }

    /**
     * Make `$0` dash cased.
     *
     * @param {string} $0
     *   Capitalized ASCII leter.
     * @returns {string}
     *   Dash and lower letter.
     */
    function toDash($0) {
      return '-' + $0.toLowerCase()
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * HTML URL properties.
     *
     * Each key is a property name and each value is a list of tag names it applies
     * to or `null` if it applies to all elements.
     *
     * @type {Record<string, Array<string> | null>}
     */
    const urlAttributes = {
      action: ['form'],
      cite: ['blockquote', 'del', 'ins', 'q'],
      data: ['object'],
      formAction: ['button', 'input'],
      href: ['a', 'area', 'base', 'link'],
      icon: ['menuitem'],
      itemId: null,
      manifest: ['html'],
      ping: ['a', 'area'],
      poster: ['video'],
      src: [
        'audio',
        'embed',
        'iframe',
        'img',
        'input',
        'script',
        'source',
        'track',
        'video'
      ]
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Nodes} Nodes
     *
     * @typedef Options
     *   Configuration (optional).
     * @property {boolean | null | undefined} [includeImageAlt=true]
     *   Whether to use `alt` for `image`s (default: `true`).
     * @property {boolean | null | undefined} [includeHtml=true]
     *   Whether to use `value` of HTML (default: `true`).
     */

    /** @type {Options} */
    const emptyOptions$2 = {};

    /**
     * Get the text content of a node or list of nodes.
     *
     * Prefers the node’s plain-text fields, otherwise serializes its children,
     * and if the given value is an array, serialize the nodes in it.
     *
     * @param {unknown} [value]
     *   Thing to serialize, typically `Node`.
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     * @returns {string}
     *   Serialized `value`.
     */
    function toString$5(value, options) {
      const settings = options || emptyOptions$2;
      const includeImageAlt =
        typeof settings.includeImageAlt === 'boolean'
          ? settings.includeImageAlt
          : true;
      const includeHtml =
        typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;

      return one(value, includeImageAlt, includeHtml)
    }

    /**
     * One node or several nodes.
     *
     * @param {unknown} value
     *   Thing to serialize.
     * @param {boolean} includeImageAlt
     *   Include image `alt`s.
     * @param {boolean} includeHtml
     *   Include HTML.
     * @returns {string}
     *   Serialized node.
     */
    function one(value, includeImageAlt, includeHtml) {
      if (node(value)) {
        if ('value' in value) {
          return value.type === 'html' && !includeHtml ? '' : value.value
        }

        if (includeImageAlt && 'alt' in value && value.alt) {
          return value.alt
        }

        if ('children' in value) {
          return all$1(value.children, includeImageAlt, includeHtml)
        }
      }

      if (Array.isArray(value)) {
        return all$1(value, includeImageAlt, includeHtml)
      }

      return ''
    }

    /**
     * Serialize a list of nodes.
     *
     * @param {Array<unknown>} values
     *   Thing to serialize.
     * @param {boolean} includeImageAlt
     *   Include image `alt`s.
     * @param {boolean} includeHtml
     *   Include HTML.
     * @returns {string}
     *   Serialized nodes.
     */
    function all$1(values, includeImageAlt, includeHtml) {
      /** @type {Array<string>} */
      const result = [];
      let index = -1;

      while (++index < values.length) {
        result[index] = one(values[index], includeImageAlt, includeHtml);
      }

      return result.join('')
    }

    /**
     * Check if `value` looks like a node.
     *
     * @param {unknown} value
     *   Thing.
     * @returns {value is Nodes}
     *   Whether `value` is a node.
     */
    function node(value) {
      return Boolean(value && typeof value === 'object')
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/// <reference lib="dom" />

    /* eslint-env browser */

    const element = document.createElement('i');

    /**
     * @param {string} value
     * @returns {string|false}
     */
    function decodeNamedCharacterReference(value) {
      const characterReference = '&' + value + ';';
      element.innerHTML = characterReference;
      const char = element.textContent;

      // Some named character references do not require the closing semicolon
      // (`&not`, for instance), which leads to situations where parsing the assumed
      // named reference of `&notit;` will result in the string `¬it;`.
      // When we encounter a trailing semicolon after parsing, and the character
      // reference to decode was not a semicolon (`&semi;`), we can assume that the
      // matching was not complete.
      // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
      // yield `null`.
      if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
        return false
      }

      // If the decoded string is equal to the input, the character reference was
      // not valid.
      // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
      // yield `null`.
      return char === characterReference ? false : char
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Like `Array#splice`, but smarter for giant arrays.
     *
     * `Array#splice` takes all items to be inserted as individual argument which
     * causes a stack overflow in V8 when trying to insert 100k items for instance.
     *
     * Otherwise, this does not return the removed items, and takes `items` as an
     * array instead of rest parameters.
     *
     * @template {unknown} T
     *   Item type.
     * @param {Array<T>} list
     *   List to operate on.
     * @param {number} start
     *   Index to remove/insert at (can be negative).
     * @param {number} remove
     *   Number of items to remove.
     * @param {Array<T>} items
     *   Items to inject into `list`.
     * @returns {undefined}
     *   Nothing.
     */
    function splice$3(list, start, remove, items) {
      const end = list.length;
      let chunkStart = 0;
      /** @type {Array<unknown>} */
      let parameters;

      // Make start between zero and `end` (included).
      if (start < 0) {
        start = -start > end ? 0 : end + start;
      } else {
        start = start > end ? end : start;
      }
      remove = remove > 0 ? remove : 0;

      // No need to chunk the items if there’s only a couple (10k) items.
      if (items.length < 10000) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
      } else {
        // Delete `remove` items starting from `start`
        if (remove) list.splice(start, remove);

        // Insert the items in chunks to not cause stack overflows.
        while (chunkStart < items.length) {
          parameters = items.slice(chunkStart, chunkStart + 10000);
          parameters.unshift(start, 0);
          // @ts-expect-error Hush, it’s fine.
          list.splice(...parameters);
          chunkStart += 10000;
          start += 10000;
        }
      }
    }

    /**
     * Append `items` (an array) at the end of `list` (another array).
     * When `list` was empty, returns `items` instead.
     *
     * This prevents a potentially expensive operation when `list` is empty,
     * and adds items in batches to prevent V8 from hanging.
     *
     * @template {unknown} T
     *   Item type.
     * @param {Array<T>} list
     *   List to operate on.
     * @param {Array<T>} items
     *   Items to add to `list`.
     * @returns {Array<T>}
     *   Either `list` or `items`.
     */
    function push(list, items) {
      if (list.length > 0) {
        splice$3(list, list.length, 0, items);
        return list
      }
      return items
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').Handles} Handles
     * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
     * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
     */

    const hasOwnProperty$3 = {}.hasOwnProperty;

    /**
     * Combine multiple syntax extensions into one.
     *
     * @param {Array<Extension>} extensions
     *   List of syntax extensions.
     * @returns {NormalizedExtension}
     *   A single combined extension.
     */
    function combineExtensions$2(extensions) {
      /** @type {NormalizedExtension} */
      const all = {};
      let index = -1;

      while (++index < extensions.length) {
        syntaxExtension(all, extensions[index]);
      }

      return all
    }

    /**
     * Merge `extension` into `all`.
     *
     * @param {NormalizedExtension} all
     *   Extension to merge into.
     * @param {Extension} extension
     *   Extension to merge.
     * @returns {undefined}
     */
    function syntaxExtension(all, extension) {
      /** @type {keyof Extension} */
      let hook;

      for (hook in extension) {
        const maybe = hasOwnProperty$3.call(all, hook) ? all[hook] : undefined;
        /** @type {Record<string, unknown>} */
        const left = maybe || (all[hook] = {});
        /** @type {Record<string, unknown> | undefined} */
        const right = extension[hook];
        /** @type {string} */
        let code;

        if (right) {
          for (code in right) {
            if (!hasOwnProperty$3.call(left, code)) left[code] = [];
            const value = right[code];
            constructs$3(
              // @ts-expect-error Looks like a list.
              left[code],
              Array.isArray(value) ? value : value ? [value] : []
            );
          }
        }
      }
    }

    /**
     * Merge `list` into `existing` (both lists of constructs).
     * Mutates `existing`.
     *
     * @param {Array<unknown>} existing
     * @param {Array<unknown>} list
     * @returns {undefined}
     */
    function constructs$3(existing, list) {
      let index = -1;
      /** @type {Array<unknown>} */
      const before = [];

      while (++index < list.length) {
    (list[index].add === 'after' ? existing : before).push(list[index]);
      }

      splice$3(existing, 0, 0, before);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Turn the number (in string form as either hexa- or plain decimal) coming from
     * a numeric character reference into a character.
     *
     * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes
     * non-characters and control characters safe.
     *
     * @param {string} value
     *   Value to decode.
     * @param {number} base
     *   Numeric base.
     * @returns {string}
     *   Character.
     */
    function decodeNumericCharacterReference(value, base) {
      const code = Number.parseInt(value, base);
      if (
      // C0 except for HT, LF, FF, CR, space.
      code < 9 || code === 11 || code > 13 && code < 32 ||
      // Control character (DEL) of C0, and C1 controls.
      code > 126 && code < 160 ||
      // Lone high surrogates and low surrogates.
      code > 55_295 && code < 57_344 ||
      // Noncharacters.
      code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */
      (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */
      // Out of range
      code > 1_114_111) {
        return "\uFFFD";
      }
      return String.fromCodePoint(code);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Normalize an identifier (as found in references, definitions).
     *
     * Collapses markdown whitespace, trim, and then lower- and uppercase.
     *
     * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their
     * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different
     * uppercase character (U+0398 (`Θ`)).
     * So, to get a canonical form, we perform both lower- and uppercase.
     *
     * Using uppercase last makes sure keys will never interact with default
     * prototypal values (such as `constructor`): nothing in the prototype of
     * `Object` is uppercase.
     *
     * @param {string} value
     *   Identifier to normalize.
     * @returns {string}
     *   Normalized identifier.
     */
    function normalizeIdentifier$4(value) {
      return (
        value
          // Collapse markdown whitespace.
          .replace(/[\t\n\r ]+/g, ' ')
          // Trim.
          .replace(/^ | $/g, '')
          // Some characters are considered “uppercase”, but if their lowercase
          // counterpart is uppercased will result in a different uppercase
          // character.
          // Hence, to get that form, we perform both lower- and uppercase.
          // Upper case makes sure keys will not interact with default prototypal
          // methods: no method is uppercase.
          .toLowerCase()
          .toUpperCase()
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     */

    const unicodePunctuationInternal = regexCheck$9(/\p{P}/u);

    /**
     * Check whether the character code represents an ASCII alpha (`a` through `z`,
     * case insensitive).
     *
     * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
     *
     * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
     * to U+005A (`Z`).
     *
     * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
     * to U+007A (`z`).
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiAlpha$4 = regexCheck$9(/[A-Za-z]/);

    /**
     * Check whether the character code represents an ASCII alphanumeric (`a`
     * through `z`, case insensitive, or `0` through `9`).
     *
     * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
     * (see `asciiAlpha`).
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiAlphanumeric$5 = regexCheck$9(/[\dA-Za-z]/);

    /**
     * Check whether the character code represents an ASCII atext.
     *
     * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
     * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
     * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
     * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
     * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
     * (`{`) to U+007E TILDE (`~`).
     *
     * See:
     * **\[RFC5322]**:
     * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
     * P. Resnick.
     * IETF.
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiAtext$2 = regexCheck$9(/[#-'*+\--9=?A-Z^-~]/);

    /**
     * Check whether a character code is an ASCII control character.
     *
     * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
     * to U+001F (US), or U+007F (DEL).
     *
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    function asciiControl$3(code) {
      return (
        // Special whitespace codes (which have negative values), C0 and Control
        // character DEL
        code !== null && (code < 32 || code === 127)
      )
    }

    /**
     * Check whether the character code represents an ASCII digit (`0` through `9`).
     *
     * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
     * U+0039 (`9`).
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiDigit$3 = regexCheck$9(/\d/);

    /**
     * Check whether the character code represents an ASCII hex digit (`a` through
     * `f`, case insensitive, or `0` through `9`).
     *
     * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
     * digit, or an ASCII lower hex digit.
     *
     * An **ASCII upper hex digit** is a character in the inclusive range U+0041
     * (`A`) to U+0046 (`F`).
     *
     * An **ASCII lower hex digit** is a character in the inclusive range U+0061
     * (`a`) to U+0066 (`f`).
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiHexDigit$2 = regexCheck$9(/[\dA-Fa-f]/);

    /**
     * Check whether the character code represents ASCII punctuation.
     *
     * An **ASCII punctuation** is a character in the inclusive ranges U+0021
     * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
     * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
     * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const asciiPunctuation$2 = regexCheck$9(/[!-/:-@[-`{-~]/);

    /**
     * Check whether a character code is a markdown line ending.
     *
     * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
     * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
     *
     * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
     * RETURN (CR) are replaced by these virtual characters depending on whether
     * they occurred together.
     *
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    function markdownLineEnding$k(code) {
      return code !== null && code < -2
    }

    /**
     * Check whether a character code is a markdown line ending (see
     * `markdownLineEnding`) or markdown space (see `markdownSpace`).
     *
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    function markdownLineEndingOrSpace$9(code) {
      return code !== null && (code < 0 || code === 32)
    }

    /**
     * Check whether a character code is a markdown space.
     *
     * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
     * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
     *
     * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
     * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
     * SPACE (VS) characters, depending on the column at which the tab occurred.
     *
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    function markdownSpace$a(code) {
      return code === -2 || code === -1 || code === 32
    }

    // Size note: removing ASCII from the regex and using `asciiPunctuation` here
    // In fact adds to the bundle size.
    /**
     * Check whether the character code represents Unicode punctuation.
     *
     * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
     * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
     * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
     * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
     * punctuation (see `asciiPunctuation`).
     *
     * See:
     * **\[UNICODE]**:
     * [The Unicode Standard](https://www.unicode.org/versions/).
     * Unicode Consortium.
     *
     * @param {Code} code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    function unicodePunctuation$3(code) {
      return asciiPunctuation$2(code) || unicodePunctuationInternal(code)
    }

    /**
     * Check whether the character code represents Unicode whitespace.
     *
     * Note that this does handle micromark specific markdown whitespace characters.
     * See `markdownLineEndingOrSpace` to check that.
     *
     * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
     * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
     * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
     *
     * See:
     * **\[UNICODE]**:
     * [The Unicode Standard](https://www.unicode.org/versions/).
     * Unicode Consortium.
     *
     * @param code
     *   Code.
     * @returns {boolean}
     *   Whether it matches.
     */
    const unicodeWhitespace$2 = regexCheck$9(/\s/);

    /**
     * Create a code check from a regex.
     *
     * @param {RegExp} regex
     * @returns {(code: Code) => boolean}
     */
    function regexCheck$9(regex) {
      return check

      /**
       * Check whether a code matches the bound regex.
       *
       * @param {Code} code
       *   Character code.
       * @returns {boolean}
       *   Whether the character code matches the bound regex.
       */
      function check(code) {
        return code !== null && code > -1 && regex.test(String.fromCharCode(code))
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Normalize a URL.
     *
     * Encode unsafe characters with percent-encoding, skipping already encoded
     * sequences.
     *
     * @param {string} value
     *   URI to normalize.
     * @returns {string}
     *   Normalized URI.
     */
    function normalizeUri(value) {
      /** @type {Array<string>} */
      const result = [];
      let index = -1;
      let start = 0;
      let skip = 0;
      while (++index < value.length) {
        const code = value.charCodeAt(index);
        /** @type {string} */
        let replace = '';

        // A correct percent encoded value.
        if (
          code === 37 &&
          asciiAlphanumeric$5(value.charCodeAt(index + 1)) &&
          asciiAlphanumeric$5(value.charCodeAt(index + 2))
        ) {
          skip = 2;
        }
        // ASCII.
        else if (code < 128) {
          if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
            replace = String.fromCharCode(code);
          }
        }
        // Astral.
        else if (code > 55_295 && code < 57_344) {
          const next = value.charCodeAt(index + 1);

          // A correct surrogate pair.
          if (code < 56_320 && next > 56_319 && next < 57_344) {
            replace = String.fromCharCode(code, next);
            skip = 1;
          }
          // Lone surrogate.
          else {
            replace = '\uFFFD';
          }
        }
        // Unicode.
        else {
          replace = String.fromCharCode(code);
        }
        if (replace) {
          result.push(value.slice(start, index), encodeURIComponent(replace));
          start = index + skip + 1;
          replace = '';
        }
        if (skip) {
          index += skip;
          skip = 0;
        }
      }
      return result.join('') + value.slice(start)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenType} TokenType
     */

    // To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.

    /**
     * Parse spaces and tabs.
     *
     * There is no `nok` parameter:
     *
     * *   spaces in markdown are often optional, in which case this factory can be
     *     used and `ok` will be switched to whether spaces were found or not
     * *   one line ending or space can be detected with `markdownSpace(code)` right
     *     before using `factorySpace`
     *
     * ###### Examples
     *
     * Where `␉` represents a tab (plus how much it expands) and `␠` represents a
     * single space.
     *
     * ```markdown
     * ␉
     * ␠␠␠␠
     * ␉␠
     * ```
     *
     * @param {Effects} effects
     *   Context.
     * @param {State} ok
     *   State switched to when successful.
     * @param {TokenType} type
     *   Type (`' \t'`).
     * @param {number | undefined} [max=Infinity]
     *   Max (exclusive).
     * @returns {State}
     *   Start state.
     */
    function factorySpace$i(effects, ok, type, max) {
      const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
      let size = 0;
      return start

      /** @type {State} */
      function start(code) {
        if (markdownSpace$a(code)) {
          effects.enter(type);
          return prefix(code)
        }
        return ok(code)
      }

      /** @type {State} */
      function prefix(code) {
        if (markdownSpace$a(code) && size++ < limit) {
          effects.consume(code);
          return prefix
        }
        effects.exit(type);
        return ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').Initializer} Initializer
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     */
    /** @type {InitialConstruct} */
    const content$5 = {
      tokenize: initializeContent$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Initializer}
     */
    function initializeContent$1(effects) {
      const contentStart = effects.attempt(
        this.parser.constructs.contentInitial,
        afterContentStartConstruct,
        paragraphInitial
      );
      /** @type {Token} */
      let previous;
      return contentStart

      /** @type {State} */
      function afterContentStartConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$i(effects, contentStart, 'linePrefix')
      }

      /** @type {State} */
      function paragraphInitial(code) {
        effects.enter('paragraph');
        return lineStart(code)
      }

      /** @type {State} */
      function lineStart(code) {
        const token = effects.enter('chunkText', {
          contentType: 'text',
          previous
        });
        if (previous) {
          previous.next = token;
        }
        previous = token;
        return data(code)
      }

      /** @type {State} */
      function data(code) {
        if (code === null) {
          effects.exit('chunkText');
          effects.exit('paragraph');
          effects.consume(code);
          return
        }
        if (markdownLineEnding$k(code)) {
          effects.consume(code);
          effects.exit('chunkText');
          return lineStart
        }

        // Data.
        effects.consume(code);
        return data
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').ContainerState} ContainerState
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').Initializer} Initializer
     * @typedef {import('micromark-util-types').Point} Point
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {InitialConstruct} */
    const document$5 = {
      tokenize: initializeDocument$1
    };

    /** @type {Construct} */
    const containerConstruct$1 = {
      tokenize: tokenizeContainer$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Initializer}
     */
    function initializeDocument$1(effects) {
      const self = this;
      /** @type {Array<StackItem>} */
      const stack = [];
      let continued = 0;
      /** @type {TokenizeContext | undefined} */
      let childFlow;
      /** @type {Token | undefined} */
      let childToken;
      /** @type {number} */
      let lineStartOffset;
      return start

      /** @type {State} */
      function start(code) {
        // First we iterate through the open blocks, starting with the root
        // document, and descending through last children down to the last open
        // block.
        // Each block imposes a condition that the line must satisfy if the block is
        // to remain open.
        // For example, a block quote requires a `>` character.
        // A paragraph requires a non-blank line.
        // In this phase we may match all or just some of the open blocks.
        // But we cannot close unmatched blocks yet, because we may have a lazy
        // continuation line.
        if (continued < stack.length) {
          const item = stack[continued];
          self.containerState = item[1];
          return effects.attempt(
            item[0].continuation,
            documentContinue,
            checkNewContainers
          )(code)
        }

        // Done.
        return checkNewContainers(code)
      }

      /** @type {State} */
      function documentContinue(code) {
        continued++;

        // Note: this field is called `_closeFlow` but it also closes containers.
        // Perhaps a good idea to rename it but it’s already used in the wild by
        // extensions.
        if (self.containerState._closeFlow) {
          self.containerState._closeFlow = undefined;
          if (childFlow) {
            closeFlow();
          }

          // Note: this algorithm for moving events around is similar to the
          // algorithm when dealing with lazy lines in `writeToChild`.
          const indexBeforeExits = self.events.length;
          let indexBeforeFlow = indexBeforeExits;
          /** @type {Point | undefined} */
          let point;

          // Find the flow chunk.
          while (indexBeforeFlow--) {
            if (
              self.events[indexBeforeFlow][0] === 'exit' &&
              self.events[indexBeforeFlow][1].type === 'chunkFlow'
            ) {
              point = self.events[indexBeforeFlow][1].end;
              break
            }
          }
          exitContainers(continued);

          // Fix positions.
          let index = indexBeforeExits;
          while (index < self.events.length) {
            self.events[index][1].end = Object.assign({}, point);
            index++;
          }

          // Inject the exits earlier (they’re still also at the end).
          splice$3(
            self.events,
            indexBeforeFlow + 1,
            0,
            self.events.slice(indexBeforeExits)
          );

          // Discard the duplicate exits.
          self.events.length = index;
          return checkNewContainers(code)
        }
        return start(code)
      }

      /** @type {State} */
      function checkNewContainers(code) {
        // Next, after consuming the continuation markers for existing blocks, we
        // look for new block starts (e.g. `>` for a block quote).
        // If we encounter a new block start, we close any blocks unmatched in
        // step 1 before creating the new block as a child of the last matched
        // block.
        if (continued === stack.length) {
          // No need to `check` whether there’s a container, of `exitContainers`
          // would be moot.
          // We can instead immediately `attempt` to parse one.
          if (!childFlow) {
            return documentContinued(code)
          }

          // If we have concrete content, such as block HTML or fenced code,
          // we can’t have containers “pierce” into them, so we can immediately
          // start.
          if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
            return flowStart(code)
          }

          // If we do have flow, it could still be a blank line,
          // but we’d be interrupting it w/ a new container if there’s a current
          // construct.
          // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
          // needed in micromark-extension-gfm-table@1.0.6).
          self.interrupt = Boolean(
            childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
          );
        }

        // Check if there is a new container.
        self.containerState = {};
        return effects.check(
          containerConstruct$1,
          thereIsANewContainer,
          thereIsNoNewContainer
        )(code)
      }

      /** @type {State} */
      function thereIsANewContainer(code) {
        if (childFlow) closeFlow();
        exitContainers(continued);
        return documentContinued(code)
      }

      /** @type {State} */
      function thereIsNoNewContainer(code) {
        self.parser.lazy[self.now().line] = continued !== stack.length;
        lineStartOffset = self.now().offset;
        return flowStart(code)
      }

      /** @type {State} */
      function documentContinued(code) {
        // Try new containers.
        self.containerState = {};
        return effects.attempt(
          containerConstruct$1,
          containerContinue,
          flowStart
        )(code)
      }

      /** @type {State} */
      function containerContinue(code) {
        continued++;
        stack.push([self.currentConstruct, self.containerState]);
        // Try another.
        return documentContinued(code)
      }

      /** @type {State} */
      function flowStart(code) {
        if (code === null) {
          if (childFlow) closeFlow();
          exitContainers(0);
          effects.consume(code);
          return
        }
        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter('chunkFlow', {
          contentType: 'flow',
          previous: childToken,
          _tokenizer: childFlow
        });
        return flowContinue(code)
      }

      /** @type {State} */
      function flowContinue(code) {
        if (code === null) {
          writeToChild(effects.exit('chunkFlow'), true);
          exitContainers(0);
          effects.consume(code);
          return
        }
        if (markdownLineEnding$k(code)) {
          effects.consume(code);
          writeToChild(effects.exit('chunkFlow'));
          // Get ready for the next line.
          continued = 0;
          self.interrupt = undefined;
          return start
        }
        effects.consume(code);
        return flowContinue
      }

      /**
       * @param {Token} token
       * @param {boolean | undefined} [eof]
       * @returns {undefined}
       */
      function writeToChild(token, eof) {
        const stream = self.sliceStream(token);
        if (eof) stream.push(null);
        token.previous = childToken;
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.defineSkip(token.start);
        childFlow.write(stream);

        // Alright, so we just added a lazy line:
        //
        // ```markdown
        // > a
        // b.
        //
        // Or:
        //
        // > ~~~c
        // d
        //
        // Or:
        //
        // > | e |
        // f
        // ```
        //
        // The construct in the second example (fenced code) does not accept lazy
        // lines, so it marked itself as done at the end of its first line, and
        // then the content construct parses `d`.
        // Most constructs in markdown match on the first line: if the first line
        // forms a construct, a non-lazy line can’t “unmake” it.
        //
        // The construct in the third example is potentially a GFM table, and
        // those are *weird*.
        // It *could* be a table, from the first line, if the following line
        // matches a condition.
        // In this case, that second line is lazy, which “unmakes” the first line
        // and turns the whole into one content block.
        //
        // We’ve now parsed the non-lazy and the lazy line, and can figure out
        // whether the lazy line started a new flow block.
        // If it did, we exit the current containers between the two flow blocks.
        if (self.parser.lazy[token.start.line]) {
          let index = childFlow.events.length;
          while (index--) {
            if (
              // The token starts before the line ending…
              childFlow.events[index][1].start.offset < lineStartOffset &&
              // …and either is not ended yet…
              (!childFlow.events[index][1].end ||
                // …or ends after it.
                childFlow.events[index][1].end.offset > lineStartOffset)
            ) {
              // Exit: there’s still something open, which means it’s a lazy line
              // part of something.
              return
            }
          }

          // Note: this algorithm for moving events around is similar to the
          // algorithm when closing flow in `documentContinue`.
          const indexBeforeExits = self.events.length;
          let indexBeforeFlow = indexBeforeExits;
          /** @type {boolean | undefined} */
          let seen;
          /** @type {Point | undefined} */
          let point;

          // Find the previous chunk (the one before the lazy line).
          while (indexBeforeFlow--) {
            if (
              self.events[indexBeforeFlow][0] === 'exit' &&
              self.events[indexBeforeFlow][1].type === 'chunkFlow'
            ) {
              if (seen) {
                point = self.events[indexBeforeFlow][1].end;
                break
              }
              seen = true;
            }
          }
          exitContainers(continued);

          // Fix positions.
          index = indexBeforeExits;
          while (index < self.events.length) {
            self.events[index][1].end = Object.assign({}, point);
            index++;
          }

          // Inject the exits earlier (they’re still also at the end).
          splice$3(
            self.events,
            indexBeforeFlow + 1,
            0,
            self.events.slice(indexBeforeExits)
          );

          // Discard the duplicate exits.
          self.events.length = index;
        }
      }

      /**
       * @param {number} size
       * @returns {undefined}
       */
      function exitContainers(size) {
        let index = stack.length;

        // Exit open containers.
        while (index-- > size) {
          const entry = stack[index];
          self.containerState = entry[1];
          entry[0].exit.call(self, effects);
        }
        stack.length = size;
      }
      function closeFlow() {
        childFlow.write([null]);
        childToken = undefined;
        childFlow = undefined;
        self.containerState._closeFlow = undefined;
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeContainer$1(effects, ok, nok) {
      // Always populated by defaults.

      return factorySpace$i(
        effects,
        effects.attempt(this.parser.constructs.document, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     */
    /**
     * Classify whether a code represents whitespace, punctuation, or something
     * else.
     *
     * Used for attention (emphasis, strong), whose sequences can open or close
     * based on the class of surrounding characters.
     *
     * > 👉 **Note**: eof (`null`) is seen as whitespace.
     *
     * @param {Code} code
     *   Code.
     * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
     *   Group.
     */
    function classifyCharacter$2(code) {
      if (
        code === null ||
        markdownLineEndingOrSpace$9(code) ||
        unicodeWhitespace$2(code)
      ) {
        return 1
      }
      if (unicodePunctuation$3(code)) {
        return 2
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     */

    /**
     * Call all `resolveAll`s.
     *
     * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
     *   List of constructs, optionally with `resolveAll`s.
     * @param {Array<Event>} events
     *   List of events.
     * @param {TokenizeContext} context
     *   Context used by `tokenize`.
     * @returns {Array<Event>}
     *   Changed events.
     */
    function resolveAll$4(constructs, events, context) {
      /** @type {Array<Resolver>} */
      const called = [];
      let index = -1;

      while (++index < constructs.length) {
        const resolve = constructs[index].resolveAll;

        if (resolve && !called.includes(resolve)) {
          events = resolve(events, context);
          called.push(resolve);
        }
      }

      return events
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Point} Point
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const attention$2 = {
      name: 'attention',
      tokenize: tokenizeAttention$1,
      resolveAll: resolveAllAttention$1
    };

    /**
     * Take all events and resolve attention to emphasis or strong.
     *
     * @type {Resolver}
     */
    // eslint-disable-next-line complexity
    function resolveAllAttention$1(events, context) {
      let index = -1;
      /** @type {number} */
      let open;
      /** @type {Token} */
      let group;
      /** @type {Token} */
      let text;
      /** @type {Token} */
      let openingSequence;
      /** @type {Token} */
      let closingSequence;
      /** @type {number} */
      let use;
      /** @type {Array<Event>} */
      let nextEvents;
      /** @type {number} */
      let offset;

      // Walk through all events.
      //
      // Note: performance of this is fine on an mb of normal markdown, but it’s
      // a bottleneck for malicious stuff.
      while (++index < events.length) {
        // Find a token that can close.
        if (
          events[index][0] === 'enter' &&
          events[index][1].type === 'attentionSequence' &&
          events[index][1]._close
        ) {
          open = index;

          // Now walk back to find an opener.
          while (open--) {
            // Find a token that can open the closer.
            if (
              events[open][0] === 'exit' &&
              events[open][1].type === 'attentionSequence' &&
              events[open][1]._open &&
              // If the markers are the same:
              context.sliceSerialize(events[open][1]).charCodeAt(0) ===
                context.sliceSerialize(events[index][1]).charCodeAt(0)
            ) {
              // If the opening can close or the closing can open,
              // and the close size *is not* a multiple of three,
              // but the sum of the opening and closing size *is* multiple of three,
              // then don’t match.
              if (
                (events[open][1]._close || events[index][1]._open) &&
                (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
                !(
                  (events[open][1].end.offset -
                    events[open][1].start.offset +
                    events[index][1].end.offset -
                    events[index][1].start.offset) %
                  3
                )
              ) {
                continue
              }

              // Number of markers to use from the sequence.
              use =
                events[open][1].end.offset - events[open][1].start.offset > 1 &&
                events[index][1].end.offset - events[index][1].start.offset > 1
                  ? 2
                  : 1;
              const start = Object.assign({}, events[open][1].end);
              const end = Object.assign({}, events[index][1].start);
              movePoint$2(start, -use);
              movePoint$2(end, use);
              openingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start,
                end: Object.assign({}, events[open][1].end)
              };
              closingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start: Object.assign({}, events[index][1].start),
                end
              };
              text = {
                type: use > 1 ? 'strongText' : 'emphasisText',
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index][1].start)
              };
              group = {
                type: use > 1 ? 'strong' : 'emphasis',
                start: Object.assign({}, openingSequence.start),
                end: Object.assign({}, closingSequence.end)
              };
              events[open][1].end = Object.assign({}, openingSequence.start);
              events[index][1].start = Object.assign({}, closingSequence.end);
              nextEvents = [];

              // If there are more markers in the opening, add them before.
              if (events[open][1].end.offset - events[open][1].start.offset) {
                nextEvents = push(nextEvents, [
                  ['enter', events[open][1], context],
                  ['exit', events[open][1], context]
                ]);
              }

              // Opening.
              nextEvents = push(nextEvents, [
                ['enter', group, context],
                ['enter', openingSequence, context],
                ['exit', openingSequence, context],
                ['enter', text, context]
              ]);

              // Always populated by defaults.

              // Between.
              nextEvents = push(
                nextEvents,
                resolveAll$4(
                  context.parser.constructs.insideSpan.null,
                  events.slice(open + 1, index),
                  context
                )
              );

              // Closing.
              nextEvents = push(nextEvents, [
                ['exit', text, context],
                ['enter', closingSequence, context],
                ['exit', closingSequence, context],
                ['exit', group, context]
              ]);

              // If there are more markers in the closing, add them after.
              if (events[index][1].end.offset - events[index][1].start.offset) {
                offset = 2;
                nextEvents = push(nextEvents, [
                  ['enter', events[index][1], context],
                  ['exit', events[index][1], context]
                ]);
              } else {
                offset = 0;
              }
              splice$3(events, open - 1, index - open + 3, nextEvents);
              index = open + nextEvents.length - offset - 2;
              break
            }
          }
        }
      }

      // Remove remaining sequences.
      index = -1;
      while (++index < events.length) {
        if (events[index][1].type === 'attentionSequence') {
          events[index][1].type = 'data';
        }
      }
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeAttention$1(effects, ok) {
      const attentionMarkers = this.parser.constructs.attentionMarkers.null;
      const previous = this.previous;
      const before = classifyCharacter$2(previous);

      /** @type {NonNullable<Code>} */
      let marker;
      return start

      /**
       * Before a sequence.
       *
       * ```markdown
       * > | **
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        marker = code;
        effects.enter('attentionSequence');
        return inside(code)
      }

      /**
       * In a sequence.
       *
       * ```markdown
       * > | **
       *     ^^
       * ```
       *
       * @type {State}
       */
      function inside(code) {
        if (code === marker) {
          effects.consume(code);
          return inside
        }
        const token = effects.exit('attentionSequence');

        // To do: next major: move this to resolver, just like `markdown-rs`.
        const after = classifyCharacter$2(code);

        // Always populated by defaults.

        const open =
          !after || (after === 2 && before) || attentionMarkers.includes(code);
        const close =
          !before || (before === 2 && after) || attentionMarkers.includes(previous);
        token._open = Boolean(marker === 42 ? open : open && (before || !close));
        token._close = Boolean(marker === 42 ? close : close && (after || !open));
        return ok(code)
      }
    }

    /**
     * Move a point a bit.
     *
     * Note: `move` only works inside lines! It’s not possible to move past other
     * chunks (replacement characters, tabs, or line endings).
     *
     * @param {Point} point
     * @param {number} offset
     * @returns {undefined}
     */
    function movePoint$2(point, offset) {
      point.column += offset;
      point.offset += offset;
      point._bufferIndex += offset;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const autolink$2 = {
      name: 'autolink',
      tokenize: tokenizeAutolink$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeAutolink$1(effects, ok, nok) {
      let size = 0;
      return start

      /**
       * Start of an autolink.
       *
       * ```markdown
       * > | a<https://example.com>b
       *      ^
       * > | a<user@example.com>b
       *      ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('autolink');
        effects.enter('autolinkMarker');
        effects.consume(code);
        effects.exit('autolinkMarker');
        effects.enter('autolinkProtocol');
        return open
      }

      /**
       * After `<`, at protocol or atext.
       *
       * ```markdown
       * > | a<https://example.com>b
       *       ^
       * > | a<user@example.com>b
       *       ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          return schemeOrEmailAtext
        }
        return emailAtext(code)
      }

      /**
       * At second byte of protocol or atext.
       *
       * ```markdown
       * > | a<https://example.com>b
       *        ^
       * > | a<user@example.com>b
       *        ^
       * ```
       *
       * @type {State}
       */
      function schemeOrEmailAtext(code) {
        // ASCII alphanumeric and `+`, `-`, and `.`.
        if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric$5(code)) {
          // Count the previous alphabetical from `open` too.
          size = 1;
          return schemeInsideOrEmailAtext(code)
        }
        return emailAtext(code)
      }

      /**
       * In ambiguous protocol or atext.
       *
       * ```markdown
       * > | a<https://example.com>b
       *        ^
       * > | a<user@example.com>b
       *        ^
       * ```
       *
       * @type {State}
       */
      function schemeInsideOrEmailAtext(code) {
        if (code === 58) {
          effects.consume(code);
          size = 0;
          return urlInside
        }

        // ASCII alphanumeric and `+`, `-`, and `.`.
        if (
          (code === 43 || code === 45 || code === 46 || asciiAlphanumeric$5(code)) &&
          size++ < 32
        ) {
          effects.consume(code);
          return schemeInsideOrEmailAtext
        }
        size = 0;
        return emailAtext(code)
      }

      /**
       * After protocol, in URL.
       *
       * ```markdown
       * > | a<https://example.com>b
       *             ^
       * ```
       *
       * @type {State}
       */
      function urlInside(code) {
        if (code === 62) {
          effects.exit('autolinkProtocol');
          effects.enter('autolinkMarker');
          effects.consume(code);
          effects.exit('autolinkMarker');
          effects.exit('autolink');
          return ok
        }

        // ASCII control, space, or `<`.
        if (code === null || code === 32 || code === 60 || asciiControl$3(code)) {
          return nok(code)
        }
        effects.consume(code);
        return urlInside
      }

      /**
       * In email atext.
       *
       * ```markdown
       * > | a<user.name@example.com>b
       *              ^
       * ```
       *
       * @type {State}
       */
      function emailAtext(code) {
        if (code === 64) {
          effects.consume(code);
          return emailAtSignOrDot
        }
        if (asciiAtext$2(code)) {
          effects.consume(code);
          return emailAtext
        }
        return nok(code)
      }

      /**
       * In label, after at-sign or dot.
       *
       * ```markdown
       * > | a<user.name@example.com>b
       *                 ^       ^
       * ```
       *
       * @type {State}
       */
      function emailAtSignOrDot(code) {
        return asciiAlphanumeric$5(code) ? emailLabel(code) : nok(code)
      }

      /**
       * In label, where `.` and `>` are allowed.
       *
       * ```markdown
       * > | a<user.name@example.com>b
       *                   ^
       * ```
       *
       * @type {State}
       */
      function emailLabel(code) {
        if (code === 46) {
          effects.consume(code);
          size = 0;
          return emailAtSignOrDot
        }
        if (code === 62) {
          // Exit, then change the token type.
          effects.exit('autolinkProtocol').type = 'autolinkEmail';
          effects.enter('autolinkMarker');
          effects.consume(code);
          effects.exit('autolinkMarker');
          effects.exit('autolink');
          return ok
        }
        return emailValue(code)
      }

      /**
       * In label, where `.` and `>` are *not* allowed.
       *
       * Though, this is also used in `emailLabel` to parse other values.
       *
       * ```markdown
       * > | a<user.name@ex-ample.com>b
       *                    ^
       * ```
       *
       * @type {State}
       */
      function emailValue(code) {
        // ASCII alphanumeric or `-`.
        if ((code === 45 || asciiAlphanumeric$5(code)) && size++ < 63) {
          const next = code === 45 ? emailValue : emailLabel;
          effects.consume(code);
          return next
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const blankLine = {
      tokenize: tokenizeBlankLine,
      partial: true
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeBlankLine(effects, ok, nok) {
      return start

      /**
       * Start of blank line.
       *
       * > 👉 **Note**: `␠` represents a space character.
       *
       * ```markdown
       * > | ␠␠␊
       *     ^
       * > | ␊
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        return markdownSpace$a(code)
          ? factorySpace$i(effects, after, 'linePrefix')(code)
          : after(code)
      }

      /**
       * At eof/eol, after optional whitespace.
       *
       * > 👉 **Note**: `␠` represents a space character.
       *
       * ```markdown
       * > | ␠␠␊
       *       ^
       * > | ␊
       *     ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        return code === null || markdownLineEnding$k(code) ? ok(code) : nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Exiter} Exiter
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const blockQuote$2 = {
      name: 'blockQuote',
      tokenize: tokenizeBlockQuoteStart$1,
      continuation: {
        tokenize: tokenizeBlockQuoteContinuation$1
      },
      exit: exit$2
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeBlockQuoteStart$1(effects, ok, nok) {
      const self = this;
      return start

      /**
       * Start of block quote.
       *
       * ```markdown
       * > | > a
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        if (code === 62) {
          const state = self.containerState;
          if (!state.open) {
            effects.enter('blockQuote', {
              _container: true
            });
            state.open = true;
          }
          effects.enter('blockQuotePrefix');
          effects.enter('blockQuoteMarker');
          effects.consume(code);
          effects.exit('blockQuoteMarker');
          return after
        }
        return nok(code)
      }

      /**
       * After `>`, before optional whitespace.
       *
       * ```markdown
       * > | > a
       *      ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        if (markdownSpace$a(code)) {
          effects.enter('blockQuotePrefixWhitespace');
          effects.consume(code);
          effects.exit('blockQuotePrefixWhitespace');
          effects.exit('blockQuotePrefix');
          return ok
        }
        effects.exit('blockQuotePrefix');
        return ok(code)
      }
    }

    /**
     * Start of block quote continuation.
     *
     * ```markdown
     *   | > a
     * > | > b
     *     ^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeBlockQuoteContinuation$1(effects, ok, nok) {
      const self = this;
      return contStart

      /**
       * Start of block quote continuation.
       *
       * Also used to parse the first block quote opening.
       *
       * ```markdown
       *   | > a
       * > | > b
       *     ^
       * ```
       *
       * @type {State}
       */
      function contStart(code) {
        if (markdownSpace$a(code)) {
          // Always populated by defaults.

          return factorySpace$i(
            effects,
            contBefore,
            'linePrefix',
            self.parser.constructs.disable.null.includes('codeIndented')
              ? undefined
              : 4
          )(code)
        }
        return contBefore(code)
      }

      /**
       * At `>`, after optional whitespace.
       *
       * Also used to parse the first block quote opening.
       *
       * ```markdown
       *   | > a
       * > | > b
       *     ^
       * ```
       *
       * @type {State}
       */
      function contBefore(code) {
        return effects.attempt(blockQuote$2, ok, nok)(code)
      }
    }

    /** @type {Exiter} */
    function exit$2(effects) {
      effects.exit('blockQuote');
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const characterEscape$2 = {
      name: 'characterEscape',
      tokenize: tokenizeCharacterEscape$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeCharacterEscape$1(effects, ok, nok) {
      return start

      /**
       * Start of character escape.
       *
       * ```markdown
       * > | a\*b
       *      ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('characterEscape');
        effects.enter('escapeMarker');
        effects.consume(code);
        effects.exit('escapeMarker');
        return inside
      }

      /**
       * After `\`, at punctuation.
       *
       * ```markdown
       * > | a\*b
       *       ^
       * ```
       *
       * @type {State}
       */
      function inside(code) {
        // ASCII punctuation.
        if (asciiPunctuation$2(code)) {
          effects.enter('characterEscapeValue');
          effects.consume(code);
          effects.exit('characterEscapeValue');
          effects.exit('characterEscape');
          return ok
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const characterReference$2 = {
      name: 'characterReference',
      tokenize: tokenizeCharacterReference$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeCharacterReference$1(effects, ok, nok) {
      const self = this;
      let size = 0;
      /** @type {number} */
      let max;
      /** @type {(code: Code) => boolean} */
      let test;
      return start

      /**
       * Start of character reference.
       *
       * ```markdown
       * > | a&amp;b
       *      ^
       * > | a&#123;b
       *      ^
       * > | a&#x9;b
       *      ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('characterReference');
        effects.enter('characterReferenceMarker');
        effects.consume(code);
        effects.exit('characterReferenceMarker');
        return open
      }

      /**
       * After `&`, at `#` for numeric references or alphanumeric for named
       * references.
       *
       * ```markdown
       * > | a&amp;b
       *       ^
       * > | a&#123;b
       *       ^
       * > | a&#x9;b
       *       ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (code === 35) {
          effects.enter('characterReferenceMarkerNumeric');
          effects.consume(code);
          effects.exit('characterReferenceMarkerNumeric');
          return numeric
        }
        effects.enter('characterReferenceValue');
        max = 31;
        test = asciiAlphanumeric$5;
        return value(code)
      }

      /**
       * After `#`, at `x` for hexadecimals or digit for decimals.
       *
       * ```markdown
       * > | a&#123;b
       *        ^
       * > | a&#x9;b
       *        ^
       * ```
       *
       * @type {State}
       */
      function numeric(code) {
        if (code === 88 || code === 120) {
          effects.enter('characterReferenceMarkerHexadecimal');
          effects.consume(code);
          effects.exit('characterReferenceMarkerHexadecimal');
          effects.enter('characterReferenceValue');
          max = 6;
          test = asciiHexDigit$2;
          return value
        }
        effects.enter('characterReferenceValue');
        max = 7;
        test = asciiDigit$3;
        return value(code)
      }

      /**
       * After markers (`&#x`, `&#`, or `&`), in value, before `;`.
       *
       * The character reference kind defines what and how many characters are
       * allowed.
       *
       * ```markdown
       * > | a&amp;b
       *       ^^^
       * > | a&#123;b
       *        ^^^
       * > | a&#x9;b
       *         ^
       * ```
       *
       * @type {State}
       */
      function value(code) {
        if (code === 59 && size) {
          const token = effects.exit('characterReferenceValue');
          if (
            test === asciiAlphanumeric$5 &&
            !decodeNamedCharacterReference(self.sliceSerialize(token))
          ) {
            return nok(code)
          }

          // To do: `markdown-rs` uses a different name:
          // `CharacterReferenceMarkerSemi`.
          effects.enter('characterReferenceMarker');
          effects.consume(code);
          effects.exit('characterReferenceMarker');
          effects.exit('characterReference');
          return ok
        }
        if (test(code) && size++ < max) {
          effects.consume(code);
          return value
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const nonLazyContinuation = {
      tokenize: tokenizeNonLazyContinuation,
      partial: true
    };

    /** @type {Construct} */
    const codeFenced$2 = {
      name: 'codeFenced',
      tokenize: tokenizeCodeFenced$1,
      concrete: true
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeCodeFenced$1(effects, ok, nok) {
      const self = this;
      /** @type {Construct} */
      const closeStart = {
        tokenize: tokenizeCloseStart,
        partial: true
      };
      let initialPrefix = 0;
      let sizeOpen = 0;
      /** @type {NonNullable<Code>} */
      let marker;
      return start

      /**
       * Start of code.
       *
       * ```markdown
       * > | ~~~js
       *     ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // To do: parse whitespace like `markdown-rs`.
        return beforeSequenceOpen(code)
      }

      /**
       * In opening fence, after prefix, at sequence.
       *
       * ```markdown
       * > | ~~~js
       *     ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function beforeSequenceOpen(code) {
        const tail = self.events[self.events.length - 1];
        initialPrefix =
          tail && tail[1].type === 'linePrefix'
            ? tail[2].sliceSerialize(tail[1], true).length
            : 0;
        marker = code;
        effects.enter('codeFenced');
        effects.enter('codeFencedFence');
        effects.enter('codeFencedFenceSequence');
        return sequenceOpen(code)
      }

      /**
       * In opening fence sequence.
       *
       * ```markdown
       * > | ~~~js
       *      ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function sequenceOpen(code) {
        if (code === marker) {
          sizeOpen++;
          effects.consume(code);
          return sequenceOpen
        }
        if (sizeOpen < 3) {
          return nok(code)
        }
        effects.exit('codeFencedFenceSequence');
        return markdownSpace$a(code)
          ? factorySpace$i(effects, infoBefore, 'whitespace')(code)
          : infoBefore(code)
      }

      /**
       * In opening fence, after the sequence (and optional whitespace), before info.
       *
       * ```markdown
       * > | ~~~js
       *        ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function infoBefore(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('codeFencedFence');
          return self.interrupt
            ? ok(code)
            : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
        }
        effects.enter('codeFencedFenceInfo');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return info(code)
      }

      /**
       * In info.
       *
       * ```markdown
       * > | ~~~js
       *        ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function info(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceInfo');
          return infoBefore(code)
        }
        if (markdownSpace$a(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceInfo');
          return factorySpace$i(effects, metaBefore, 'whitespace')(code)
        }
        if (code === 96 && code === marker) {
          return nok(code)
        }
        effects.consume(code);
        return info
      }

      /**
       * In opening fence, after info and whitespace, before meta.
       *
       * ```markdown
       * > | ~~~js eval
       *           ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function metaBefore(code) {
        if (code === null || markdownLineEnding$k(code)) {
          return infoBefore(code)
        }
        effects.enter('codeFencedFenceMeta');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return meta(code)
      }

      /**
       * In meta.
       *
       * ```markdown
       * > | ~~~js eval
       *           ^
       *   | alert(1)
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function meta(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceMeta');
          return infoBefore(code)
        }
        if (code === 96 && code === marker) {
          return nok(code)
        }
        effects.consume(code);
        return meta
      }

      /**
       * At eol/eof in code, before a non-lazy closing fence or content.
       *
       * ```markdown
       * > | ~~~js
       *          ^
       * > | alert(1)
       *             ^
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function atNonLazyBreak(code) {
        return effects.attempt(closeStart, after, contentBefore)(code)
      }

      /**
       * Before code content, not a closing fence, at eol.
       *
       * ```markdown
       *   | ~~~js
       * > | alert(1)
       *             ^
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function contentBefore(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return contentStart
      }

      /**
       * Before code content, not a closing fence.
       *
       * ```markdown
       *   | ~~~js
       * > | alert(1)
       *     ^
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function contentStart(code) {
        return initialPrefix > 0 && markdownSpace$a(code)
          ? factorySpace$i(
              effects,
              beforeContentChunk,
              'linePrefix',
              initialPrefix + 1
            )(code)
          : beforeContentChunk(code)
      }

      /**
       * Before code content, after optional prefix.
       *
       * ```markdown
       *   | ~~~js
       * > | alert(1)
       *     ^
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function beforeContentChunk(code) {
        if (code === null || markdownLineEnding$k(code)) {
          return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
        }
        effects.enter('codeFlowValue');
        return contentChunk(code)
      }

      /**
       * In code content.
       *
       * ```markdown
       *   | ~~~js
       * > | alert(1)
       *     ^^^^^^^^
       *   | ~~~
       * ```
       *
       * @type {State}
       */
      function contentChunk(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('codeFlowValue');
          return beforeContentChunk(code)
        }
        effects.consume(code);
        return contentChunk
      }

      /**
       * After code.
       *
       * ```markdown
       *   | ~~~js
       *   | alert(1)
       * > | ~~~
       *        ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        effects.exit('codeFenced');
        return ok(code)
      }

      /**
       * @this {TokenizeContext}
       * @type {Tokenizer}
       */
      function tokenizeCloseStart(effects, ok, nok) {
        let size = 0;
        return startBefore

        /**
         *
         *
         * @type {State}
         */
        function startBefore(code) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return start
        }

        /**
         * Before closing fence, at optional whitespace.
         *
         * ```markdown
         *   | ~~~js
         *   | alert(1)
         * > | ~~~
         *     ^
         * ```
         *
         * @type {State}
         */
        function start(code) {
          // Always populated by defaults.

          // To do: `enter` here or in next state?
          effects.enter('codeFencedFence');
          return markdownSpace$a(code)
            ? factorySpace$i(
                effects,
                beforeSequenceClose,
                'linePrefix',
                self.parser.constructs.disable.null.includes('codeIndented')
                  ? undefined
                  : 4
              )(code)
            : beforeSequenceClose(code)
        }

        /**
         * In closing fence, after optional whitespace, at sequence.
         *
         * ```markdown
         *   | ~~~js
         *   | alert(1)
         * > | ~~~
         *     ^
         * ```
         *
         * @type {State}
         */
        function beforeSequenceClose(code) {
          if (code === marker) {
            effects.enter('codeFencedFenceSequence');
            return sequenceClose(code)
          }
          return nok(code)
        }

        /**
         * In closing fence sequence.
         *
         * ```markdown
         *   | ~~~js
         *   | alert(1)
         * > | ~~~
         *     ^
         * ```
         *
         * @type {State}
         */
        function sequenceClose(code) {
          if (code === marker) {
            size++;
            effects.consume(code);
            return sequenceClose
          }
          if (size >= sizeOpen) {
            effects.exit('codeFencedFenceSequence');
            return markdownSpace$a(code)
              ? factorySpace$i(effects, sequenceCloseAfter, 'whitespace')(code)
              : sequenceCloseAfter(code)
          }
          return nok(code)
        }

        /**
         * After closing fence sequence, after optional whitespace.
         *
         * ```markdown
         *   | ~~~js
         *   | alert(1)
         * > | ~~~
         *        ^
         * ```
         *
         * @type {State}
         */
        function sequenceCloseAfter(code) {
          if (code === null || markdownLineEnding$k(code)) {
            effects.exit('codeFencedFence');
            return ok(code)
          }
          return nok(code)
        }
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeNonLazyContinuation(effects, ok, nok) {
      const self = this;
      return start

      /**
       *
       *
       * @type {State}
       */
      function start(code) {
        if (code === null) {
          return nok(code)
        }
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineStart
      }

      /**
       *
       *
       * @type {State}
       */
      function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const codeIndented$2 = {
      name: 'codeIndented',
      tokenize: tokenizeCodeIndented$1
    };

    /** @type {Construct} */
    const furtherStart = {
      tokenize: tokenizeFurtherStart,
      partial: true
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeCodeIndented$1(effects, ok, nok) {
      const self = this;
      return start

      /**
       * Start of code (indented).
       *
       * > **Parsing note**: it is not needed to check if this first line is a
       * > filled line (that it has a non-whitespace character), because blank lines
       * > are parsed already, so we never run into that.
       *
       * ```markdown
       * > |     aaa
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // To do: manually check if interrupting like `markdown-rs`.

        effects.enter('codeIndented');
        // To do: use an improved `space_or_tab` function like `markdown-rs`,
        // so that we can drop the next state.
        return factorySpace$i(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
      }

      /**
       * At start, after 1 or 4 spaces.
       *
       * ```markdown
       * > |     aaa
       *         ^
       * ```
       *
       * @type {State}
       */
      function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail &&
          tail[1].type === 'linePrefix' &&
          tail[2].sliceSerialize(tail[1], true).length >= 4
          ? atBreak(code)
          : nok(code)
      }

      /**
       * At a break.
       *
       * ```markdown
       * > |     aaa
       *         ^  ^
       * ```
       *
       * @type {State}
       */
      function atBreak(code) {
        if (code === null) {
          return after(code)
        }
        if (markdownLineEnding$k(code)) {
          return effects.attempt(furtherStart, atBreak, after)(code)
        }
        effects.enter('codeFlowValue');
        return inside(code)
      }

      /**
       * In code content.
       *
       * ```markdown
       * > |     aaa
       *         ^^^^
       * ```
       *
       * @type {State}
       */
      function inside(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('codeFlowValue');
          return atBreak(code)
        }
        effects.consume(code);
        return inside
      }

      /** @type {State} */
      function after(code) {
        effects.exit('codeIndented');
        // To do: allow interrupting like `markdown-rs`.
        // Feel free to interrupt.
        // tokenizer.interrupt = false
        return ok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeFurtherStart(effects, ok, nok) {
      const self = this;
      return furtherStart

      /**
       * At eol, trying to parse another indent.
       *
       * ```markdown
       * > |     aaa
       *            ^
       *   |     bbb
       * ```
       *
       * @type {State}
       */
      function furtherStart(code) {
        // To do: improve `lazy` / `pierce` handling.
        // If this is a lazy line, it can’t be code.
        if (self.parser.lazy[self.now().line]) {
          return nok(code)
        }
        if (markdownLineEnding$k(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return furtherStart
        }

        // To do: the code here in `micromark-js` is a bit different from
        // `markdown-rs` because there it can attempt spaces.
        // We can’t yet.
        //
        // To do: use an improved `space_or_tab` function like `markdown-rs`,
        // so that we can drop the next state.
        return factorySpace$i(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
      }

      /**
       * At start, after 1 or 4 spaces.
       *
       * ```markdown
       * > |     aaa
       *         ^
       * ```
       *
       * @type {State}
       */
      function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail &&
          tail[1].type === 'linePrefix' &&
          tail[2].sliceSerialize(tail[1], true).length >= 4
          ? ok(code)
          : markdownLineEnding$k(code)
          ? furtherStart(code)
          : nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Previous} Previous
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const codeText$2 = {
      name: 'codeText',
      tokenize: tokenizeCodeText$1,
      resolve: resolveCodeText$1,
      previous: previous$2
    };

    // To do: next major: don’t resolve, like `markdown-rs`.
    /** @type {Resolver} */
    function resolveCodeText$1(events) {
      let tailExitIndex = events.length - 4;
      let headEnterIndex = 3;
      /** @type {number} */
      let index;
      /** @type {number | undefined} */
      let enter;

      // If we start and end with an EOL or a space.
      if (
        (events[headEnterIndex][1].type === 'lineEnding' ||
          events[headEnterIndex][1].type === 'space') &&
        (events[tailExitIndex][1].type === 'lineEnding' ||
          events[tailExitIndex][1].type === 'space')
      ) {
        index = headEnterIndex;

        // And we have data.
        while (++index < tailExitIndex) {
          if (events[index][1].type === 'codeTextData') {
            // Then we have padding.
            events[headEnterIndex][1].type = 'codeTextPadding';
            events[tailExitIndex][1].type = 'codeTextPadding';
            headEnterIndex += 2;
            tailExitIndex -= 2;
            break
          }
        }
      }

      // Merge adjacent spaces and data.
      index = headEnterIndex - 1;
      tailExitIndex++;
      while (++index <= tailExitIndex) {
        if (enter === undefined) {
          if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
            enter = index;
          }
        } else if (
          index === tailExitIndex ||
          events[index][1].type === 'lineEnding'
        ) {
          events[enter][1].type = 'codeTextData';
          if (index !== enter + 2) {
            events[enter][1].end = events[index - 1][1].end;
            events.splice(enter + 2, index - enter - 2);
            tailExitIndex -= index - enter - 2;
            index = enter + 2;
          }
          enter = undefined;
        }
      }
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Previous}
     */
    function previous$2(code) {
      // If there is a previous code, there will always be a tail.
      return (
        code !== 96 ||
        this.events[this.events.length - 1][1].type === 'characterEscape'
      )
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeCodeText$1(effects, ok, nok) {
      let sizeOpen = 0;
      /** @type {number} */
      let size;
      /** @type {Token} */
      let token;
      return start

      /**
       * Start of code (text).
       *
       * ```markdown
       * > | `a`
       *     ^
       * > | \`a`
       *      ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('codeText');
        effects.enter('codeTextSequence');
        return sequenceOpen(code)
      }

      /**
       * In opening sequence.
       *
       * ```markdown
       * > | `a`
       *     ^
       * ```
       *
       * @type {State}
       */
      function sequenceOpen(code) {
        if (code === 96) {
          effects.consume(code);
          sizeOpen++;
          return sequenceOpen
        }
        effects.exit('codeTextSequence');
        return between(code)
      }

      /**
       * Between something and something else.
       *
       * ```markdown
       * > | `a`
       *      ^^
       * ```
       *
       * @type {State}
       */
      function between(code) {
        // EOF.
        if (code === null) {
          return nok(code)
        }

        // To do: next major: don’t do spaces in resolve, but when compiling,
        // like `markdown-rs`.
        // Tabs don’t work, and virtual spaces don’t make sense.
        if (code === 32) {
          effects.enter('space');
          effects.consume(code);
          effects.exit('space');
          return between
        }

        // Closing fence? Could also be data.
        if (code === 96) {
          token = effects.enter('codeTextSequence');
          size = 0;
          return sequenceClose(code)
        }
        if (markdownLineEnding$k(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return between
        }

        // Data.
        effects.enter('codeTextData');
        return data(code)
      }

      /**
       * In data.
       *
       * ```markdown
       * > | `a`
       *      ^
       * ```
       *
       * @type {State}
       */
      function data(code) {
        if (
          code === null ||
          code === 32 ||
          code === 96 ||
          markdownLineEnding$k(code)
        ) {
          effects.exit('codeTextData');
          return between(code)
        }
        effects.consume(code);
        return data
      }

      /**
       * In closing sequence.
       *
       * ```markdown
       * > | `a`
       *       ^
       * ```
       *
       * @type {State}
       */
      function sequenceClose(code) {
        // More.
        if (code === 96) {
          effects.consume(code);
          size++;
          return sequenceClose
        }

        // Done!
        if (size === sizeOpen) {
          effects.exit('codeTextSequence');
          effects.exit('codeText');
          return ok(code)
        }

        // More or less accents: mark as data.
        token.type = 'codeTextData';
        return data(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Chunk} Chunk
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Token} Token
     */
    /**
     * Tokenize subcontent.
     *
     * @param {Array<Event>} events
     *   List of events.
     * @returns {boolean}
     *   Whether subtokens were found.
     */ // eslint-disable-next-line complexity
    function subtokenize$3(events) {
      /** @type {Record<string, number>} */
      const jumps = {};
      let index = -1;
      /** @type {Event} */
      let event;
      /** @type {number | undefined} */
      let lineIndex;
      /** @type {number} */
      let otherIndex;
      /** @type {Event} */
      let otherEvent;
      /** @type {Array<Event>} */
      let parameters;
      /** @type {Array<Event>} */
      let subevents;
      /** @type {boolean | undefined} */
      let more;
      while (++index < events.length) {
        while (index in jumps) {
          index = jumps[index];
        }
        event = events[index];

        // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.
        if (
          index &&
          event[1].type === 'chunkFlow' &&
          events[index - 1][1].type === 'listItemPrefix'
        ) {
          subevents = event[1]._tokenizer.events;
          otherIndex = 0;
          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'lineEndingBlank'
          ) {
            otherIndex += 2;
          }
          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'content'
          ) {
            while (++otherIndex < subevents.length) {
              if (subevents[otherIndex][1].type === 'content') {
                break
              }
              if (subevents[otherIndex][1].type === 'chunkText') {
                subevents[otherIndex][1]._isInFirstContentOfListItem = true;
                otherIndex++;
              }
            }
          }
        }

        // Enter.
        if (event[0] === 'enter') {
          if (event[1].contentType) {
            Object.assign(jumps, subcontent$1(events, index));
            index = jumps[index];
            more = true;
          }
        }
        // Exit.
        else if (event[1]._container) {
          otherIndex = index;
          lineIndex = undefined;
          while (otherIndex--) {
            otherEvent = events[otherIndex];
            if (
              otherEvent[1].type === 'lineEnding' ||
              otherEvent[1].type === 'lineEndingBlank'
            ) {
              if (otherEvent[0] === 'enter') {
                if (lineIndex) {
                  events[lineIndex][1].type = 'lineEndingBlank';
                }
                otherEvent[1].type = 'lineEnding';
                lineIndex = otherIndex;
              }
            } else {
              break
            }
          }
          if (lineIndex) {
            // Fix position.
            event[1].end = Object.assign({}, events[lineIndex][1].start);

            // Switch container exit w/ line endings.
            parameters = events.slice(lineIndex, index);
            parameters.unshift(event);
            splice$3(events, lineIndex, index - lineIndex + 1, parameters);
          }
        }
      }
      return !more
    }

    /**
     * Tokenize embedded tokens.
     *
     * @param {Array<Event>} events
     * @param {number} eventIndex
     * @returns {Record<string, number>}
     */
    function subcontent$1(events, eventIndex) {
      const token = events[eventIndex][1];
      const context = events[eventIndex][2];
      let startPosition = eventIndex - 1;
      /** @type {Array<number>} */
      const startPositions = [];
      const tokenizer =
        token._tokenizer || context.parser[token.contentType](token.start);
      const childEvents = tokenizer.events;
      /** @type {Array<[number, number]>} */
      const jumps = [];
      /** @type {Record<string, number>} */
      const gaps = {};
      /** @type {Array<Chunk>} */
      let stream;
      /** @type {Token | undefined} */
      let previous;
      let index = -1;
      /** @type {Token | undefined} */
      let current = token;
      let adjust = 0;
      let start = 0;
      const breaks = [start];

      // Loop forward through the linked tokens to pass them in order to the
      // subtokenizer.
      while (current) {
        // Find the position of the event for this token.
        while (events[++startPosition][1] !== current) {
          // Empty.
        }
        startPositions.push(startPosition);
        if (!current._tokenizer) {
          stream = context.sliceStream(current);
          if (!current.next) {
            stream.push(null);
          }
          if (previous) {
            tokenizer.defineSkip(current.start);
          }
          if (current._isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = true;
          }
          tokenizer.write(stream);
          if (current._isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = undefined;
          }
        }

        // Unravel the next token.
        previous = current;
        current = current.next;
      }

      // Now, loop back through all events (and linked tokens), to figure out which
      // parts belong where.
      current = token;
      while (++index < childEvents.length) {
        if (
          // Find a void token that includes a break.
          childEvents[index][0] === 'exit' &&
          childEvents[index - 1][0] === 'enter' &&
          childEvents[index][1].type === childEvents[index - 1][1].type &&
          childEvents[index][1].start.line !== childEvents[index][1].end.line
        ) {
          start = index + 1;
          breaks.push(start);
          // Help GC.
          current._tokenizer = undefined;
          current.previous = undefined;
          current = current.next;
        }
      }

      // Help GC.
      tokenizer.events = [];

      // If there’s one more token (which is the cases for lines that end in an
      // EOF), that’s perfect: the last point we found starts it.
      // If there isn’t then make sure any remaining content is added to it.
      if (current) {
        // Help GC.
        current._tokenizer = undefined;
        current.previous = undefined;
      } else {
        breaks.pop();
      }

      // Now splice the events from the subtokenizer into the current events,
      // moving back to front so that splice indices aren’t affected.
      index = breaks.length;
      while (index--) {
        const slice = childEvents.slice(breaks[index], breaks[index + 1]);
        const start = startPositions.pop();
        jumps.unshift([start, start + slice.length - 1]);
        splice$3(events, start, 2, slice);
      }
      index = -1;
      while (++index < jumps.length) {
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
      }
      return gaps
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /**
     * No name because it must not be turned off.
     * @type {Construct}
     */
    const content$4 = {
      tokenize: tokenizeContent$1,
      resolve: resolveContent$1
    };

    /** @type {Construct} */
    const continuationConstruct$1 = {
      tokenize: tokenizeContinuation$1,
      partial: true
    };

    /**
     * Content is transparent: it’s parsed right now. That way, definitions are also
     * parsed right now: before text in paragraphs (specifically, media) are parsed.
     *
     * @type {Resolver}
     */
    function resolveContent$1(events) {
      subtokenize$3(events);
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeContent$1(effects, ok) {
      /** @type {Token | undefined} */
      let previous;
      return chunkStart

      /**
       * Before a content chunk.
       *
       * ```markdown
       * > | abc
       *     ^
       * ```
       *
       * @type {State}
       */
      function chunkStart(code) {
        effects.enter('content');
        previous = effects.enter('chunkContent', {
          contentType: 'content'
        });
        return chunkInside(code)
      }

      /**
       * In a content chunk.
       *
       * ```markdown
       * > | abc
       *     ^^^
       * ```
       *
       * @type {State}
       */
      function chunkInside(code) {
        if (code === null) {
          return contentEnd(code)
        }

        // To do: in `markdown-rs`, each line is parsed on its own, and everything
        // is stitched together resolving.
        if (markdownLineEnding$k(code)) {
          return effects.check(
            continuationConstruct$1,
            contentContinue,
            contentEnd
          )(code)
        }

        // Data.
        effects.consume(code);
        return chunkInside
      }

      /**
       *
       *
       * @type {State}
       */
      function contentEnd(code) {
        effects.exit('chunkContent');
        effects.exit('content');
        return ok(code)
      }

      /**
       *
       *
       * @type {State}
       */
      function contentContinue(code) {
        effects.consume(code);
        effects.exit('chunkContent');
        previous.next = effects.enter('chunkContent', {
          contentType: 'content',
          previous
        });
        previous = previous.next;
        return chunkInside
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeContinuation$1(effects, ok, nok) {
      const self = this;
      return startLookahead

      /**
       *
       *
       * @type {State}
       */
      function startLookahead(code) {
        effects.exit('chunkContent');
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$i(effects, prefixed, 'linePrefix')
      }

      /**
       *
       *
       * @type {State}
       */
      function prefixed(code) {
        if (code === null || markdownLineEnding$k(code)) {
          return nok(code)
        }

        // Always populated by defaults.

        const tail = self.events[self.events.length - 1];
        if (
          !self.parser.constructs.disable.null.includes('codeIndented') &&
          tail &&
          tail[1].type === 'linePrefix' &&
          tail[2].sliceSerialize(tail[1], true).length >= 4
        ) {
          return ok(code)
        }
        return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenType} TokenType
     */
    /**
     * Parse destinations.
     *
     * ###### Examples
     *
     * ```markdown
     * <a>
     * <a\>b>
     * <a b>
     * <a)>
     * a
     * a\)b
     * a(b)c
     * a(b)
     * ```
     *
     * @param {Effects} effects
     *   Context.
     * @param {State} ok
     *   State switched to when successful.
     * @param {State} nok
     *   State switched to when unsuccessful.
     * @param {TokenType} type
     *   Type for whole (`<a>` or `b`).
     * @param {TokenType} literalType
     *   Type when enclosed (`<a>`).
     * @param {TokenType} literalMarkerType
     *   Type for enclosing (`<` and `>`).
     * @param {TokenType} rawType
     *   Type when not enclosed (`b`).
     * @param {TokenType} stringType
     *   Type for the value (`a` or `b`).
     * @param {number | undefined} [max=Infinity]
     *   Depth of nested parens (inclusive).
     * @returns {State}
     *   Start state.
     */ // eslint-disable-next-line max-params
    function factoryDestination$3(
      effects,
      ok,
      nok,
      type,
      literalType,
      literalMarkerType,
      rawType,
      stringType,
      max
    ) {
      const limit = max || Number.POSITIVE_INFINITY;
      let balance = 0;
      return start

      /**
       * Start of destination.
       *
       * ```markdown
       * > | <aa>
       *     ^
       * > | aa
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        if (code === 60) {
          effects.enter(type);
          effects.enter(literalType);
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          return enclosedBefore
        }

        // ASCII control, space, closing paren.
        if (code === null || code === 32 || code === 41 || asciiControl$3(code)) {
          return nok(code)
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return raw(code)
      }

      /**
       * After `<`, at an enclosed destination.
       *
       * ```markdown
       * > | <aa>
       *      ^
       * ```
       *
       * @type {State}
       */
      function enclosedBefore(code) {
        if (code === 62) {
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          effects.exit(literalType);
          effects.exit(type);
          return ok
        }
        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return enclosed(code)
      }

      /**
       * In enclosed destination.
       *
       * ```markdown
       * > | <aa>
       *      ^
       * ```
       *
       * @type {State}
       */
      function enclosed(code) {
        if (code === 62) {
          effects.exit('chunkString');
          effects.exit(stringType);
          return enclosedBefore(code)
        }
        if (code === null || code === 60 || markdownLineEnding$k(code)) {
          return nok(code)
        }
        effects.consume(code);
        return code === 92 ? enclosedEscape : enclosed
      }

      /**
       * After `\`, at a special character.
       *
       * ```markdown
       * > | <a\*a>
       *        ^
       * ```
       *
       * @type {State}
       */
      function enclosedEscape(code) {
        if (code === 60 || code === 62 || code === 92) {
          effects.consume(code);
          return enclosed
        }
        return enclosed(code)
      }

      /**
       * In raw destination.
       *
       * ```markdown
       * > | aa
       *     ^
       * ```
       *
       * @type {State}
       */
      function raw(code) {
        if (
          !balance &&
          (code === null || code === 41 || markdownLineEndingOrSpace$9(code))
        ) {
          effects.exit('chunkString');
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok(code)
        }
        if (balance < limit && code === 40) {
          effects.consume(code);
          balance++;
          return raw
        }
        if (code === 41) {
          effects.consume(code);
          balance--;
          return raw
        }

        // ASCII control (but *not* `\0`) and space and `(`.
        // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
        // doesn’t.
        if (code === null || code === 32 || code === 40 || asciiControl$3(code)) {
          return nok(code)
        }
        effects.consume(code);
        return code === 92 ? rawEscape : raw
      }

      /**
       * After `\`, at special character.
       *
       * ```markdown
       * > | a\*a
       *       ^
       * ```
       *
       * @type {State}
       */
      function rawEscape(code) {
        if (code === 40 || code === 41 || code === 92) {
          effects.consume(code);
          return raw
        }
        return raw(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').TokenType} TokenType
     */
    /**
     * Parse labels.
     *
     * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.
     *
     * ###### Examples
     *
     * ```markdown
     * [a]
     * [a
     * b]
     * [a\]b]
     * ```
     *
     * @this {TokenizeContext}
     *   Tokenize context.
     * @param {Effects} effects
     *   Context.
     * @param {State} ok
     *   State switched to when successful.
     * @param {State} nok
     *   State switched to when unsuccessful.
     * @param {TokenType} type
     *   Type of the whole label (`[a]`).
     * @param {TokenType} markerType
     *   Type for the markers (`[` and `]`).
     * @param {TokenType} stringType
     *   Type for the identifier (`a`).
     * @returns {State}
     *   Start state.
     */ // eslint-disable-next-line max-params
    function factoryLabel$3(effects, ok, nok, type, markerType, stringType) {
      const self = this;
      let size = 0;
      /** @type {boolean} */
      let seen;
      return start

      /**
       * Start of label.
       *
       * ```markdown
       * > | [a]
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak
      }

      /**
       * In label, at something, before something else.
       *
       * ```markdown
       * > | [a]
       *      ^
       * ```
       *
       * @type {State}
       */
      function atBreak(code) {
        if (
          size > 999 ||
          code === null ||
          code === 91 ||
          (code === 93 && !seen) ||
          // To do: remove in the future once we’ve switched from
          // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
          // which doesn’t need this.
          // Hidden footnotes hook.
          /* c8 ignore next 3 */
          (code === 94 &&
            !size &&
            '_hiddenFootnoteSupport' in self.parser.constructs)
        ) {
          return nok(code)
        }
        if (code === 93) {
          effects.exit(stringType);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }

        // To do: indent? Link chunks and EOLs together?
        if (markdownLineEnding$k(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return atBreak
        }
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return labelInside(code)
      }

      /**
       * In label, in text.
       *
       * ```markdown
       * > | [a]
       *      ^
       * ```
       *
       * @type {State}
       */
      function labelInside(code) {
        if (
          code === null ||
          code === 91 ||
          code === 93 ||
          markdownLineEnding$k(code) ||
          size++ > 999
        ) {
          effects.exit('chunkString');
          return atBreak(code)
        }
        effects.consume(code);
        if (!seen) seen = !markdownSpace$a(code);
        return code === 92 ? labelEscape : labelInside
      }

      /**
       * After `\`, at a special character.
       *
       * ```markdown
       * > | [a\*a]
       *        ^
       * ```
       *
       * @type {State}
       */
      function labelEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
          effects.consume(code);
          size++;
          return labelInside
        }
        return labelInside(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenType} TokenType
     */
    /**
     * Parse titles.
     *
     * ###### Examples
     *
     * ```markdown
     * "a"
     * 'b'
     * (c)
     * "a
     * b"
     * 'a
     *     b'
     * (a\)b)
     * ```
     *
     * @param {Effects} effects
     *   Context.
     * @param {State} ok
     *   State switched to when successful.
     * @param {State} nok
     *   State switched to when unsuccessful.
     * @param {TokenType} type
     *   Type of the whole title (`"a"`, `'b'`, `(c)`).
     * @param {TokenType} markerType
     *   Type for the markers (`"`, `'`, `(`, and `)`).
     * @param {TokenType} stringType
     *   Type for the value (`a`).
     * @returns {State}
     *   Start state.
     */ // eslint-disable-next-line max-params
    function factoryTitle$3(effects, ok, nok, type, markerType, stringType) {
      /** @type {NonNullable<Code>} */
      let marker;
      return start

      /**
       * Start of title.
       *
       * ```markdown
       * > | "a"
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        if (code === 34 || code === 39 || code === 40) {
          effects.enter(type);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          marker = code === 40 ? 41 : code;
          return begin
        }
        return nok(code)
      }

      /**
       * After opening marker.
       *
       * This is also used at the closing marker.
       *
       * ```markdown
       * > | "a"
       *      ^
       * ```
       *
       * @type {State}
       */
      function begin(code) {
        if (code === marker) {
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }
        effects.enter(stringType);
        return atBreak(code)
      }

      /**
       * At something, before something else.
       *
       * ```markdown
       * > | "a"
       *      ^
       * ```
       *
       * @type {State}
       */
      function atBreak(code) {
        if (code === marker) {
          effects.exit(stringType);
          return begin(marker)
        }
        if (code === null) {
          return nok(code)
        }

        // Note: blank lines can’t exist in content.
        if (markdownLineEnding$k(code)) {
          // To do: use `space_or_tab_eol_with_options`, connect.
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return factorySpace$i(effects, atBreak, 'linePrefix')
        }
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return inside(code)
      }

      /**
       *
       *
       * @type {State}
       */
      function inside(code) {
        if (code === marker || code === null || markdownLineEnding$k(code)) {
          effects.exit('chunkString');
          return atBreak(code)
        }
        effects.consume(code);
        return code === 92 ? escape : inside
      }

      /**
       * After `\`, at a special character.
       *
       * ```markdown
       * > | "a\*b"
       *      ^
       * ```
       *
       * @type {State}
       */
      function escape(code) {
        if (code === marker || code === 92) {
          effects.consume(code);
          return inside
        }
        return inside(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').State} State
     */
    /**
     * Parse spaces and tabs.
     *
     * There is no `nok` parameter:
     *
     * *   line endings or spaces in markdown are often optional, in which case this
     *     factory can be used and `ok` will be switched to whether spaces were found
     *     or not
     * *   one line ending or space can be detected with
     *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`
     *
     * @param {Effects} effects
     *   Context.
     * @param {State} ok
     *   State switched to when successful.
     * @returns {State}
     *   Start state.
     */
    function factoryWhitespace$3(effects, ok) {
      /** @type {boolean} */
      let seen;
      return start

      /** @type {State} */
      function start(code) {
        if (markdownLineEnding$k(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          seen = true;
          return start
        }
        if (markdownSpace$a(code)) {
          return factorySpace$i(
            effects,
            start,
            seen ? 'linePrefix' : 'lineSuffix'
          )(code)
        }
        return ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const definition$3 = {
      name: 'definition',
      tokenize: tokenizeDefinition$1
    };

    /** @type {Construct} */
    const titleBefore = {
      tokenize: tokenizeTitleBefore,
      partial: true
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeDefinition$1(effects, ok, nok) {
      const self = this;
      /** @type {string} */
      let identifier;
      return start

      /**
       * At start of a definition.
       *
       * ```markdown
       * > | [a]: b "c"
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // Do not interrupt paragraphs (but do follow definitions).
        // To do: do `interrupt` the way `markdown-rs` does.
        // To do: parse whitespace the way `markdown-rs` does.
        effects.enter('definition');
        return before(code)
      }

      /**
       * After optional whitespace, at `[`.
       *
       * ```markdown
       * > | [a]: b "c"
       *     ^
       * ```
       *
       * @type {State}
       */
      function before(code) {
        // To do: parse whitespace the way `markdown-rs` does.

        return factoryLabel$3.call(
          self,
          effects,
          labelAfter,
          // Note: we don’t need to reset the way `markdown-rs` does.
          nok,
          'definitionLabel',
          'definitionLabelMarker',
          'definitionLabelString'
        )(code)
      }

      /**
       * After label.
       *
       * ```markdown
       * > | [a]: b "c"
       *        ^
       * ```
       *
       * @type {State}
       */
      function labelAfter(code) {
        identifier = normalizeIdentifier$4(
          self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
        );
        if (code === 58) {
          effects.enter('definitionMarker');
          effects.consume(code);
          effects.exit('definitionMarker');
          return markerAfter
        }
        return nok(code)
      }

      /**
       * After marker.
       *
       * ```markdown
       * > | [a]: b "c"
       *         ^
       * ```
       *
       * @type {State}
       */
      function markerAfter(code) {
        // Note: whitespace is optional.
        return markdownLineEndingOrSpace$9(code)
          ? factoryWhitespace$3(effects, destinationBefore)(code)
          : destinationBefore(code)
      }

      /**
       * Before destination.
       *
       * ```markdown
       * > | [a]: b "c"
       *          ^
       * ```
       *
       * @type {State}
       */
      function destinationBefore(code) {
        return factoryDestination$3(
          effects,
          destinationAfter,
          // Note: we don’t need to reset the way `markdown-rs` does.
          nok,
          'definitionDestination',
          'definitionDestinationLiteral',
          'definitionDestinationLiteralMarker',
          'definitionDestinationRaw',
          'definitionDestinationString'
        )(code)
      }

      /**
       * After destination.
       *
       * ```markdown
       * > | [a]: b "c"
       *           ^
       * ```
       *
       * @type {State}
       */
      function destinationAfter(code) {
        return effects.attempt(titleBefore, after, after)(code)
      }

      /**
       * After definition.
       *
       * ```markdown
       * > | [a]: b
       *           ^
       * > | [a]: b "c"
       *               ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        return markdownSpace$a(code)
          ? factorySpace$i(effects, afterWhitespace, 'whitespace')(code)
          : afterWhitespace(code)
      }

      /**
       * After definition, after optional whitespace.
       *
       * ```markdown
       * > | [a]: b
       *           ^
       * > | [a]: b "c"
       *               ^
       * ```
       *
       * @type {State}
       */
      function afterWhitespace(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('definition');

          // Note: we don’t care about uniqueness.
          // It’s likely that that doesn’t happen very frequently.
          // It is more likely that it wastes precious time.
          self.parser.defined.push(identifier);

          // To do: `markdown-rs` interrupt.
          // // You’d be interrupting.
          // tokenizer.interrupt = true
          return ok(code)
        }
        return nok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeTitleBefore(effects, ok, nok) {
      return titleBefore

      /**
       * After destination, at whitespace.
       *
       * ```markdown
       * > | [a]: b
       *           ^
       * > | [a]: b "c"
       *           ^
       * ```
       *
       * @type {State}
       */
      function titleBefore(code) {
        return markdownLineEndingOrSpace$9(code)
          ? factoryWhitespace$3(effects, beforeMarker)(code)
          : nok(code)
      }

      /**
       * At title.
       *
       * ```markdown
       *   | [a]: b
       * > | "c"
       *     ^
       * ```
       *
       * @type {State}
       */
      function beforeMarker(code) {
        return factoryTitle$3(
          effects,
          titleAfter,
          nok,
          'definitionTitle',
          'definitionTitleMarker',
          'definitionTitleString'
        )(code)
      }

      /**
       * After title.
       *
       * ```markdown
       * > | [a]: b "c"
       *               ^
       * ```
       *
       * @type {State}
       */
      function titleAfter(code) {
        return markdownSpace$a(code)
          ? factorySpace$i(effects, titleAfterOptionalWhitespace, 'whitespace')(code)
          : titleAfterOptionalWhitespace(code)
      }

      /**
       * After title, after optional whitespace.
       *
       * ```markdown
       * > | [a]: b "c"
       *               ^
       * ```
       *
       * @type {State}
       */
      function titleAfterOptionalWhitespace(code) {
        return code === null || markdownLineEnding$k(code) ? ok(code) : nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const hardBreakEscape$2 = {
      name: 'hardBreakEscape',
      tokenize: tokenizeHardBreakEscape$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeHardBreakEscape$1(effects, ok, nok) {
      return start

      /**
       * Start of a hard break (escape).
       *
       * ```markdown
       * > | a\
       *      ^
       *   | b
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('hardBreakEscape');
        effects.consume(code);
        return after
      }

      /**
       * After `\`, at eol.
       *
       * ```markdown
       * > | a\
       *       ^
       *   | b
       * ```
       *
       *  @type {State}
       */
      function after(code) {
        if (markdownLineEnding$k(code)) {
          effects.exit('hardBreakEscape');
          return ok(code)
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const headingAtx$2 = {
      name: 'headingAtx',
      tokenize: tokenizeHeadingAtx$1,
      resolve: resolveHeadingAtx$1
    };

    /** @type {Resolver} */
    function resolveHeadingAtx$1(events, context) {
      let contentEnd = events.length - 2;
      let contentStart = 3;
      /** @type {Token} */
      let content;
      /** @type {Token} */
      let text;

      // Prefix whitespace, part of the opening.
      if (events[contentStart][1].type === 'whitespace') {
        contentStart += 2;
      }

      // Suffix whitespace, part of the closing.
      if (
        contentEnd - 2 > contentStart &&
        events[contentEnd][1].type === 'whitespace'
      ) {
        contentEnd -= 2;
      }
      if (
        events[contentEnd][1].type === 'atxHeadingSequence' &&
        (contentStart === contentEnd - 1 ||
          (contentEnd - 4 > contentStart &&
            events[contentEnd - 2][1].type === 'whitespace'))
      ) {
        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
      }
      if (contentEnd > contentStart) {
        content = {
          type: 'atxHeadingText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        text = {
          type: 'chunkText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end,
          contentType: 'text'
        };
        splice$3(events, contentStart, contentEnd - contentStart + 1, [
          ['enter', content, context],
          ['enter', text, context],
          ['exit', text, context],
          ['exit', content, context]
        ]);
      }
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeHeadingAtx$1(effects, ok, nok) {
      let size = 0;
      return start

      /**
       * Start of a heading (atx).
       *
       * ```markdown
       * > | ## aa
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // To do: parse indent like `markdown-rs`.
        effects.enter('atxHeading');
        return before(code)
      }

      /**
       * After optional whitespace, at `#`.
       *
       * ```markdown
       * > | ## aa
       *     ^
       * ```
       *
       * @type {State}
       */
      function before(code) {
        effects.enter('atxHeadingSequence');
        return sequenceOpen(code)
      }

      /**
       * In opening sequence.
       *
       * ```markdown
       * > | ## aa
       *     ^
       * ```
       *
       * @type {State}
       */
      function sequenceOpen(code) {
        if (code === 35 && size++ < 6) {
          effects.consume(code);
          return sequenceOpen
        }

        // Always at least one `#`.
        if (code === null || markdownLineEndingOrSpace$9(code)) {
          effects.exit('atxHeadingSequence');
          return atBreak(code)
        }
        return nok(code)
      }

      /**
       * After something, before something else.
       *
       * ```markdown
       * > | ## aa
       *       ^
       * ```
       *
       * @type {State}
       */
      function atBreak(code) {
        if (code === 35) {
          effects.enter('atxHeadingSequence');
          return sequenceFurther(code)
        }
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('atxHeading');
          // To do: interrupt like `markdown-rs`.
          // // Feel free to interrupt.
          // tokenizer.interrupt = false
          return ok(code)
        }
        if (markdownSpace$a(code)) {
          return factorySpace$i(effects, atBreak, 'whitespace')(code)
        }

        // To do: generate `data` tokens, add the `text` token later.
        // Needs edit map, see: `markdown.rs`.
        effects.enter('atxHeadingText');
        return data(code)
      }

      /**
       * In further sequence (after whitespace).
       *
       * Could be normal “visible” hashes in the heading or a final sequence.
       *
       * ```markdown
       * > | ## aa ##
       *           ^
       * ```
       *
       * @type {State}
       */
      function sequenceFurther(code) {
        if (code === 35) {
          effects.consume(code);
          return sequenceFurther
        }
        effects.exit('atxHeadingSequence');
        return atBreak(code)
      }

      /**
       * In text.
       *
       * ```markdown
       * > | ## aa
       *        ^
       * ```
       *
       * @type {State}
       */
      function data(code) {
        if (code === null || code === 35 || markdownLineEndingOrSpace$9(code)) {
          effects.exit('atxHeadingText');
          return atBreak(code)
        }
        effects.consume(code);
        return data
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * List of lowercase HTML “block” tag names.
     *
     * The list, when parsing HTML (flow), results in more relaxed rules (condition
     * 6).
     * Because they are known blocks, the HTML-like syntax doesn’t have to be
     * strictly parsed.
     * For tag names not in this list, a more strict algorithm (condition 7) is used
     * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
     *
     * This is copied from:
     * <https://spec.commonmark.org/0.30/#html-blocks>.
     *
     * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
     */
    const htmlBlockNames$2 = [
      'address',
      'article',
      'aside',
      'base',
      'basefont',
      'blockquote',
      'body',
      'caption',
      'center',
      'col',
      'colgroup',
      'dd',
      'details',
      'dialog',
      'dir',
      'div',
      'dl',
      'dt',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'frame',
      'frameset',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hr',
      'html',
      'iframe',
      'legend',
      'li',
      'link',
      'main',
      'menu',
      'menuitem',
      'nav',
      'noframes',
      'ol',
      'optgroup',
      'option',
      'p',
      'param',
      'search',
      'section',
      'summary',
      'table',
      'tbody',
      'td',
      'tfoot',
      'th',
      'thead',
      'title',
      'tr',
      'track',
      'ul'
    ];

    /**
     * List of lowercase HTML “raw” tag names.
     *
     * The list, when parsing HTML (flow), results in HTML that can include lines
     * without exiting, until a closing tag also in this list is found (condition
     * 1).
     *
     * This module is copied from:
     * <https://spec.commonmark.org/0.30/#html-blocks>.
     *
     * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.
     */
    const htmlRawNames$2 = ['pre', 'script', 'style', 'textarea'];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */

    /** @type {Construct} */
    const htmlFlow$2 = {
      name: 'htmlFlow',
      tokenize: tokenizeHtmlFlow$1,
      resolveTo: resolveToHtmlFlow$1,
      concrete: true
    };

    /** @type {Construct} */
    const blankLineBefore = {
      tokenize: tokenizeBlankLineBefore,
      partial: true
    };
    const nonLazyContinuationStart = {
      tokenize: tokenizeNonLazyContinuationStart,
      partial: true
    };

    /** @type {Resolver} */
    function resolveToHtmlFlow$1(events) {
      let index = events.length;
      while (index--) {
        if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
          break
        }
      }
      if (index > 1 && events[index - 2][1].type === 'linePrefix') {
        // Add the prefix start to the HTML token.
        events[index][1].start = events[index - 2][1].start;
        // Add the prefix start to the HTML line token.
        events[index + 1][1].start = events[index - 2][1].start;
        // Remove the line prefix.
        events.splice(index - 2, 2);
      }
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeHtmlFlow$1(effects, ok, nok) {
      const self = this;
      /** @type {number} */
      let marker;
      /** @type {boolean} */
      let closingTag;
      /** @type {string} */
      let buffer;
      /** @type {number} */
      let index;
      /** @type {Code} */
      let markerB;
      return start

      /**
       * Start of HTML (flow).
       *
       * ```markdown
       * > | <x />
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // To do: parse indent like `markdown-rs`.
        return before(code)
      }

      /**
       * At `<`, after optional whitespace.
       *
       * ```markdown
       * > | <x />
       *     ^
       * ```
       *
       * @type {State}
       */
      function before(code) {
        effects.enter('htmlFlow');
        effects.enter('htmlFlowData');
        effects.consume(code);
        return open
      }

      /**
       * After `<`, at tag name or other stuff.
       *
       * ```markdown
       * > | <x />
       *      ^
       * > | <!doctype>
       *      ^
       * > | <!--xxx-->
       *      ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationOpen
        }
        if (code === 47) {
          effects.consume(code);
          closingTag = true;
          return tagCloseStart
        }
        if (code === 63) {
          effects.consume(code);
          marker = 3;
          // To do:
          // tokenizer.concrete = true
          // To do: use `markdown-rs` style interrupt.
          // While we’re in an instruction instead of a declaration, we’re on a `?`
          // right now, so we do need to search for `>`, similar to declarations.
          return self.interrupt ? ok : continuationDeclarationInside
        }

        // ASCII alphabetical.
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          // @ts-expect-error: not null.
          buffer = String.fromCharCode(code);
          return tagName
        }
        return nok(code)
      }

      /**
       * After `<!`, at declaration, comment, or CDATA.
       *
       * ```markdown
       * > | <!doctype>
       *       ^
       * > | <!--xxx-->
       *       ^
       * > | <![CDATA[>&<]]>
       *       ^
       * ```
       *
       * @type {State}
       */
      function declarationOpen(code) {
        if (code === 45) {
          effects.consume(code);
          marker = 2;
          return commentOpenInside
        }
        if (code === 91) {
          effects.consume(code);
          marker = 5;
          index = 0;
          return cdataOpenInside
        }

        // ASCII alphabetical.
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          marker = 4;
          // // Do not form containers.
          // tokenizer.concrete = true
          return self.interrupt ? ok : continuationDeclarationInside
        }
        return nok(code)
      }

      /**
       * After `<!-`, inside a comment, at another `-`.
       *
       * ```markdown
       * > | <!--xxx-->
       *        ^
       * ```
       *
       * @type {State}
       */
      function commentOpenInside(code) {
        if (code === 45) {
          effects.consume(code);
          // // Do not form containers.
          // tokenizer.concrete = true
          return self.interrupt ? ok : continuationDeclarationInside
        }
        return nok(code)
      }

      /**
       * After `<![`, inside CDATA, expecting `CDATA[`.
       *
       * ```markdown
       * > | <![CDATA[>&<]]>
       *        ^^^^^^
       * ```
       *
       * @type {State}
       */
      function cdataOpenInside(code) {
        const value = 'CDATA[';
        if (code === value.charCodeAt(index++)) {
          effects.consume(code);
          if (index === value.length) {
            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok : continuation
          }
          return cdataOpenInside
        }
        return nok(code)
      }

      /**
       * After `</`, in closing tag, at tag name.
       *
       * ```markdown
       * > | </x>
       *       ^
       * ```
       *
       * @type {State}
       */
      function tagCloseStart(code) {
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          // @ts-expect-error: not null.
          buffer = String.fromCharCode(code);
          return tagName
        }
        return nok(code)
      }

      /**
       * In tag name.
       *
       * ```markdown
       * > | <ab>
       *      ^^
       * > | </ab>
       *       ^^
       * ```
       *
       * @type {State}
       */
      function tagName(code) {
        if (
          code === null ||
          code === 47 ||
          code === 62 ||
          markdownLineEndingOrSpace$9(code)
        ) {
          const slash = code === 47;
          const name = buffer.toLowerCase();
          if (!slash && !closingTag && htmlRawNames$2.includes(name)) {
            marker = 1;
            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok(code) : continuation(code)
          }
          if (htmlBlockNames$2.includes(buffer.toLowerCase())) {
            marker = 6;
            if (slash) {
              effects.consume(code);
              return basicSelfClosing
            }

            // // Do not form containers.
            // tokenizer.concrete = true
            return self.interrupt ? ok(code) : continuation(code)
          }
          marker = 7;
          // Do not support complete HTML when interrupting.
          return self.interrupt && !self.parser.lazy[self.now().line]
            ? nok(code)
            : closingTag
            ? completeClosingTagAfter(code)
            : completeAttributeNameBefore(code)
        }

        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric$5(code)) {
          effects.consume(code);
          buffer += String.fromCharCode(code);
          return tagName
        }
        return nok(code)
      }

      /**
       * After closing slash of a basic tag name.
       *
       * ```markdown
       * > | <div/>
       *          ^
       * ```
       *
       * @type {State}
       */
      function basicSelfClosing(code) {
        if (code === 62) {
          effects.consume(code);
          // // Do not form containers.
          // tokenizer.concrete = true
          return self.interrupt ? ok : continuation
        }
        return nok(code)
      }

      /**
       * After closing slash of a complete tag name.
       *
       * ```markdown
       * > | <x/>
       *        ^
       * ```
       *
       * @type {State}
       */
      function completeClosingTagAfter(code) {
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return completeClosingTagAfter
        }
        return completeEnd(code)
      }

      /**
       * At an attribute name.
       *
       * At first, this state is used after a complete tag name, after whitespace,
       * where it expects optional attributes or the end of the tag.
       * It is also reused after attributes, when expecting more optional
       * attributes.
       *
       * ```markdown
       * > | <a />
       *        ^
       * > | <a :b>
       *        ^
       * > | <a _b>
       *        ^
       * > | <a b>
       *        ^
       * > | <a >
       *        ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeNameBefore(code) {
        if (code === 47) {
          effects.consume(code);
          return completeEnd
        }

        // ASCII alphanumerical and `:` and `_`.
        if (code === 58 || code === 95 || asciiAlpha$4(code)) {
          effects.consume(code);
          return completeAttributeName
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return completeAttributeNameBefore
        }
        return completeEnd(code)
      }

      /**
       * In attribute name.
       *
       * ```markdown
       * > | <a :b>
       *         ^
       * > | <a _b>
       *         ^
       * > | <a b>
       *         ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeName(code) {
        // ASCII alphanumerical and `-`, `.`, `:`, and `_`.
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric$5(code)
        ) {
          effects.consume(code);
          return completeAttributeName
        }
        return completeAttributeNameAfter(code)
      }

      /**
       * After attribute name, at an optional initializer, the end of the tag, or
       * whitespace.
       *
       * ```markdown
       * > | <a b>
       *         ^
       * > | <a b=c>
       *         ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return completeAttributeValueBefore
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return completeAttributeNameAfter
        }
        return completeAttributeNameBefore(code)
      }

      /**
       * Before unquoted, double quoted, or single quoted attribute value, allowing
       * whitespace.
       *
       * ```markdown
       * > | <a b=c>
       *          ^
       * > | <a b="c">
       *          ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }
        if (code === 34 || code === 39) {
          effects.consume(code);
          markerB = code;
          return completeAttributeValueQuoted
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return completeAttributeValueBefore
        }
        return completeAttributeValueUnquoted(code)
      }

      /**
       * In double or single quoted attribute value.
       *
       * ```markdown
       * > | <a b="c">
       *           ^
       * > | <a b='c'>
       *           ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeValueQuoted(code) {
        if (code === markerB) {
          effects.consume(code);
          markerB = null;
          return completeAttributeValueQuotedAfter
        }
        if (code === null || markdownLineEnding$k(code)) {
          return nok(code)
        }
        effects.consume(code);
        return completeAttributeValueQuoted
      }

      /**
       * In unquoted attribute value.
       *
       * ```markdown
       * > | <a b=c>
       *          ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 47 ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96 ||
          markdownLineEndingOrSpace$9(code)
        ) {
          return completeAttributeNameAfter(code)
        }
        effects.consume(code);
        return completeAttributeValueUnquoted
      }

      /**
       * After double or single quoted attribute value, before whitespace or the
       * end of the tag.
       *
       * ```markdown
       * > | <a b="c">
       *            ^
       * ```
       *
       * @type {State}
       */
      function completeAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownSpace$a(code)) {
          return completeAttributeNameBefore(code)
        }
        return nok(code)
      }

      /**
       * In certain circumstances of a complete tag where only an `>` is allowed.
       *
       * ```markdown
       * > | <a b="c">
       *             ^
       * ```
       *
       * @type {State}
       */
      function completeEnd(code) {
        if (code === 62) {
          effects.consume(code);
          return completeAfter
        }
        return nok(code)
      }

      /**
       * After `>` in a complete tag.
       *
       * ```markdown
       * > | <x>
       *        ^
       * ```
       *
       * @type {State}
       */
      function completeAfter(code) {
        if (code === null || markdownLineEnding$k(code)) {
          // // Do not form containers.
          // tokenizer.concrete = true
          return continuation(code)
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return completeAfter
        }
        return nok(code)
      }

      /**
       * In continuation of any HTML kind.
       *
       * ```markdown
       * > | <!--xxx-->
       *          ^
       * ```
       *
       * @type {State}
       */
      function continuation(code) {
        if (code === 45 && marker === 2) {
          effects.consume(code);
          return continuationCommentInside
        }
        if (code === 60 && marker === 1) {
          effects.consume(code);
          return continuationRawTagOpen
        }
        if (code === 62 && marker === 4) {
          effects.consume(code);
          return continuationClose
        }
        if (code === 63 && marker === 3) {
          effects.consume(code);
          return continuationDeclarationInside
        }
        if (code === 93 && marker === 5) {
          effects.consume(code);
          return continuationCdataInside
        }
        if (markdownLineEnding$k(code) && (marker === 6 || marker === 7)) {
          effects.exit('htmlFlowData');
          return effects.check(
            blankLineBefore,
            continuationAfter,
            continuationStart
          )(code)
        }
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('htmlFlowData');
          return continuationStart(code)
        }
        effects.consume(code);
        return continuation
      }

      /**
       * In continuation, at eol.
       *
       * ```markdown
       * > | <x>
       *        ^
       *   | asd
       * ```
       *
       * @type {State}
       */
      function continuationStart(code) {
        return effects.check(
          nonLazyContinuationStart,
          continuationStartNonLazy,
          continuationAfter
        )(code)
      }

      /**
       * In continuation, at eol, before non-lazy content.
       *
       * ```markdown
       * > | <x>
       *        ^
       *   | asd
       * ```
       *
       * @type {State}
       */
      function continuationStartNonLazy(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return continuationBefore
      }

      /**
       * In continuation, before non-lazy content.
       *
       * ```markdown
       *   | <x>
       * > | asd
       *     ^
       * ```
       *
       * @type {State}
       */
      function continuationBefore(code) {
        if (code === null || markdownLineEnding$k(code)) {
          return continuationStart(code)
        }
        effects.enter('htmlFlowData');
        return continuation(code)
      }

      /**
       * In comment continuation, after one `-`, expecting another.
       *
       * ```markdown
       * > | <!--xxx-->
       *             ^
       * ```
       *
       * @type {State}
       */
      function continuationCommentInside(code) {
        if (code === 45) {
          effects.consume(code);
          return continuationDeclarationInside
        }
        return continuation(code)
      }

      /**
       * In raw continuation, after `<`, at `/`.
       *
       * ```markdown
       * > | <script>console.log(1)</script>
       *                            ^
       * ```
       *
       * @type {State}
       */
      function continuationRawTagOpen(code) {
        if (code === 47) {
          effects.consume(code);
          buffer = '';
          return continuationRawEndTag
        }
        return continuation(code)
      }

      /**
       * In raw continuation, after `</`, in a raw tag name.
       *
       * ```markdown
       * > | <script>console.log(1)</script>
       *                             ^^^^^^
       * ```
       *
       * @type {State}
       */
      function continuationRawEndTag(code) {
        if (code === 62) {
          const name = buffer.toLowerCase();
          if (htmlRawNames$2.includes(name)) {
            effects.consume(code);
            return continuationClose
          }
          return continuation(code)
        }
        if (asciiAlpha$4(code) && buffer.length < 8) {
          effects.consume(code);
          // @ts-expect-error: not null.
          buffer += String.fromCharCode(code);
          return continuationRawEndTag
        }
        return continuation(code)
      }

      /**
       * In cdata continuation, after `]`, expecting `]>`.
       *
       * ```markdown
       * > | <![CDATA[>&<]]>
       *                  ^
       * ```
       *
       * @type {State}
       */
      function continuationCdataInside(code) {
        if (code === 93) {
          effects.consume(code);
          return continuationDeclarationInside
        }
        return continuation(code)
      }

      /**
       * In declaration or instruction continuation, at `>`.
       *
       * ```markdown
       * > | <!-->
       *         ^
       * > | <?>
       *       ^
       * > | <!q>
       *        ^
       * > | <!--ab-->
       *             ^
       * > | <![CDATA[>&<]]>
       *                   ^
       * ```
       *
       * @type {State}
       */
      function continuationDeclarationInside(code) {
        if (code === 62) {
          effects.consume(code);
          return continuationClose
        }

        // More dashes.
        if (code === 45 && marker === 2) {
          effects.consume(code);
          return continuationDeclarationInside
        }
        return continuation(code)
      }

      /**
       * In closed continuation: everything we get until the eol/eof is part of it.
       *
       * ```markdown
       * > | <!doctype>
       *               ^
       * ```
       *
       * @type {State}
       */
      function continuationClose(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('htmlFlowData');
          return continuationAfter(code)
        }
        effects.consume(code);
        return continuationClose
      }

      /**
       * Done.
       *
       * ```markdown
       * > | <!doctype>
       *               ^
       * ```
       *
       * @type {State}
       */
      function continuationAfter(code) {
        effects.exit('htmlFlow');
        // // Feel free to interrupt.
        // tokenizer.interrupt = false
        // // No longer concrete.
        // tokenizer.concrete = false
        return ok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeNonLazyContinuationStart(effects, ok, nok) {
      const self = this;
      return start

      /**
       * At eol, before continuation.
       *
       * ```markdown
       * > | * ```js
       *            ^
       *   | b
       * ```
       *
       * @type {State}
       */
      function start(code) {
        if (markdownLineEnding$k(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return after
        }
        return nok(code)
      }

      /**
       * A continuation.
       *
       * ```markdown
       *   | * ```js
       * > | b
       *     ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeBlankLineBefore(effects, ok, nok) {
      return start

      /**
       * Before eol, expecting blank line.
       *
       * ```markdown
       * > | <div>
       *          ^
       *   |
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return effects.attempt(blankLine, ok, nok)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const htmlText$2 = {
      name: 'htmlText',
      tokenize: tokenizeHtmlText$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeHtmlText$1(effects, ok, nok) {
      const self = this;
      /** @type {NonNullable<Code> | undefined} */
      let marker;
      /** @type {number} */
      let index;
      /** @type {State} */
      let returnState;
      return start

      /**
       * Start of HTML (text).
       *
       * ```markdown
       * > | a <b> c
       *       ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('htmlText');
        effects.enter('htmlTextData');
        effects.consume(code);
        return open
      }

      /**
       * After `<`, at tag name or other stuff.
       *
       * ```markdown
       * > | a <b> c
       *        ^
       * > | a <!doctype> c
       *        ^
       * > | a <!--b--> c
       *        ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationOpen
        }
        if (code === 47) {
          effects.consume(code);
          return tagCloseStart
        }
        if (code === 63) {
          effects.consume(code);
          return instruction
        }

        // ASCII alphabetical.
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          return tagOpen
        }
        return nok(code)
      }

      /**
       * After `<!`, at declaration, comment, or CDATA.
       *
       * ```markdown
       * > | a <!doctype> c
       *         ^
       * > | a <!--b--> c
       *         ^
       * > | a <![CDATA[>&<]]> c
       *         ^
       * ```
       *
       * @type {State}
       */
      function declarationOpen(code) {
        if (code === 45) {
          effects.consume(code);
          return commentOpenInside
        }
        if (code === 91) {
          effects.consume(code);
          index = 0;
          return cdataOpenInside
        }
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          return declaration
        }
        return nok(code)
      }

      /**
       * In a comment, after `<!-`, at another `-`.
       *
       * ```markdown
       * > | a <!--b--> c
       *          ^
       * ```
       *
       * @type {State}
       */
      function commentOpenInside(code) {
        if (code === 45) {
          effects.consume(code);
          return commentEnd
        }
        return nok(code)
      }

      /**
       * In comment.
       *
       * ```markdown
       * > | a <!--b--> c
       *           ^
       * ```
       *
       * @type {State}
       */
      function comment(code) {
        if (code === null) {
          return nok(code)
        }
        if (code === 45) {
          effects.consume(code);
          return commentClose
        }
        if (markdownLineEnding$k(code)) {
          returnState = comment;
          return lineEndingBefore(code)
        }
        effects.consume(code);
        return comment
      }

      /**
       * In comment, after `-`.
       *
       * ```markdown
       * > | a <!--b--> c
       *             ^
       * ```
       *
       * @type {State}
       */
      function commentClose(code) {
        if (code === 45) {
          effects.consume(code);
          return commentEnd
        }
        return comment(code)
      }

      /**
       * In comment, after `--`.
       *
       * ```markdown
       * > | a <!--b--> c
       *              ^
       * ```
       *
       * @type {State}
       */
      function commentEnd(code) {
        return code === 62
          ? end(code)
          : code === 45
          ? commentClose(code)
          : comment(code)
      }

      /**
       * After `<![`, in CDATA, expecting `CDATA[`.
       *
       * ```markdown
       * > | a <![CDATA[>&<]]> b
       *          ^^^^^^
       * ```
       *
       * @type {State}
       */
      function cdataOpenInside(code) {
        const value = 'CDATA[';
        if (code === value.charCodeAt(index++)) {
          effects.consume(code);
          return index === value.length ? cdata : cdataOpenInside
        }
        return nok(code)
      }

      /**
       * In CDATA.
       *
       * ```markdown
       * > | a <![CDATA[>&<]]> b
       *                ^^^
       * ```
       *
       * @type {State}
       */
      function cdata(code) {
        if (code === null) {
          return nok(code)
        }
        if (code === 93) {
          effects.consume(code);
          return cdataClose
        }
        if (markdownLineEnding$k(code)) {
          returnState = cdata;
          return lineEndingBefore(code)
        }
        effects.consume(code);
        return cdata
      }

      /**
       * In CDATA, after `]`, at another `]`.
       *
       * ```markdown
       * > | a <![CDATA[>&<]]> b
       *                    ^
       * ```
       *
       * @type {State}
       */
      function cdataClose(code) {
        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }
        return cdata(code)
      }

      /**
       * In CDATA, after `]]`, at `>`.
       *
       * ```markdown
       * > | a <![CDATA[>&<]]> b
       *                     ^
       * ```
       *
       * @type {State}
       */
      function cdataEnd(code) {
        if (code === 62) {
          return end(code)
        }
        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }
        return cdata(code)
      }

      /**
       * In declaration.
       *
       * ```markdown
       * > | a <!b> c
       *          ^
       * ```
       *
       * @type {State}
       */
      function declaration(code) {
        if (code === null || code === 62) {
          return end(code)
        }
        if (markdownLineEnding$k(code)) {
          returnState = declaration;
          return lineEndingBefore(code)
        }
        effects.consume(code);
        return declaration
      }

      /**
       * In instruction.
       *
       * ```markdown
       * > | a <?b?> c
       *         ^
       * ```
       *
       * @type {State}
       */
      function instruction(code) {
        if (code === null) {
          return nok(code)
        }
        if (code === 63) {
          effects.consume(code);
          return instructionClose
        }
        if (markdownLineEnding$k(code)) {
          returnState = instruction;
          return lineEndingBefore(code)
        }
        effects.consume(code);
        return instruction
      }

      /**
       * In instruction, after `?`, at `>`.
       *
       * ```markdown
       * > | a <?b?> c
       *           ^
       * ```
       *
       * @type {State}
       */
      function instructionClose(code) {
        return code === 62 ? end(code) : instruction(code)
      }

      /**
       * After `</`, in closing tag, at tag name.
       *
       * ```markdown
       * > | a </b> c
       *         ^
       * ```
       *
       * @type {State}
       */
      function tagCloseStart(code) {
        // ASCII alphabetical.
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          return tagClose
        }
        return nok(code)
      }

      /**
       * After `</x`, in a tag name.
       *
       * ```markdown
       * > | a </b> c
       *          ^
       * ```
       *
       * @type {State}
       */
      function tagClose(code) {
        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric$5(code)) {
          effects.consume(code);
          return tagClose
        }
        return tagCloseBetween(code)
      }

      /**
       * In closing tag, after tag name.
       *
       * ```markdown
       * > | a </b> c
       *          ^
       * ```
       *
       * @type {State}
       */
      function tagCloseBetween(code) {
        if (markdownLineEnding$k(code)) {
          returnState = tagCloseBetween;
          return lineEndingBefore(code)
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return tagCloseBetween
        }
        return end(code)
      }

      /**
       * After `<x`, in opening tag name.
       *
       * ```markdown
       * > | a <b> c
       *         ^
       * ```
       *
       * @type {State}
       */
      function tagOpen(code) {
        // ASCII alphanumerical and `-`.
        if (code === 45 || asciiAlphanumeric$5(code)) {
          effects.consume(code);
          return tagOpen
        }
        if (code === 47 || code === 62 || markdownLineEndingOrSpace$9(code)) {
          return tagOpenBetween(code)
        }
        return nok(code)
      }

      /**
       * In opening tag, after tag name.
       *
       * ```markdown
       * > | a <b> c
       *         ^
       * ```
       *
       * @type {State}
       */
      function tagOpenBetween(code) {
        if (code === 47) {
          effects.consume(code);
          return end
        }

        // ASCII alphabetical and `:` and `_`.
        if (code === 58 || code === 95 || asciiAlpha$4(code)) {
          effects.consume(code);
          return tagOpenAttributeName
        }
        if (markdownLineEnding$k(code)) {
          returnState = tagOpenBetween;
          return lineEndingBefore(code)
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return tagOpenBetween
        }
        return end(code)
      }

      /**
       * In attribute name.
       *
       * ```markdown
       * > | a <b c> d
       *          ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeName(code) {
        // ASCII alphabetical and `-`, `.`, `:`, and `_`.
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric$5(code)
        ) {
          effects.consume(code);
          return tagOpenAttributeName
        }
        return tagOpenAttributeNameAfter(code)
      }

      /**
       * After attribute name, before initializer, the end of the tag, or
       * whitespace.
       *
       * ```markdown
       * > | a <b c> d
       *           ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }
        if (markdownLineEnding$k(code)) {
          returnState = tagOpenAttributeNameAfter;
          return lineEndingBefore(code)
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return tagOpenAttributeNameAfter
        }
        return tagOpenBetween(code)
      }

      /**
       * Before unquoted, double quoted, or single quoted attribute value, allowing
       * whitespace.
       *
       * ```markdown
       * > | a <b c=d> e
       *            ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }
        if (code === 34 || code === 39) {
          effects.consume(code);
          marker = code;
          return tagOpenAttributeValueQuoted
        }
        if (markdownLineEnding$k(code)) {
          returnState = tagOpenAttributeValueBefore;
          return lineEndingBefore(code)
        }
        if (markdownSpace$a(code)) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }
        effects.consume(code);
        return tagOpenAttributeValueUnquoted
      }

      /**
       * In double or single quoted attribute value.
       *
       * ```markdown
       * > | a <b c="d"> e
       *             ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeValueQuoted(code) {
        if (code === marker) {
          effects.consume(code);
          marker = undefined;
          return tagOpenAttributeValueQuotedAfter
        }
        if (code === null) {
          return nok(code)
        }
        if (markdownLineEnding$k(code)) {
          returnState = tagOpenAttributeValueQuoted;
          return lineEndingBefore(code)
        }
        effects.consume(code);
        return tagOpenAttributeValueQuoted
      }

      /**
       * In unquoted attribute value.
       *
       * ```markdown
       * > | a <b c=d> e
       *            ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 60 ||
          code === 61 ||
          code === 96
        ) {
          return nok(code)
        }
        if (code === 47 || code === 62 || markdownLineEndingOrSpace$9(code)) {
          return tagOpenBetween(code)
        }
        effects.consume(code);
        return tagOpenAttributeValueUnquoted
      }

      /**
       * After double or single quoted attribute value, before whitespace or the end
       * of the tag.
       *
       * ```markdown
       * > | a <b c="d"> e
       *               ^
       * ```
       *
       * @type {State}
       */
      function tagOpenAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownLineEndingOrSpace$9(code)) {
          return tagOpenBetween(code)
        }
        return nok(code)
      }

      /**
       * In certain circumstances of a tag where only an `>` is allowed.
       *
       * ```markdown
       * > | a <b c="d"> e
       *               ^
       * ```
       *
       * @type {State}
       */
      function end(code) {
        if (code === 62) {
          effects.consume(code);
          effects.exit('htmlTextData');
          effects.exit('htmlText');
          return ok
        }
        return nok(code)
      }

      /**
       * At eol.
       *
       * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
       * > empty tokens.
       *
       * ```markdown
       * > | a <!--a
       *            ^
       *   | b-->
       * ```
       *
       * @type {State}
       */
      function lineEndingBefore(code) {
        effects.exit('htmlTextData');
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineEndingAfter
      }

      /**
       * After eol, at optional whitespace.
       *
       * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
       * > empty tokens.
       *
       * ```markdown
       *   | a <!--a
       * > | b-->
       *     ^
       * ```
       *
       * @type {State}
       */
      function lineEndingAfter(code) {
        // Always populated by defaults.

        return markdownSpace$a(code)
          ? factorySpace$i(
              effects,
              lineEndingAfterPrefix,
              'linePrefix',
              self.parser.constructs.disable.null.includes('codeIndented')
                ? undefined
                : 4
            )(code)
          : lineEndingAfterPrefix(code)
      }

      /**
       * After eol, after optional whitespace.
       *
       * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
       * > empty tokens.
       *
       * ```markdown
       *   | a <!--a
       * > | b-->
       *     ^
       * ```
       *
       * @type {State}
       */
      function lineEndingAfterPrefix(code) {
        effects.enter('htmlTextData');
        return returnState(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const labelEnd$4 = {
      name: 'labelEnd',
      tokenize: tokenizeLabelEnd$1,
      resolveTo: resolveToLabelEnd$1,
      resolveAll: resolveAllLabelEnd$1
    };

    /** @type {Construct} */
    const resourceConstruct$1 = {
      tokenize: tokenizeResource$1
    };
    /** @type {Construct} */
    const referenceFullConstruct = {
      tokenize: tokenizeReferenceFull
    };
    /** @type {Construct} */
    const referenceCollapsedConstruct = {
      tokenize: tokenizeReferenceCollapsed
    };

    /** @type {Resolver} */
    function resolveAllLabelEnd$1(events) {
      let index = -1;
      while (++index < events.length) {
        const token = events[index][1];
        if (
          token.type === 'labelImage' ||
          token.type === 'labelLink' ||
          token.type === 'labelEnd'
        ) {
          // Remove the marker.
          events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
          token.type = 'data';
          index++;
        }
      }
      return events
    }

    /** @type {Resolver} */
    function resolveToLabelEnd$1(events, context) {
      let index = events.length;
      let offset = 0;
      /** @type {Token} */
      let token;
      /** @type {number | undefined} */
      let open;
      /** @type {number | undefined} */
      let close;
      /** @type {Array<Event>} */
      let media;

      // Find an opening.
      while (index--) {
        token = events[index][1];
        if (open) {
          // If we see another link, or inactive link label, we’ve been here before.
          if (
            token.type === 'link' ||
            (token.type === 'labelLink' && token._inactive)
          ) {
            break
          }

          // Mark other link openings as inactive, as we can’t have links in
          // links.
          if (events[index][0] === 'enter' && token.type === 'labelLink') {
            token._inactive = true;
          }
        } else if (close) {
          if (
            events[index][0] === 'enter' &&
            (token.type === 'labelImage' || token.type === 'labelLink') &&
            !token._balanced
          ) {
            open = index;
            if (token.type !== 'labelLink') {
              offset = 2;
              break
            }
          }
        } else if (token.type === 'labelEnd') {
          close = index;
        }
      }
      const group = {
        type: events[open][1].type === 'labelLink' ? 'link' : 'image',
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
      };
      const label = {
        type: 'label',
        start: Object.assign({}, events[open][1].start),
        end: Object.assign({}, events[close][1].end)
      };
      const text = {
        type: 'labelText',
        start: Object.assign({}, events[open + offset + 2][1].end),
        end: Object.assign({}, events[close - 2][1].start)
      };
      media = [
        ['enter', group, context],
        ['enter', label, context]
      ];

      // Opening marker.
      media = push(media, events.slice(open + 1, open + offset + 3));

      // Text open.
      media = push(media, [['enter', text, context]]);

      // Always populated by defaults.

      // Between.
      media = push(
        media,
        resolveAll$4(
          context.parser.constructs.insideSpan.null,
          events.slice(open + offset + 4, close - 3),
          context
        )
      );

      // Text close, marker close, label close.
      media = push(media, [
        ['exit', text, context],
        events[close - 2],
        events[close - 1],
        ['exit', label, context]
      ]);

      // Reference, resource, or so.
      media = push(media, events.slice(close + 1));

      // Media close.
      media = push(media, [['exit', group, context]]);
      splice$3(events, open, events.length, media);
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeLabelEnd$1(effects, ok, nok) {
      const self = this;
      let index = self.events.length;
      /** @type {Token} */
      let labelStart;
      /** @type {boolean} */
      let defined;

      // Find an opening.
      while (index--) {
        if (
          (self.events[index][1].type === 'labelImage' ||
            self.events[index][1].type === 'labelLink') &&
          !self.events[index][1]._balanced
        ) {
          labelStart = self.events[index][1];
          break
        }
      }
      return start

      /**
       * Start of label end.
       *
       * ```markdown
       * > | [a](b) c
       *       ^
       * > | [a][b] c
       *       ^
       * > | [a][] b
       *       ^
       * > | [a] b
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // If there is not an okay opening.
        if (!labelStart) {
          return nok(code)
        }

        // If the corresponding label (link) start is marked as inactive,
        // it means we’d be wrapping a link, like this:
        //
        // ```markdown
        // > | a [b [c](d) e](f) g.
        //                  ^
        // ```
        //
        // We can’t have that, so it’s just balanced brackets.
        if (labelStart._inactive) {
          return labelEndNok(code)
        }
        defined = self.parser.defined.includes(
          normalizeIdentifier$4(
            self.sliceSerialize({
              start: labelStart.end,
              end: self.now()
            })
          )
        );
        effects.enter('labelEnd');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelEnd');
        return after
      }

      /**
       * After `]`.
       *
       * ```markdown
       * > | [a](b) c
       *       ^
       * > | [a][b] c
       *       ^
       * > | [a][] b
       *       ^
       * > | [a] b
       *       ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        // Note: `markdown-rs` also parses GFM footnotes here, which for us is in
        // an extension.

        // Resource (`[asd](fgh)`)?
        if (code === 40) {
          return effects.attempt(
            resourceConstruct$1,
            labelEndOk,
            defined ? labelEndOk : labelEndNok
          )(code)
        }

        // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?
        if (code === 91) {
          return effects.attempt(
            referenceFullConstruct,
            labelEndOk,
            defined ? referenceNotFull : labelEndNok
          )(code)
        }

        // Shortcut (`[asd]`) reference?
        return defined ? labelEndOk(code) : labelEndNok(code)
      }

      /**
       * After `]`, at `[`, but not at a full reference.
       *
       * > 👉 **Note**: we only get here if the label is defined.
       *
       * ```markdown
       * > | [a][] b
       *        ^
       * > | [a] b
       *        ^
       * ```
       *
       * @type {State}
       */
      function referenceNotFull(code) {
        return effects.attempt(
          referenceCollapsedConstruct,
          labelEndOk,
          labelEndNok
        )(code)
      }

      /**
       * Done, we found something.
       *
       * ```markdown
       * > | [a](b) c
       *           ^
       * > | [a][b] c
       *           ^
       * > | [a][] b
       *          ^
       * > | [a] b
       *        ^
       * ```
       *
       * @type {State}
       */
      function labelEndOk(code) {
        // Note: `markdown-rs` does a bunch of stuff here.
        return ok(code)
      }

      /**
       * Done, it’s nothing.
       *
       * There was an okay opening, but we didn’t match anything.
       *
       * ```markdown
       * > | [a](b c
       *        ^
       * > | [a][b c
       *        ^
       * > | [a] b
       *        ^
       * ```
       *
       * @type {State}
       */
      function labelEndNok(code) {
        labelStart._balanced = true;
        return nok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeResource$1(effects, ok, nok) {
      return resourceStart

      /**
       * At a resource.
       *
       * ```markdown
       * > | [a](b) c
       *        ^
       * ```
       *
       * @type {State}
       */
      function resourceStart(code) {
        effects.enter('resource');
        effects.enter('resourceMarker');
        effects.consume(code);
        effects.exit('resourceMarker');
        return resourceBefore
      }

      /**
       * In resource, after `(`, at optional whitespace.
       *
       * ```markdown
       * > | [a](b) c
       *         ^
       * ```
       *
       * @type {State}
       */
      function resourceBefore(code) {
        return markdownLineEndingOrSpace$9(code)
          ? factoryWhitespace$3(effects, resourceOpen)(code)
          : resourceOpen(code)
      }

      /**
       * In resource, after optional whitespace, at `)` or a destination.
       *
       * ```markdown
       * > | [a](b) c
       *         ^
       * ```
       *
       * @type {State}
       */
      function resourceOpen(code) {
        if (code === 41) {
          return resourceEnd(code)
        }
        return factoryDestination$3(
          effects,
          resourceDestinationAfter,
          resourceDestinationMissing,
          'resourceDestination',
          'resourceDestinationLiteral',
          'resourceDestinationLiteralMarker',
          'resourceDestinationRaw',
          'resourceDestinationString',
          32
        )(code)
      }

      /**
       * In resource, after destination, at optional whitespace.
       *
       * ```markdown
       * > | [a](b) c
       *          ^
       * ```
       *
       * @type {State}
       */
      function resourceDestinationAfter(code) {
        return markdownLineEndingOrSpace$9(code)
          ? factoryWhitespace$3(effects, resourceBetween)(code)
          : resourceEnd(code)
      }

      /**
       * At invalid destination.
       *
       * ```markdown
       * > | [a](<<) b
       *         ^
       * ```
       *
       * @type {State}
       */
      function resourceDestinationMissing(code) {
        return nok(code)
      }

      /**
       * In resource, after destination and whitespace, at `(` or title.
       *
       * ```markdown
       * > | [a](b ) c
       *           ^
       * ```
       *
       * @type {State}
       */
      function resourceBetween(code) {
        if (code === 34 || code === 39 || code === 40) {
          return factoryTitle$3(
            effects,
            resourceTitleAfter,
            nok,
            'resourceTitle',
            'resourceTitleMarker',
            'resourceTitleString'
          )(code)
        }
        return resourceEnd(code)
      }

      /**
       * In resource, after title, at optional whitespace.
       *
       * ```markdown
       * > | [a](b "c") d
       *              ^
       * ```
       *
       * @type {State}
       */
      function resourceTitleAfter(code) {
        return markdownLineEndingOrSpace$9(code)
          ? factoryWhitespace$3(effects, resourceEnd)(code)
          : resourceEnd(code)
      }

      /**
       * In resource, at `)`.
       *
       * ```markdown
       * > | [a](b) d
       *          ^
       * ```
       *
       * @type {State}
       */
      function resourceEnd(code) {
        if (code === 41) {
          effects.enter('resourceMarker');
          effects.consume(code);
          effects.exit('resourceMarker');
          effects.exit('resource');
          return ok
        }
        return nok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeReferenceFull(effects, ok, nok) {
      const self = this;
      return referenceFull

      /**
       * In a reference (full), at the `[`.
       *
       * ```markdown
       * > | [a][b] d
       *        ^
       * ```
       *
       * @type {State}
       */
      function referenceFull(code) {
        return factoryLabel$3.call(
          self,
          effects,
          referenceFullAfter,
          referenceFullMissing,
          'reference',
          'referenceMarker',
          'referenceString'
        )(code)
      }

      /**
       * In a reference (full), after `]`.
       *
       * ```markdown
       * > | [a][b] d
       *          ^
       * ```
       *
       * @type {State}
       */
      function referenceFullAfter(code) {
        return self.parser.defined.includes(
          normalizeIdentifier$4(
            self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
          )
        )
          ? ok(code)
          : nok(code)
      }

      /**
       * In reference (full) that was missing.
       *
       * ```markdown
       * > | [a][b d
       *        ^
       * ```
       *
       * @type {State}
       */
      function referenceFullMissing(code) {
        return nok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeReferenceCollapsed(effects, ok, nok) {
      return referenceCollapsedStart

      /**
       * In reference (collapsed), at `[`.
       *
       * > 👉 **Note**: we only get here if the label is defined.
       *
       * ```markdown
       * > | [a][] d
       *        ^
       * ```
       *
       * @type {State}
       */
      function referenceCollapsedStart(code) {
        // We only attempt a collapsed label if there’s a `[`.

        effects.enter('reference');
        effects.enter('referenceMarker');
        effects.consume(code);
        effects.exit('referenceMarker');
        return referenceCollapsedOpen
      }

      /**
       * In reference (collapsed), at `]`.
       *
       * > 👉 **Note**: we only get here if the label is defined.
       *
       * ```markdown
       * > | [a][] d
       *         ^
       * ```
       *
       *  @type {State}
       */
      function referenceCollapsedOpen(code) {
        if (code === 93) {
          effects.enter('referenceMarker');
          effects.consume(code);
          effects.exit('referenceMarker');
          effects.exit('reference');
          return ok
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */

    /** @type {Construct} */
    const labelStartImage$2 = {
      name: 'labelStartImage',
      tokenize: tokenizeLabelStartImage$1,
      resolveAll: labelEnd$4.resolveAll
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeLabelStartImage$1(effects, ok, nok) {
      const self = this;
      return start

      /**
       * Start of label (image) start.
       *
       * ```markdown
       * > | a ![b] c
       *       ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('labelImage');
        effects.enter('labelImageMarker');
        effects.consume(code);
        effects.exit('labelImageMarker');
        return open
      }

      /**
       * After `!`, at `[`.
       *
       * ```markdown
       * > | a ![b] c
       *        ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (code === 91) {
          effects.enter('labelMarker');
          effects.consume(code);
          effects.exit('labelMarker');
          effects.exit('labelImage');
          return after
        }
        return nok(code)
      }

      /**
       * After `![`.
       *
       * ```markdown
       * > | a ![b] c
       *         ^
       * ```
       *
       * This is needed in because, when GFM footnotes are enabled, images never
       * form when started with a `^`.
       * Instead, links form:
       *
       * ```markdown
       * ![^a](b)
       *
       * ![^a][b]
       *
       * [b]: c
       * ```
       *
       * ```html
       * <p>!<a href=\"b\">^a</a></p>
       * <p>!<a href=\"c\">^a</a></p>
       * ```
       *
       * @type {State}
       */
      function after(code) {
        // To do: use a new field to do this, this is still needed for
        // `micromark-extension-gfm-footnote`, but the `label-start-link`
        // behavior isn’t.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */
        return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
          ? nok(code)
          : ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */

    /** @type {Construct} */
    const labelStartLink$2 = {
      name: 'labelStartLink',
      tokenize: tokenizeLabelStartLink$1,
      resolveAll: labelEnd$4.resolveAll
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeLabelStartLink$1(effects, ok, nok) {
      const self = this;
      return start

      /**
       * Start of label (link) start.
       *
       * ```markdown
       * > | a [b] c
       *       ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('labelLink');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelLink');
        return after
      }

      /** @type {State} */
      function after(code) {
        // To do: this isn’t needed in `micromark-extension-gfm-footnote`,
        // remove.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */
        return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
          ? nok(code)
          : ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const lineEnding$2 = {
      name: 'lineEnding',
      tokenize: tokenizeLineEnding$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeLineEnding$1(effects, ok) {
      return start

      /** @type {State} */
      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$i(effects, ok, 'linePrefix')
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const thematicBreak$5 = {
      name: 'thematicBreak',
      tokenize: tokenizeThematicBreak$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeThematicBreak$1(effects, ok, nok) {
      let size = 0;
      /** @type {NonNullable<Code>} */
      let marker;
      return start

      /**
       * Start of thematic break.
       *
       * ```markdown
       * > | ***
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('thematicBreak');
        // To do: parse indent like `markdown-rs`.
        return before(code)
      }

      /**
       * After optional whitespace, at marker.
       *
       * ```markdown
       * > | ***
       *     ^
       * ```
       *
       * @type {State}
       */
      function before(code) {
        marker = code;
        return atBreak(code)
      }

      /**
       * After something, before something else.
       *
       * ```markdown
       * > | ***
       *     ^
       * ```
       *
       * @type {State}
       */
      function atBreak(code) {
        if (code === marker) {
          effects.enter('thematicBreakSequence');
          return sequence(code)
        }
        if (size >= 3 && (code === null || markdownLineEnding$k(code))) {
          effects.exit('thematicBreak');
          return ok(code)
        }
        return nok(code)
      }

      /**
       * In sequence.
       *
       * ```markdown
       * > | ***
       *     ^
       * ```
       *
       * @type {State}
       */
      function sequence(code) {
        if (code === marker) {
          effects.consume(code);
          size++;
          return sequence
        }
        effects.exit('thematicBreakSequence');
        return markdownSpace$a(code)
          ? factorySpace$i(effects, atBreak, 'whitespace')(code)
          : atBreak(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').ContainerState} ContainerState
     * @typedef {import('micromark-util-types').Exiter} Exiter
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */

    /** @type {Construct} */
    const list$4 = {
      name: 'list',
      tokenize: tokenizeListStart$1,
      continuation: {
        tokenize: tokenizeListContinuation$1
      },
      exit: tokenizeListEnd$1
    };

    /** @type {Construct} */
    const listItemPrefixWhitespaceConstruct$1 = {
      tokenize: tokenizeListItemPrefixWhitespace$1,
      partial: true
    };

    /** @type {Construct} */
    const indentConstruct$1 = {
      tokenize: tokenizeIndent$2,
      partial: true
    };

    // To do: `markdown-rs` parses list items on their own and later stitches them
    // together.

    /**
     * @type {Tokenizer}
     * @this {TokenizeContext}
     */
    function tokenizeListStart$1(effects, ok, nok) {
      const self = this;
      const tail = self.events[self.events.length - 1];
      let initialSize =
        tail && tail[1].type === 'linePrefix'
          ? tail[2].sliceSerialize(tail[1], true).length
          : 0;
      let size = 0;
      return start

      /** @type {State} */
      function start(code) {
        const kind =
          self.containerState.type ||
          (code === 42 || code === 43 || code === 45
            ? 'listUnordered'
            : 'listOrdered');
        if (
          kind === 'listUnordered'
            ? !self.containerState.marker || code === self.containerState.marker
            : asciiDigit$3(code)
        ) {
          if (!self.containerState.type) {
            self.containerState.type = kind;
            effects.enter(kind, {
              _container: true
            });
          }
          if (kind === 'listUnordered') {
            effects.enter('listItemPrefix');
            return code === 42 || code === 45
              ? effects.check(thematicBreak$5, nok, atMarker)(code)
              : atMarker(code)
          }
          if (!self.interrupt || code === 49) {
            effects.enter('listItemPrefix');
            effects.enter('listItemValue');
            return inside(code)
          }
        }
        return nok(code)
      }

      /** @type {State} */
      function inside(code) {
        if (asciiDigit$3(code) && ++size < 10) {
          effects.consume(code);
          return inside
        }
        if (
          (!self.interrupt || size < 2) &&
          (self.containerState.marker
            ? code === self.containerState.marker
            : code === 41 || code === 46)
        ) {
          effects.exit('listItemValue');
          return atMarker(code)
        }
        return nok(code)
      }

      /**
       * @type {State}
       **/
      function atMarker(code) {
        effects.enter('listItemMarker');
        effects.consume(code);
        effects.exit('listItemMarker');
        self.containerState.marker = self.containerState.marker || code;
        return effects.check(
          blankLine,
          // Can’t be empty when interrupting.
          self.interrupt ? nok : onBlank,
          effects.attempt(
            listItemPrefixWhitespaceConstruct$1,
            endOfPrefix,
            otherPrefix
          )
        )
      }

      /** @type {State} */
      function onBlank(code) {
        self.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code)
      }

      /** @type {State} */
      function otherPrefix(code) {
        if (markdownSpace$a(code)) {
          effects.enter('listItemPrefixWhitespace');
          effects.consume(code);
          effects.exit('listItemPrefixWhitespace');
          return endOfPrefix
        }
        return nok(code)
      }

      /** @type {State} */
      function endOfPrefix(code) {
        self.containerState.size =
          initialSize +
          self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
        return ok(code)
      }
    }

    /**
     * @type {Tokenizer}
     * @this {TokenizeContext}
     */
    function tokenizeListContinuation$1(effects, ok, nok) {
      const self = this;
      self.containerState._closeFlow = undefined;
      return effects.check(blankLine, onBlank, notBlank)

      /** @type {State} */
      function onBlank(code) {
        self.containerState.furtherBlankLines =
          self.containerState.furtherBlankLines ||
          self.containerState.initialBlankLine;

        // We have a blank line.
        // Still, try to consume at most the items size.
        return factorySpace$i(
          effects,
          ok,
          'listItemIndent',
          self.containerState.size + 1
        )(code)
      }

      /** @type {State} */
      function notBlank(code) {
        if (self.containerState.furtherBlankLines || !markdownSpace$a(code)) {
          self.containerState.furtherBlankLines = undefined;
          self.containerState.initialBlankLine = undefined;
          return notInCurrentItem(code)
        }
        self.containerState.furtherBlankLines = undefined;
        self.containerState.initialBlankLine = undefined;
        return effects.attempt(indentConstruct$1, ok, notInCurrentItem)(code)
      }

      /** @type {State} */
      function notInCurrentItem(code) {
        // While we do continue, we signal that the flow should be closed.
        self.containerState._closeFlow = true;
        // As we’re closing flow, we’re no longer interrupting.
        self.interrupt = undefined;
        // Always populated by defaults.

        return factorySpace$i(
          effects,
          effects.attempt(list$4, ok, nok),
          'linePrefix',
          self.parser.constructs.disable.null.includes('codeIndented')
            ? undefined
            : 4
        )(code)
      }
    }

    /**
     * @type {Tokenizer}
     * @this {TokenizeContext}
     */
    function tokenizeIndent$2(effects, ok, nok) {
      const self = this;
      return factorySpace$i(
        effects,
        afterPrefix,
        'listItemIndent',
        self.containerState.size + 1
      )

      /** @type {State} */
      function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail &&
          tail[1].type === 'listItemIndent' &&
          tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
          ? ok(code)
          : nok(code)
      }
    }

    /**
     * @type {Exiter}
     * @this {TokenizeContext}
     */
    function tokenizeListEnd$1(effects) {
      effects.exit(this.containerState.type);
    }

    /**
     * @type {Tokenizer}
     * @this {TokenizeContext}
     */
    function tokenizeListItemPrefixWhitespace$1(effects, ok, nok) {
      const self = this;

      // Always populated by defaults.

      return factorySpace$i(
        effects,
        afterPrefix,
        'listItemPrefixWhitespace',
        self.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4 + 1
      )

      /** @type {State} */
      function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return !markdownSpace$a(code) &&
          tail &&
          tail[1].type === 'listItemPrefixWhitespace'
          ? ok(code)
          : nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    /** @type {Construct} */
    const setextUnderline$2 = {
      name: 'setextUnderline',
      tokenize: tokenizeSetextUnderline$1,
      resolveTo: resolveToSetextUnderline$1
    };

    /** @type {Resolver} */
    function resolveToSetextUnderline$1(events, context) {
      // To do: resolve like `markdown-rs`.
      let index = events.length;
      /** @type {number | undefined} */
      let content;
      /** @type {number | undefined} */
      let text;
      /** @type {number | undefined} */
      let definition;

      // Find the opening of the content.
      // It’ll always exist: we don’t tokenize if it isn’t there.
      while (index--) {
        if (events[index][0] === 'enter') {
          if (events[index][1].type === 'content') {
            content = index;
            break
          }
          if (events[index][1].type === 'paragraph') {
            text = index;
          }
        }
        // Exit
        else {
          if (events[index][1].type === 'content') {
            // Remove the content end (if needed we’ll add it later)
            events.splice(index, 1);
          }
          if (!definition && events[index][1].type === 'definition') {
            definition = index;
          }
        }
      }
      const heading = {
        type: 'setextHeading',
        start: Object.assign({}, events[text][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
      };

      // Change the paragraph to setext heading text.
      events[text][1].type = 'setextHeadingText';

      // If we have definitions in the content, we’ll keep on having content,
      // but we need move it.
      if (definition) {
        events.splice(text, 0, ['enter', heading, context]);
        events.splice(definition + 1, 0, ['exit', events[content][1], context]);
        events[content][1].end = Object.assign({}, events[definition][1].end);
      } else {
        events[content][1] = heading;
      }

      // Add the heading exit at the end.
      events.push(['exit', heading, context]);
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeSetextUnderline$1(effects, ok, nok) {
      const self = this;
      /** @type {NonNullable<Code>} */
      let marker;
      return start

      /**
       * At start of heading (setext) underline.
       *
       * ```markdown
       *   | aa
       * > | ==
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        let index = self.events.length;
        /** @type {boolean | undefined} */
        let paragraph;
        // Find an opening.
        while (index--) {
          // Skip enter/exit of line ending, line prefix, and content.
          // We can now either have a definition or a paragraph.
          if (
            self.events[index][1].type !== 'lineEnding' &&
            self.events[index][1].type !== 'linePrefix' &&
            self.events[index][1].type !== 'content'
          ) {
            paragraph = self.events[index][1].type === 'paragraph';
            break
          }
        }

        // To do: handle lazy/pierce like `markdown-rs`.
        // To do: parse indent like `markdown-rs`.
        if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
          effects.enter('setextHeadingLine');
          marker = code;
          return before(code)
        }
        return nok(code)
      }

      /**
       * After optional whitespace, at `-` or `=`.
       *
       * ```markdown
       *   | aa
       * > | ==
       *     ^
       * ```
       *
       * @type {State}
       */
      function before(code) {
        effects.enter('setextHeadingLineSequence');
        return inside(code)
      }

      /**
       * In sequence.
       *
       * ```markdown
       *   | aa
       * > | ==
       *     ^
       * ```
       *
       * @type {State}
       */
      function inside(code) {
        if (code === marker) {
          effects.consume(code);
          return inside
        }
        effects.exit('setextHeadingLineSequence');
        return markdownSpace$a(code)
          ? factorySpace$i(effects, after, 'lineSuffix')(code)
          : after(code)
      }

      /**
       * After sequence, after optional whitespace.
       *
       * ```markdown
       *   | aa
       * > | ==
       *       ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('setextHeadingLine');
          return ok(code)
        }
        return nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').Initializer} Initializer
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     */
    /** @type {InitialConstruct} */
    const flow$4 = {
      tokenize: initializeFlow$1
    };

    /**
     * @this {TokenizeContext}
     * @type {Initializer}
     */
    function initializeFlow$1(effects) {
      const self = this;
      const initial = effects.attempt(
        // Try to parse a blank line.
        blankLine,
        atBlankEnding,
        // Try to parse initial flow (essentially, only code).
        effects.attempt(
          this.parser.constructs.flowInitial,
          afterConstruct,
          factorySpace$i(
            effects,
            effects.attempt(
              this.parser.constructs.flow,
              afterConstruct,
              effects.attempt(content$4, afterConstruct)
            ),
            'linePrefix'
          )
        )
      );
      return initial

      /** @type {State} */
      function atBlankEnding(code) {
        if (code === null) {
          effects.consume(code);
          return
        }
        effects.enter('lineEndingBlank');
        effects.consume(code);
        effects.exit('lineEndingBlank');
        self.currentConstruct = undefined;
        return initial
      }

      /** @type {State} */
      function afterConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        self.currentConstruct = undefined;
        return initial
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').Initializer} Initializer
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     */

    const resolver$1 = {
      resolveAll: createResolver$1()
    };
    const string$3 = initializeFactory$1('string');
    const text$9 = initializeFactory$1('text');

    /**
     * @param {'string' | 'text'} field
     * @returns {InitialConstruct}
     */
    function initializeFactory$1(field) {
      return {
        tokenize: initializeText,
        resolveAll: createResolver$1(
          field === 'text' ? resolveAllLineSuffixes$1 : undefined
        )
      }

      /**
       * @this {TokenizeContext}
       * @type {Initializer}
       */
      function initializeText(effects) {
        const self = this;
        const constructs = this.parser.constructs[field];
        const text = effects.attempt(constructs, start, notText);
        return start

        /** @type {State} */
        function start(code) {
          return atBreak(code) ? text(code) : notText(code)
        }

        /** @type {State} */
        function notText(code) {
          if (code === null) {
            effects.consume(code);
            return
          }
          effects.enter('data');
          effects.consume(code);
          return data
        }

        /** @type {State} */
        function data(code) {
          if (atBreak(code)) {
            effects.exit('data');
            return text(code)
          }

          // Data.
          effects.consume(code);
          return data
        }

        /**
         * @param {Code} code
         * @returns {boolean}
         */
        function atBreak(code) {
          if (code === null) {
            return true
          }
          const list = constructs[code];
          let index = -1;
          if (list) {
            // Always populated by defaults.

            while (++index < list.length) {
              const item = list[index];
              if (!item.previous || item.previous.call(self, self.previous)) {
                return true
              }
            }
          }
          return false
        }
      }
    }

    /**
     * @param {Resolver | undefined} [extraResolver]
     * @returns {Resolver}
     */
    function createResolver$1(extraResolver) {
      return resolveAllText

      /** @type {Resolver} */
      function resolveAllText(events, context) {
        let index = -1;
        /** @type {number | undefined} */
        let enter;

        // A rather boring computation (to merge adjacent `data` events) which
        // improves mm performance by 29%.
        while (++index <= events.length) {
          if (enter === undefined) {
            if (events[index] && events[index][1].type === 'data') {
              enter = index;
              index++;
            }
          } else if (!events[index] || events[index][1].type !== 'data') {
            // Don’t do anything if there is one data token.
            if (index !== enter + 2) {
              events[enter][1].end = events[index - 1][1].end;
              events.splice(enter + 2, index - enter - 2);
              index = enter + 2;
            }
            enter = undefined;
          }
        }
        return extraResolver ? extraResolver(events, context) : events
      }
    }

    /**
     * A rather ugly set of instructions which again looks at chunks in the input
     * stream.
     * The reason to do this here is that it is *much* faster to parse in reverse.
     * And that we can’t hook into `null` to split the line suffix before an EOF.
     * To do: figure out if we can make this into a clean utility, or even in core.
     * As it will be useful for GFMs literal autolink extension (and maybe even
     * tables?)
     *
     * @type {Resolver}
     */
    function resolveAllLineSuffixes$1(events, context) {
      let eventIndex = 0; // Skip first.

      while (++eventIndex <= events.length) {
        if (
          (eventIndex === events.length ||
            events[eventIndex][1].type === 'lineEnding') &&
          events[eventIndex - 1][1].type === 'data'
        ) {
          const data = events[eventIndex - 1][1];
          const chunks = context.sliceStream(data);
          let index = chunks.length;
          let bufferIndex = -1;
          let size = 0;
          /** @type {boolean | undefined} */
          let tabs;
          while (index--) {
            const chunk = chunks[index];
            if (typeof chunk === 'string') {
              bufferIndex = chunk.length;
              while (chunk.charCodeAt(bufferIndex - 1) === 32) {
                size++;
                bufferIndex--;
              }
              if (bufferIndex) break
              bufferIndex = -1;
            }
            // Number
            else if (chunk === -2) {
              tabs = true;
              size++;
            } else if (chunk === -1) ; else {
              // Replacement character, exit.
              index++;
              break
            }
          }
          if (size) {
            const token = {
              type:
                eventIndex === events.length || tabs || size < 2
                  ? 'lineSuffix'
                  : 'hardBreakTrailing',
              start: {
                line: data.end.line,
                column: data.end.column - size,
                offset: data.end.offset - size,
                _index: data.start._index + index,
                _bufferIndex: index
                  ? bufferIndex
                  : data.start._bufferIndex + bufferIndex
              },
              end: Object.assign({}, data.end)
            };
            data.end = Object.assign({}, token.start);
            if (data.start.offset === data.end.offset) {
              Object.assign(data, token);
            } else {
              events.splice(
                eventIndex,
                0,
                ['enter', token, context],
                ['exit', token, context]
              );
              eventIndex += 2;
            }
          }
          eventIndex++;
        }
      }
      return events
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Chunk} Chunk
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Construct} Construct
     * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
     * @typedef {import('micromark-util-types').Effects} Effects
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').ParseContext} ParseContext
     * @typedef {import('micromark-util-types').Point} Point
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenType} TokenType
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     */
    /**
     * Create a tokenizer.
     * Tokenizers deal with one type of data (e.g., containers, flow, text).
     * The parser is the object dealing with it all.
     * `initialize` works like other constructs, except that only its `tokenize`
     * function is used, in which case it doesn’t receive an `ok` or `nok`.
     * `from` can be given to set the point before the first character, although
     * when further lines are indented, they must be set with `defineSkip`.
     *
     * @param {ParseContext} parser
     * @param {InitialConstruct} initialize
     * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]
     * @returns {TokenizeContext}
     */
    function createTokenizer$2(parser, initialize, from) {
      /** @type {Point} */
      let point = Object.assign(
        from
          ? Object.assign({}, from)
          : {
              line: 1,
              column: 1,
              offset: 0
            },
        {
          _index: 0,
          _bufferIndex: -1
        }
      );
      /** @type {Record<string, number>} */
      const columnStart = {};
      /** @type {Array<Construct>} */
      const resolveAllConstructs = [];
      /** @type {Array<Chunk>} */
      let chunks = [];
      /** @type {Array<Token>} */
      let stack = [];

      /**
       * Tools used for tokenizing.
       *
       * @type {Effects}
       */
      const effects = {
        consume,
        enter,
        exit,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
          interrupt: true
        })
      };

      /**
       * State and tools for resolving and serializing.
       *
       * @type {TokenizeContext}
       */
      const context = {
        previous: null,
        code: null,
        containerState: {},
        events: [],
        parser,
        sliceStream,
        sliceSerialize,
        now,
        defineSkip,
        write
      };

      /**
       * The state function.
       *
       * @type {State | undefined}
       */
      let state = initialize.tokenize.call(context, effects);
      if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
      }
      return context

      /** @type {TokenizeContext['write']} */
      function write(slice) {
        chunks = push(chunks, slice);
        main();

        // Exit if we’re not done, resolve might change stuff.
        if (chunks[chunks.length - 1] !== null) {
          return []
        }
        addResult(initialize, 0);

        // Otherwise, resolve, and exit.
        context.events = resolveAll$4(resolveAllConstructs, context.events, context);
        return context.events
      }

      //
      // Tools.
      //

      /** @type {TokenizeContext['sliceSerialize']} */
      function sliceSerialize(token, expandTabs) {
        return serializeChunks$2(sliceStream(token), expandTabs)
      }

      /** @type {TokenizeContext['sliceStream']} */
      function sliceStream(token) {
        return sliceChunks$2(chunks, token)
      }

      /** @type {TokenizeContext['now']} */
      function now() {
        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
        const {line, column, offset, _index, _bufferIndex} = point;
        return {
          line,
          column,
          offset,
          _index,
          _bufferIndex
        }
      }

      /** @type {TokenizeContext['defineSkip']} */
      function defineSkip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
      }

      //
      // State management.
      //

      /**
       * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
       * `consume`).
       * Here is where we walk through the chunks, which either include strings of
       * several characters, or numerical character codes.
       * The reason to do this in a loop instead of a call is so the stack can
       * drain.
       *
       * @returns {undefined}
       */
      function main() {
        /** @type {number} */
        let chunkIndex;
        while (point._index < chunks.length) {
          const chunk = chunks[point._index];

          // If we’re in a buffer chunk, loop through it.
          if (typeof chunk === 'string') {
            chunkIndex = point._index;
            if (point._bufferIndex < 0) {
              point._bufferIndex = 0;
            }
            while (
              point._index === chunkIndex &&
              point._bufferIndex < chunk.length
            ) {
              go(chunk.charCodeAt(point._bufferIndex));
            }
          } else {
            go(chunk);
          }
        }
      }

      /**
       * Deal with one code.
       *
       * @param {Code} code
       * @returns {undefined}
       */
      function go(code) {
        state = state(code);
      }

      /** @type {Effects['consume']} */
      function consume(code) {
        if (markdownLineEnding$k(code)) {
          point.line++;
          point.column = 1;
          point.offset += code === -3 ? 2 : 1;
          accountForPotentialSkip();
        } else if (code !== -1) {
          point.column++;
          point.offset++;
        }

        // Not in a string chunk.
        if (point._bufferIndex < 0) {
          point._index++;
        } else {
          point._bufferIndex++;

          // At end of string chunk.
          // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
          // strings.
          if (point._bufferIndex === chunks[point._index].length) {
            point._bufferIndex = -1;
            point._index++;
          }
        }

        // Expose the previous character.
        context.previous = code;
      }

      /** @type {Effects['enter']} */
      function enter(type, fields) {
        /** @type {Token} */
        // @ts-expect-error Patch instead of assign required fields to help GC.
        const token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push(['enter', token, context]);
        stack.push(token);
        return token
      }

      /** @type {Effects['exit']} */
      function exit(type) {
        const token = stack.pop();
        token.end = now();
        context.events.push(['exit', token, context]);
        return token
      }

      /**
       * Use results.
       *
       * @type {ReturnHandle}
       */
      function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
      }

      /**
       * Discard results.
       *
       * @type {ReturnHandle}
       */
      function onsuccessfulcheck(_, info) {
        info.restore();
      }

      /**
       * Factory to attempt/check/interrupt.
       *
       * @param {ReturnHandle} onreturn
       * @param {{interrupt?: boolean | undefined} | undefined} [fields]
       */
      function constructFactory(onreturn, fields) {
        return hook

        /**
         * Handle either an object mapping codes to constructs, a list of
         * constructs, or a single construct.
         *
         * @param {Array<Construct> | Construct | ConstructRecord} constructs
         * @param {State} returnState
         * @param {State | undefined} [bogusState]
         * @returns {State}
         */
        function hook(constructs, returnState, bogusState) {
          /** @type {Array<Construct>} */
          let listOfConstructs;
          /** @type {number} */
          let constructIndex;
          /** @type {Construct} */
          let currentConstruct;
          /** @type {Info} */
          let info;
          return Array.isArray(constructs) /* c8 ignore next 1 */
            ? handleListOfConstructs(constructs)
            : 'tokenize' in constructs
            ? // @ts-expect-error Looks like a construct.
              handleListOfConstructs([constructs])
            : handleMapOfConstructs(constructs)

          /**
           * Handle a list of construct.
           *
           * @param {ConstructRecord} map
           * @returns {State}
           */
          function handleMapOfConstructs(map) {
            return start

            /** @type {State} */
            function start(code) {
              const def = code !== null && map[code];
              const all = code !== null && map.null;
              const list = [
                // To do: add more extension tests.
                /* c8 ignore next 2 */
                ...(Array.isArray(def) ? def : def ? [def] : []),
                ...(Array.isArray(all) ? all : all ? [all] : [])
              ];
              return handleListOfConstructs(list)(code)
            }
          }

          /**
           * Handle a list of construct.
           *
           * @param {Array<Construct>} list
           * @returns {State}
           */
          function handleListOfConstructs(list) {
            listOfConstructs = list;
            constructIndex = 0;
            if (list.length === 0) {
              return bogusState
            }
            return handleConstruct(list[constructIndex])
          }

          /**
           * Handle a single construct.
           *
           * @param {Construct} construct
           * @returns {State}
           */
          function handleConstruct(construct) {
            return start

            /** @type {State} */
            function start(code) {
              // To do: not needed to store if there is no bogus state, probably?
              // Currently doesn’t work because `inspect` in document does a check
              // w/o a bogus, which doesn’t make sense. But it does seem to help perf
              // by not storing.
              info = store();
              currentConstruct = construct;
              if (!construct.partial) {
                context.currentConstruct = construct;
              }

              // Always populated by defaults.

              if (
                construct.name &&
                context.parser.constructs.disable.null.includes(construct.name)
              ) {
                return nok()
              }
              return construct.tokenize.call(
                // If we do have fields, create an object w/ `context` as its
                // prototype.
                // This allows a “live binding”, which is needed for `interrupt`.
                fields ? Object.assign(Object.create(context), fields) : context,
                effects,
                ok,
                nok
              )(code)
            }
          }

          /** @type {State} */
          function ok(code) {
            onreturn(currentConstruct, info);
            return returnState
          }

          /** @type {State} */
          function nok(code) {
            info.restore();
            if (++constructIndex < listOfConstructs.length) {
              return handleConstruct(listOfConstructs[constructIndex])
            }
            return bogusState
          }
        }
      }

      /**
       * @param {Construct} construct
       * @param {number} from
       * @returns {undefined}
       */
      function addResult(construct, from) {
        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
          resolveAllConstructs.push(construct);
        }
        if (construct.resolve) {
          splice$3(
            context.events,
            from,
            context.events.length - from,
            construct.resolve(context.events.slice(from), context)
          );
        }
        if (construct.resolveTo) {
          context.events = construct.resolveTo(context.events, context);
        }
      }

      /**
       * Store state.
       *
       * @returns {Info}
       */
      function store() {
        const startPoint = now();
        const startPrevious = context.previous;
        const startCurrentConstruct = context.currentConstruct;
        const startEventsIndex = context.events.length;
        const startStack = Array.from(stack);
        return {
          restore,
          from: startEventsIndex
        }

        /**
         * Restore state.
         *
         * @returns {undefined}
         */
        function restore() {
          point = startPoint;
          context.previous = startPrevious;
          context.currentConstruct = startCurrentConstruct;
          context.events.length = startEventsIndex;
          stack = startStack;
          accountForPotentialSkip();
        }
      }

      /**
       * Move the current point a bit forward in the line when it’s on a column
       * skip.
       *
       * @returns {undefined}
       */
      function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
          point.column = columnStart[point.line];
          point.offset += columnStart[point.line] - 1;
        }
      }
    }

    /**
     * Get the chunks from a slice of chunks in the range of a token.
     *
     * @param {Array<Chunk>} chunks
     * @param {Pick<Token, 'end' | 'start'>} token
     * @returns {Array<Chunk>}
     */
    function sliceChunks$2(chunks, token) {
      const startIndex = token.start._index;
      const startBufferIndex = token.start._bufferIndex;
      const endIndex = token.end._index;
      const endBufferIndex = token.end._bufferIndex;
      /** @type {Array<Chunk>} */
      let view;
      if (startIndex === endIndex) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
      } else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
          const head = view[0];
          if (typeof head === 'string') {
            view[0] = head.slice(startBufferIndex);
          } else {
            view.shift();
          }
        }
        if (endBufferIndex > 0) {
          // @ts-expect-error `_bufferIndex` is used on string chunks.
          view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
      }
      return view
    }

    /**
     * Get the string value of a slice of chunks.
     *
     * @param {Array<Chunk>} chunks
     * @param {boolean | undefined} [expandTabs=false]
     * @returns {string}
     */
    function serializeChunks$2(chunks, expandTabs) {
      let index = -1;
      /** @type {Array<string>} */
      const result = [];
      /** @type {boolean | undefined} */
      let atTab;
      while (++index < chunks.length) {
        const chunk = chunks[index];
        /** @type {string} */
        let value;
        if (typeof chunk === 'string') {
          value = chunk;
        } else
          switch (chunk) {
            case -5: {
              value = '\r';
              break
            }
            case -4: {
              value = '\n';
              break
            }
            case -3: {
              value = '\r' + '\n';
              break
            }
            case -2: {
              value = expandTabs ? ' ' : '\t';
              break
            }
            case -1: {
              if (!expandTabs && atTab) continue
              value = ' ';
              break
            }
            default: {
              // Currently only replacement character.
              value = String.fromCharCode(chunk);
            }
          }
        atTab = chunk === -2;
        result.push(value);
      }
      return result.join('')
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Extension} Extension
     */

    /** @satisfies {Extension['document']} */
    const document$4 = {
      [42]: list$4,
      [43]: list$4,
      [45]: list$4,
      [48]: list$4,
      [49]: list$4,
      [50]: list$4,
      [51]: list$4,
      [52]: list$4,
      [53]: list$4,
      [54]: list$4,
      [55]: list$4,
      [56]: list$4,
      [57]: list$4,
      [62]: blockQuote$2
    };

    /** @satisfies {Extension['contentInitial']} */
    const contentInitial$1 = {
      [91]: definition$3
    };

    /** @satisfies {Extension['flowInitial']} */
    const flowInitial$1 = {
      [-2]: codeIndented$2,
      [-1]: codeIndented$2,
      [32]: codeIndented$2
    };

    /** @satisfies {Extension['flow']} */
    const flow$3 = {
      [35]: headingAtx$2,
      [42]: thematicBreak$5,
      [45]: [setextUnderline$2, thematicBreak$5],
      [60]: htmlFlow$2,
      [61]: setextUnderline$2,
      [95]: thematicBreak$5,
      [96]: codeFenced$2,
      [126]: codeFenced$2
    };

    /** @satisfies {Extension['string']} */
    const string$2 = {
      [38]: characterReference$2,
      [92]: characterEscape$2
    };

    /** @satisfies {Extension['text']} */
    const text$8 = {
      [-5]: lineEnding$2,
      [-4]: lineEnding$2,
      [-3]: lineEnding$2,
      [33]: labelStartImage$2,
      [38]: characterReference$2,
      [42]: attention$2,
      [60]: [autolink$2, htmlText$2],
      [91]: labelStartLink$2,
      [92]: [hardBreakEscape$2, characterEscape$2],
      [93]: labelEnd$4,
      [95]: attention$2,
      [96]: codeText$2
    };

    /** @satisfies {Extension['insideSpan']} */
    const insideSpan$1 = {
      null: [attention$2, resolver$1]
    };

    /** @satisfies {Extension['attentionMarkers']} */
    const attentionMarkers = {
      null: [42, 95]
    };

    /** @satisfies {Extension['disable']} */
    const disable$1 = {
      null: []
    };

    var defaultConstructs = /*#__PURE__*/Object.freeze({
        __proto__: null,
        document: document$4,
        contentInitial: contentInitial$1,
        flowInitial: flowInitial$1,
        flow: flow$3,
        string: string$2,
        text: text$8,
        insideSpan: insideSpan$1,
        attentionMarkers: attentionMarkers,
        disable: disable$1
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Create} Create
     * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
     * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
     * @typedef {import('micromark-util-types').ParseContext} ParseContext
     * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
     */

    /**
     * @param {ParseOptions | null | undefined} [options]
     * @returns {ParseContext}
     */
    function parse$3(options) {
      const settings = options || {};
      const constructs =
        /** @type {FullNormalizedExtension} */
        combineExtensions$2([defaultConstructs, ...(settings.extensions || [])]);

      /** @type {ParseContext} */
      const parser = {
        defined: [],
        lazy: {},
        constructs,
        content: create(content$5),
        document: create(document$5),
        flow: create(flow$4),
        string: create(string$3),
        text: create(text$9)
      };
      return parser

      /**
       * @param {InitialConstruct} initial
       */
      function create(initial) {
        return creator
        /** @type {Create} */
        function creator(from) {
          return createTokenizer$2(parser, initial, from)
        }
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     */

    /**
     * @param {Array<Event>} events
     * @returns {Array<Event>}
     */
    function postprocess$2(events) {
      while (!subtokenize$3(events)) {
        // Empty
      }
      return events
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Chunk} Chunk
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').Encoding} Encoding
     * @typedef {import('micromark-util-types').Value} Value
     */

    /**
     * @callback Preprocessor
     * @param {Value} value
     * @param {Encoding | null | undefined} [encoding]
     * @param {boolean | null | undefined} [end=false]
     * @returns {Array<Chunk>}
     */

    const search$1 = /[\0\t\n\r]/g;

    /**
     * @returns {Preprocessor}
     */
    function preprocess$1() {
      let column = 1;
      let buffer = '';
      /** @type {boolean | undefined} */
      let start = true;
      /** @type {boolean | undefined} */
      let atCarriageReturn;
      return preprocessor

      /** @type {Preprocessor} */
      // eslint-disable-next-line complexity
      function preprocessor(value, encoding, end) {
        /** @type {Array<Chunk>} */
        const chunks = [];
        /** @type {RegExpMatchArray | null} */
        let match;
        /** @type {number} */
        let next;
        /** @type {number} */
        let startPosition;
        /** @type {number} */
        let endPosition;
        /** @type {Code} */
        let code;
        value =
          buffer +
          (typeof value === 'string'
            ? value.toString()
            : new TextDecoder(encoding || undefined).decode(value));
        startPosition = 0;
        buffer = '';
        if (start) {
          // To do: `markdown-rs` actually parses BOMs (byte order mark).
          if (value.charCodeAt(0) === 65279) {
            startPosition++;
          }
          start = undefined;
        }
        while (startPosition < value.length) {
          search$1.lastIndex = startPosition;
          match = search$1.exec(value);
          endPosition =
            match && match.index !== undefined ? match.index : value.length;
          code = value.charCodeAt(endPosition);
          if (!match) {
            buffer = value.slice(startPosition);
            break
          }
          if (code === 10 && startPosition === endPosition && atCarriageReturn) {
            chunks.push(-3);
            atCarriageReturn = undefined;
          } else {
            if (atCarriageReturn) {
              chunks.push(-5);
              atCarriageReturn = undefined;
            }
            if (startPosition < endPosition) {
              chunks.push(value.slice(startPosition, endPosition));
              column += endPosition - startPosition;
            }
            switch (code) {
              case 0: {
                chunks.push(65533);
                column++;
                break
              }
              case 9: {
                next = Math.ceil(column / 4) * 4;
                chunks.push(-2);
                while (column++ < next) chunks.push(-1);
                break
              }
              case 10: {
                chunks.push(-4);
                column = 1;
                break
              }
              default: {
                atCarriageReturn = true;
                column = 1;
              }
            }
          }
          startPosition = endPosition + 1;
        }
        if (end) {
          if (atCarriageReturn) chunks.push(-5);
          if (buffer) chunks.push(buffer);
          chunks.push(null);
        }
        return chunks
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const characterEscapeOrReference =
      /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;

    /**
     * Decode markdown strings (which occur in places such as fenced code info
     * strings, destinations, labels, and titles).
     *
     * The “string” content type allows character escapes and -references.
     * This decodes those.
     *
     * @param {string} value
     *   Value to decode.
     * @returns {string}
     *   Decoded value.
     */
    function decodeString(value) {
      return value.replace(characterEscapeOrReference, decode$1)
    }

    /**
     * @param {string} $0
     * @param {string} $1
     * @param {string} $2
     * @returns {string}
     */
    function decode$1($0, $1, $2) {
      if ($1) {
        // Escape.
        return $1
      }

      // Reference.
      const head = $2.charCodeAt(0);
      if (head === 35) {
        const head = $2.charCodeAt(1);
        const hex = head === 120 || head === 88;
        return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
      }
      return decodeNamedCharacterReference($2) || $0
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Point} Point
     * @typedef {import('unist').Position} Position
     */

    /**
     * @typedef NodeLike
     * @property {string} type
     * @property {PositionLike | null | undefined} [position]
     *
     * @typedef PointLike
     * @property {number | null | undefined} [line]
     * @property {number | null | undefined} [column]
     * @property {number | null | undefined} [offset]
     *
     * @typedef PositionLike
     * @property {PointLike | null | undefined} [start]
     * @property {PointLike | null | undefined} [end]
     */

    /**
     * Serialize the positional info of a point, position (start and end points),
     * or node.
     *
     * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]
     *   Node, position, or point.
     * @returns {string}
     *   Pretty printed positional info of a node (`string`).
     *
     *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
     *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
     *   column, `s` for `start`, and `e` for end.
     *   An empty string (`''`) is returned if the given value is neither `node`,
     *   `position`, nor `point`.
     */
    function stringifyPosition$1(value) {
      // Nothing.
      if (!value || typeof value !== 'object') {
        return ''
      }

      // Node.
      if ('position' in value || 'type' in value) {
        return position$1(value.position)
      }

      // Position.
      if ('start' in value || 'end' in value) {
        return position$1(value)
      }

      // Point.
      if ('line' in value || 'column' in value) {
        return point$2(value)
      }

      // ?
      return ''
    }

    /**
     * @param {Point | PointLike | null | undefined} point
     * @returns {string}
     */
    function point$2(point) {
      return index$3(point && point.line) + ':' + index$3(point && point.column)
    }

    /**
     * @param {Position | PositionLike | null | undefined} pos
     * @returns {string}
     */
    function position$1(pos) {
      return point$2(pos && pos.start) + '-' + point$2(pos && pos.end)
    }

    /**
     * @param {number | null | undefined} value
     * @returns {number}
     */
    function index$3(value) {
      return value && typeof value === 'number' ? value : 1
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Break} Break
     * @typedef {import('mdast').Blockquote} Blockquote
     * @typedef {import('mdast').Code} Code
     * @typedef {import('mdast').Definition} Definition
     * @typedef {import('mdast').Emphasis} Emphasis
     * @typedef {import('mdast').Heading} Heading
     * @typedef {import('mdast').Html} Html
     * @typedef {import('mdast').Image} Image
     * @typedef {import('mdast').InlineCode} InlineCode
     * @typedef {import('mdast').Link} Link
     * @typedef {import('mdast').List} List
     * @typedef {import('mdast').ListItem} ListItem
     * @typedef {import('mdast').Nodes} Nodes
     * @typedef {import('mdast').Paragraph} Paragraph
     * @typedef {import('mdast').Parent} Parent
     * @typedef {import('mdast').PhrasingContent} PhrasingContent
     * @typedef {import('mdast').ReferenceType} ReferenceType
     * @typedef {import('mdast').Root} Root
     * @typedef {import('mdast').Strong} Strong
     * @typedef {import('mdast').Text} Text
     * @typedef {import('mdast').ThematicBreak} ThematicBreak
     *
     * @typedef {import('micromark-util-types').Encoding} Encoding
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Value} Value
     *
     * @typedef {import('unist').Point} Point
     *
     * @typedef {import('../index.js').CompileData} CompileData
     */
    const own$8 = {}.hasOwnProperty;

    /**
     * Turn markdown into a syntax tree.
     *
     * @overload
     * @param {Value} value
     * @param {Encoding | null | undefined} [encoding]
     * @param {Options | null | undefined} [options]
     * @returns {Root}
     *
     * @overload
     * @param {Value} value
     * @param {Options | null | undefined} [options]
     * @returns {Root}
     *
     * @param {Value} value
     *   Markdown to parse.
     * @param {Encoding | Options | null | undefined} [encoding]
     *   Character encoding for when `value` is `Buffer`.
     * @param {Options | null | undefined} [options]
     *   Configuration.
     * @returns {Root}
     *   mdast tree.
     */
    function fromMarkdown$2(value, encoding, options) {
      if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
      }
      return compiler$1(options)(
        postprocess$2(
          parse$3(options).document().write(preprocess$1()(value, encoding, true))
        )
      )
    }

    /**
     * Note this compiler only understand complete buffering, not streaming.
     *
     * @param {Options | null | undefined} [options]
     */
    function compiler$1(options) {
      /** @type {Config} */
      const config = {
        transforms: [],
        canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
        enter: {
          autolink: opener(link),
          autolinkProtocol: onenterdata,
          autolinkEmail: onenterdata,
          atxHeading: opener(heading),
          blockQuote: opener(blockQuote),
          characterEscape: onenterdata,
          characterReference: onenterdata,
          codeFenced: opener(codeFlow),
          codeFencedFenceInfo: buffer,
          codeFencedFenceMeta: buffer,
          codeIndented: opener(codeFlow, buffer),
          codeText: opener(codeText, buffer),
          codeTextData: onenterdata,
          data: onenterdata,
          codeFlowValue: onenterdata,
          definition: opener(definition),
          definitionDestinationString: buffer,
          definitionLabelString: buffer,
          definitionTitleString: buffer,
          emphasis: opener(emphasis),
          hardBreakEscape: opener(hardBreak),
          hardBreakTrailing: opener(hardBreak),
          htmlFlow: opener(html, buffer),
          htmlFlowData: onenterdata,
          htmlText: opener(html, buffer),
          htmlTextData: onenterdata,
          image: opener(image),
          label: buffer,
          link: opener(link),
          listItem: opener(listItem),
          listItemValue: onenterlistitemvalue,
          listOrdered: opener(list, onenterlistordered),
          listUnordered: opener(list),
          paragraph: opener(paragraph),
          reference: onenterreference,
          referenceString: buffer,
          resourceDestinationString: buffer,
          resourceTitleString: buffer,
          setextHeading: opener(heading),
          strong: opener(strong),
          thematicBreak: opener(thematicBreak)
        },
        exit: {
          atxHeading: closer(),
          atxHeadingSequence: onexitatxheadingsequence,
          autolink: closer(),
          autolinkEmail: onexitautolinkemail,
          autolinkProtocol: onexitautolinkprotocol,
          blockQuote: closer(),
          characterEscapeValue: onexitdata,
          characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
          characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
          characterReferenceValue: onexitcharacterreferencevalue,
          codeFenced: closer(onexitcodefenced),
          codeFencedFence: onexitcodefencedfence,
          codeFencedFenceInfo: onexitcodefencedfenceinfo,
          codeFencedFenceMeta: onexitcodefencedfencemeta,
          codeFlowValue: onexitdata,
          codeIndented: closer(onexitcodeindented),
          codeText: closer(onexitcodetext),
          codeTextData: onexitdata,
          data: onexitdata,
          definition: closer(),
          definitionDestinationString: onexitdefinitiondestinationstring,
          definitionLabelString: onexitdefinitionlabelstring,
          definitionTitleString: onexitdefinitiontitlestring,
          emphasis: closer(),
          hardBreakEscape: closer(onexithardbreak),
          hardBreakTrailing: closer(onexithardbreak),
          htmlFlow: closer(onexithtmlflow),
          htmlFlowData: onexitdata,
          htmlText: closer(onexithtmltext),
          htmlTextData: onexitdata,
          image: closer(onexitimage),
          label: onexitlabel,
          labelText: onexitlabeltext,
          lineEnding: onexitlineending,
          link: closer(onexitlink),
          listItem: closer(),
          listOrdered: closer(),
          listUnordered: closer(),
          paragraph: closer(),
          referenceString: onexitreferencestring,
          resourceDestinationString: onexitresourcedestinationstring,
          resourceTitleString: onexitresourcetitlestring,
          resource: onexitresource,
          setextHeading: closer(onexitsetextheading),
          setextHeadingLineSequence: onexitsetextheadinglinesequence,
          setextHeadingText: onexitsetextheadingtext,
          strong: closer(),
          thematicBreak: closer()
        }
      };
      configure$1(config, (options || {}).mdastExtensions || []);

      /** @type {CompileData} */
      const data = {};
      return compile

      /**
       * Turn micromark events into an mdast tree.
       *
       * @param {Array<Event>} events
       *   Events.
       * @returns {Root}
       *   mdast tree.
       */
      function compile(events) {
        /** @type {Root} */
        let tree = {
          type: 'root',
          children: []
        };
        /** @type {Omit<CompileContext, 'sliceSerialize'>} */
        const context = {
          stack: [tree],
          tokenStack: [],
          config,
          enter,
          exit,
          buffer,
          resume,
          data
        };
        /** @type {Array<number>} */
        const listStack = [];
        let index = -1;
        while (++index < events.length) {
          // We preprocess lists to add `listItem` tokens, and to infer whether
          // items the list itself are spread out.
          if (
            events[index][1].type === 'listOrdered' ||
            events[index][1].type === 'listUnordered'
          ) {
            if (events[index][0] === 'enter') {
              listStack.push(index);
            } else {
              const tail = listStack.pop();
              index = prepareList(events, tail, index);
            }
          }
        }
        index = -1;
        while (++index < events.length) {
          const handler = config[events[index][0]];
          if (own$8.call(handler, events[index][1].type)) {
            handler[events[index][1].type].call(
              Object.assign(
                {
                  sliceSerialize: events[index][2].sliceSerialize
                },
                context
              ),
              events[index][1]
            );
          }
        }

        // Handle tokens still being open.
        if (context.tokenStack.length > 0) {
          const tail = context.tokenStack[context.tokenStack.length - 1];
          const handler = tail[1] || defaultOnError;
          handler.call(context, undefined, tail[0]);
        }

        // Figure out `root` position.
        tree.position = {
          start: point$1(
            events.length > 0
              ? events[0][1].start
              : {
                  line: 1,
                  column: 1,
                  offset: 0
                }
          ),
          end: point$1(
            events.length > 0
              ? events[events.length - 2][1].end
              : {
                  line: 1,
                  column: 1,
                  offset: 0
                }
          )
        };

        // Call transforms.
        index = -1;
        while (++index < config.transforms.length) {
          tree = config.transforms[index](tree) || tree;
        }
        return tree
      }

      /**
       * @param {Array<Event>} events
       * @param {number} start
       * @param {number} length
       * @returns {number}
       */
      function prepareList(events, start, length) {
        let index = start - 1;
        let containerBalance = -1;
        let listSpread = false;
        /** @type {Token | undefined} */
        let listItem;
        /** @type {number | undefined} */
        let lineIndex;
        /** @type {number | undefined} */
        let firstBlankLineIndex;
        /** @type {boolean | undefined} */
        let atMarker;
        while (++index <= length) {
          const event = events[index];
          switch (event[1].type) {
            case 'listUnordered':
            case 'listOrdered':
            case 'blockQuote': {
              if (event[0] === 'enter') {
                containerBalance++;
              } else {
                containerBalance--;
              }
              atMarker = undefined;
              break
            }
            case 'lineEndingBlank': {
              if (event[0] === 'enter') {
                if (
                  listItem &&
                  !atMarker &&
                  !containerBalance &&
                  !firstBlankLineIndex
                ) {
                  firstBlankLineIndex = index;
                }
                atMarker = undefined;
              }
              break
            }
            case 'linePrefix':
            case 'listItemValue':
            case 'listItemMarker':
            case 'listItemPrefix':
            case 'listItemPrefixWhitespace': {
              // Empty.

              break
            }
            default: {
              atMarker = undefined;
            }
          }
          if (
            (!containerBalance &&
              event[0] === 'enter' &&
              event[1].type === 'listItemPrefix') ||
            (containerBalance === -1 &&
              event[0] === 'exit' &&
              (event[1].type === 'listUnordered' ||
                event[1].type === 'listOrdered'))
          ) {
            if (listItem) {
              let tailIndex = index;
              lineIndex = undefined;
              while (tailIndex--) {
                const tailEvent = events[tailIndex];
                if (
                  tailEvent[1].type === 'lineEnding' ||
                  tailEvent[1].type === 'lineEndingBlank'
                ) {
                  if (tailEvent[0] === 'exit') continue
                  if (lineIndex) {
                    events[lineIndex][1].type = 'lineEndingBlank';
                    listSpread = true;
                  }
                  tailEvent[1].type = 'lineEnding';
                  lineIndex = tailIndex;
                } else if (
                  tailEvent[1].type === 'linePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                  tailEvent[1].type === 'blockQuoteMarker' ||
                  tailEvent[1].type === 'listItemIndent'
                ) ; else {
                  break
                }
              }
              if (
                firstBlankLineIndex &&
                (!lineIndex || firstBlankLineIndex < lineIndex)
              ) {
                listItem._spread = true;
              }

              // Fix position.
              listItem.end = Object.assign(
                {},
                lineIndex ? events[lineIndex][1].start : event[1].end
              );
              events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
              index++;
              length++;
            }

            // Create a new list item.
            if (event[1].type === 'listItemPrefix') {
              /** @type {Token} */
              const item = {
                type: 'listItem',
                _spread: false,
                start: Object.assign({}, event[1].start),
                // @ts-expect-error: we’ll add `end` in a second.
                end: undefined
              };
              listItem = item;
              events.splice(index, 0, ['enter', item, event[2]]);
              index++;
              length++;
              firstBlankLineIndex = undefined;
              atMarker = true;
            }
          }
        }
        events[start][1]._spread = listSpread;
        return length
      }

      /**
       * Create an opener handle.
       *
       * @param {(token: Token) => Nodes} create
       *   Create a node.
       * @param {Handle | undefined} [and]
       *   Optional function to also run.
       * @returns {Handle}
       *   Handle.
       */
      function opener(create, and) {
        return open

        /**
         * @this {CompileContext}
         * @param {Token} token
         * @returns {undefined}
         */
        function open(token) {
          enter.call(this, create(token), token);
          if (and) and.call(this, token);
        }
      }

      /**
       * @this {CompileContext}
       * @returns {undefined}
       */
      function buffer() {
        this.stack.push({
          type: 'fragment',
          children: []
        });
      }

      /**
       * @this {CompileContext}
       *   Context.
       * @param {Nodes} node
       *   Node to enter.
       * @param {Token} token
       *   Corresponding token.
       * @param {OnEnterError | undefined} [errorHandler]
       *   Handle the case where this token is open, but it is closed by something else.
       * @returns {undefined}
       *   Nothing.
       */
      function enter(node, token, errorHandler) {
        const parent = this.stack[this.stack.length - 1];
        /** @type {Array<Nodes>} */
        const siblings = parent.children;
        siblings.push(node);
        this.stack.push(node);
        this.tokenStack.push([token, errorHandler]);
        node.position = {
          start: point$1(token.start),
          // @ts-expect-error: `end` will be patched later.
          end: undefined
        };
      }

      /**
       * Create a closer handle.
       *
       * @param {Handle | undefined} [and]
       *   Optional function to also run.
       * @returns {Handle}
       *   Handle.
       */
      function closer(and) {
        return close

        /**
         * @this {CompileContext}
         * @param {Token} token
         * @returns {undefined}
         */
        function close(token) {
          if (and) and.call(this, token);
          exit.call(this, token);
        }
      }

      /**
       * @this {CompileContext}
       *   Context.
       * @param {Token} token
       *   Corresponding token.
       * @param {OnExitError | undefined} [onExitError]
       *   Handle the case where another token is open.
       * @returns {undefined}
       *   Nothing.
       */
      function exit(token, onExitError) {
        const node = this.stack.pop();
        const open = this.tokenStack.pop();
        if (!open) {
          throw new Error(
            'Cannot close `' +
              token.type +
              '` (' +
              stringifyPosition$1({
                start: token.start,
                end: token.end
              }) +
              '): it’s not open'
          )
        } else if (open[0].type !== token.type) {
          if (onExitError) {
            onExitError.call(this, token, open[0]);
          } else {
            const handler = open[1] || defaultOnError;
            handler.call(this, token, open[0]);
          }
        }
        node.position.end = point$1(token.end);
      }

      /**
       * @this {CompileContext}
       * @returns {string}
       */
      function resume() {
        return toString$5(this.stack.pop())
      }

      //
      // Handlers.
      //

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onenterlistordered() {
        this.data.expectingFirstListItemValue = true;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onenterlistitemvalue(token) {
        if (this.data.expectingFirstListItemValue) {
          const ancestor = this.stack[this.stack.length - 2];
          ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
          this.data.expectingFirstListItemValue = undefined;
        }
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcodefencedfenceinfo() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.lang = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcodefencedfencemeta() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.meta = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcodefencedfence() {
        // Exit if this is the closing fence.
        if (this.data.flowCodeInside) return
        this.buffer();
        this.data.flowCodeInside = true;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcodefenced() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
        this.data.flowCodeInside = undefined;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcodeindented() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data.replace(/(\r?\n|\r)$/g, '');
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitdefinitionlabelstring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.label = label;
        node.identifier = normalizeIdentifier$4(
          this.sliceSerialize(token)
        ).toLowerCase();
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitdefinitiontitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.title = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitdefinitiondestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.url = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitatxheadingsequence(token) {
        const node = this.stack[this.stack.length - 1];
        if (!node.depth) {
          const depth = this.sliceSerialize(token).length;
          node.depth = depth;
        }
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitsetextheadingtext() {
        this.data.setextHeadingSlurpLineEnding = true;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitsetextheadinglinesequence(token) {
        const node = this.stack[this.stack.length - 1];
        node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitsetextheading() {
        this.data.setextHeadingSlurpLineEnding = undefined;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onenterdata(token) {
        const node = this.stack[this.stack.length - 1];
        /** @type {Array<Nodes>} */
        const siblings = node.children;
        let tail = siblings[siblings.length - 1];
        if (!tail || tail.type !== 'text') {
          // Add a new text node.
          tail = text();
          tail.position = {
            start: point$1(token.start),
            // @ts-expect-error: we’ll add `end` later.
            end: undefined
          };
          siblings.push(tail);
        }
        this.stack.push(tail);
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitdata(token) {
        const tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = point$1(token.end);
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitlineending(token) {
        const context = this.stack[this.stack.length - 1];
        // If we’re at a hard break, include the line ending in there.
        if (this.data.atHardBreak) {
          const tail = context.children[context.children.length - 1];
          tail.position.end = point$1(token.end);
          this.data.atHardBreak = undefined;
          return
        }
        if (
          !this.data.setextHeadingSlurpLineEnding &&
          config.canContainEols.includes(context.type)
        ) {
          onenterdata.call(this, token);
          onexitdata.call(this, token);
        }
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexithardbreak() {
        this.data.atHardBreak = true;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexithtmlflow() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexithtmltext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitcodetext() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.value = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitlink() {
        const node = this.stack[this.stack.length - 1];
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (this.data.inReference) {
          /** @type {ReferenceType} */
          const referenceType = this.data.referenceType || 'shortcut';
          node.type += 'Reference';
          // @ts-expect-error: mutate.
          node.referenceType = referenceType;
          // @ts-expect-error: mutate.
          delete node.url;
          delete node.title;
        } else {
          // @ts-expect-error: mutate.
          delete node.identifier;
          // @ts-expect-error: mutate.
          delete node.label;
        }
        this.data.referenceType = undefined;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitimage() {
        const node = this.stack[this.stack.length - 1];
        // Note: there are also `identifier` and `label` fields on this link node!
        // These are used / cleaned here.
        // To do: clean.
        if (this.data.inReference) {
          /** @type {ReferenceType} */
          const referenceType = this.data.referenceType || 'shortcut';
          node.type += 'Reference';
          // @ts-expect-error: mutate.
          node.referenceType = referenceType;
          // @ts-expect-error: mutate.
          delete node.url;
          delete node.title;
        } else {
          // @ts-expect-error: mutate.
          delete node.identifier;
          // @ts-expect-error: mutate.
          delete node.label;
        }
        this.data.referenceType = undefined;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitlabeltext(token) {
        const string = this.sliceSerialize(token);
        const ancestor = this.stack[this.stack.length - 2];
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        ancestor.label = decodeString(string);
        // @ts-expect-error: same as above.
        ancestor.identifier = normalizeIdentifier$4(string).toLowerCase();
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitlabel() {
        const fragment = this.stack[this.stack.length - 1];
        const value = this.resume();
        const node = this.stack[this.stack.length - 1];
        // Assume a reference.
        this.data.inReference = true;
        if (node.type === 'link') {
          /** @type {Array<PhrasingContent>} */
          const children = fragment.children;
          node.children = children;
        } else {
          node.alt = value;
        }
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitresourcedestinationstring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.url = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitresourcetitlestring() {
        const data = this.resume();
        const node = this.stack[this.stack.length - 1];
        node.title = data;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitresource() {
        this.data.inReference = undefined;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onenterreference() {
        this.data.referenceType = 'collapsed';
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitreferencestring(token) {
        const label = this.resume();
        const node = this.stack[this.stack.length - 1];
        // @ts-expect-error: stash this on the node, as it might become a reference
        // later.
        node.label = label;
        // @ts-expect-error: same as above.
        node.identifier = normalizeIdentifier$4(
          this.sliceSerialize(token)
        ).toLowerCase();
        this.data.referenceType = 'full';
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */

      function onexitcharacterreferencemarker(token) {
        this.data.characterReferenceType = token.type;
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitcharacterreferencevalue(token) {
        const data = this.sliceSerialize(token);
        const type = this.data.characterReferenceType;
        /** @type {string} */
        let value;
        if (type) {
          value = decodeNumericCharacterReference(
            data,
            type === 'characterReferenceMarkerNumeric' ? 10 : 16
          );
          this.data.characterReferenceType = undefined;
        } else {
          const result = decodeNamedCharacterReference(data);
          value = result;
        }
        const tail = this.stack.pop();
        tail.value += value;
        tail.position.end = point$1(token.end);
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        node.url = this.sliceSerialize(token);
      }

      /**
       * @this {CompileContext}
       * @type {Handle}
       */
      function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        const node = this.stack[this.stack.length - 1];
        node.url = 'mailto:' + this.sliceSerialize(token);
      }

      //
      // Creaters.
      //

      /** @returns {Blockquote} */
      function blockQuote() {
        return {
          type: 'blockquote',
          children: []
        }
      }

      /** @returns {Code} */
      function codeFlow() {
        return {
          type: 'code',
          lang: null,
          meta: null,
          value: ''
        }
      }

      /** @returns {InlineCode} */
      function codeText() {
        return {
          type: 'inlineCode',
          value: ''
        }
      }

      /** @returns {Definition} */
      function definition() {
        return {
          type: 'definition',
          identifier: '',
          label: null,
          title: null,
          url: ''
        }
      }

      /** @returns {Emphasis} */
      function emphasis() {
        return {
          type: 'emphasis',
          children: []
        }
      }

      /** @returns {Heading} */
      function heading() {
        return {
          type: 'heading',
          // @ts-expect-error `depth` will be set later.
          depth: 0,
          children: []
        }
      }

      /** @returns {Break} */
      function hardBreak() {
        return {
          type: 'break'
        }
      }

      /** @returns {Html} */
      function html() {
        return {
          type: 'html',
          value: ''
        }
      }

      /** @returns {Image} */
      function image() {
        return {
          type: 'image',
          title: null,
          url: '',
          alt: null
        }
      }

      /** @returns {Link} */
      function link() {
        return {
          type: 'link',
          title: null,
          url: '',
          children: []
        }
      }

      /**
       * @param {Token} token
       * @returns {List}
       */
      function list(token) {
        return {
          type: 'list',
          ordered: token.type === 'listOrdered',
          start: null,
          spread: token._spread,
          children: []
        }
      }

      /**
       * @param {Token} token
       * @returns {ListItem}
       */
      function listItem(token) {
        return {
          type: 'listItem',
          spread: token._spread,
          checked: null,
          children: []
        }
      }

      /** @returns {Paragraph} */
      function paragraph() {
        return {
          type: 'paragraph',
          children: []
        }
      }

      /** @returns {Strong} */
      function strong() {
        return {
          type: 'strong',
          children: []
        }
      }

      /** @returns {Text} */
      function text() {
        return {
          type: 'text',
          value: ''
        }
      }

      /** @returns {ThematicBreak} */
      function thematicBreak() {
        return {
          type: 'thematicBreak'
        }
      }
    }

    /**
     * Copy a point-like value.
     *
     * @param {Point} d
     *   Point-like value.
     * @returns {Point}
     *   unist point.
     */
    function point$1(d) {
      return {
        line: d.line,
        column: d.column,
        offset: d.offset
      }
    }

    /**
     * @param {Config} combined
     * @param {Array<Array<Extension> | Extension>} extensions
     * @returns {undefined}
     */
    function configure$1(combined, extensions) {
      let index = -1;
      while (++index < extensions.length) {
        const value = extensions[index];
        if (Array.isArray(value)) {
          configure$1(combined, value);
        } else {
          extension$2(combined, value);
        }
      }
    }

    /**
     * @param {Config} combined
     * @param {Extension} extension
     * @returns {undefined}
     */
    function extension$2(combined, extension) {
      /** @type {keyof Extension} */
      let key;
      for (key in extension) {
        if (own$8.call(extension, key)) {
          switch (key) {
            case 'canContainEols': {
              const right = extension[key];
              if (right) {
                combined[key].push(...right);
              }
              break
            }
            case 'transforms': {
              const right = extension[key];
              if (right) {
                combined[key].push(...right);
              }
              break
            }
            case 'enter':
            case 'exit': {
              const right = extension[key];
              if (right) {
                Object.assign(combined[key], right);
              }
              break
            }
            // No default
          }
        }
      }
    }

    /** @type {OnEnterError} */
    function defaultOnError(left, right) {
      if (left) {
        throw new Error(
          'Cannot close `' +
            left.type +
            '` (' +
            stringifyPosition$1({
              start: left.start,
              end: left.end
            }) +
            '): a different token (`' +
            right.type +
            '`, ' +
            stringifyPosition$1({
              start: right.start,
              end: right.end
            }) +
            ') is open'
        )
      } else {
        throw new Error(
          'Cannot close document, a token (`' +
            right.type +
            '`, ' +
            stringifyPosition$1({
              start: right.start,
              end: right.end
            }) +
            ') is still open'
        )
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Root} Root
     * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions
     * @typedef {import('unified').Parser<Root>} Parser
     * @typedef {import('unified').Processor<Root>} Processor
     */

    /**
     * Aadd support for parsing from markdown.
     *
     * @param {Readonly<Options> | null | undefined} [options]
     *   Configuration (optional).
     * @returns {undefined}
     *   Nothing.
     */
    function remarkParse$1(options) {
      /** @type {Processor} */
      // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.
      const self = this;

      self.parser = parser;

      /**
       * @type {Parser}
       */
      function parser(doc) {
        return fromMarkdown$2(doc, {
          ...self.data('settings'),
          ...options,
          // Note: these options are not in the readme.
          // The goal is for them to be set by plugins on `data` instead of being
          // passed by users.
          extensions: self.data('micromarkExtensions') || [],
          mdastExtensions: self.data('fromMarkdownExtensions') || []
        })
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Blockquote} Blockquote
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `blockquote` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Blockquote} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function blockquote$1(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'blockquote',
        properties: {},
        children: state.wrap(state.all(node), true)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Text} Text
     * @typedef {import('mdast').Break} Break
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `break` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Break} node
     *   mdast node.
     * @returns {Array<Element | Text>}
     *   hast element content.
     */
    function hardBreak$1(state, node) {
      /** @type {Element} */
      const result = {type: 'element', tagName: 'br', properties: {}, children: []};
      state.patch(node, result);
      return [state.applyData(node, result), {type: 'text', value: '\n'}]
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').Code} Code
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `code` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Code} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function code$2(state, node) {
      const value = node.value ? node.value + '\n' : '';
      /** @type {Properties} */
      const properties = {};

      if (node.lang) {
        properties.className = ['language-' + node.lang];
      }

      // Create `<code>`.
      /** @type {Element} */
      let result = {
        type: 'element',
        tagName: 'code',
        properties,
        children: [{type: 'text', value}]
      };

      if (node.meta) {
        result.data = {meta: node.meta};
      }

      state.patch(node, result);
      result = state.applyData(node, result);

      // Create `<pre>`.
      result = {type: 'element', tagName: 'pre', properties: {}, children: [result]};
      state.patch(node, result);
      return result
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Delete} Delete
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `delete` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Delete} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function strikethrough(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'del',
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Emphasis} Emphasis
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `emphasis` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Emphasis} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function emphasis$1(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'em',
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').FootnoteReference} FootnoteReference
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `footnoteReference` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {FootnoteReference} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function footnoteReference$1(state, node) {
      const clobberPrefix =
        typeof state.options.clobberPrefix === 'string'
          ? state.options.clobberPrefix
          : 'user-content-';
      const id = String(node.identifier).toUpperCase();
      const safeId = normalizeUri(id.toLowerCase());
      const index = state.footnoteOrder.indexOf(id);
      /** @type {number} */
      let counter;

      let reuseCounter = state.footnoteCounts.get(id);

      if (reuseCounter === undefined) {
        reuseCounter = 0;
        state.footnoteOrder.push(id);
        counter = state.footnoteOrder.length;
      } else {
        counter = index + 1;
      }

      reuseCounter += 1;
      state.footnoteCounts.set(id, reuseCounter);

      /** @type {Element} */
      const link = {
        type: 'element',
        tagName: 'a',
        properties: {
          href: '#' + clobberPrefix + 'fn-' + safeId,
          id:
            clobberPrefix +
            'fnref-' +
            safeId +
            (reuseCounter > 1 ? '-' + reuseCounter : ''),
          dataFootnoteRef: true,
          ariaDescribedBy: ['footnote-label']
        },
        children: [{type: 'text', value: String(counter)}]
      };
      state.patch(node, link);

      /** @type {Element} */
      const sup = {
        type: 'element',
        tagName: 'sup',
        properties: {},
        children: [link]
      };
      state.patch(node, sup);
      return state.applyData(node, sup)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Heading} Heading
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `heading` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Heading} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function heading$1(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'h' + node.depth,
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Html} Html
     * @typedef {import('../state.js').State} State
     * @typedef {import('../../index.js').Raw} Raw
     */

    /**
     * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
     * nothing).
     *
     * @param {State} state
     *   Info passed around.
     * @param {Html} node
     *   mdast node.
     * @returns {Element | Raw | undefined}
     *   hast node.
     */
    function html$1(state, node) {
      if (state.options.allowDangerousHtml) {
        /** @type {Raw} */
        const result = {type: 'raw', value: node.value};
        state.patch(node, result);
        return state.applyData(node, result)
      }

      return undefined
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').ElementContent} ElementContent
     *
     * @typedef {import('mdast').Nodes} Nodes
     * @typedef {import('mdast').Reference} Reference
     *
     * @typedef {import('./state.js').State} State
     */

    /**
     * Return the content of a reference without definition as plain text.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Extract<Nodes, Reference>} node
     *   Reference node (image, link).
     * @returns {Array<ElementContent>}
     *   hast content.
     */
    function revert(state, node) {
      const subtype = node.referenceType;
      let suffix = ']';

      if (subtype === 'collapsed') {
        suffix += '[]';
      } else if (subtype === 'full') {
        suffix += '[' + (node.label || node.identifier) + ']';
      }

      if (node.type === 'imageReference') {
        return [{type: 'text', value: '![' + node.alt + suffix}]
      }

      const contents = state.all(node);
      const head = contents[0];

      if (head && head.type === 'text') {
        head.value = '[' + head.value;
      } else {
        contents.unshift({type: 'text', value: '['});
      }

      const tail = contents[contents.length - 1];

      if (tail && tail.type === 'text') {
        tail.value += suffix;
      } else {
        contents.push({type: 'text', value: suffix});
      }

      return contents
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').ElementContent} ElementContent
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').ImageReference} ImageReference
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `imageReference` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {ImageReference} node
     *   mdast node.
     * @returns {Array<ElementContent> | ElementContent}
     *   hast node.
     */
    function imageReference$1(state, node) {
      const id = String(node.identifier).toUpperCase();
      const def = state.definitionById.get(id);

      if (!def) {
        return revert(state, node)
      }

      /** @type {Properties} */
      const properties = {src: normalizeUri(def.url || ''), alt: node.alt};

      if (def.title !== null && def.title !== undefined) {
        properties.title = def.title;
      }

      /** @type {Element} */
      const result = {type: 'element', tagName: 'img', properties, children: []};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').Image} Image
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `image` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Image} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function image$2(state, node) {
      /** @type {Properties} */
      const properties = {src: normalizeUri(node.url)};

      if (node.alt !== null && node.alt !== undefined) {
        properties.alt = node.alt;
      }

      if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
      }

      /** @type {Element} */
      const result = {type: 'element', tagName: 'img', properties, children: []};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Text} Text
     * @typedef {import('mdast').InlineCode} InlineCode
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `inlineCode` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {InlineCode} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function inlineCode$1(state, node) {
      /** @type {Text} */
      const text = {type: 'text', value: node.value.replace(/\r?\n|\r/g, ' ')};
      state.patch(node, text);

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'code',
        properties: {},
        children: [text]
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').ElementContent} ElementContent
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').LinkReference} LinkReference
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `linkReference` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {LinkReference} node
     *   mdast node.
     * @returns {Array<ElementContent> | ElementContent}
     *   hast node.
     */
    function linkReference$1(state, node) {
      const id = String(node.identifier).toUpperCase();
      const def = state.definitionById.get(id);

      if (!def) {
        return revert(state, node)
      }

      /** @type {Properties} */
      const properties = {href: normalizeUri(def.url || '')};

      if (def.title !== null && def.title !== undefined) {
        properties.title = def.title;
      }

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'a',
        properties,
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').Link} Link
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `link` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Link} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function link$1(state, node) {
      /** @type {Properties} */
      const properties = {href: normalizeUri(node.url)};

      if (node.title !== null && node.title !== undefined) {
        properties.title = node.title;
      }

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'a',
        properties,
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').ElementContent} ElementContent
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').ListItem} ListItem
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `listItem` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {ListItem} node
     *   mdast node.
     * @param {Parents | undefined} parent
     *   Parent of `node`.
     * @returns {Element}
     *   hast node.
     */
    function listItem$1(state, node, parent) {
      const results = state.all(node);
      const loose = parent ? listLoose$1(parent) : listItemLoose$1(node);
      /** @type {Properties} */
      const properties = {};
      /** @type {Array<ElementContent>} */
      const children = [];

      if (typeof node.checked === 'boolean') {
        const head = results[0];
        /** @type {Element} */
        let paragraph;

        if (head && head.type === 'element' && head.tagName === 'p') {
          paragraph = head;
        } else {
          paragraph = {type: 'element', tagName: 'p', properties: {}, children: []};
          results.unshift(paragraph);
        }

        if (paragraph.children.length > 0) {
          paragraph.children.unshift({type: 'text', value: ' '});
        }

        paragraph.children.unshift({
          type: 'element',
          tagName: 'input',
          properties: {type: 'checkbox', checked: node.checked, disabled: true},
          children: []
        });

        // According to github-markdown-css, this class hides bullet.
        // See: <https://github.com/sindresorhus/github-markdown-css>.
        properties.className = ['task-list-item'];
      }

      let index = -1;

      while (++index < results.length) {
        const child = results[index];

        // Add eols before nodes, except if this is a loose, first paragraph.
        if (
          loose ||
          index !== 0 ||
          child.type !== 'element' ||
          child.tagName !== 'p'
        ) {
          children.push({type: 'text', value: '\n'});
        }

        if (child.type === 'element' && child.tagName === 'p' && !loose) {
          children.push(...child.children);
        } else {
          children.push(child);
        }
      }

      const tail = results[results.length - 1];

      // Add a final eol.
      if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
        children.push({type: 'text', value: '\n'});
      }

      /** @type {Element} */
      const result = {type: 'element', tagName: 'li', properties, children};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    /**
     * @param {Parents} node
     * @return {Boolean}
     */
    function listLoose$1(node) {
      let loose = false;
      if (node.type === 'list') {
        loose = node.spread || false;
        const children = node.children;
        let index = -1;

        while (!loose && ++index < children.length) {
          loose = listItemLoose$1(children[index]);
        }
      }

      return loose
    }

    /**
     * @param {ListItem} node
     * @return {Boolean}
     */
    function listItemLoose$1(node) {
      const spread = node.spread;

      return spread === null || spread === undefined
        ? node.children.length > 1
        : spread
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').List} List
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `list` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {List} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function list$3(state, node) {
      /** @type {Properties} */
      const properties = {};
      const results = state.all(node);
      let index = -1;

      if (typeof node.start === 'number' && node.start !== 1) {
        properties.start = node.start;
      }

      // Like GitHub, add a class for custom styling.
      while (++index < results.length) {
        const child = results[index];

        if (
          child.type === 'element' &&
          child.tagName === 'li' &&
          child.properties &&
          Array.isArray(child.properties.className) &&
          child.properties.className.includes('task-list-item')
        ) {
          properties.className = ['contains-task-list'];
          break
        }
      }

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: node.ordered ? 'ol' : 'ul',
        properties,
        children: state.wrap(results, true)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Paragraph} Paragraph
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `paragraph` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Paragraph} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function paragraph$1(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'p',
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Parents} HastParents
     * @typedef {import('hast').Root} HastRoot
     * @typedef {import('mdast').Root} MdastRoot
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `root` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {MdastRoot} node
     *   mdast node.
     * @returns {HastParents}
     *   hast node.
     */
    function root$4(state, node) {
      /** @type {HastRoot} */
      const result = {type: 'root', children: state.wrap(state.all(node))};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Strong} Strong
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `strong` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Strong} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function strong$1(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'strong',
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').Table} Table
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `table` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {Table} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function table(state, node) {
      const rows = state.all(node);
      const firstRow = rows.shift();
      /** @type {Array<Element>} */
      const tableContent = [];

      if (firstRow) {
        /** @type {Element} */
        const head = {
          type: 'element',
          tagName: 'thead',
          properties: {},
          children: state.wrap([firstRow], true)
        };
        state.patch(node.children[0], head);
        tableContent.push(head);
      }

      if (rows.length > 0) {
        /** @type {Element} */
        const body = {
          type: 'element',
          tagName: 'tbody',
          properties: {},
          children: state.wrap(rows, true)
        };

        const start = pointStart(node.children[1]);
        const end = pointEnd(node.children[node.children.length - 1]);
        if (start && end) body.position = {start, end};
        tableContent.push(body);
      }

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'table',
        properties: {},
        children: state.wrap(tableContent, true)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').ElementContent} ElementContent
     * @typedef {import('hast').Properties} Properties
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').TableRow} TableRow
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `tableRow` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {TableRow} node
     *   mdast node.
     * @param {Parents | undefined} parent
     *   Parent of `node`.
     * @returns {Element}
     *   hast node.
     */
    function tableRow(state, node, parent) {
      const siblings = parent ? parent.children : undefined;
      // Generate a body row when without parent.
      const rowIndex = siblings ? siblings.indexOf(node) : 1;
      const tagName = rowIndex === 0 ? 'th' : 'td';
      // To do: option to use `style`?
      const align = parent && parent.type === 'table' ? parent.align : undefined;
      const length = align ? align.length : node.children.length;
      let cellIndex = -1;
      /** @type {Array<ElementContent>} */
      const cells = [];

      while (++cellIndex < length) {
        // Note: can also be undefined.
        const cell = node.children[cellIndex];
        /** @type {Properties} */
        const properties = {};
        const alignValue = align ? align[cellIndex] : undefined;

        if (alignValue) {
          properties.align = alignValue;
        }

        /** @type {Element} */
        let result = {type: 'element', tagName, properties, children: []};

        if (cell) {
          result.children = state.all(cell);
          state.patch(cell, result);
          result = state.applyData(cell, result);
        }

        cells.push(result);
      }

      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'tr',
        properties: {},
        children: state.wrap(cells, true)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').TableCell} TableCell
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `tableCell` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {TableCell} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function tableCell(state, node) {
      // Note: this function is normally not called: see `table-row` for how rows
      // and their cells are compiled.
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'td', // Assume body cell.
        properties: {},
        children: state.all(node)
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const tab = 9; /* `\t` */
    const space = 32; /* ` ` */

    /**
     * Remove initial and final spaces and tabs at the line breaks in `value`.
     * Does not trim initial and final spaces and tabs of the value itself.
     *
     * @param {string} value
     *   Value to trim.
     * @returns {string}
     *   Trimmed value.
     */
    function trimLines(value) {
      const source = String(value);
      const search = /\r?\n|\r/g;
      let match = search.exec(source);
      let last = 0;
      /** @type {Array<string>} */
      const lines = [];

      while (match) {
        lines.push(
          trimLine(source.slice(last, match.index), last > 0, true),
          match[0]
        );

        last = match.index + match[0].length;
        match = search.exec(source);
      }

      lines.push(trimLine(source.slice(last), last > 0, false));

      return lines.join('')
    }

    /**
     * @param {string} value
     *   Line to trim.
     * @param {boolean} start
     *   Whether to trim the start of the line.
     * @param {boolean} end
     *   Whether to trim the end of the line.
     * @returns {string}
     *   Trimmed line.
     */
    function trimLine(value, start, end) {
      let startIndex = 0;
      let endIndex = value.length;

      if (start) {
        let code = value.codePointAt(startIndex);

        while (code === tab || code === space) {
          startIndex++;
          code = value.codePointAt(startIndex);
        }
      }

      if (end) {
        let code = value.codePointAt(endIndex - 1);

        while (code === tab || code === space) {
          endIndex--;
          code = value.codePointAt(endIndex - 1);
        }
      }

      return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} HastElement
     * @typedef {import('hast').Text} HastText
     * @typedef {import('mdast').Text} MdastText
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `text` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {MdastText} node
     *   mdast node.
     * @returns {HastElement | HastText}
     *   hast node.
     */
    function text$7(state, node) {
      /** @type {HastText} */
      const result = {type: 'text', value: trimLines(String(node.value))};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('mdast').ThematicBreak} ThematicBreak
     * @typedef {import('../state.js').State} State
     */

    /**
     * Turn an mdast `thematicBreak` node into hast.
     *
     * @param {State} state
     *   Info passed around.
     * @param {ThematicBreak} node
     *   mdast node.
     * @returns {Element}
     *   hast node.
     */
    function thematicBreak$4(state, node) {
      /** @type {Element} */
      const result = {
        type: 'element',
        tagName: 'hr',
        properties: {},
        children: []
      };
      state.patch(node, result);
      return state.applyData(node, result)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Default handlers for nodes.
     *
     * @satisfies {import('../state.js').Handlers}
     */
    const handlers = {
      blockquote: blockquote$1,
      break: hardBreak$1,
      code: code$2,
      delete: strikethrough,
      emphasis: emphasis$1,
      footnoteReference: footnoteReference$1,
      heading: heading$1,
      html: html$1,
      imageReference: imageReference$1,
      image: image$2,
      inlineCode: inlineCode$1,
      linkReference: linkReference$1,
      link: link$1,
      listItem: listItem$1,
      list: list$3,
      paragraph: paragraph$1,
      // @ts-expect-error: root is different, but hard to type.
      root: root$4,
      strong: strong$1,
      table,
      tableCell,
      tableRow,
      text: text$7,
      thematicBreak: thematicBreak$4,
      toml: ignore,
      yaml: ignore,
      definition: ignore,
      footnoteDefinition: ignore
    };

    // Return nothing for nodes that are ignored.
    function ignore() {
      return undefined
    }

    var cjs = {};

    var deserialize$1 = {};

    var types = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const VOID$2       = -1;
    types.VOID = VOID$2;
    const PRIMITIVE$2  = 0;
    types.PRIMITIVE = PRIMITIVE$2;
    const ARRAY$2      = 1;
    types.ARRAY = ARRAY$2;
    const OBJECT$2     = 2;
    types.OBJECT = OBJECT$2;
    const DATE$2       = 3;
    types.DATE = DATE$2;
    const REGEXP$2     = 4;
    types.REGEXP = REGEXP$2;
    const MAP$2        = 5;
    types.MAP = MAP$2;
    const SET$2        = 6;
    types.SET = SET$2;
    const ERROR$2      = 7;
    types.ERROR = ERROR$2;
    const BIGINT$2     = 8;
    types.BIGINT = BIGINT$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const {
      VOID: VOID$1, PRIMITIVE: PRIMITIVE$1, ARRAY: ARRAY$1, OBJECT: OBJECT$1, DATE: DATE$1, REGEXP: REGEXP$1, MAP: MAP$1, SET: SET$1, ERROR: ERROR$1, BIGINT: BIGINT$1
    } = types;

    const env$1 = typeof self === 'object' ? self : globalThis;

    const deserializer = ($, _) => {
      const as = (out, index) => {
        $.set(index, out);
        return out;
      };

      const unpair = index => {
        if ($.has(index))
          return $.get(index);

        const [type, value] = _[index];
        switch (type) {
          case PRIMITIVE$1:
          case VOID$1:
            return as(value, index);
          case ARRAY$1: {
            const arr = as([], index);
            for (const index of value)
              arr.push(unpair(index));
            return arr;
          }
          case OBJECT$1: {
            const object = as({}, index);
            for (const [key, index] of value)
              object[unpair(key)] = unpair(index);
            return object;
          }
          case DATE$1:
            return as(new Date(value), index);
          case REGEXP$1: {
            const {source, flags} = value;
            return as(new RegExp(source, flags), index);
          }
          case MAP$1: {
            const map = as(new Map, index);
            for (const [key, index] of value)
              map.set(unpair(key), unpair(index));
            return map;
          }
          case SET$1: {
            const set = as(new Set, index);
            for (const index of value)
              set.add(unpair(index));
            return set;
          }
          case ERROR$1: {
            const {name, message} = value;
            return as(new env$1[name](message), index);
          }
          case BIGINT$1:
            return as(BigInt(value), index);
          case 'BigInt':
            return as(Object(BigInt(value)), index);
        }
        return as(new env$1[type](value), index);
      };

      return unpair;
    };

    /**
     * @typedef {Array<string,any>} Record a type representation
     */

    /**
     * Returns a deserialized value from a serialized array of Records.
     * @param {Record[]} serialized a previously serialized value.
     * @returns {any}
     */
    const deserialize = serialized => deserializer(new Map, serialized)(0);
    deserialize$1.deserialize = deserialize;

    var serialize$2 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const {
      VOID, PRIMITIVE, ARRAY, OBJECT, DATE, REGEXP, MAP, SET, ERROR, BIGINT
    } = types;

    const EMPTY = '';

    const {toString: toString$4} = {};
    const {keys: keys$1} = Object;

    const typeOf = value => {
      const type = typeof value;
      if (type !== 'object' || !value)
        return [PRIMITIVE, type];

      const asString = toString$4.call(value).slice(8, -1);
      switch (asString) {
        case 'Array':
          return [ARRAY, EMPTY];
        case 'Object':
          return [OBJECT, EMPTY];
        case 'Date':
          return [DATE, EMPTY];
        case 'RegExp':
          return [REGEXP, EMPTY];
        case 'Map':
          return [MAP, EMPTY];
        case 'Set':
          return [SET, EMPTY];
      }

      if (asString.includes('Array'))
        return [ARRAY, asString];

      if (asString.includes('Error'))
        return [ERROR, asString];

      return [OBJECT, asString];
    };

    const shouldSkip = ([TYPE, type]) => (
      TYPE === PRIMITIVE &&
      (type === 'function' || type === 'symbol')
    );

    const serializer = (strict, json, $, _) => {

      const as = (out, value) => {
        const index = _.push(out) - 1;
        $.set(value, index);
        return index;
      };

      const pair = value => {
        if ($.has(value))
          return $.get(value);

        let [TYPE, type] = typeOf(value);
        switch (TYPE) {
          case PRIMITIVE: {
            let entry = value;
            switch (type) {
              case 'bigint':
                TYPE = BIGINT;
                entry = value.toString();
                break;
              case 'function':
              case 'symbol':
                if (strict)
                  throw new TypeError('unable to serialize ' + type);
                entry = null;
                break;
              case 'undefined':
                return as([VOID], value);
            }
            return as([TYPE, entry], value);
          }
          case ARRAY: {
            if (type)
              return as([type, [...value]], value);
      
            const arr = [];
            const index = as([TYPE, arr], value);
            for (const entry of value)
              arr.push(pair(entry));
            return index;
          }
          case OBJECT: {
            if (type) {
              switch (type) {
                case 'BigInt':
                  return as([type, value.toString()], value);
                case 'Boolean':
                case 'Number':
                case 'String':
                  return as([type, value.valueOf()], value);
              }
            }

            if (json && ('toJSON' in value))
              return pair(value.toJSON());

            const entries = [];
            const index = as([TYPE, entries], value);
            for (const key of keys$1(value)) {
              if (strict || !shouldSkip(typeOf(value[key])))
                entries.push([pair(key), pair(value[key])]);
            }
            return index;
          }
          case DATE:
            return as([TYPE, value.toISOString()], value);
          case REGEXP: {
            const {source, flags} = value;
            return as([TYPE, {source, flags}], value);
          }
          case MAP: {
            const entries = [];
            const index = as([TYPE, entries], value);
            for (const [key, entry] of value) {
              if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
                entries.push([pair(key), pair(entry)]);
            }
            return index;
          }
          case SET: {
            const entries = [];
            const index = as([TYPE, entries], value);
            for (const entry of value) {
              if (strict || !shouldSkip(typeOf(entry)))
                entries.push(pair(entry));
            }
            return index;
          }
        }

        const {message} = value;
        return as([TYPE, {name: type, message}], value);
      };

      return pair;
    };

    /**
     * @typedef {Array<string,any>} Record a type representation
     */

    /**
     * Returns an array of serialized Records.
     * @param {any} value a serializable value.
     * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,
     *  if `true`, will not throw errors on incompatible types, and behave more
     *  like JSON stringify would behave. Symbol and Function will be discarded.
     * @returns {Record[]}
     */
     const serialize$1 = (value, {json, lossy} = {}) => {
      const _ = [];
      return serializer(!(json || lossy), !!json, new Map, _)(value), _;
    };
    serialize$2.serialize = serialize$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (exports) {
    	const {deserialize} = deserialize$1;
    	const {serialize} = serialize$2;

    	/**
    	 * @typedef {Array<string,any>} Record a type representation
    	 */

    	/**
    	 * Returns an array of serialized Records.
    	 * @param {any} any a serializable value.
    	 * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with
    	 * a transfer option (ignored when polyfilled) and/or non standard fields that
    	 * fallback to the polyfill if present.
    	 * @returns {Record[]}
    	 */
    	Object.defineProperty(exports, '__esModule', {value: true}).default = typeof structuredClone === "function" ?
    	  /* c8 ignore start */
    	  (any, options) => (
    	    options && ('json' in options || 'lossy' in options) ?
    	      deserialize(serialize(any, options)) : structuredClone(any)
    	  ) :
    	  (any, options) => deserialize(serialize(any, options));
    	  /* c8 ignore stop */

    	exports.deserialize = deserialize;
    	exports.serialize = serialize;
    } (cjs));

    var structuredClone$1 = /*@__PURE__*/getDefaultExportFromCjs(cjs);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} Element
     * @typedef {import('hast').ElementContent} ElementContent
     *
     * @typedef {import('./state.js').State} State
     */

    /**
     * Generate the default content that GitHub uses on backreferences.
     *
     * @param {number} _
     *   Index of the definition in the order that they are first referenced,
     *   0-indexed.
     * @param {number} rereferenceIndex
     *   Index of calls to the same definition, 0-indexed.
     * @returns {Array<ElementContent>}
     *   Content.
     */
    function defaultFootnoteBackContent(_, rereferenceIndex) {
      /** @type {Array<ElementContent>} */
      const result = [{type: 'text', value: '↩'}];

      if (rereferenceIndex > 1) {
        result.push({
          type: 'element',
          tagName: 'sup',
          properties: {},
          children: [{type: 'text', value: String(rereferenceIndex)}]
        });
      }

      return result
    }

    /**
     * Generate the default label that GitHub uses on backreferences.
     *
     * @param {number} referenceIndex
     *   Index of the definition in the order that they are first referenced,
     *   0-indexed.
     * @param {number} rereferenceIndex
     *   Index of calls to the same definition, 0-indexed.
     * @returns {string}
     *   Label.
     */
    function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
      return (
        'Back to reference ' +
        (referenceIndex + 1) +
        (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')
      )
    }

    /**
     * Generate a hast footer for called footnote definitions.
     *
     * @param {State} state
     *   Info passed around.
     * @returns {Element | undefined}
     *   `section` element or `undefined`.
     */
    // eslint-disable-next-line complexity
    function footer(state) {
      const clobberPrefix =
        typeof state.options.clobberPrefix === 'string'
          ? state.options.clobberPrefix
          : 'user-content-';
      const footnoteBackContent =
        state.options.footnoteBackContent || defaultFootnoteBackContent;
      const footnoteBackLabel =
        state.options.footnoteBackLabel || defaultFootnoteBackLabel;
      const footnoteLabel = state.options.footnoteLabel || 'Footnotes';
      const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2';
      const footnoteLabelProperties = state.options.footnoteLabelProperties || {
        className: ['sr-only']
      };
      /** @type {Array<ElementContent>} */
      const listItems = [];
      let referenceIndex = -1;

      while (++referenceIndex < state.footnoteOrder.length) {
        const def = state.footnoteById.get(state.footnoteOrder[referenceIndex]);

        if (!def) {
          continue
        }

        const content = state.all(def);
        const id = String(def.identifier).toUpperCase();
        const safeId = normalizeUri(id.toLowerCase());
        let rereferenceIndex = 0;
        /** @type {Array<ElementContent>} */
        const backReferences = [];
        const counts = state.footnoteCounts.get(id);

        // eslint-disable-next-line no-unmodified-loop-condition
        while (counts !== undefined && ++rereferenceIndex <= counts) {
          if (backReferences.length > 0) {
            backReferences.push({type: 'text', value: ' '});
          }

          let children =
            typeof footnoteBackContent === 'string'
              ? footnoteBackContent
              : footnoteBackContent(referenceIndex, rereferenceIndex);

          if (typeof children === 'string') {
            children = {type: 'text', value: children};
          }

          backReferences.push({
            type: 'element',
            tagName: 'a',
            properties: {
              href:
                '#' +
                clobberPrefix +
                'fnref-' +
                safeId +
                (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),
              dataFootnoteBackref: '',
              ariaLabel:
                typeof footnoteBackLabel === 'string'
                  ? footnoteBackLabel
                  : footnoteBackLabel(referenceIndex, rereferenceIndex),
              className: ['data-footnote-backref']
            },
            children: Array.isArray(children) ? children : [children]
          });
        }

        const tail = content[content.length - 1];

        if (tail && tail.type === 'element' && tail.tagName === 'p') {
          const tailTail = tail.children[tail.children.length - 1];
          if (tailTail && tailTail.type === 'text') {
            tailTail.value += ' ';
          } else {
            tail.children.push({type: 'text', value: ' '});
          }

          tail.children.push(...backReferences);
        } else {
          content.push(...backReferences);
        }

        /** @type {Element} */
        const listItem = {
          type: 'element',
          tagName: 'li',
          properties: {id: clobberPrefix + 'fn-' + safeId},
          children: state.wrap(content, true)
        };

        state.patch(def, listItem);

        listItems.push(listItem);
      }

      if (listItems.length === 0) {
        return
      }

      return {
        type: 'element',
        tagName: 'section',
        properties: {dataFootnotes: true, className: ['footnotes']},
        children: [
          {
            type: 'element',
            tagName: footnoteLabelTagName,
            properties: {
              ...structuredClone$1(footnoteLabelProperties),
              id: 'footnote-label'
            },
            children: [{type: 'text', value: footnoteLabel}]
          },
          {type: 'text', value: '\n'},
          {
            type: 'element',
            tagName: 'ol',
            properties: {},
            children: state.wrap(listItems, true)
          },
          {type: 'text', value: '\n'}
        ]
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Element} HastElement
     * @typedef {import('hast').ElementContent} HastElementContent
     * @typedef {import('hast').Nodes} HastNodes
     * @typedef {import('hast').Properties} HastProperties
     * @typedef {import('hast').RootContent} HastRootContent
     * @typedef {import('hast').Text} HastText
     *
     * @typedef {import('mdast').Definition} MdastDefinition
     * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
     * @typedef {import('mdast').Nodes} MdastNodes
     * @typedef {import('mdast').Parents} MdastParents
     *
     * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate
     * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate
     */

    const own$7 = {}.hasOwnProperty;

    /** @type {Options} */
    const emptyOptions$1 = {};

    /**
     * Create `state` from an mdast tree.
     *
     * @param {MdastNodes} tree
     *   mdast node to transform.
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     * @returns {State}
     *   `state` function.
     */
    function createState(tree, options) {
      const settings = options || emptyOptions$1;
      /** @type {Map<string, MdastDefinition>} */
      const definitionById = new Map();
      /** @type {Map<string, MdastFootnoteDefinition>} */
      const footnoteById = new Map();
      /** @type {Map<string, number>} */
      const footnoteCounts = new Map();
      /** @type {Handlers} */
      // @ts-expect-error: the root handler returns a root.
      // Hard to type.
      const handlers$1 = {...handlers, ...settings.handlers};

      /** @type {State} */
      const state = {
        all,
        applyData,
        definitionById,
        footnoteById,
        footnoteCounts,
        footnoteOrder: [],
        handlers: handlers$1,
        one,
        options: settings,
        patch,
        wrap: wrap$4
      };

      visit$5(tree, function (node) {
        if (node.type === 'definition' || node.type === 'footnoteDefinition') {
          const map = node.type === 'definition' ? definitionById : footnoteById;
          const id = String(node.identifier).toUpperCase();

          // Mimick CM behavior of link definitions.
          // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.
          if (!map.has(id)) {
            // @ts-expect-error: node type matches map.
            map.set(id, node);
          }
        }
      });

      return state

      /**
       * Transform an mdast node into a hast node.
       *
       * @param {MdastNodes} node
       *   mdast node.
       * @param {MdastParents | undefined} [parent]
       *   Parent of `node`.
       * @returns {Array<HastElementContent> | HastElementContent | undefined}
       *   Resulting hast node.
       */
      function one(node, parent) {
        const type = node.type;
        const handle = state.handlers[type];

        if (own$7.call(state.handlers, type) && handle) {
          return handle(state, node, parent)
        }

        if (state.options.passThrough && state.options.passThrough.includes(type)) {
          if ('children' in node) {
            const {children, ...shallow} = node;
            const result = structuredClone$1(shallow);
            // @ts-expect-error: TS doesn’t understand…
            result.children = state.all(node);
            // @ts-expect-error: TS doesn’t understand…
            return result
          }

          // @ts-expect-error: it’s custom.
          return structuredClone$1(node)
        }

        const unknown = state.options.unknownHandler || defaultUnknownHandler;

        return unknown(state, node, parent)
      }

      /**
       * Transform the children of an mdast node into hast nodes.
       *
       * @param {MdastNodes} parent
       *   mdast node to compile
       * @returns {Array<HastElementContent>}
       *   Resulting hast nodes.
       */
      function all(parent) {
        /** @type {Array<HastElementContent>} */
        const values = [];

        if ('children' in parent) {
          const nodes = parent.children;
          let index = -1;
          while (++index < nodes.length) {
            const result = state.one(nodes[index], parent);

            // To do: see if we van clean this? Can we merge texts?
            if (result) {
              if (index && nodes[index - 1].type === 'break') {
                if (!Array.isArray(result) && result.type === 'text') {
                  result.value = trimMarkdownSpaceStart(result.value);
                }

                if (!Array.isArray(result) && result.type === 'element') {
                  const head = result.children[0];

                  if (head && head.type === 'text') {
                    head.value = trimMarkdownSpaceStart(head.value);
                  }
                }
              }

              if (Array.isArray(result)) {
                values.push(...result);
              } else {
                values.push(result);
              }
            }
          }
        }

        return values
      }
    }

    /**
     * Copy a node’s positional info.
     *
     * @param {MdastNodes} from
     *   mdast node to copy from.
     * @param {HastNodes} to
     *   hast node to copy into.
     * @returns {undefined}
     *   Nothing.
     */
    function patch(from, to) {
      if (from.position) to.position = position$3(from);
    }

    /**
     * Honor the `data` of `from` and maybe generate an element instead of `to`.
     *
     * @template {HastNodes} Type
     *   Node type.
     * @param {MdastNodes} from
     *   mdast node to use data from.
     * @param {Type} to
     *   hast node to change.
     * @returns {HastElement | Type}
     *   Nothing.
     */
    function applyData(from, to) {
      /** @type {HastElement | Type} */
      let result = to;

      // Handle `data.hName`, `data.hProperties, `data.hChildren`.
      if (from && from.data) {
        const hName = from.data.hName;
        const hChildren = from.data.hChildren;
        const hProperties = from.data.hProperties;

        if (typeof hName === 'string') {
          // Transforming the node resulted in an element with a different name
          // than wanted:
          if (result.type === 'element') {
            result.tagName = hName;
          }
          // Transforming the node resulted in a non-element, which happens for
          // raw, text, and root nodes (unless custom handlers are passed).
          // The intent of `hName` is to create an element, but likely also to keep
          // the content around (otherwise: pass `hChildren`).
          else {
            /** @type {Array<HastElementContent>} */
            // @ts-expect-error: assume no doctypes in `root`.
            const children = 'children' in result ? result.children : [result];
            result = {type: 'element', tagName: hName, properties: {}, children};
          }
        }

        if (result.type === 'element' && hProperties) {
          Object.assign(result.properties, structuredClone$1(hProperties));
        }

        if (
          'children' in result &&
          result.children &&
          hChildren !== null &&
          hChildren !== undefined
        ) {
          result.children = hChildren;
        }
      }

      return result
    }

    /**
     * Transform an unknown node.
     *
     * @param {State} state
     *   Info passed around.
     * @param {MdastNodes} node
     *   Unknown mdast node.
     * @returns {HastElement | HastText}
     *   Resulting hast node.
     */
    function defaultUnknownHandler(state, node) {
      const data = node.data || {};
      /** @type {HastElement | HastText} */
      const result =
        'value' in node &&
        !(own$7.call(data, 'hProperties') || own$7.call(data, 'hChildren'))
          ? {type: 'text', value: node.value}
          : {
              type: 'element',
              tagName: 'div',
              properties: {},
              children: state.all(node)
            };

      state.patch(node, result);
      return state.applyData(node, result)
    }

    /**
     * Wrap `nodes` with line endings between each node.
     *
     * @template {HastRootContent} Type
     *   Node type.
     * @param {Array<Type>} nodes
     *   List of nodes to wrap.
     * @param {boolean | undefined} [loose=false]
     *   Whether to add line endings at start and end (default: `false`).
     * @returns {Array<HastText | Type>}
     *   Wrapped nodes.
     */
    function wrap$4(nodes, loose) {
      /** @type {Array<HastText | Type>} */
      const result = [];
      let index = -1;

      if (loose) {
        result.push({type: 'text', value: '\n'});
      }

      while (++index < nodes.length) {
        if (index) result.push({type: 'text', value: '\n'});
        result.push(nodes[index]);
      }

      if (loose && nodes.length > 0) {
        result.push({type: 'text', value: '\n'});
      }

      return result
    }

    /**
     * Trim spaces and tabs at the start of `value`.
     *
     * @param {string} value
     *   Value to trim.
     * @returns {string}
     *   Result.
     */
    function trimMarkdownSpaceStart(value) {
      let index = 0;
      let code = value.charCodeAt(index);

      while (code === 9 || code === 32) {
        index++;
        code = value.charCodeAt(index);
      }

      return value.slice(index)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('hast').Nodes} HastNodes
     * @typedef {import('mdast').Nodes} MdastNodes
     * @typedef {import('./state.js').Options} Options
     */

    /**
     * Transform mdast to hast.
     *
     * ##### Notes
     *
     * ###### HTML
     *
     * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
     * as semistandard `raw` nodes.
     * Most utilities ignore `raw` nodes but two notable ones don’t:
     *
     * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
     *     output the raw HTML.
     *     This is typically discouraged as noted by the option name but is useful
     *     if you completely trust authors
     * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
     *     into standard hast nodes (`element`, `text`, etc).
     *     This is a heavy task as it needs a full HTML parser, but it is the only
     *     way to support untrusted content
     *
     * ###### Footnotes
     *
     * Many options supported here relate to footnotes.
     * Footnotes are not specified by CommonMark, which we follow by default.
     * They are supported by GitHub, so footnotes can be enabled in markdown with
     * `mdast-util-gfm`.
     *
     * The options `footnoteBackLabel` and `footnoteLabel` define natural language
     * that explains footnotes, which is hidden for sighted users but shown to
     * assistive technology.
     * When your page is not in English, you must define translated values.
     *
     * Back references use ARIA attributes, but the section label itself uses a
     * heading that is hidden with an `sr-only` class.
     * To show it to sighted users, define different attributes in
     * `footnoteLabelProperties`.
     *
     * ###### Clobbering
     *
     * Footnotes introduces a problem, as it links footnote calls to footnote
     * definitions on the page through `id` attributes generated from user content,
     * which results in DOM clobbering.
     *
     * DOM clobbering is this:
     *
     * ```html
     * <p id=x></p>
     * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
     * ```
     *
     * Elements by their ID are made available by browsers on the `window` object,
     * which is a security risk.
     * Using a prefix solves this problem.
     *
     * More information on how to handle clobbering and the prefix is explained in
     * Example: headings (DOM clobbering) in `rehype-sanitize`.
     *
     * ###### Unknown nodes
     *
     * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
     * The default behavior for unknown nodes is:
     *
     * *   when the node has a `value` (and doesn’t have `data.hName`,
     *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
     *     node
     * *   otherwise, create a `<div>` element (which could be changed with
     *     `data.hName`), with its children mapped from mdast to hast as well
     *
     * This behavior can be changed by passing an `unknownHandler`.
     *
     * @param {MdastNodes} tree
     *   mdast tree.
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     * @returns {HastNodes}
     *   hast tree.
     */
    function toHast(tree, options) {
      const state = createState(tree, options);
      const node = state.one(tree, undefined);
      const foot = footer(state);
      /** @type {HastNodes} */
      const result = Array.isArray(node)
        ? {type: 'root', children: node}
        : node || {type: 'root', children: []};

      if (foot) {
        result.children.push({type: 'text', value: '\n'}, foot);
      }

      return result
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Include `data` fields in mdast and `raw` nodes in hast.

    /**
     * Turn markdown into HTML.
     *
     * ##### Notes
     *
     * ###### Signature
     *
     * *   if a processor is given, runs the (rehype) plugins used on it with a
     *     hast tree, then discards the result (*bridge mode*)
     * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`
     *     are rehype plugins (*mutate mode*)
     *
     * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.
     *
     * ###### HTML
     *
     * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
     * as semistandard `raw` nodes.
     * Most plugins ignore `raw` nodes but two notable ones don’t:
     *
     * *   `rehype-stringify` also has an option `allowDangerousHtml` which will
     *     output the raw HTML.
     *     This is typically discouraged as noted by the option name but is useful if
     *     you completely trust authors
     * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them
     *     into standard hast nodes (`element`, `text`, etc).
     *     This is a heavy task as it needs a full HTML parser, but it is the only way
     *     to support untrusted content
     *
     * ###### Footnotes
     *
     * Many options supported here relate to footnotes.
     * Footnotes are not specified by CommonMark, which we follow by default.
     * They are supported by GitHub, so footnotes can be enabled in markdown with
     * `remark-gfm`.
     *
     * The options `footnoteBackLabel` and `footnoteLabel` define natural language
     * that explains footnotes, which is hidden for sighted users but shown to
     * assistive technology.
     * When your page is not in English, you must define translated values.
     *
     * Back references use ARIA attributes, but the section label itself uses a
     * heading that is hidden with an `sr-only` class.
     * To show it to sighted users, define different attributes in
     * `footnoteLabelProperties`.
     *
     * ###### Clobbering
     *
     * Footnotes introduces a problem, as it links footnote calls to footnote
     * definitions on the page through `id` attributes generated from user content,
     * which results in DOM clobbering.
     *
     * DOM clobbering is this:
     *
     * ```html
     * <p id=x></p>
     * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
     * ```
     *
     * Elements by their ID are made available by browsers on the `window` object,
     * which is a security risk.
     * Using a prefix solves this problem.
     *
     * More information on how to handle clobbering and the prefix is explained in
     * *Example: headings (DOM clobbering)* in `rehype-sanitize`.
     *
     * ###### Unknown nodes
     *
     * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
     * The default behavior for unknown nodes is:
     *
     * *   when the node has a `value` (and doesn’t have `data.hName`,
     *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
     *     node
     * *   otherwise, create a `<div>` element (which could be changed with
     *     `data.hName`), with its children mapped from mdast to hast as well
     *
     * This behavior can be changed by passing an `unknownHandler`.
     *
     * @overload
     * @param {Processor} processor
     * @param {Readonly<Options> | null | undefined} [options]
     * @returns {TransformBridge}
     *
     * @overload
     * @param {Readonly<Options> | null | undefined} [options]
     * @returns {TransformMutate}
     *
     * @param {Readonly<Options> | Processor | null | undefined} [destination]
     *   Processor or configuration (optional).
     * @param {Readonly<Options> | null | undefined} [options]
     *   When a processor was given, configuration (optional).
     * @returns {TransformBridge | TransformMutate}
     *   Transform.
     */
    function remarkRehype(destination, options) {
      if (destination && 'run' in destination) {
        /**
         * @type {TransformBridge}
         */
        return async function (tree, file) {
          // Cast because root in -> root out.
          const hastTree = /** @type {HastRoot} */ (toHast(tree, options));
          await destination.run(hastTree, file);
        }
      }

      /**
       * @type {TransformMutate}
       */
      return function (tree) {
        // Cast because root in -> root out.
        return /** @type {HastRoot} */ (toHast(tree, options || destination))
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Throw a given error.
     *
     * @param {Error|null|undefined} [error]
     *   Maybe error.
     * @returns {asserts error is null|undefined}
     */
    function bail$2(error) {
      if (error) {
        throw error
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty$1 = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;

    var isArray = function isArray(arr) {
    	if (typeof Array.isArray === 'function') {
    		return Array.isArray(arr);
    	}

    	return toStr.call(arr) === '[object Array]';
    };

    var isPlainObject$1 = function isPlainObject(obj) {
    	if (!obj || toStr.call(obj) !== '[object Object]') {
    		return false;
    	}

    	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
    	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
    	// Not own constructor property must be Object
    	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    		return false;
    	}

    	// Own properties are enumerated firstly, so to speed up,
    	// if last one is own, then all properties are own.
    	var key;
    	for (key in obj) { /**/ }

    	return typeof key === 'undefined' || hasOwn.call(obj, key);
    };

    // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
    var setProperty = function setProperty(target, options) {
    	if (defineProperty$1 && options.name === '__proto__') {
    		defineProperty$1(target, options.name, {
    			enumerable: true,
    			configurable: true,
    			value: options.newValue,
    			writable: true
    		});
    	} else {
    		target[options.name] = options.newValue;
    	}
    };

    // Return undefined instead of __proto__ if '__proto__' is not an own property
    var getProperty = function getProperty(obj, name) {
    	if (name === '__proto__') {
    		if (!hasOwn.call(obj, name)) {
    			return void 0;
    		} else if (gOPD) {
    			// In early versions of node, obj['__proto__'] is buggy when obj has
    			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
    			return gOPD(obj, name).value;
    		}
    	}

    	return obj[name];
    };

    var extend$2 = function extend() {
    	var options, name, src, copy, copyIsArray, clone;
    	var target = arguments[0];
    	var i = 1;
    	var length = arguments.length;
    	var deep = false;

    	// Handle a deep copy situation
    	if (typeof target === 'boolean') {
    		deep = target;
    		target = arguments[1] || {};
    		// skip the boolean and the target
    		i = 2;
    	}
    	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    		target = {};
    	}

    	for (; i < length; ++i) {
    		options = arguments[i];
    		// Only deal with non-null/undefined values
    		if (options != null) {
    			// Extend the base object
    			for (name in options) {
    				src = getProperty(target, name);
    				copy = getProperty(options, name);

    				// Prevent never-ending loop
    				if (target !== copy) {
    					// Recurse if we're merging plain objects or arrays
    					if (deep && copy && (isPlainObject$1(copy) || (copyIsArray = isArray(copy)))) {
    						if (copyIsArray) {
    							copyIsArray = false;
    							clone = src && isArray(src) ? src : [];
    						} else {
    							clone = src && isPlainObject$1(src) ? src : {};
    						}

    						// Never move original objects, clone them
    						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

    					// Don't bring in undefined values
    					} else if (typeof copy !== 'undefined') {
    						setProperty(target, { name: name, newValue: copy });
    					}
    				}
    			}
    		}
    	}

    	// Return the modified object
    	return target;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function isPlainObject(value) {
    	if (typeof value !== 'object' || value === null) {
    		return false;
    	}

    	const prototype = Object.getPrototypeOf(value);
    	return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
     * @typedef {(...input: Array<any>) => any} Middleware
     *
     * @typedef {(...input: Array<any>) => void} Run
     *   Call all middleware.
     * @typedef {(fn: Middleware) => Pipeline} Use
     *   Add `fn` (middleware) to the list.
     * @typedef {{run: Run, use: Use}} Pipeline
     *   Middleware.
     */

    /**
     * Create new middleware.
     *
     * @returns {Pipeline}
     */
    function trough$2() {
      /** @type {Array<Middleware>} */
      const fns = [];
      /** @type {Pipeline} */
      const pipeline = {run, use};

      return pipeline

      /** @type {Run} */
      function run(...values) {
        let middlewareIndex = -1;
        /** @type {Callback} */
        const callback = values.pop();

        if (typeof callback !== 'function') {
          throw new TypeError('Expected function as last argument, not ' + callback)
        }

        next(null, ...values);

        /**
         * Run the next `fn`, or we’re done.
         *
         * @param {Error|null|undefined} error
         * @param {Array<any>} output
         */
        function next(error, ...output) {
          const fn = fns[++middlewareIndex];
          let index = -1;

          if (error) {
            callback(error);
            return
          }

          // Copy non-nullish input into values.
          while (++index < values.length) {
            if (output[index] === null || output[index] === undefined) {
              output[index] = values[index];
            }
          }

          // Save the newly created `output` for the next call.
          values = output;

          // Next or done.
          if (fn) {
            wrap$3(fn, next)(...output);
          } else {
            callback(null, ...output);
          }
        }
      }

      /** @type {Use} */
      function use(middelware) {
        if (typeof middelware !== 'function') {
          throw new TypeError(
            'Expected `middelware` to be a function, not ' + middelware
          )
        }

        fns.push(middelware);
        return pipeline
      }
    }

    /**
     * Wrap `middleware`.
     * Can be sync or async; return a promise, receive a callback, or return new
     * values and errors.
     *
     * @param {Middleware} middleware
     * @param {Callback} callback
     */
    function wrap$3(middleware, callback) {
      /** @type {boolean} */
      let called;

      return wrapped

      /**
       * Call `middleware`.
       * @this {any}
       * @param {Array<any>} parameters
       * @returns {void}
       */
      function wrapped(...parameters) {
        const fnExpectsCallback = middleware.length > parameters.length;
        /** @type {any} */
        let result;

        if (fnExpectsCallback) {
          parameters.push(done);
        }

        try {
          result = middleware.apply(this, parameters);
        } catch (error) {
          const exception = /** @type {Error} */ (error);

          // Well, this is quite the pickle.
          // `middleware` received a callback and called it synchronously, but that
          // threw an error.
          // The only thing left to do is to throw the thing instead.
          if (fnExpectsCallback && called) {
            throw exception
          }

          return done(exception)
        }

        if (!fnExpectsCallback) {
          if (result instanceof Promise) {
            result.then(then, done);
          } else if (result instanceof Error) {
            done(result);
          } else {
            then(result);
          }
        }
      }

      /**
       * Call `callback`, only once.
       * @type {Callback}
       */
      function done(error, ...output) {
        if (!called) {
          called = true;
          callback(error, ...output);
        }
      }

      /**
       * Call `done` with one value.
       *
       * @param {any} [value]
       */
      function then(value) {
        done(null, value);
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// A derivative work based on:
    // <https://github.com/browserify/path-browserify>.
    // Which is licensed:
    //
    // MIT License
    //
    // Copyright (c) 2013 James Halliday
    //
    // Permission is hereby granted, free of charge, to any person obtaining a copy of
    // this software and associated documentation files (the "Software"), to deal in
    // the Software without restriction, including without limitation the rights to
    // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
    // the Software, and to permit persons to whom the Software is furnished to do so,
    // subject to the following conditions:
    //
    // The above copyright notice and this permission notice shall be included in all
    // copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
    // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    // A derivative work based on:
    //
    // Parts of that are extracted from Node’s internal `path` module:
    // <https://github.com/nodejs/node/blob/master/lib/path.js>.
    // Which is licensed:
    //
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    const path$3 = {basename: basename$1, dirname: dirname$1, extname: extname$1, join: join$1, sep: '/'};

    /* eslint-disable max-depth, complexity */

    /**
     * Get the basename from a path.
     *
     * @param {string} path
     *   File path.
     * @param {string | null | undefined} [ext]
     *   Extension to strip.
     * @returns {string}
     *   Stem or basename.
     */
    function basename$1(path, ext) {
      if (ext !== undefined && typeof ext !== 'string') {
        throw new TypeError('"ext" argument must be a string')
      }

      assertPath$2(path);
      let start = 0;
      let end = -1;
      let index = path.length;
      /** @type {boolean | undefined} */
      let seenNonSlash;

      if (ext === undefined || ext.length === 0 || ext.length > path.length) {
        while (index--) {
          if (path.codePointAt(index) === 47 /* `/` */) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now.
            if (seenNonSlash) {
              start = index + 1;
              break
            }
          } else if (end < 0) {
            // We saw the first non-path separator, mark this as the end of our
            // path component.
            seenNonSlash = true;
            end = index + 1;
          }
        }

        return end < 0 ? '' : path.slice(start, end)
      }

      if (ext === path) {
        return ''
      }

      let firstNonSlashEnd = -1;
      let extIndex = ext.length - 1;

      while (index--) {
        if (path.codePointAt(index) === 47 /* `/` */) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now.
          if (seenNonSlash) {
            start = index + 1;
            break
          }
        } else {
          if (firstNonSlashEnd < 0) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching.
            seenNonSlash = true;
            firstNonSlashEnd = index + 1;
          }

          if (extIndex > -1) {
            // Try to match the explicit extension.
            if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {
              if (extIndex < 0) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = index;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIndex = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) {
        end = firstNonSlashEnd;
      } else if (end < 0) {
        end = path.length;
      }

      return path.slice(start, end)
    }

    /**
     * Get the dirname from a path.
     *
     * @param {string} path
     *   File path.
     * @returns {string}
     *   File path.
     */
    function dirname$1(path) {
      assertPath$2(path);

      if (path.length === 0) {
        return '.'
      }

      let end = -1;
      let index = path.length;
      /** @type {boolean | undefined} */
      let unmatchedSlash;

      // Prefix `--` is important to not run on `0`.
      while (--index) {
        if (path.codePointAt(index) === 47 /* `/` */) {
          if (unmatchedSlash) {
            end = index;
            break
          }
        } else if (!unmatchedSlash) {
          // We saw the first non-path separator
          unmatchedSlash = true;
        }
      }

      return end < 0
        ? path.codePointAt(0) === 47 /* `/` */
          ? '/'
          : '.'
        : end === 1 && path.codePointAt(0) === 47 /* `/` */
        ? '//'
        : path.slice(0, end)
    }

    /**
     * Get an extname from a path.
     *
     * @param {string} path
     *   File path.
     * @returns {string}
     *   Extname.
     */
    function extname$1(path) {
      assertPath$2(path);

      let index = path.length;

      let end = -1;
      let startPart = 0;
      let startDot = -1;
      // Track the state of characters (if any) we see before our first dot and
      // after any path separator we find.
      let preDotState = 0;
      /** @type {boolean | undefined} */
      let unmatchedSlash;

      while (index--) {
        const code = path.codePointAt(index);

        if (code === 47 /* `/` */) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now.
          if (unmatchedSlash) {
            startPart = index + 1;
            break
          }

          continue
        }

        if (end < 0) {
          // We saw the first non-path separator, mark this as the end of our
          // extension.
          unmatchedSlash = true;
          end = index + 1;
        }

        if (code === 46 /* `.` */) {
          // If this is our first dot, mark it as the start of our extension.
          if (startDot < 0) {
            startDot = index;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot > -1) {
          // We saw a non-dot and non-path separator before our dot, so we should
          // have a good chance at having a non-empty extension.
          preDotState = -1;
        }
      }

      if (
        startDot < 0 ||
        end < 0 ||
        // We saw a non-dot character immediately before the dot.
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly `..`.
        (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
      ) {
        return ''
      }

      return path.slice(startDot, end)
    }

    /**
     * Join segments from a path.
     *
     * @param {Array<string>} segments
     *   Path segments.
     * @returns {string}
     *   File path.
     */
    function join$1(...segments) {
      let index = -1;
      /** @type {string | undefined} */
      let joined;

      while (++index < segments.length) {
        assertPath$2(segments[index]);

        if (segments[index]) {
          joined =
            joined === undefined ? segments[index] : joined + '/' + segments[index];
        }
      }

      return joined === undefined ? '.' : normalize$1(joined)
    }

    /**
     * Normalize a basic file path.
     *
     * @param {string} path
     *   File path.
     * @returns {string}
     *   File path.
     */
    // Note: `normalize` is not exposed as `path.normalize`, so some code is
    // manually removed from it.
    function normalize$1(path) {
      assertPath$2(path);

      const absolute = path.codePointAt(0) === 47; /* `/` */

      // Normalize the path according to POSIX rules.
      let value = normalizeString(path, !absolute);

      if (value.length === 0 && !absolute) {
        value = '.';
      }

      if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {
        value += '/';
      }

      return absolute ? '/' + value : value
    }

    /**
     * Resolve `.` and `..` elements in a path with directory names.
     *
     * @param {string} path
     *   File path.
     * @param {boolean} allowAboveRoot
     *   Whether `..` can move above root.
     * @returns {string}
     *   File path.
     */
    function normalizeString(path, allowAboveRoot) {
      let result = '';
      let lastSegmentLength = 0;
      let lastSlash = -1;
      let dots = 0;
      let index = -1;
      /** @type {number | undefined} */
      let code;
      /** @type {number} */
      let lastSlashIndex;

      while (++index <= path.length) {
        if (index < path.length) {
          code = path.codePointAt(index);
        } else if (code === 47 /* `/` */) {
          break
        } else {
          code = 47; /* `/` */
        }

        if (code === 47 /* `/` */) {
          if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
            if (
              result.length < 2 ||
              lastSegmentLength !== 2 ||
              result.codePointAt(result.length - 1) !== 46 /* `.` */ ||
              result.codePointAt(result.length - 2) !== 46 /* `.` */
            ) {
              if (result.length > 2) {
                lastSlashIndex = result.lastIndexOf('/');

                if (lastSlashIndex !== result.length - 1) {
                  if (lastSlashIndex < 0) {
                    result = '';
                    lastSegmentLength = 0;
                  } else {
                    result = result.slice(0, lastSlashIndex);
                    lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
                  }

                  lastSlash = index;
                  dots = 0;
                  continue
                }
              } else if (result.length > 0) {
                result = '';
                lastSegmentLength = 0;
                lastSlash = index;
                dots = 0;
                continue
              }
            }

            if (allowAboveRoot) {
              result = result.length > 0 ? result + '/..' : '..';
              lastSegmentLength = 2;
            }
          } else {
            if (result.length > 0) {
              result += '/' + path.slice(lastSlash + 1, index);
            } else {
              result = path.slice(lastSlash + 1, index);
            }

            lastSegmentLength = index - lastSlash - 1;
          }

          lastSlash = index;
          dots = 0;
        } else if (code === 46 /* `.` */ && dots > -1) {
          dots++;
        } else {
          dots = -1;
        }
      }

      return result
    }

    /**
     * Make sure `path` is a string.
     *
     * @param {string} path
     *   File path.
     * @returns {asserts path is string}
     *   Nothing.
     */
    function assertPath$2(path) {
      if (typeof path !== 'string') {
        throw new TypeError(
          'Path must be a string. Received ' + JSON.stringify(path)
        )
      }
    }

    /* eslint-enable max-depth, complexity */

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Somewhat based on:
    // <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
    // But I don’t think one tiny line of code can be copyrighted. 😅
    const proc$1 = {cwd: cwd$1};

    function cwd$1() {
      return '/'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Checks if a value has the shape of a WHATWG URL object.
     *
     * Using a symbol or instanceof would not be able to recognize URL objects
     * coming from other implementations (e.g. in Electron), so instead we are
     * checking some well known properties for a lack of a better test.
     *
     * We use `href` and `protocol` as they are the only properties that are
     * easy to retrieve and calculate due to the lazy nature of the getters.
     *
     * We check for auth attribute to distinguish legacy url instance with
     * WHATWG URL instance.
     *
     * @param {unknown} fileUrlOrPath
     *   File path or URL.
     * @returns {fileUrlOrPath is URL}
     *   Whether it’s a URL.
     */
    // From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>
    function isUrl(fileUrlOrPath) {
      return Boolean(
        fileUrlOrPath !== null &&
          typeof fileUrlOrPath === 'object' &&
          'href' in fileUrlOrPath &&
          fileUrlOrPath.href &&
          'protocol' in fileUrlOrPath &&
          fileUrlOrPath.protocol &&
          // @ts-expect-error: indexing is fine.
          fileUrlOrPath.auth === undefined
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>

    /**
     * @param {URL | string} path
     *   File URL.
     * @returns {string}
     *   File URL.
     */
    function urlToPath(path) {
      if (typeof path === 'string') {
        path = new URL(path);
      } else if (!isUrl(path)) {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError(
          'The "path" argument must be of type string or an instance of URL. Received `' +
            path +
            '`'
        );
        error.code = 'ERR_INVALID_ARG_TYPE';
        throw error
      }

      if (path.protocol !== 'file:') {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError('The URL must be of scheme file');
        error.code = 'ERR_INVALID_URL_SCHEME';
        throw error
      }

      return getPathFromURLPosix(path)
    }

    /**
     * Get a path from a POSIX URL.
     *
     * @param {URL} url
     *   URL.
     * @returns {string}
     *   File path.
     */
    function getPathFromURLPosix(url) {
      if (url.hostname !== '') {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError(
          'File URL host must be "localhost" or empty on darwin'
        );
        error.code = 'ERR_INVALID_FILE_URL_HOST';
        throw error
      }

      const pathname = url.pathname;
      let index = -1;

      while (++index < pathname.length) {
        if (
          pathname.codePointAt(index) === 37 /* `%` */ &&
          pathname.codePointAt(index + 1) === 50 /* `2` */
        ) {
          const third = pathname.codePointAt(index + 2);
          if (third === 70 /* `F` */ || third === 102 /* `f` */) {
            /** @type {NodeJS.ErrnoException} */
            const error = new TypeError(
              'File URL path must not include encoded / characters'
            );
            error.code = 'ERR_INVALID_FILE_URL_PATH';
            throw error
          }
        }
      }

      return decodeURIComponent(pathname)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('unist').Node} Node
     * @typedef {import('unist').Point} Point
     * @typedef {import('unist').Position} Position
     * @typedef {import('vfile-message').Options} MessageOptions
     * @typedef {import('../index.js').Data} Data
     * @typedef {import('../index.js').Value} Value
     */

    /**
     * Order of setting (least specific to most), we need this because otherwise
     * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
     * stem can be set.
     */
    const order$3 = /** @type {const} */ ([
      'history',
      'path',
      'basename',
      'stem',
      'extname',
      'dirname'
    ]);

    class VFile$2 {
      /**
       * Create a new virtual file.
       *
       * `options` is treated as:
       *
       * *   `string` or `Uint8Array` — `{value: options}`
       * *   `URL` — `{path: options}`
       * *   `VFile` — shallow copies its data over to the new file
       * *   `object` — all fields are shallow copied over to the new file
       *
       * Path related fields are set in the following order (least specific to
       * most specific): `history`, `path`, `basename`, `stem`, `extname`,
       * `dirname`.
       *
       * You cannot set `dirname` or `extname` without setting either `history`,
       * `path`, `basename`, or `stem` too.
       *
       * @param {Compatible | null | undefined} [value]
       *   File value.
       * @returns
       *   New instance.
       */
      constructor(value) {
        /** @type {Options | VFile} */
        let options;

        if (!value) {
          options = {};
        } else if (isUrl(value)) {
          options = {path: value};
        } else if (typeof value === 'string' || isUint8Array$1(value)) {
          options = {value};
        } else {
          options = value;
        }

        /* eslint-disable no-unused-expressions */

        /**
         * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
         *
         * @type {string}
         */
        this.cwd = proc$1.cwd();

        /**
         * Place to store custom info (default: `{}`).
         *
         * It’s OK to store custom data directly on the file but moving it to
         * `data` is recommended.
         *
         * @type {Data}
         */
        this.data = {};

        /**
         * List of file paths the file moved between.
         *
         * The first is the original path and the last is the current path.
         *
         * @type {Array<string>}
         */
        this.history = [];

        /**
         * List of messages associated with the file.
         *
         * @type {Array<VFileMessage>}
         */
        this.messages = [];

        /**
         * Raw value.
         *
         * @type {Value}
         */
        this.value;

        // The below are non-standard, they are “well-known”.
        // As in, used in several tools.
        /**
         * Source map.
         *
         * This type is equivalent to the `RawSourceMap` type from the `source-map`
         * module.
         *
         * @type {Map | null | undefined}
         */
        this.map;

        /**
         * Custom, non-string, compiled, representation.
         *
         * This is used by unified to store non-string results.
         * One example is when turning markdown into React nodes.
         *
         * @type {unknown}
         */
        this.result;

        /**
         * Whether a file was saved to disk.
         *
         * This is used by vfile reporters.
         *
         * @type {boolean}
         */
        this.stored;
        /* eslint-enable no-unused-expressions */

        // Set path related properties in the correct order.
        let index = -1;

        while (++index < order$3.length) {
          const prop = order$3[index];

          // Note: we specifically use `in` instead of `hasOwnProperty` to accept
          // `vfile`s too.
          if (
            prop in options &&
            options[prop] !== undefined &&
            options[prop] !== null
          ) {
            // @ts-expect-error: TS doesn’t understand basic reality.
            this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
          }
        }

        /** @type {string} */
        let prop;

        // Set non-path related properties.
        for (prop in options) {
          // @ts-expect-error: fine to set other things.
          if (!order$3.includes(prop)) {
            // @ts-expect-error: fine to set other things.
            this[prop] = options[prop];
          }
        }
      }

      /**
       * Get the basename (including extname) (example: `'index.min.js'`).
       *
       * @returns {string | undefined}
       *   Basename.
       */
      get basename() {
        return typeof this.path === 'string' ? path$3.basename(this.path) : undefined
      }

      /**
       * Set basename (including extname) (`'index.min.js'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be nullified (use `file.path = file.dirname` instead).
       *
       * @param {string} basename
       *   Basename.
       * @returns {undefined}
       *   Nothing.
       */
      set basename(basename) {
        assertNonEmpty$1(basename, 'basename');
        assertPart$1(basename, 'basename');
        this.path = path$3.join(this.dirname || '', basename);
      }

      /**
       * Get the parent path (example: `'~'`).
       *
       * @returns {string | undefined}
       *   Dirname.
       */
      get dirname() {
        return typeof this.path === 'string' ? path$3.dirname(this.path) : undefined
      }

      /**
       * Set the parent path (example: `'~'`).
       *
       * Cannot be set if there’s no `path` yet.
       *
       * @param {string | undefined} dirname
       *   Dirname.
       * @returns {undefined}
       *   Nothing.
       */
      set dirname(dirname) {
        assertPath$1(this.basename, 'dirname');
        this.path = path$3.join(dirname || '', this.basename);
      }

      /**
       * Get the extname (including dot) (example: `'.js'`).
       *
       * @returns {string | undefined}
       *   Extname.
       */
      get extname() {
        return typeof this.path === 'string' ? path$3.extname(this.path) : undefined
      }

      /**
       * Set the extname (including dot) (example: `'.js'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be set if there’s no `path` yet.
       *
       * @param {string | undefined} extname
       *   Extname.
       * @returns {undefined}
       *   Nothing.
       */
      set extname(extname) {
        assertPart$1(extname, 'extname');
        assertPath$1(this.dirname, 'extname');

        if (extname) {
          if (extname.codePointAt(0) !== 46 /* `.` */) {
            throw new Error('`extname` must start with `.`')
          }

          if (extname.includes('.', 1)) {
            throw new Error('`extname` cannot contain multiple dots')
          }
        }

        this.path = path$3.join(this.dirname, this.stem + (extname || ''));
      }

      /**
       * Get the full path (example: `'~/index.min.js'`).
       *
       * @returns {string}
       *   Path.
       */
      get path() {
        return this.history[this.history.length - 1]
      }

      /**
       * Set the full path (example: `'~/index.min.js'`).
       *
       * Cannot be nullified.
       * You can set a file URL (a `URL` object with a `file:` protocol) which will
       * be turned into a path with `url.fileURLToPath`.
       *
       * @param {URL | string} path
       *   Path.
       * @returns {undefined}
       *   Nothing.
       */
      set path(path) {
        if (isUrl(path)) {
          path = urlToPath(path);
        }

        assertNonEmpty$1(path, 'path');

        if (this.path !== path) {
          this.history.push(path);
        }
      }

      /**
       * Get the stem (basename w/o extname) (example: `'index.min'`).
       *
       * @returns {string | undefined}
       *   Stem.
       */
      get stem() {
        return typeof this.path === 'string'
          ? path$3.basename(this.path, this.extname)
          : undefined
      }

      /**
       * Set the stem (basename w/o extname) (example: `'index.min'`).
       *
       * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
       * on windows).
       * Cannot be nullified (use `file.path = file.dirname` instead).
       *
       * @param {string} stem
       *   Stem.
       * @returns {undefined}
       *   Nothing.
       */
      set stem(stem) {
        assertNonEmpty$1(stem, 'stem');
        assertPart$1(stem, 'stem');
        this.path = path$3.join(this.dirname || '', stem + (this.extname || ''));
      }

      // Normal prototypal methods.
      /**
       * Create a fatal message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `true` (error; file not usable)
       * and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {never}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {never}
       *   Never.
       * @throws {VFileMessage}
       *   Message.
       */
      fail(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

        message.fatal = true;

        throw message
      }

      /**
       * Create an info message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `undefined` (info; change
       * likely not needed) and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {VFileMessage}
       *   Message.
       */
      info(causeOrReason, optionsOrParentOrPlace, origin) {
        // @ts-expect-error: the overloads are fine.
        const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);

        message.fatal = undefined;

        return message
      }

      /**
       * Create a message for `reason` associated with the file.
       *
       * The `fatal` field of the message is set to `false` (warning; change may be
       * needed) and the `file` field is set to the current file path.
       * The message is added to the `messages` field on `file`.
       *
       * > 🪦 **Note**: also has obsolete signatures.
       *
       * @overload
       * @param {string} reason
       * @param {MessageOptions | null | undefined} [options]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {string} reason
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Node | NodeLike | null | undefined} parent
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {Point | Position | null | undefined} place
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @overload
       * @param {Error | VFileMessage} cause
       * @param {string | null | undefined} [origin]
       * @returns {VFileMessage}
       *
       * @param {Error | VFileMessage | string} causeOrReason
       *   Reason for message, should use markdown.
       * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
       *   Configuration (optional).
       * @param {string | null | undefined} [origin]
       *   Place in code where the message originates (example:
       *   `'my-package:my-rule'` or `'my-rule'`).
       * @returns {VFileMessage}
       *   Message.
       */
      message(causeOrReason, optionsOrParentOrPlace, origin) {
        const message = new VFileMessage(
          // @ts-expect-error: the overloads are fine.
          causeOrReason,
          optionsOrParentOrPlace,
          origin
        );

        if (this.path) {
          message.name = this.path + ':' + message.name;
          message.file = this.path;
        }

        message.fatal = false;

        this.messages.push(message);

        return message
      }

      /**
       * Serialize the file.
       *
       * > **Note**: which encodings are supported depends on the engine.
       * > For info on Node.js, see:
       * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
       *
       * @param {string | null | undefined} [encoding='utf8']
       *   Character encoding to understand `value` as when it’s a `Uint8Array`
       *   (default: `'utf-8'`).
       * @returns {string}
       *   Serialized file.
       */
      toString(encoding) {
        if (this.value === undefined) {
          return ''
        }

        if (typeof this.value === 'string') {
          return this.value
        }

        const decoder = new TextDecoder(encoding || undefined);
        return decoder.decode(this.value)
      }
    }

    /**
     * Assert that `part` is not a path (as in, does not contain `path.sep`).
     *
     * @param {string | null | undefined} part
     *   File path part.
     * @param {string} name
     *   Part name.
     * @returns {undefined}
     *   Nothing.
     */
    function assertPart$1(part, name) {
      if (part && part.includes(path$3.sep)) {
        throw new Error(
          '`' + name + '` cannot be a path: did not expect `' + path$3.sep + '`'
        )
      }
    }

    /**
     * Assert that `part` is not empty.
     *
     * @param {string | undefined} part
     *   Thing.
     * @param {string} name
     *   Part name.
     * @returns {asserts part is string}
     *   Nothing.
     */
    function assertNonEmpty$1(part, name) {
      if (!part) {
        throw new Error('`' + name + '` cannot be empty')
      }
    }

    /**
     * Assert `path` exists.
     *
     * @param {string | undefined} path
     *   Path.
     * @param {string} name
     *   Dependency name.
     * @returns {asserts path is string}
     *   Nothing.
     */
    function assertPath$1(path, name) {
      if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too')
      }
    }

    /**
     * Assert `value` is an `Uint8Array`.
     *
     * @param {unknown} value
     *   thing.
     * @returns {value is Uint8Array}
     *   Whether `value` is an `Uint8Array`.
     */
    function isUint8Array$1(value) {
      return Boolean(
        value &&
          typeof value === 'object' &&
          'byteLength' in value &&
          'byteOffset' in value
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const CallableInstance =
      /**
       * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
       */
      (
        /** @type {unknown} */
        (
          /**
           * @this {Function}
           * @param {string | symbol} property
           * @returns {(...parameters: Array<unknown>) => unknown}
           */
          function (property) {
            const self = this;
            const constr = self.constructor;
            const proto = /** @type {Record<string | symbol, Function>} */ (
              // Prototypes do exist.
              // type-coverage:ignore-next-line
              constr.prototype
            );
            const func = proto[property];
            /** @type {(...parameters: Array<unknown>) => unknown} */
            const apply = function () {
              return func.apply(apply, arguments)
            };

            Object.setPrototypeOf(apply, proto);

            const names = Object.getOwnPropertyNames(func);

            for (const p of names) {
              const descriptor = Object.getOwnPropertyDescriptor(func, p);
              if (descriptor) Object.defineProperty(apply, p, descriptor);
            }

            return apply
          }
        )
      );

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('trough').Pipeline} Pipeline
     *
     * @typedef {import('unist').Node} Node
     *
     * @typedef {import('vfile').Compatible} Compatible
     * @typedef {import('vfile').Value} Value
     *
     * @typedef {import('../index.js').CompileResultMap} CompileResultMap
     * @typedef {import('../index.js').Data} Data
     * @typedef {import('../index.js').Settings} Settings
     */

    // To do: next major: drop `Compiler`, `Parser`: prefer lowercase.

    // To do: we could start yielding `never` in TS when a parser is missing and
    // `parse` is called.
    // Currently, we allow directly setting `processor.parser`, which is untyped.

    const own$6 = {}.hasOwnProperty;

    /**
     * @template {Node | undefined} [ParseTree=undefined]
     *   Output of `parse` (optional).
     * @template {Node | undefined} [HeadTree=undefined]
     *   Input for `run` (optional).
     * @template {Node | undefined} [TailTree=undefined]
     *   Output for `run` (optional).
     * @template {Node | undefined} [CompileTree=undefined]
     *   Input of `stringify` (optional).
     * @template {CompileResults | undefined} [CompileResult=undefined]
     *   Output of `stringify` (optional).
     * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}
     */
    class Processor extends CallableInstance {
      /**
       * Create a processor.
       */
      constructor() {
        // If `Processor()` is called (w/o new), `copy` is called instead.
        super('copy');

        /**
         * Compiler to use (deprecated).
         *
         * @deprecated
         *   Use `compiler` instead.
         * @type {(
         *   Compiler<
         *     CompileTree extends undefined ? Node : CompileTree,
         *     CompileResult extends undefined ? CompileResults : CompileResult
         *   > |
         *   undefined
         * )}
         */
        this.Compiler = undefined;

        /**
         * Parser to use (deprecated).
         *
         * @deprecated
         *   Use `parser` instead.
         * @type {(
         *   Parser<ParseTree extends undefined ? Node : ParseTree> |
         *   undefined
         * )}
         */
        this.Parser = undefined;

        // Note: the following fields are considered private.
        // However, they are needed for tests, and TSC generates an untyped
        // `private freezeIndex` field for, which trips `type-coverage` up.
        // Instead, we use `@deprecated` to visualize that they shouldn’t be used.
        /**
         * Internal list of configured plugins.
         *
         * @deprecated
         *   This is a private internal property and should not be used.
         * @type {Array<PluginTuple<Array<unknown>>>}
         */
        this.attachers = [];

        /**
         * Compiler to use.
         *
         * @type {(
         *   Compiler<
         *     CompileTree extends undefined ? Node : CompileTree,
         *     CompileResult extends undefined ? CompileResults : CompileResult
         *   > |
         *   undefined
         * )}
         */
        this.compiler = undefined;

        /**
         * Internal state to track where we are while freezing.
         *
         * @deprecated
         *   This is a private internal property and should not be used.
         * @type {number}
         */
        this.freezeIndex = -1;

        /**
         * Internal state to track whether we’re frozen.
         *
         * @deprecated
         *   This is a private internal property and should not be used.
         * @type {boolean | undefined}
         */
        this.frozen = undefined;

        /**
         * Internal state.
         *
         * @deprecated
         *   This is a private internal property and should not be used.
         * @type {Data}
         */
        this.namespace = {};

        /**
         * Parser to use.
         *
         * @type {(
         *   Parser<ParseTree extends undefined ? Node : ParseTree> |
         *   undefined
         * )}
         */
        this.parser = undefined;

        /**
         * Internal list of configured transformers.
         *
         * @deprecated
         *   This is a private internal property and should not be used.
         * @type {Pipeline}
         */
        this.transformers = trough$2();
      }

      /**
       * Copy a processor.
       *
       * @deprecated
       *   This is a private internal method and should not be used.
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   New *unfrozen* processor ({@link Processor `Processor`}) that is
       *   configured to work the same as its ancestor.
       *   When the descendant processor is configured in the future it does not
       *   affect the ancestral processor.
       */
      copy() {
        // Cast as the type parameters will be the same after attaching.
        const destination =
          /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (
            new Processor()
          );
        let index = -1;

        while (++index < this.attachers.length) {
          const attacher = this.attachers[index];
          destination.use(...attacher);
        }

        destination.data(extend$2(true, {}, this.namespace));

        return destination
      }

      /**
       * Configure the processor with info available to all plugins.
       * Information is stored in an object.
       *
       * Typically, options can be given to a specific plugin, but sometimes it
       * makes sense to have information shared with several plugins.
       * For example, a list of HTML elements that are self-closing, which is
       * needed during all phases.
       *
       * > 👉 **Note**: setting information cannot occur on *frozen* processors.
       * > Call the processor first to create a new unfrozen processor.
       *
       * > 👉 **Note**: to register custom data in TypeScript, augment the
       * > {@link Data `Data`} interface.
       *
       * @example
       *   This example show how to get and set info:
       *
       *   ```js
       *   import {unified} from 'unified'
       *
       *   const processor = unified().data('alpha', 'bravo')
       *
       *   processor.data('alpha') // => 'bravo'
       *
       *   processor.data() // => {alpha: 'bravo'}
       *
       *   processor.data({charlie: 'delta'})
       *
       *   processor.data() // => {charlie: 'delta'}
       *   ```
       *
       * @template {keyof Data} Key
       *
       * @overload
       * @returns {Data}
       *
       * @overload
       * @param {Data} dataset
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {Key} key
       * @returns {Data[Key]}
       *
       * @overload
       * @param {Key} key
       * @param {Data[Key]} value
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @param {Data | Key} [key]
       *   Key to get or set, or entire dataset to set, or nothing to get the
       *   entire dataset (optional).
       * @param {Data[Key]} [value]
       *   Value to set (optional).
       * @returns {unknown}
       *   The current processor when setting, the value at `key` when getting, or
       *   the entire dataset when getting without key.
       */
      data(key, value) {
        if (typeof key === 'string') {
          // Set `key`.
          if (arguments.length === 2) {
            assertUnfrozen$1('data', this.frozen);
            this.namespace[key] = value;
            return this
          }

          // Get `key`.
          return (own$6.call(this.namespace, key) && this.namespace[key]) || undefined
        }

        // Set space.
        if (key) {
          assertUnfrozen$1('data', this.frozen);
          this.namespace = key;
          return this
        }

        // Get space.
        return this.namespace
      }

      /**
       * Freeze a processor.
       *
       * Frozen processors are meant to be extended and not to be configured
       * directly.
       *
       * When a processor is frozen it cannot be unfrozen.
       * New processors working the same way can be created by calling the
       * processor.
       *
       * It’s possible to freeze processors explicitly by calling `.freeze()`.
       * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
       * `.stringify()`, `.process()`, or `.processSync()` are called.
       *
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   The current processor.
       */
      freeze() {
        if (this.frozen) {
          return this
        }

        // Cast so that we can type plugins easier.
        // Plugins are supposed to be usable on different processors, not just on
        // this exact processor.
        const self = /** @type {Processor} */ (/** @type {unknown} */ (this));

        while (++this.freezeIndex < this.attachers.length) {
          const [attacher, ...options] = this.attachers[this.freezeIndex];

          if (options[0] === false) {
            continue
          }

          if (options[0] === true) {
            options[0] = undefined;
          }

          const transformer = attacher.call(self, ...options);

          if (typeof transformer === 'function') {
            this.transformers.use(transformer);
          }
        }

        this.frozen = true;
        this.freezeIndex = Number.POSITIVE_INFINITY;

        return this
      }

      /**
       * Parse text to a syntax tree.
       *
       * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other
       * > phases.
       *
       * @param {Compatible | undefined} [file]
       *   file to parse (optional); typically `string` or `VFile`; any value
       *   accepted as `x` in `new VFile(x)`.
       * @returns {ParseTree extends undefined ? Node : ParseTree}
       *   Syntax tree representing `file`.
       */
      parse(file) {
        this.freeze();
        const realFile = vfile$2(file);
        const parser = this.parser || this.Parser;
        assertParser$1('parse', parser);
        return parser(String(realFile), realFile)
      }

      /**
       * Process the given file as configured on the processor.
       *
       * > 👉 **Note**: `process` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `process` performs the parse, run, and stringify phases.
       *
       * @overload
       * @param {Compatible | undefined} file
       * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
       * @returns {undefined}
       *
       * @overload
       * @param {Compatible | undefined} [file]
       * @returns {Promise<VFileWithOutput<CompileResult>>}
       *
       * @param {Compatible | undefined} [file]
       *   File (optional); typically `string` or `VFile`]; any value accepted as
       *   `x` in `new VFile(x)`.
       * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
       *   Callback (optional).
       * @returns {Promise<VFile> | undefined}
       *   Nothing if `done` is given.
       *   Otherwise a promise, rejected with a fatal error or resolved with the
       *   processed file.
       *
       *   The parsed, transformed, and compiled value is available at
       *   `file.value` (see note).
       *
       *   > 👉 **Note**: unified typically compiles by serializing: most
       *   > compilers return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@link CompileResultMap `CompileResultMap`}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      process(file, done) {
        const self = this;

        this.freeze();
        assertParser$1('process', this.parser || this.Parser);
        assertCompiler$1('process', this.compiler || this.Compiler);

        return done ? executor(undefined, done) : new Promise(executor)

        // Note: `void`s needed for TS.
        /**
         * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve
         * @param {(error: Error | undefined) => undefined | void} reject
         * @returns {undefined}
         */
        function executor(resolve, reject) {
          const realFile = vfile$2(file);
          // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the
          // input of the first transform).
          const parseTree =
            /** @type {HeadTree extends undefined ? Node : HeadTree} */ (
              /** @type {unknown} */ (self.parse(realFile))
            );

          self.run(parseTree, realFile, function (error, tree, file) {
            if (error || !tree || !file) {
              return realDone(error)
            }

            // Assume `TailTree` (the output of the last transform) matches
            // `CompileTree` (the input of the compiler).
            const compileTree =
              /** @type {CompileTree extends undefined ? Node : CompileTree} */ (
                /** @type {unknown} */ (tree)
              );

            const compileResult = self.stringify(compileTree, file);

            if (looksLikeAValue(compileResult)) {
              file.value = compileResult;
            } else {
              file.result = compileResult;
            }

            realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file));
          });

          /**
           * @param {Error | undefined} error
           * @param {VFileWithOutput<CompileResult> | undefined} [file]
           * @returns {undefined}
           */
          function realDone(error, file) {
            if (error || !file) {
              reject(error);
            } else if (resolve) {
              resolve(file);
            } else {
              done(undefined, file);
            }
          }
        }
      }

      /**
       * Process the given file as configured on the processor.
       *
       * An error is thrown if asynchronous transforms are configured.
       *
       * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.
       *
       * @param {Compatible | undefined} [file]
       *   File (optional); typically `string` or `VFile`; any value accepted as
       *   `x` in `new VFile(x)`.
       * @returns {VFileWithOutput<CompileResult>}
       *   The processed file.
       *
       *   The parsed, transformed, and compiled value is available at
       *   `file.value` (see note).
       *
       *   > 👉 **Note**: unified typically compiles by serializing: most
       *   > compilers return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@link CompileResultMap `CompileResultMap`}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      processSync(file) {
        /** @type {boolean} */
        let complete = false;
        /** @type {VFileWithOutput<CompileResult> | undefined} */
        let result;

        this.freeze();
        assertParser$1('processSync', this.parser || this.Parser);
        assertCompiler$1('processSync', this.compiler || this.Compiler);

        this.process(file, realDone);
        assertDone$1('processSync', 'process', complete);

        return result

        /**
         * @type {ProcessCallback<VFileWithOutput<CompileResult>>}
         */
        function realDone(error, file) {
          complete = true;
          bail$2(error);
          result = file;
        }
      }

      /**
       * Run *transformers* on a syntax tree.
       *
       * > 👉 **Note**: `run` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `run` performs the run phase, not other phases.
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
       * @returns {undefined}
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {Compatible | undefined} file
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
       * @returns {undefined}
       *
       * @overload
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       * @param {Compatible | undefined} [file]
       * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
       *
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       *   Tree to transform and inspect.
       * @param {(
       *   RunCallback<TailTree extends undefined ? Node : TailTree> |
       *   Compatible
       * )} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
       *   Callback (optional).
       * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
       *   Nothing if `done` is given.
       *   Otherwise, a promise rejected with a fatal error or resolved with the
       *   transformed tree.
       */
      run(tree, file, done) {
        assertNode$1(tree);
        this.freeze();

        const transformers = this.transformers;

        if (!done && typeof file === 'function') {
          done = file;
          file = undefined;
        }

        return done ? executor(undefined, done) : new Promise(executor)

        // Note: `void`s needed for TS.
        /**
         * @param {(
         *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |
         *   undefined
         * )} resolve
         * @param {(error: Error) => undefined | void} reject
         * @returns {undefined}
         */
        function executor(resolve, reject) {
          const realFile = vfile$2(file);
          transformers.run(tree, realFile, realDone);

          /**
           * @param {Error | undefined} error
           * @param {Node} outputTree
           * @param {VFile} file
           * @returns {undefined}
           */
          function realDone(error, outputTree, file) {
            const resultingTree =
              /** @type {TailTree extends undefined ? Node : TailTree} */ (
                outputTree || tree
              );

            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(resultingTree);
            } else {
              done(undefined, resultingTree, file);
            }
          }
        }
      }

      /**
       * Run *transformers* on a syntax tree.
       *
       * An error is thrown if asynchronous transforms are configured.
       *
       * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `runSync` performs the run phase, not other phases.
       *
       * @param {HeadTree extends undefined ? Node : HeadTree} tree
       *   Tree to transform and inspect.
       * @param {Compatible | undefined} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @returns {TailTree extends undefined ? Node : TailTree}
       *   Transformed tree.
       */
      runSync(tree, file) {
        /** @type {boolean} */
        let complete = false;
        /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */
        let result;

        this.run(tree, file, realDone);

        assertDone$1('runSync', 'run', complete);
        return result

        /**
         * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}
         */
        function realDone(error, tree) {
          bail$2(error);
          result = tree;
          complete = true;
        }
      }

      /**
       * Compile a syntax tree.
       *
       * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.
       *
       * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase
       * > or other phases.
       *
       * @param {CompileTree extends undefined ? Node : CompileTree} tree
       *   Tree to compile.
       * @param {Compatible | undefined} [file]
       *   File associated with `node` (optional); any value accepted as `x` in
       *   `new VFile(x)`.
       * @returns {CompileResult extends undefined ? Value : CompileResult}
       *   Textual representation of the tree (see note).
       *
       *   > 👉 **Note**: unified typically compiles by serializing: most compilers
       *   > return `string` (or `Uint8Array`).
       *   > Some compilers, such as the one configured with
       *   > [`rehype-react`][rehype-react], return other values (in this case, a
       *   > React tree).
       *   > If you’re using a compiler that doesn’t serialize, expect different
       *   > result values.
       *   >
       *   > To register custom results in TypeScript, add them to
       *   > {@link CompileResultMap `CompileResultMap`}.
       *
       *   [rehype-react]: https://github.com/rehypejs/rehype-react
       */
      stringify(tree, file) {
        this.freeze();
        const realFile = vfile$2(file);
        const compiler = this.compiler || this.Compiler;
        assertCompiler$1('stringify', compiler);
        assertNode$1(tree);

        return compiler(tree, realFile)
      }

      /**
       * Configure the processor to use a plugin, a list of usable values, or a
       * preset.
       *
       * If the processor is already using a plugin, the previous plugin
       * configuration is changed based on the options that are passed in.
       * In other words, the plugin is not added a second time.
       *
       * > 👉 **Note**: `use` cannot be called on *frozen* processors.
       * > Call the processor first to create a new unfrozen processor.
       *
       * @example
       *   There are many ways to pass plugins to `.use()`.
       *   This example gives an overview:
       *
       *   ```js
       *   import {unified} from 'unified'
       *
       *   unified()
       *     // Plugin with options:
       *     .use(pluginA, {x: true, y: true})
       *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
       *     .use(pluginA, {y: false, z: true})
       *     // Plugins:
       *     .use([pluginB, pluginC])
       *     // Two plugins, the second with options:
       *     .use([pluginD, [pluginE, {}]])
       *     // Preset with plugins and settings:
       *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
       *     // Settings only:
       *     .use({settings: {position: false}})
       *   ```
       *
       * @template {Array<unknown>} [Parameters=[]]
       * @template {Node | string | undefined} [Input=undefined]
       * @template [Output=Input]
       *
       * @overload
       * @param {Preset | null | undefined} [preset]
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {PluggableList} list
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *
       * @overload
       * @param {Plugin<Parameters, Input, Output>} plugin
       * @param {...(Parameters | [boolean])} parameters
       * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
       *
       * @param {PluggableList | Plugin | Preset | null | undefined} value
       *   Usable value.
       * @param {...unknown} parameters
       *   Parameters, when a plugin is given as a usable value.
       * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
       *   Current processor.
       */
      use(value, ...parameters) {
        const attachers = this.attachers;
        const namespace = this.namespace;

        assertUnfrozen$1('use', this.frozen);

        if (value === null || value === undefined) ; else if (typeof value === 'function') {
          addPlugin(value, parameters);
        } else if (typeof value === 'object') {
          if (Array.isArray(value)) {
            addList(value);
          } else {
            addPreset(value);
          }
        } else {
          throw new TypeError('Expected usable value, not `' + value + '`')
        }

        return this

        /**
         * @param {Pluggable} value
         * @returns {undefined}
         */
        function add(value) {
          if (typeof value === 'function') {
            addPlugin(value, []);
          } else if (typeof value === 'object') {
            if (Array.isArray(value)) {
              const [plugin, ...parameters] =
                /** @type {PluginTuple<Array<unknown>>} */ (value);
              addPlugin(plugin, parameters);
            } else {
              addPreset(value);
            }
          } else {
            throw new TypeError('Expected usable value, not `' + value + '`')
          }
        }

        /**
         * @param {Preset} result
         * @returns {undefined}
         */
        function addPreset(result) {
          if (!('plugins' in result) && !('settings' in result)) {
            throw new Error(
              'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'
            )
          }

          addList(result.plugins);

          if (result.settings) {
            namespace.settings = extend$2(true, namespace.settings, result.settings);
          }
        }

        /**
         * @param {PluggableList | null | undefined} plugins
         * @returns {undefined}
         */
        function addList(plugins) {
          let index = -1;

          if (plugins === null || plugins === undefined) ; else if (Array.isArray(plugins)) {
            while (++index < plugins.length) {
              const thing = plugins[index];
              add(thing);
            }
          } else {
            throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
          }
        }

        /**
         * @param {Plugin} plugin
         * @param {Array<unknown>} parameters
         * @returns {undefined}
         */
        function addPlugin(plugin, parameters) {
          let index = -1;
          let entryIndex = -1;

          while (++index < attachers.length) {
            if (attachers[index][0] === plugin) {
              entryIndex = index;
              break
            }
          }

          if (entryIndex === -1) {
            attachers.push([plugin, ...parameters]);
          }
          // Only set if there was at least a `primary` value, otherwise we’d change
          // `arguments.length`.
          else if (parameters.length > 0) {
            let [primary, ...rest] = parameters;
            const currentPrimary = attachers[entryIndex][1];
            if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
              primary = extend$2(true, currentPrimary, primary);
            }

            attachers[entryIndex] = [plugin, primary, ...rest];
          }
        }
      }
    }

    // Note: this returns a *callable* instance.
    // That’s why it’s documented as a function.
    /**
     * Create a new processor.
     *
     * @example
     *   This example shows how a new processor can be created (from `remark`) and linked
     *   to **stdin**(4) and **stdout**(4).
     *
     *   ```js
     *   import process from 'node:process'
     *   import concatStream from 'concat-stream'
     *   import {remark} from 'remark'
     *
     *   process.stdin.pipe(
     *     concatStream(function (buf) {
     *       process.stdout.write(String(remark().processSync(buf)))
     *     })
     *   )
     *   ```
     *
     * @returns
     *   New *unfrozen* processor (`processor`).
     *
     *   This processor is configured to work the same as its ancestor.
     *   When the descendant processor is configured in the future it does not
     *   affect the ancestral processor.
     */
    const unified$2 = new Processor().freeze();

    /**
     * Assert a parser is available.
     *
     * @param {string} name
     * @param {unknown} value
     * @returns {asserts value is Parser}
     */
    function assertParser$1(name, value) {
      if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `parser`')
      }
    }

    /**
     * Assert a compiler is available.
     *
     * @param {string} name
     * @param {unknown} value
     * @returns {asserts value is Compiler}
     */
    function assertCompiler$1(name, value) {
      if (typeof value !== 'function') {
        throw new TypeError('Cannot `' + name + '` without `compiler`')
      }
    }

    /**
     * Assert the processor is not frozen.
     *
     * @param {string} name
     * @param {unknown} frozen
     * @returns {asserts frozen is false}
     */
    function assertUnfrozen$1(name, frozen) {
      if (frozen) {
        throw new Error(
          'Cannot call `' +
            name +
            '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
        )
      }
    }

    /**
     * Assert `node` is a unist node.
     *
     * @param {unknown} node
     * @returns {asserts node is Node}
     */
    function assertNode$1(node) {
      // `isPlainObj` unfortunately uses `any` instead of `unknown`.
      // type-coverage:ignore-next-line
      if (!isPlainObject(node) || typeof node.type !== 'string') {
        throw new TypeError('Expected node, got `' + node + '`')
        // Fine.
      }
    }

    /**
     * Assert that `complete` is `true`.
     *
     * @param {string} name
     * @param {string} asyncName
     * @param {unknown} complete
     * @returns {asserts complete is true}
     */
    function assertDone$1(name, asyncName, complete) {
      if (!complete) {
        throw new Error(
          '`' + name + '` finished async. Use `' + asyncName + '` instead'
        )
      }
    }

    /**
     * @param {Compatible | undefined} [value]
     * @returns {VFile}
     */
    function vfile$2(value) {
      return looksLikeAVFile(value) ? value : new VFile$2(value)
    }

    /**
     * @param {Compatible | undefined} [value]
     * @returns {value is VFile}
     */
    function looksLikeAVFile(value) {
      return Boolean(
        value &&
          typeof value === 'object' &&
          'message' in value &&
          'messages' in value
      )
    }

    /**
     * @param {unknown} [value]
     * @returns {value is Value}
     */
    function looksLikeAValue(value) {
      return typeof value === 'string' || isUint8Array(value)
    }

    /**
     * Assert `value` is an `Uint8Array`.
     *
     * @param {unknown} value
     *   thing.
     * @returns {value is Uint8Array}
     *   Whether `value` is an `Uint8Array`.
     */
    function isUint8Array(value) {
      return Boolean(
        value &&
          typeof value === 'object' &&
          'byteLength' in value &&
          'byteOffset' in value
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Register `Raw` in tree:

    const changelog =
      'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';

    /** @type {PluggableList} */
    const emptyPlugins = [];
    /** @type {Readonly<RemarkRehypeOptions>} */
    const emptyRemarkRehypeOptions = {allowDangerousHtml: true};
    const safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;

    // Mutable because we `delete` any time it’s used and a message is sent.
    /** @type {ReadonlyArray<Readonly<Deprecation>>} */
    const deprecations = [
      {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},
      {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},
      {
        from: 'allowNode',
        id: 'replace-allownode-allowedtypes-and-disallowedtypes',
        to: 'allowElement'
      },
      {
        from: 'allowedTypes',
        id: 'replace-allownode-allowedtypes-and-disallowedtypes',
        to: 'allowedElements'
      },
      {
        from: 'disallowedTypes',
        id: 'replace-allownode-allowedtypes-and-disallowedtypes',
        to: 'disallowedElements'
      },
      {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},
      {from: 'includeElementIndex', id: '#remove-includeelementindex'},
      {
        from: 'includeNodeIndex',
        id: 'change-includenodeindex-to-includeelementindex'
      },
      {from: 'linkTarget', id: 'remove-linktarget'},
      {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},
      {from: 'rawSourcePos', id: '#remove-rawsourcepos'},
      {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},
      {from: 'source', id: 'change-source-to-children', to: 'children'},
      {from: 'sourcePos', id: '#remove-sourcepos'},
      {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},
      {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}
    ];

    /**
     * Component to render markdown.
     *
     * @param {Readonly<Options>} options
     *   Props.
     * @returns {JSX.Element}
     *   React element.
     */
    function Markdown(options) {
      const allowedElements = options.allowedElements;
      const allowElement = options.allowElement;
      const children = options.children || '';
      const className = options.className;
      const components = options.components;
      const disallowedElements = options.disallowedElements;
      const rehypePlugins = options.rehypePlugins || emptyPlugins;
      const remarkPlugins = options.remarkPlugins || emptyPlugins;
      const remarkRehypeOptions = options.remarkRehypeOptions
        ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}
        : emptyRemarkRehypeOptions;
      const skipHtml = options.skipHtml;
      const unwrapDisallowed = options.unwrapDisallowed;
      const urlTransform = options.urlTransform || defaultUrlTransform;

      const processor = unified$2()
        .use(remarkParse$1)
        .use(remarkPlugins)
        .use(remarkRehype, remarkRehypeOptions)
        .use(rehypePlugins);

      const file = new VFile$2();

      if (typeof children === 'string') {
        file.value = children;
      }

      for (const deprecation of deprecations) {
        if (Object.hasOwn(options, deprecation.from)) {
          unreachable(
            'Unexpected `' +
              deprecation.from +
              '` prop, ' +
              (deprecation.to
                ? 'use `' + deprecation.to + '` instead'
                : 'remove it') +
              ' (see <' +
              changelog +
              '#' +
              deprecation.id +
              '> for more info)'
          );
        }
      }

      const mdastTree = processor.parse(file);
      /** @type {Nodes} */
      let hastTree = processor.runSync(mdastTree, file);

      // Wrap in `div` if there’s a class name.
      if (className) {
        hastTree = {
          type: 'element',
          tagName: 'div',
          properties: {className},
          // Assume no doctypes.
          children: /** @type {Array<ElementContent>} */ (
            hastTree.type === 'root' ? hastTree.children : [hastTree]
          )
        };
      }

      visit$5(hastTree, transform);

      return toJsxRuntime(hastTree, {
        Fragment: jsxRuntime.Fragment,
        components,
        ignoreInvalidStyle: true,
        jsx: jsxRuntime.jsx,
        jsxs: jsxRuntime.jsxs,
        passKeys: true,
        passNode: true
      })

      /** @type {Visitor} */
      function transform(node, index, parent) {
        if (node.type === 'raw' && parent && typeof index === 'number') {
          if (skipHtml) {
            parent.children.splice(index, 1);
          } else {
            parent.children[index] = {type: 'text', value: node.value};
          }

          return index
        }

        if (node.type === 'element') {
          /** @type {string} */
          let key;

          for (key in urlAttributes) {
            if (
              Object.hasOwn(urlAttributes, key) &&
              Object.hasOwn(node.properties, key)
            ) {
              const value = node.properties[key];
              const test = urlAttributes[key];
              if (test === null || test.includes(node.tagName)) {
                node.properties[key] = urlTransform(String(value || ''), key, node);
              }
            }
          }
        }

        if (node.type === 'element') {
          let remove = allowedElements
            ? !allowedElements.includes(node.tagName)
            : disallowedElements
            ? disallowedElements.includes(node.tagName)
            : false;

          if (!remove && allowElement && typeof index === 'number') {
            remove = !allowElement(node, index, parent);
          }

          if (remove && parent && typeof index === 'number') {
            if (unwrapDisallowed && node.children) {
              parent.children.splice(index, 1, ...node.children);
            } else {
              parent.children.splice(index, 1);
            }

            return index
          }
        }
      }
    }

    /**
     * Make a URL safe.
     *
     * @satisfies {UrlTransform}
     * @param {string} value
     *   URL.
     * @returns {string}
     *   Safe URL.
     */
    function defaultUrlTransform(value) {
      // Same as:
      // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>
      // But without the `encode` part.
      const colon = value.indexOf(':');
      const questionMark = value.indexOf('?');
      const numberSign = value.indexOf('#');
      const slash = value.indexOf('/');

      if (
        // If there is no protocol, it’s relative.
        colon < 0 ||
        // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
        (slash > -1 && colon > slash) ||
        (questionMark > -1 && colon > questionMark) ||
        (numberSign > -1 && colon > numberSign) ||
        // It is a protocol, it should be allowed.
        safeProtocol.test(value.slice(0, colon))
      ) {
        return value
      }

      return ''
    }

    var lodash_uniqby = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    	/** Used as the size to enable large array optimizations. */
    	var LARGE_ARRAY_SIZE = 200;

    	/** Used as the `TypeError` message for "Functions" methods. */
    	var FUNC_ERROR_TEXT = 'Expected a function';

    	/** Used to stand-in for `undefined` hash values. */
    	var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	/** Used to compose bitmasks for comparison styles. */
    	var UNORDERED_COMPARE_FLAG = 1,
    	    PARTIAL_COMPARE_FLAG = 2;

    	/** Used as references for various `Number` constants. */
    	var INFINITY = 1 / 0,
    	    MAX_SAFE_INTEGER = 9007199254740991;

    	/** `Object#toString` result references. */
    	var argsTag = '[object Arguments]',
    	    arrayTag = '[object Array]',
    	    boolTag = '[object Boolean]',
    	    dateTag = '[object Date]',
    	    errorTag = '[object Error]',
    	    funcTag = '[object Function]',
    	    genTag = '[object GeneratorFunction]',
    	    mapTag = '[object Map]',
    	    numberTag = '[object Number]',
    	    objectTag = '[object Object]',
    	    promiseTag = '[object Promise]',
    	    regexpTag = '[object RegExp]',
    	    setTag = '[object Set]',
    	    stringTag = '[object String]',
    	    symbolTag = '[object Symbol]',
    	    weakMapTag = '[object WeakMap]';

    	var arrayBufferTag = '[object ArrayBuffer]',
    	    dataViewTag = '[object DataView]',
    	    float32Tag = '[object Float32Array]',
    	    float64Tag = '[object Float64Array]',
    	    int8Tag = '[object Int8Array]',
    	    int16Tag = '[object Int16Array]',
    	    int32Tag = '[object Int32Array]',
    	    uint8Tag = '[object Uint8Array]',
    	    uint8ClampedTag = '[object Uint8ClampedArray]',
    	    uint16Tag = '[object Uint16Array]',
    	    uint32Tag = '[object Uint32Array]';

    	/** Used to match property names within property paths. */
    	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    	    reIsPlainProp = /^\w*$/,
    	    reLeadingDot = /^\./,
    	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    	/**
    	 * Used to match `RegExp`
    	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	 */
    	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    	/** Used to match backslashes in property paths. */
    	var reEscapeChar = /\\(\\)?/g;

    	/** Used to detect host constructors (Safari). */
    	var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	/** Used to detect unsigned integer values. */
    	var reIsUint = /^(?:0|[1-9]\d*)$/;

    	/** Used to identify `toStringTag` values of typed arrays. */
    	var typedArrayTags = {};
    	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	typedArrayTags[uint32Tag] = true;
    	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	typedArrayTags[weakMapTag] = false;

    	/** Detect free variable `global` from Node.js. */
    	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	/** Detect free variable `self`. */
    	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	/** Used as a reference to the global object. */
    	var root = freeGlobal || freeSelf || Function('return this')();

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Detect free variable `process` from Node.js. */
    	var freeProcess = moduleExports && freeGlobal.process;

    	/** Used to access faster Node.js helpers. */
    	var nodeUtil = (function() {
    	  try {
    	    return freeProcess && freeProcess.binding('util');
    	  } catch (e) {}
    	}());

    	/* Node.js helper references. */
    	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	/**
    	 * A specialized version of `_.includes` for arrays without support for
    	 * specifying an index to search from.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to inspect.
    	 * @param {*} target The value to search for.
    	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	 */
    	function arrayIncludes(array, value) {
    	  var length = array ? array.length : 0;
    	  return !!length && baseIndexOf(array, value, 0) > -1;
    	}

    	/**
    	 * This function is like `arrayIncludes` except that it accepts a comparator.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to inspect.
    	 * @param {*} target The value to search for.
    	 * @param {Function} comparator The comparator invoked per element.
    	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	 */
    	function arrayIncludesWith(array, value, comparator) {
    	  var index = -1,
    	      length = array ? array.length : 0;

    	  while (++index < length) {
    	    if (comparator(value, array[index])) {
    	      return true;
    	    }
    	  }
    	  return false;
    	}

    	/**
    	 * A specialized version of `_.some` for arrays without support for iteratee
    	 * shorthands.
    	 *
    	 * @private
    	 * @param {Array} [array] The array to iterate over.
    	 * @param {Function} predicate The function invoked per iteration.
    	 * @returns {boolean} Returns `true` if any element passes the predicate check,
    	 *  else `false`.
    	 */
    	function arraySome(array, predicate) {
    	  var index = -1,
    	      length = array ? array.length : 0;

    	  while (++index < length) {
    	    if (predicate(array[index], index, array)) {
    	      return true;
    	    }
    	  }
    	  return false;
    	}

    	/**
    	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
    	 * support for iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {Function} predicate The function invoked per iteration.
    	 * @param {number} fromIndex The index to search from.
    	 * @param {boolean} [fromRight] Specify iterating from right to left.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function baseFindIndex(array, predicate, fromIndex, fromRight) {
    	  var length = array.length,
    	      index = fromIndex + (fromRight ? 1 : -1);

    	  while ((fromRight ? index-- : ++index < length)) {
    	    if (predicate(array[index], index, array)) {
    	      return index;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {*} value The value to search for.
    	 * @param {number} fromIndex The index to search from.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function baseIndexOf(array, value, fromIndex) {
    	  if (value !== value) {
    	    return baseFindIndex(array, baseIsNaN, fromIndex);
    	  }
    	  var index = fromIndex - 1,
    	      length = array.length;

    	  while (++index < length) {
    	    if (array[index] === value) {
    	      return index;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `_.isNaN` without support for number objects.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	 */
    	function baseIsNaN(value) {
    	  return value !== value;
    	}

    	/**
    	 * The base implementation of `_.property` without support for deep paths.
    	 *
    	 * @private
    	 * @param {string} key The key of the property to get.
    	 * @returns {Function} Returns the new accessor function.
    	 */
    	function baseProperty(key) {
    	  return function(object) {
    	    return object == null ? undefined : object[key];
    	  };
    	}

    	/**
    	 * The base implementation of `_.times` without support for iteratee shorthands
    	 * or max array length checks.
    	 *
    	 * @private
    	 * @param {number} n The number of times to invoke `iteratee`.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @returns {Array} Returns the array of results.
    	 */
    	function baseTimes(n, iteratee) {
    	  var index = -1,
    	      result = Array(n);

    	  while (++index < n) {
    	    result[index] = iteratee(index);
    	  }
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.unary` without support for storing metadata.
    	 *
    	 * @private
    	 * @param {Function} func The function to cap arguments for.
    	 * @returns {Function} Returns the new capped function.
    	 */
    	function baseUnary(func) {
    	  return function(value) {
    	    return func(value);
    	  };
    	}

    	/**
    	 * Checks if a cache value for `key` exists.
    	 *
    	 * @private
    	 * @param {Object} cache The cache to query.
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function cacheHas(cache, key) {
    	  return cache.has(key);
    	}

    	/**
    	 * Gets the value at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} [object] The object to query.
    	 * @param {string} key The key of the property to get.
    	 * @returns {*} Returns the property value.
    	 */
    	function getValue(object, key) {
    	  return object == null ? undefined : object[key];
    	}

    	/**
    	 * Checks if `value` is a host object in IE < 9.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
    	 */
    	function isHostObject(value) {
    	  // Many host objects are `Object` objects that can coerce to strings
    	  // despite having improperly defined `toString` methods.
    	  var result = false;
    	  if (value != null && typeof value.toString != 'function') {
    	    try {
    	      result = !!(value + '');
    	    } catch (e) {}
    	  }
    	  return result;
    	}

    	/**
    	 * Converts `map` to its key-value pairs.
    	 *
    	 * @private
    	 * @param {Object} map The map to convert.
    	 * @returns {Array} Returns the key-value pairs.
    	 */
    	function mapToArray(map) {
    	  var index = -1,
    	      result = Array(map.size);

    	  map.forEach(function(value, key) {
    	    result[++index] = [key, value];
    	  });
    	  return result;
    	}

    	/**
    	 * Creates a unary function that invokes `func` with its argument transformed.
    	 *
    	 * @private
    	 * @param {Function} func The function to wrap.
    	 * @param {Function} transform The argument transform.
    	 * @returns {Function} Returns the new function.
    	 */
    	function overArg(func, transform) {
    	  return function(arg) {
    	    return func(transform(arg));
    	  };
    	}

    	/**
    	 * Converts `set` to an array of its values.
    	 *
    	 * @private
    	 * @param {Object} set The set to convert.
    	 * @returns {Array} Returns the values.
    	 */
    	function setToArray(set) {
    	  var index = -1,
    	      result = Array(set.size);

    	  set.forEach(function(value) {
    	    result[++index] = value;
    	  });
    	  return result;
    	}

    	/** Used for built-in method references. */
    	var arrayProto = Array.prototype,
    	    funcProto = Function.prototype,
    	    objectProto = Object.prototype;

    	/** Used to detect overreaching core-js shims. */
    	var coreJsData = root['__core-js_shared__'];

    	/** Used to detect methods masquerading as native. */
    	var maskSrcKey = (function() {
    	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	  return uid ? ('Symbol(src)_1.' + uid) : '';
    	}());

    	/** Used to resolve the decompiled source of functions. */
    	var funcToString = funcProto.toString;

    	/** Used to check objects for own properties. */
    	var hasOwnProperty = objectProto.hasOwnProperty;

    	/**
    	 * Used to resolve the
    	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	 * of values.
    	 */
    	var objectToString = objectProto.toString;

    	/** Used to detect if a method is native. */
    	var reIsNative = RegExp('^' +
    	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	);

    	/** Built-in value references. */
    	var Symbol = root.Symbol,
    	    Uint8Array = root.Uint8Array,
    	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	    splice = arrayProto.splice;

    	/* Built-in method references for those with the same name as other `lodash` methods. */
    	var nativeKeys = overArg(Object.keys, Object);

    	/* Built-in method references that are verified to be native. */
    	var DataView = getNative(root, 'DataView'),
    	    Map = getNative(root, 'Map'),
    	    Promise = getNative(root, 'Promise'),
    	    Set = getNative(root, 'Set'),
    	    WeakMap = getNative(root, 'WeakMap'),
    	    nativeCreate = getNative(Object, 'create');

    	/** Used to detect maps, sets, and weakmaps. */
    	var dataViewCtorString = toSource(DataView),
    	    mapCtorString = toSource(Map),
    	    promiseCtorString = toSource(Promise),
    	    setCtorString = toSource(Set),
    	    weakMapCtorString = toSource(WeakMap);

    	/** Used to convert symbols to primitives and strings. */
    	var symbolProto = Symbol ? Symbol.prototype : undefined,
    	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
    	    symbolToString = symbolProto ? symbolProto.toString : undefined;

    	/**
    	 * Creates a hash object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Hash(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the hash.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Hash
    	 */
    	function hashClear() {
    	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	}

    	/**
    	 * Removes `key` and its value from the hash.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Hash
    	 * @param {Object} hash The hash to modify.
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function hashDelete(key) {
    	  return this.has(key) && delete this.__data__[key];
    	}

    	/**
    	 * Gets the hash value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function hashGet(key) {
    	  var data = this.__data__;
    	  if (nativeCreate) {
    	    var result = data[key];
    	    return result === HASH_UNDEFINED ? undefined : result;
    	  }
    	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
    	}

    	/**
    	 * Checks if a hash value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Hash
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function hashHas(key) {
    	  var data = this.__data__;
    	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    	}

    	/**
    	 * Sets the hash `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the hash instance.
    	 */
    	function hashSet(key, value) {
    	  var data = this.__data__;
    	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    	  return this;
    	}

    	// Add methods to `Hash`.
    	Hash.prototype.clear = hashClear;
    	Hash.prototype['delete'] = hashDelete;
    	Hash.prototype.get = hashGet;
    	Hash.prototype.has = hashHas;
    	Hash.prototype.set = hashSet;

    	/**
    	 * Creates an list cache object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function ListCache(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the list cache.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf ListCache
    	 */
    	function listCacheClear() {
    	  this.__data__ = [];
    	}

    	/**
    	 * Removes `key` and its value from the list cache.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function listCacheDelete(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    return false;
    	  }
    	  var lastIndex = data.length - 1;
    	  if (index == lastIndex) {
    	    data.pop();
    	  } else {
    	    splice.call(data, index, 1);
    	  }
    	  return true;
    	}

    	/**
    	 * Gets the list cache value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function listCacheGet(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  return index < 0 ? undefined : data[index][1];
    	}

    	/**
    	 * Checks if a list cache value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf ListCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function listCacheHas(key) {
    	  return assocIndexOf(this.__data__, key) > -1;
    	}

    	/**
    	 * Sets the list cache `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the list cache instance.
    	 */
    	function listCacheSet(key, value) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    data.push([key, value]);
    	  } else {
    	    data[index][1] = value;
    	  }
    	  return this;
    	}

    	// Add methods to `ListCache`.
    	ListCache.prototype.clear = listCacheClear;
    	ListCache.prototype['delete'] = listCacheDelete;
    	ListCache.prototype.get = listCacheGet;
    	ListCache.prototype.has = listCacheHas;
    	ListCache.prototype.set = listCacheSet;

    	/**
    	 * Creates a map cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function MapCache(entries) {
    	  var index = -1,
    	      length = entries ? entries.length : 0;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the map.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf MapCache
    	 */
    	function mapCacheClear() {
    	  this.__data__ = {
    	    'hash': new Hash,
    	    'map': new (Map || ListCache),
    	    'string': new Hash
    	  };
    	}

    	/**
    	 * Removes `key` and its value from the map.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function mapCacheDelete(key) {
    	  return getMapData(this, key)['delete'](key);
    	}

    	/**
    	 * Gets the map value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function mapCacheGet(key) {
    	  return getMapData(this, key).get(key);
    	}

    	/**
    	 * Checks if a map value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf MapCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function mapCacheHas(key) {
    	  return getMapData(this, key).has(key);
    	}

    	/**
    	 * Sets the map `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the map cache instance.
    	 */
    	function mapCacheSet(key, value) {
    	  getMapData(this, key).set(key, value);
    	  return this;
    	}

    	// Add methods to `MapCache`.
    	MapCache.prototype.clear = mapCacheClear;
    	MapCache.prototype['delete'] = mapCacheDelete;
    	MapCache.prototype.get = mapCacheGet;
    	MapCache.prototype.has = mapCacheHas;
    	MapCache.prototype.set = mapCacheSet;

    	/**
    	 *
    	 * Creates an array cache object to store unique values.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [values] The values to cache.
    	 */
    	function SetCache(values) {
    	  var index = -1,
    	      length = values ? values.length : 0;

    	  this.__data__ = new MapCache;
    	  while (++index < length) {
    	    this.add(values[index]);
    	  }
    	}

    	/**
    	 * Adds `value` to the array cache.
    	 *
    	 * @private
    	 * @name add
    	 * @memberOf SetCache
    	 * @alias push
    	 * @param {*} value The value to cache.
    	 * @returns {Object} Returns the cache instance.
    	 */
    	function setCacheAdd(value) {
    	  this.__data__.set(value, HASH_UNDEFINED);
    	  return this;
    	}

    	/**
    	 * Checks if `value` is in the array cache.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf SetCache
    	 * @param {*} value The value to search for.
    	 * @returns {number} Returns `true` if `value` is found, else `false`.
    	 */
    	function setCacheHas(value) {
    	  return this.__data__.has(value);
    	}

    	// Add methods to `SetCache`.
    	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	SetCache.prototype.has = setCacheHas;

    	/**
    	 * Creates a stack cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Stack(entries) {
    	  this.__data__ = new ListCache(entries);
    	}

    	/**
    	 * Removes all key-value entries from the stack.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Stack
    	 */
    	function stackClear() {
    	  this.__data__ = new ListCache;
    	}

    	/**
    	 * Removes `key` and its value from the stack.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function stackDelete(key) {
    	  return this.__data__['delete'](key);
    	}

    	/**
    	 * Gets the stack value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function stackGet(key) {
    	  return this.__data__.get(key);
    	}

    	/**
    	 * Checks if a stack value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Stack
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function stackHas(key) {
    	  return this.__data__.has(key);
    	}

    	/**
    	 * Sets the stack `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the stack cache instance.
    	 */
    	function stackSet(key, value) {
    	  var cache = this.__data__;
    	  if (cache instanceof ListCache) {
    	    var pairs = cache.__data__;
    	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	      pairs.push([key, value]);
    	      return this;
    	    }
    	    cache = this.__data__ = new MapCache(pairs);
    	  }
    	  cache.set(key, value);
    	  return this;
    	}

    	// Add methods to `Stack`.
    	Stack.prototype.clear = stackClear;
    	Stack.prototype['delete'] = stackDelete;
    	Stack.prototype.get = stackGet;
    	Stack.prototype.has = stackHas;
    	Stack.prototype.set = stackSet;

    	/**
    	 * Creates an array of the enumerable property names of the array-like `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @param {boolean} inherited Specify returning inherited property names.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function arrayLikeKeys(value, inherited) {
    	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    	  // Safari 9 makes `arguments.length` enumerable in strict mode.
    	  var result = (isArray(value) || isArguments(value))
    	    ? baseTimes(value.length, String)
    	    : [];

    	  var length = result.length,
    	      skipIndexes = !!length;

    	  for (var key in value) {
    	    if ((inherited || hasOwnProperty.call(value, key)) &&
    	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Gets the index at which the `key` is found in `array` of key-value pairs.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {*} key The key to search for.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function assocIndexOf(array, key) {
    	  var length = array.length;
    	  while (length--) {
    	    if (eq(array[length][0], key)) {
    	      return length;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `_.get` without support for default values.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {Array|string} path The path of the property to get.
    	 * @returns {*} Returns the resolved value.
    	 */
    	function baseGet(object, path) {
    	  path = isKey(path, object) ? [path] : castPath(path);

    	  var index = 0,
    	      length = path.length;

    	  while (object != null && index < length) {
    	    object = object[toKey(path[index++])];
    	  }
    	  return (index && index == length) ? object : undefined;
    	}

    	/**
    	 * The base implementation of `getTag`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	function baseGetTag(value) {
    	  return objectToString.call(value);
    	}

    	/**
    	 * The base implementation of `_.hasIn` without support for deep paths.
    	 *
    	 * @private
    	 * @param {Object} [object] The object to query.
    	 * @param {Array|string} key The key to check.
    	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	 */
    	function baseHasIn(object, key) {
    	  return object != null && key in Object(object);
    	}

    	/**
    	 * The base implementation of `_.isEqual` which supports partial comparisons
    	 * and tracks traversed objects.
    	 *
    	 * @private
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @param {Function} [customizer] The function to customize comparisons.
    	 * @param {boolean} [bitmask] The bitmask of comparison flags.
    	 *  The bitmask may be composed of the following flags:
    	 *     1 - Unordered comparison
    	 *     2 - Partial comparison
    	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 */
    	function baseIsEqual(value, other, customizer, bitmask, stack) {
    	  if (value === other) {
    	    return true;
    	  }
    	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    	    return value !== value && other !== other;
    	  }
    	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    	}

    	/**
    	 * A specialized version of `baseIsEqual` for arrays and objects which performs
    	 * deep comparisons and tracks traversed objects enabling objects with circular
    	 * references to be compared.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Function} [customizer] The function to customize comparisons.
    	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
    	 *  for more details.
    	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    	  var objIsArr = isArray(object),
    	      othIsArr = isArray(other),
    	      objTag = arrayTag,
    	      othTag = arrayTag;

    	  if (!objIsArr) {
    	    objTag = getTag(object);
    	    objTag = objTag == argsTag ? objectTag : objTag;
    	  }
    	  if (!othIsArr) {
    	    othTag = getTag(other);
    	    othTag = othTag == argsTag ? objectTag : othTag;
    	  }
    	  var objIsObj = objTag == objectTag && !isHostObject(object),
    	      othIsObj = othTag == objectTag && !isHostObject(other),
    	      isSameTag = objTag == othTag;

    	  if (isSameTag && !objIsObj) {
    	    stack || (stack = new Stack);
    	    return (objIsArr || isTypedArray(object))
    	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
    	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    	  }
    	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
    	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    	    if (objIsWrapped || othIsWrapped) {
    	      var objUnwrapped = objIsWrapped ? object.value() : object,
    	          othUnwrapped = othIsWrapped ? other.value() : other;

    	      stack || (stack = new Stack);
    	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
    	    }
    	  }
    	  if (!isSameTag) {
    	    return false;
    	  }
    	  stack || (stack = new Stack);
    	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    	}

    	/**
    	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Object} object The object to inspect.
    	 * @param {Object} source The object of property values to match.
    	 * @param {Array} matchData The property names, values, and compare flags to match.
    	 * @param {Function} [customizer] The function to customize comparisons.
    	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	 */
    	function baseIsMatch(object, source, matchData, customizer) {
    	  var index = matchData.length,
    	      length = index,
    	      noCustomizer = !customizer;

    	  if (object == null) {
    	    return !length;
    	  }
    	  object = Object(object);
    	  while (index--) {
    	    var data = matchData[index];
    	    if ((noCustomizer && data[2])
    	          ? data[1] !== object[data[0]]
    	          : !(data[0] in object)
    	        ) {
    	      return false;
    	    }
    	  }
    	  while (++index < length) {
    	    data = matchData[index];
    	    var key = data[0],
    	        objValue = object[key],
    	        srcValue = data[1];

    	    if (noCustomizer && data[2]) {
    	      if (objValue === undefined && !(key in object)) {
    	        return false;
    	      }
    	    } else {
    	      var stack = new Stack;
    	      if (customizer) {
    	        var result = customizer(objValue, srcValue, key, object, source, stack);
    	      }
    	      if (!(result === undefined
    	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
    	            : result
    	          )) {
    	        return false;
    	      }
    	    }
    	  }
    	  return true;
    	}

    	/**
    	 * The base implementation of `_.isNative` without bad shim checks.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a native function,
    	 *  else `false`.
    	 */
    	function baseIsNative(value) {
    	  if (!isObject(value) || isMasked(value)) {
    	    return false;
    	  }
    	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
    	  return pattern.test(toSource(value));
    	}

    	/**
    	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 */
    	function baseIsTypedArray(value) {
    	  return isObjectLike(value) &&
    	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    	}

    	/**
    	 * The base implementation of `_.iteratee`.
    	 *
    	 * @private
    	 * @param {*} [value=_.identity] The value to convert to an iteratee.
    	 * @returns {Function} Returns the iteratee.
    	 */
    	function baseIteratee(value) {
    	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    	  if (typeof value == 'function') {
    	    return value;
    	  }
    	  if (value == null) {
    	    return identity;
    	  }
    	  if (typeof value == 'object') {
    	    return isArray(value)
    	      ? baseMatchesProperty(value[0], value[1])
    	      : baseMatches(value);
    	  }
    	  return property(value);
    	}

    	/**
    	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function baseKeys(object) {
    	  if (!isPrototype(object)) {
    	    return nativeKeys(object);
    	  }
    	  var result = [];
    	  for (var key in Object(object)) {
    	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.matches` which doesn't clone `source`.
    	 *
    	 * @private
    	 * @param {Object} source The object of property values to match.
    	 * @returns {Function} Returns the new spec function.
    	 */
    	function baseMatches(source) {
    	  var matchData = getMatchData(source);
    	  if (matchData.length == 1 && matchData[0][2]) {
    	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    	  }
    	  return function(object) {
    	    return object === source || baseIsMatch(object, source, matchData);
    	  };
    	}

    	/**
    	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
    	 *
    	 * @private
    	 * @param {string} path The path of the property to get.
    	 * @param {*} srcValue The value to match.
    	 * @returns {Function} Returns the new spec function.
    	 */
    	function baseMatchesProperty(path, srcValue) {
    	  if (isKey(path) && isStrictComparable(srcValue)) {
    	    return matchesStrictComparable(toKey(path), srcValue);
    	  }
    	  return function(object) {
    	    var objValue = get(object, path);
    	    return (objValue === undefined && objValue === srcValue)
    	      ? hasIn(object, path)
    	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    	  };
    	}

    	/**
    	 * A specialized version of `baseProperty` which supports deep paths.
    	 *
    	 * @private
    	 * @param {Array|string} path The path of the property to get.
    	 * @returns {Function} Returns the new accessor function.
    	 */
    	function basePropertyDeep(path) {
    	  return function(object) {
    	    return baseGet(object, path);
    	  };
    	}

    	/**
    	 * The base implementation of `_.toString` which doesn't convert nullish
    	 * values to empty strings.
    	 *
    	 * @private
    	 * @param {*} value The value to process.
    	 * @returns {string} Returns the string.
    	 */
    	function baseToString(value) {
    	  // Exit early for strings to avoid a performance hit in some environments.
    	  if (typeof value == 'string') {
    	    return value;
    	  }
    	  if (isSymbol(value)) {
    	    return symbolToString ? symbolToString.call(value) : '';
    	  }
    	  var result = (value + '');
    	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	}

    	/**
    	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {Function} [iteratee] The iteratee invoked per element.
    	 * @param {Function} [comparator] The comparator invoked per element.
    	 * @returns {Array} Returns the new duplicate free array.
    	 */
    	function baseUniq(array, iteratee, comparator) {
    	  var index = -1,
    	      includes = arrayIncludes,
    	      length = array.length,
    	      isCommon = true,
    	      result = [],
    	      seen = result;

    	  if (comparator) {
    	    isCommon = false;
    	    includes = arrayIncludesWith;
    	  }
    	  else if (length >= LARGE_ARRAY_SIZE) {
    	    var set = iteratee ? null : createSet(array);
    	    if (set) {
    	      return setToArray(set);
    	    }
    	    isCommon = false;
    	    includes = cacheHas;
    	    seen = new SetCache;
    	  }
    	  else {
    	    seen = iteratee ? [] : result;
    	  }
    	  outer:
    	  while (++index < length) {
    	    var value = array[index],
    	        computed = iteratee ? iteratee(value) : value;

    	    value = (comparator || value !== 0) ? value : 0;
    	    if (isCommon && computed === computed) {
    	      var seenIndex = seen.length;
    	      while (seenIndex--) {
    	        if (seen[seenIndex] === computed) {
    	          continue outer;
    	        }
    	      }
    	      if (iteratee) {
    	        seen.push(computed);
    	      }
    	      result.push(value);
    	    }
    	    else if (!includes(seen, computed, comparator)) {
    	      if (seen !== result) {
    	        seen.push(computed);
    	      }
    	      result.push(value);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Casts `value` to a path array if it's not one.
    	 *
    	 * @private
    	 * @param {*} value The value to inspect.
    	 * @returns {Array} Returns the cast property path array.
    	 */
    	function castPath(value) {
    	  return isArray(value) ? value : stringToPath(value);
    	}

    	/**
    	 * Creates a set object of `values`.
    	 *
    	 * @private
    	 * @param {Array} values The values to add to the set.
    	 * @returns {Object} Returns the new set.
    	 */
    	var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    	  return new Set(values);
    	};

    	/**
    	 * A specialized version of `baseIsEqualDeep` for arrays with support for
    	 * partial deep comparisons.
    	 *
    	 * @private
    	 * @param {Array} array The array to compare.
    	 * @param {Array} other The other array to compare.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	 *  for more details.
    	 * @param {Object} stack Tracks traversed `array` and `other` objects.
    	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	 */
    	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
    	      arrLength = array.length,
    	      othLength = other.length;

    	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	    return false;
    	  }
    	  // Assume cyclic values are equal.
    	  var stacked = stack.get(array);
    	  if (stacked && stack.get(other)) {
    	    return stacked == other;
    	  }
    	  var index = -1,
    	      result = true,
    	      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

    	  stack.set(array, other);
    	  stack.set(other, array);

    	  // Ignore non-index properties.
    	  while (++index < arrLength) {
    	    var arrValue = array[index],
    	        othValue = other[index];

    	    if (customizer) {
    	      var compared = isPartial
    	        ? customizer(othValue, arrValue, index, other, array, stack)
    	        : customizer(arrValue, othValue, index, array, other, stack);
    	    }
    	    if (compared !== undefined) {
    	      if (compared) {
    	        continue;
    	      }
    	      result = false;
    	      break;
    	    }
    	    // Recursively compare arrays (susceptible to call stack limits).
    	    if (seen) {
    	      if (!arraySome(other, function(othValue, othIndex) {
    	            if (!seen.has(othIndex) &&
    	                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
    	              return seen.add(othIndex);
    	            }
    	          })) {
    	        result = false;
    	        break;
    	      }
    	    } else if (!(
    	          arrValue === othValue ||
    	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
    	        )) {
    	      result = false;
    	      break;
    	    }
    	  }
    	  stack['delete'](array);
    	  stack['delete'](other);
    	  return result;
    	}

    	/**
    	 * A specialized version of `baseIsEqualDeep` for comparing objects of
    	 * the same `toStringTag`.
    	 *
    	 * **Note:** This function only supports comparing values with tags of
    	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {string} tag The `toStringTag` of the objects to compare.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	 *  for more details.
    	 * @param {Object} stack Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    	  switch (tag) {
    	    case dataViewTag:
    	      if ((object.byteLength != other.byteLength) ||
    	          (object.byteOffset != other.byteOffset)) {
    	        return false;
    	      }
    	      object = object.buffer;
    	      other = other.buffer;

    	    case arrayBufferTag:
    	      if ((object.byteLength != other.byteLength) ||
    	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	        return false;
    	      }
    	      return true;

    	    case boolTag:
    	    case dateTag:
    	    case numberTag:
    	      // Coerce booleans to `1` or `0` and dates to milliseconds.
    	      // Invalid dates are coerced to `NaN`.
    	      return eq(+object, +other);

    	    case errorTag:
    	      return object.name == other.name && object.message == other.message;

    	    case regexpTag:
    	    case stringTag:
    	      // Coerce regexes to strings and treat strings, primitives and objects,
    	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    	      // for more details.
    	      return object == (other + '');

    	    case mapTag:
    	      var convert = mapToArray;

    	    case setTag:
    	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
    	      convert || (convert = setToArray);

    	      if (object.size != other.size && !isPartial) {
    	        return false;
    	      }
    	      // Assume cyclic values are equal.
    	      var stacked = stack.get(object);
    	      if (stacked) {
    	        return stacked == other;
    	      }
    	      bitmask |= UNORDERED_COMPARE_FLAG;

    	      // Recursively compare objects (susceptible to call stack limits).
    	      stack.set(object, other);
    	      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
    	      stack['delete'](object);
    	      return result;

    	    case symbolTag:
    	      if (symbolValueOf) {
    	        return symbolValueOf.call(object) == symbolValueOf.call(other);
    	      }
    	  }
    	  return false;
    	}

    	/**
    	 * A specialized version of `baseIsEqualDeep` for objects with support for
    	 * partial deep comparisons.
    	 *
    	 * @private
    	 * @param {Object} object The object to compare.
    	 * @param {Object} other The other object to compare.
    	 * @param {Function} equalFunc The function to determine equivalents of values.
    	 * @param {Function} customizer The function to customize comparisons.
    	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
    	 *  for more details.
    	 * @param {Object} stack Tracks traversed `object` and `other` objects.
    	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	 */
    	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
    	      objProps = keys(object),
    	      objLength = objProps.length,
    	      othProps = keys(other),
    	      othLength = othProps.length;

    	  if (objLength != othLength && !isPartial) {
    	    return false;
    	  }
    	  var index = objLength;
    	  while (index--) {
    	    var key = objProps[index];
    	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    	      return false;
    	    }
    	  }
    	  // Assume cyclic values are equal.
    	  var stacked = stack.get(object);
    	  if (stacked && stack.get(other)) {
    	    return stacked == other;
    	  }
    	  var result = true;
    	  stack.set(object, other);
    	  stack.set(other, object);

    	  var skipCtor = isPartial;
    	  while (++index < objLength) {
    	    key = objProps[index];
    	    var objValue = object[key],
    	        othValue = other[key];

    	    if (customizer) {
    	      var compared = isPartial
    	        ? customizer(othValue, objValue, key, other, object, stack)
    	        : customizer(objValue, othValue, key, object, other, stack);
    	    }
    	    // Recursively compare objects (susceptible to call stack limits).
    	    if (!(compared === undefined
    	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
    	          : compared
    	        )) {
    	      result = false;
    	      break;
    	    }
    	    skipCtor || (skipCtor = key == 'constructor');
    	  }
    	  if (result && !skipCtor) {
    	    var objCtor = object.constructor,
    	        othCtor = other.constructor;

    	    // Non `Object` object instances with different constructors are not equal.
    	    if (objCtor != othCtor &&
    	        ('constructor' in object && 'constructor' in other) &&
    	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	      result = false;
    	    }
    	  }
    	  stack['delete'](object);
    	  stack['delete'](other);
    	  return result;
    	}

    	/**
    	 * Gets the data for `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to query.
    	 * @param {string} key The reference key.
    	 * @returns {*} Returns the map data.
    	 */
    	function getMapData(map, key) {
    	  var data = map.__data__;
    	  return isKeyable(key)
    	    ? data[typeof key == 'string' ? 'string' : 'hash']
    	    : data.map;
    	}

    	/**
    	 * Gets the property names, values, and compare flags of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the match data of `object`.
    	 */
    	function getMatchData(object) {
    	  var result = keys(object),
    	      length = result.length;

    	  while (length--) {
    	    var key = result[length],
    	        value = object[key];

    	    result[length] = [key, value, isStrictComparable(value)];
    	  }
    	  return result;
    	}

    	/**
    	 * Gets the native function at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {string} key The key of the method to get.
    	 * @returns {*} Returns the function if it's native, else `undefined`.
    	 */
    	function getNative(object, key) {
    	  var value = getValue(object, key);
    	  return baseIsNative(value) ? value : undefined;
    	}

    	/**
    	 * Gets the `toStringTag` of `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	var getTag = baseGetTag;

    	// Fallback for data views, maps, sets, and weak maps in IE 11,
    	// for data views in Edge < 14, and promises in Node.js.
    	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	    (Map && getTag(new Map) != mapTag) ||
    	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	    (Set && getTag(new Set) != setTag) ||
    	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	  getTag = function(value) {
    	    var result = objectToString.call(value),
    	        Ctor = result == objectTag ? value.constructor : undefined,
    	        ctorString = Ctor ? toSource(Ctor) : undefined;

    	    if (ctorString) {
    	      switch (ctorString) {
    	        case dataViewCtorString: return dataViewTag;
    	        case mapCtorString: return mapTag;
    	        case promiseCtorString: return promiseTag;
    	        case setCtorString: return setTag;
    	        case weakMapCtorString: return weakMapTag;
    	      }
    	    }
    	    return result;
    	  };
    	}

    	/**
    	 * Checks if `path` exists on `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {Array|string} path The path to check.
    	 * @param {Function} hasFunc The function to check properties.
    	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	 */
    	function hasPath(object, path, hasFunc) {
    	  path = isKey(path, object) ? [path] : castPath(path);

    	  var result,
    	      index = -1,
    	      length = path.length;

    	  while (++index < length) {
    	    var key = toKey(path[index]);
    	    if (!(result = object != null && hasFunc(object, key))) {
    	      break;
    	    }
    	    object = object[key];
    	  }
    	  if (result) {
    	    return result;
    	  }
    	  var length = object ? object.length : 0;
    	  return !!length && isLength(length) && isIndex(key, length) &&
    	    (isArray(object) || isArguments(object));
    	}

    	/**
    	 * Checks if `value` is a valid array-like index.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	 */
    	function isIndex(value, length) {
    	  length = length == null ? MAX_SAFE_INTEGER : length;
    	  return !!length &&
    	    (typeof value == 'number' || reIsUint.test(value)) &&
    	    (value > -1 && value % 1 == 0 && value < length);
    	}

    	/**
    	 * Checks if `value` is a property name and not a property path.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @param {Object} [object] The object to query keys on.
    	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
    	 */
    	function isKey(value, object) {
    	  if (isArray(value)) {
    	    return false;
    	  }
    	  var type = typeof value;
    	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
    	      value == null || isSymbol(value)) {
    	    return true;
    	  }
    	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    	    (object != null && value in Object(object));
    	}

    	/**
    	 * Checks if `value` is suitable for use as unique object key.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	 */
    	function isKeyable(value) {
    	  var type = typeof value;
    	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	    ? (value !== '__proto__')
    	    : (value === null);
    	}

    	/**
    	 * Checks if `func` has its source masked.
    	 *
    	 * @private
    	 * @param {Function} func The function to check.
    	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	 */
    	function isMasked(func) {
    	  return !!maskSrcKey && (maskSrcKey in func);
    	}

    	/**
    	 * Checks if `value` is likely a prototype object.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	 */
    	function isPrototype(value) {
    	  var Ctor = value && value.constructor,
    	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	  return value === proto;
    	}

    	/**
    	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` if suitable for strict
    	 *  equality comparisons, else `false`.
    	 */
    	function isStrictComparable(value) {
    	  return value === value && !isObject(value);
    	}

    	/**
    	 * A specialized version of `matchesProperty` for source values suitable
    	 * for strict equality comparisons, i.e. `===`.
    	 *
    	 * @private
    	 * @param {string} key The key of the property to get.
    	 * @param {*} srcValue The value to match.
    	 * @returns {Function} Returns the new spec function.
    	 */
    	function matchesStrictComparable(key, srcValue) {
    	  return function(object) {
    	    if (object == null) {
    	      return false;
    	    }
    	    return object[key] === srcValue &&
    	      (srcValue !== undefined || (key in Object(object)));
    	  };
    	}

    	/**
    	 * Converts `string` to a property path array.
    	 *
    	 * @private
    	 * @param {string} string The string to convert.
    	 * @returns {Array} Returns the property path array.
    	 */
    	var stringToPath = memoize(function(string) {
    	  string = toString(string);

    	  var result = [];
    	  if (reLeadingDot.test(string)) {
    	    result.push('');
    	  }
    	  string.replace(rePropName, function(match, number, quote, string) {
    	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    	  });
    	  return result;
    	});

    	/**
    	 * Converts `value` to a string key if it's not a string or symbol.
    	 *
    	 * @private
    	 * @param {*} value The value to inspect.
    	 * @returns {string|symbol} Returns the key.
    	 */
    	function toKey(value) {
    	  if (typeof value == 'string' || isSymbol(value)) {
    	    return value;
    	  }
    	  var result = (value + '');
    	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	}

    	/**
    	 * Converts `func` to its source code.
    	 *
    	 * @private
    	 * @param {Function} func The function to process.
    	 * @returns {string} Returns the source code.
    	 */
    	function toSource(func) {
    	  if (func != null) {
    	    try {
    	      return funcToString.call(func);
    	    } catch (e) {}
    	    try {
    	      return (func + '');
    	    } catch (e) {}
    	  }
    	  return '';
    	}

    	/**
    	 * This method is like `_.uniq` except that it accepts `iteratee` which is
    	 * invoked for each element in `array` to generate the criterion by which
    	 * uniqueness is computed. The iteratee is invoked with one argument: (value).
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Array
    	 * @param {Array} array The array to inspect.
    	 * @param {Function} [iteratee=_.identity]
    	 *  The iteratee invoked per element.
    	 * @returns {Array} Returns the new duplicate free array.
    	 * @example
    	 *
    	 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
    	 * // => [2.1, 1.2]
    	 *
    	 * // The `_.property` iteratee shorthand.
    	 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
    	 * // => [{ 'x': 1 }, { 'x': 2 }]
    	 */
    	function uniqBy(array, iteratee) {
    	  return (array && array.length)
    	    ? baseUniq(array, baseIteratee(iteratee))
    	    : [];
    	}

    	/**
    	 * Creates a function that memoizes the result of `func`. If `resolver` is
    	 * provided, it determines the cache key for storing the result based on the
    	 * arguments provided to the memoized function. By default, the first argument
    	 * provided to the memoized function is used as the map cache key. The `func`
    	 * is invoked with the `this` binding of the memoized function.
    	 *
    	 * **Note:** The cache is exposed as the `cache` property on the memoized
    	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
    	 * constructor with one whose instances implement the
    	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
    	 * method interface of `delete`, `get`, `has`, and `set`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Function
    	 * @param {Function} func The function to have its output memoized.
    	 * @param {Function} [resolver] The function to resolve the cache key.
    	 * @returns {Function} Returns the new memoized function.
    	 * @example
    	 *
    	 * var object = { 'a': 1, 'b': 2 };
    	 * var other = { 'c': 3, 'd': 4 };
    	 *
    	 * var values = _.memoize(_.values);
    	 * values(object);
    	 * // => [1, 2]
    	 *
    	 * values(other);
    	 * // => [3, 4]
    	 *
    	 * object.a = 2;
    	 * values(object);
    	 * // => [1, 2]
    	 *
    	 * // Modify the result cache.
    	 * values.cache.set(object, ['a', 'b']);
    	 * values(object);
    	 * // => ['a', 'b']
    	 *
    	 * // Replace `_.memoize.Cache`.
    	 * _.memoize.Cache = WeakMap;
    	 */
    	function memoize(func, resolver) {
    	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    	    throw new TypeError(FUNC_ERROR_TEXT);
    	  }
    	  var memoized = function() {
    	    var args = arguments,
    	        key = resolver ? resolver.apply(this, args) : args[0],
    	        cache = memoized.cache;

    	    if (cache.has(key)) {
    	      return cache.get(key);
    	    }
    	    var result = func.apply(this, args);
    	    memoized.cache = cache.set(key, result);
    	    return result;
    	  };
    	  memoized.cache = new (memoize.Cache || MapCache);
    	  return memoized;
    	}

    	// Assign cache to `_.memoize`.
    	memoize.Cache = MapCache;

    	/**
    	 * Performs a
    	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * comparison between two values to determine if they are equivalent.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 * var other = { 'a': 1 };
    	 *
    	 * _.eq(object, object);
    	 * // => true
    	 *
    	 * _.eq(object, other);
    	 * // => false
    	 *
    	 * _.eq('a', 'a');
    	 * // => true
    	 *
    	 * _.eq('a', Object('a'));
    	 * // => false
    	 *
    	 * _.eq(NaN, NaN);
    	 * // => true
    	 */
    	function eq(value, other) {
    	  return value === other || (value !== value && other !== other);
    	}

    	/**
    	 * Checks if `value` is likely an `arguments` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArguments(function() { return arguments; }());
    	 * // => true
    	 *
    	 * _.isArguments([1, 2, 3]);
    	 * // => false
    	 */
    	function isArguments(value) {
    	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    	}

    	/**
    	 * Checks if `value` is classified as an `Array` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	 * @example
    	 *
    	 * _.isArray([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArray(document.body.children);
    	 * // => false
    	 *
    	 * _.isArray('abc');
    	 * // => false
    	 *
    	 * _.isArray(_.noop);
    	 * // => false
    	 */
    	var isArray = Array.isArray;

    	/**
    	 * Checks if `value` is array-like. A value is considered array-like if it's
    	 * not a function and has a `value.length` that's an integer greater than or
    	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	 * @example
    	 *
    	 * _.isArrayLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLike(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLike('abc');
    	 * // => true
    	 *
    	 * _.isArrayLike(_.noop);
    	 * // => false
    	 */
    	function isArrayLike(value) {
    	  return value != null && isLength(value.length) && !isFunction(value);
    	}

    	/**
    	 * This method is like `_.isArrayLike` except that it also checks if `value`
    	 * is an object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array-like object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArrayLikeObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject('abc');
    	 * // => false
    	 *
    	 * _.isArrayLikeObject(_.noop);
    	 * // => false
    	 */
    	function isArrayLikeObject(value) {
    	  return isObjectLike(value) && isArrayLike(value);
    	}

    	/**
    	 * Checks if `value` is classified as a `Function` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	 * @example
    	 *
    	 * _.isFunction(_);
    	 * // => true
    	 *
    	 * _.isFunction(/abc/);
    	 * // => false
    	 */
    	function isFunction(value) {
    	  // The use of `Object#toString` avoids issues with the `typeof` operator
    	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
    	  var tag = isObject(value) ? objectToString.call(value) : '';
    	  return tag == funcTag || tag == genTag;
    	}

    	/**
    	 * Checks if `value` is a valid array-like length.
    	 *
    	 * **Note:** This method is loosely based on
    	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	 * @example
    	 *
    	 * _.isLength(3);
    	 * // => true
    	 *
    	 * _.isLength(Number.MIN_VALUE);
    	 * // => false
    	 *
    	 * _.isLength(Infinity);
    	 * // => false
    	 *
    	 * _.isLength('3');
    	 * // => false
    	 */
    	function isLength(value) {
    	  return typeof value == 'number' &&
    	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	}

    	/**
    	 * Checks if `value` is the
    	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	 * @example
    	 *
    	 * _.isObject({});
    	 * // => true
    	 *
    	 * _.isObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObject(_.noop);
    	 * // => true
    	 *
    	 * _.isObject(null);
    	 * // => false
    	 */
    	function isObject(value) {
    	  var type = typeof value;
    	  return !!value && (type == 'object' || type == 'function');
    	}

    	/**
    	 * Checks if `value` is object-like. A value is object-like if it's not `null`
    	 * and has a `typeof` result of "object".
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	 * @example
    	 *
    	 * _.isObjectLike({});
    	 * // => true
    	 *
    	 * _.isObjectLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObjectLike(_.noop);
    	 * // => false
    	 *
    	 * _.isObjectLike(null);
    	 * // => false
    	 */
    	function isObjectLike(value) {
    	  return !!value && typeof value == 'object';
    	}

    	/**
    	 * Checks if `value` is classified as a `Symbol` primitive or object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
    	 * @example
    	 *
    	 * _.isSymbol(Symbol.iterator);
    	 * // => true
    	 *
    	 * _.isSymbol('abc');
    	 * // => false
    	 */
    	function isSymbol(value) {
    	  return typeof value == 'symbol' ||
    	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
    	}

    	/**
    	 * Checks if `value` is classified as a typed array.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 * @example
    	 *
    	 * _.isTypedArray(new Uint8Array);
    	 * // => true
    	 *
    	 * _.isTypedArray([]);
    	 * // => false
    	 */
    	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	/**
    	 * Converts `value` to a string. An empty string is returned for `null`
    	 * and `undefined` values. The sign of `-0` is preserved.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to process.
    	 * @returns {string} Returns the string.
    	 * @example
    	 *
    	 * _.toString(null);
    	 * // => ''
    	 *
    	 * _.toString(-0);
    	 * // => '-0'
    	 *
    	 * _.toString([1, 2, 3]);
    	 * // => '1,2,3'
    	 */
    	function toString(value) {
    	  return value == null ? '' : baseToString(value);
    	}

    	/**
    	 * Gets the value at `path` of `object`. If the resolved value is
    	 * `undefined`, the `defaultValue` is returned in its place.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.7.0
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @param {Array|string} path The path of the property to get.
    	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	 * @returns {*} Returns the resolved value.
    	 * @example
    	 *
    	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	 *
    	 * _.get(object, 'a[0].b.c');
    	 * // => 3
    	 *
    	 * _.get(object, ['a', '0', 'b', 'c']);
    	 * // => 3
    	 *
    	 * _.get(object, 'a.b.c', 'default');
    	 * // => 'default'
    	 */
    	function get(object, path, defaultValue) {
    	  var result = object == null ? undefined : baseGet(object, path);
    	  return result === undefined ? defaultValue : result;
    	}

    	/**
    	 * Checks if `path` is a direct or inherited property of `object`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @param {Array|string} path The path to check.
    	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	 * @example
    	 *
    	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
    	 *
    	 * _.hasIn(object, 'a');
    	 * // => true
    	 *
    	 * _.hasIn(object, 'a.b');
    	 * // => true
    	 *
    	 * _.hasIn(object, ['a', 'b']);
    	 * // => true
    	 *
    	 * _.hasIn(object, 'b');
    	 * // => false
    	 */
    	function hasIn(object, path) {
    	  return object != null && hasPath(object, path, baseHasIn);
    	}

    	/**
    	 * Creates an array of the own enumerable property names of `object`.
    	 *
    	 * **Note:** Non-object values are coerced to objects. See the
    	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	 * for more details.
    	 *
    	 * @static
    	 * @since 0.1.0
    	 * @memberOf _
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.a = 1;
    	 *   this.b = 2;
    	 * }
    	 *
    	 * Foo.prototype.c = 3;
    	 *
    	 * _.keys(new Foo);
    	 * // => ['a', 'b'] (iteration order is not guaranteed)
    	 *
    	 * _.keys('hi');
    	 * // => ['0', '1']
    	 */
    	function keys(object) {
    	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	}

    	/**
    	 * This method returns the first argument it receives.
    	 *
    	 * @static
    	 * @since 0.1.0
    	 * @memberOf _
    	 * @category Util
    	 * @param {*} value Any value.
    	 * @returns {*} Returns `value`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 *
    	 * console.log(_.identity(object) === object);
    	 * // => true
    	 */
    	function identity(value) {
    	  return value;
    	}

    	/**
    	 * This method returns `undefined`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 2.3.0
    	 * @category Util
    	 * @example
    	 *
    	 * _.times(2, _.noop);
    	 * // => [undefined, undefined]
    	 */
    	function noop() {
    	  // No operation performed.
    	}

    	/**
    	 * Creates a function that returns the value at `path` of a given object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 2.4.0
    	 * @category Util
    	 * @param {Array|string} path The path of the property to get.
    	 * @returns {Function} Returns the new accessor function.
    	 * @example
    	 *
    	 * var objects = [
    	 *   { 'a': { 'b': 2 } },
    	 *   { 'a': { 'b': 1 } }
    	 * ];
    	 *
    	 * _.map(objects, _.property('a.b'));
    	 * // => [2, 1]
    	 *
    	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    	 * // => [1, 2]
    	 */
    	function property(path) {
    	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    	}

    	module.exports = uniqBy;
    } (lodash_uniqby, lodash_uniqby.exports));

    var uniqBy = lodash_uniqby.exports;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Count how often a character (or substring) is used in a string.
     *
     * @param {string} value
     *   Value to search in.
     * @param {string} character
     *   Character (or substring) to look for.
     * @return {number}
     *   Number of times `character` occurred in `value`.
     */
    function ccount(value, character) {
      const source = String(value);

      if (typeof character !== 'string') {
        throw new TypeError('Expected character')
      }

      let count = 0;
      let index = source.indexOf(character);

      while (index !== -1) {
        count++;
        index = source.indexOf(character, index + character.length);
      }

      return count
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function escapeStringRegexp(string) {
    	if (typeof string !== 'string') {
    		throw new TypeError('Expected a string');
    	}

    	// Escape characters with special meaning either inside or outside character sets.
    	// Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
    	return string
    		.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
    		.replace(/-/g, '\\x2d');
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Nodes} Nodes
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').PhrasingContent} PhrasingContent
     * @typedef {import('mdast').Root} Root
     * @typedef {import('mdast').Text} Text
     * @typedef {import('unist-util-visit-parents').Test} Test
     * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
     */

    /**
     * Find patterns in a tree and replace them.
     *
     * The algorithm searches the tree in *preorder* for complete values in `Text`
     * nodes.
     * Partial matches are not supported.
     *
     * @param {Nodes} tree
     *   Tree to change.
     * @param {FindAndReplaceList | FindAndReplaceTuple} list
     *   Patterns to find.
     * @param {Options | null | undefined} [options]
     *   Configuration (when `find` is not `Find`).
     * @returns {undefined}
     *   Nothing.
     */
    function findAndReplace(tree, list, options) {
      const settings = options || {};
      const ignored = convert$2(settings.ignore || []);
      const pairs = toPairs(list);
      let pairIndex = -1;

      while (++pairIndex < pairs.length) {
        visitParents$3(tree, 'text', visitor);
      }

      /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */
      function visitor(node, parents) {
        let index = -1;
        /** @type {Parents | undefined} */
        let grandparent;

        while (++index < parents.length) {
          const parent = parents[index];
          /** @type {Array<Nodes> | undefined} */
          const siblings = grandparent ? grandparent.children : undefined;

          if (
            ignored(
              parent,
              siblings ? siblings.indexOf(parent) : undefined,
              grandparent
            )
          ) {
            return
          }

          grandparent = parent;
        }

        if (grandparent) {
          return handler(node, parents)
        }
      }

      /**
       * Handle a text node which is not in an ignored parent.
       *
       * @param {Text} node
       *   Text node.
       * @param {Array<Parents>} parents
       *   Parents.
       * @returns {VisitorResult}
       *   Result.
       */
      function handler(node, parents) {
        const parent = parents[parents.length - 1];
        const find = pairs[pairIndex][0];
        const replace = pairs[pairIndex][1];
        let start = 0;
        /** @type {Array<Nodes>} */
        const siblings = parent.children;
        const index = siblings.indexOf(node);
        let change = false;
        /** @type {Array<PhrasingContent>} */
        let nodes = [];

        find.lastIndex = 0;

        let match = find.exec(node.value);

        while (match) {
          const position = match.index;
          /** @type {RegExpMatchObject} */
          const matchObject = {
            index: match.index,
            input: match.input,
            stack: [...parents, node]
          };
          let value = replace(...match, matchObject);

          if (typeof value === 'string') {
            value = value.length > 0 ? {type: 'text', value} : undefined;
          }

          // It wasn’t a match after all.
          if (value === false) {
            // False acts as if there was no match.
            // So we need to reset `lastIndex`, which currently being at the end of
            // the current match, to the beginning.
            find.lastIndex = position + 1;
          } else {
            if (start !== position) {
              nodes.push({
                type: 'text',
                value: node.value.slice(start, position)
              });
            }

            if (Array.isArray(value)) {
              nodes.push(...value);
            } else if (value) {
              nodes.push(value);
            }

            start = position + match[0].length;
            change = true;
          }

          if (!find.global) {
            break
          }

          match = find.exec(node.value);
        }

        if (change) {
          if (start < node.value.length) {
            nodes.push({type: 'text', value: node.value.slice(start)});
          }

          parent.children.splice(index, 1, ...nodes);
        } else {
          nodes = [node];
        }

        return index + nodes.length
      }
    }

    /**
     * Turn a tuple or a list of tuples into pairs.
     *
     * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList
     *   Schema.
     * @returns {Pairs}
     *   Clean pairs.
     */
    function toPairs(tupleOrList) {
      /** @type {Pairs} */
      const result = [];

      if (!Array.isArray(tupleOrList)) {
        throw new TypeError('Expected find and replace tuple or list of tuples')
      }

      /** @type {FindAndReplaceList} */
      // @ts-expect-error: correct.
      const list =
        !tupleOrList[0] || Array.isArray(tupleOrList[0])
          ? tupleOrList
          : [tupleOrList];

      let index = -1;

      while (++index < list.length) {
        const tuple = list[index];
        result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
      }

      return result
    }

    /**
     * Turn a find into an expression.
     *
     * @param {Find} find
     *   Find.
     * @returns {RegExp}
     *   Expression.
     */
    function toExpression(find) {
      return typeof find === 'string' ? new RegExp(escapeStringRegexp(find), 'g') : find
    }

    /**
     * Turn a replace into a function.
     *
     * @param {Replace} replace
     *   Replace.
     * @returns {ReplaceFunction}
     *   Function.
     */
    function toFunction(replace) {
      return typeof replace === 'function'
        ? replace
        : function () {
            return replace
          }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Link} Link
     * @typedef {import('mdast').PhrasingContent} PhrasingContent
     *
     * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
     * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform
     *
     * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     *
     * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject
     * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction
     */

    /** @type {ConstructName} */
    const inConstruct = 'phrasing';
    /** @type {Array<ConstructName>} */
    const notInConstruct = ['autolink', 'link', 'image', 'label'];

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM autolink
     * literals in markdown.
     *
     * @returns {FromMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.
     */
    function gfmAutolinkLiteralFromMarkdown() {
      return {
        transforms: [transformGfmAutolinkLiterals],
        enter: {
          literalAutolink: enterLiteralAutolink,
          literalAutolinkEmail: enterLiteralAutolinkValue,
          literalAutolinkHttp: enterLiteralAutolinkValue,
          literalAutolinkWww: enterLiteralAutolinkValue
        },
        exit: {
          literalAutolink: exitLiteralAutolink,
          literalAutolinkEmail: exitLiteralAutolinkEmail,
          literalAutolinkHttp: exitLiteralAutolinkHttp,
          literalAutolinkWww: exitLiteralAutolinkWww
        }
      }
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM autolink
     * literals in markdown.
     *
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.
     */
    function gfmAutolinkLiteralToMarkdown() {
      return {
        unsafe: [
          {
            character: '@',
            before: '[+\\-.\\w]',
            after: '[\\-.\\w]',
            inConstruct,
            notInConstruct
          },
          {
            character: '.',
            before: '[Ww]',
            after: '[\\-.\\w]',
            inConstruct,
            notInConstruct
          },
          {
            character: ':',
            before: '[ps]',
            after: '\\/',
            inConstruct,
            notInConstruct
          }
        ]
      }
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterLiteralAutolink(token) {
      this.enter({type: 'link', title: null, url: '', children: []}, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterLiteralAutolinkValue(token) {
      this.config.enter.autolinkProtocol.call(this, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitLiteralAutolinkHttp(token) {
      this.config.exit.autolinkProtocol.call(this, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitLiteralAutolinkWww(token) {
      this.config.exit.data.call(this, token);
      const node = this.stack[this.stack.length - 1];
      ok$1(node.type === 'link');
      node.url = 'http://' + this.sliceSerialize(token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitLiteralAutolinkEmail(token) {
      this.config.exit.autolinkEmail.call(this, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitLiteralAutolink(token) {
      this.exit(token);
    }

    /** @type {FromMarkdownTransform} */
    function transformGfmAutolinkLiterals(tree) {
      findAndReplace(
        tree,
        [
          [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
          [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
        ],
        {ignore: ['link', 'linkReference']}
      );
    }

    /**
     * @type {ReplaceFunction}
     * @param {string} _
     * @param {string} protocol
     * @param {string} domain
     * @param {string} path
     * @param {RegExpMatchObject} match
     * @returns {Array<PhrasingContent> | Link | false}
     */
    // eslint-disable-next-line max-params
    function findUrl(_, protocol, domain, path, match) {
      let prefix = '';

      // Not an expected previous character.
      if (!previous$1(match)) {
        return false
      }

      // Treat `www` as part of the domain.
      if (/^w/i.test(protocol)) {
        domain = protocol + domain;
        protocol = '';
        prefix = 'http://';
      }

      if (!isCorrectDomain(domain)) {
        return false
      }

      const parts = splitUrl(domain + path);

      if (!parts[0]) return false

      /** @type {Link} */
      const result = {
        type: 'link',
        title: null,
        url: prefix + protocol + parts[0],
        children: [{type: 'text', value: protocol + parts[0]}]
      };

      if (parts[1]) {
        return [result, {type: 'text', value: parts[1]}]
      }

      return result
    }

    /**
     * @type {ReplaceFunction}
     * @param {string} _
     * @param {string} atext
     * @param {string} label
     * @param {RegExpMatchObject} match
     * @returns {Link | false}
     */
    function findEmail(_, atext, label, match) {
      if (
        // Not an expected previous character.
        !previous$1(match, true) ||
        // Label ends in not allowed character.
        /[-\d_]$/.test(label)
      ) {
        return false
      }

      return {
        type: 'link',
        title: null,
        url: 'mailto:' + atext + '@' + label,
        children: [{type: 'text', value: atext + '@' + label}]
      }
    }

    /**
     * @param {string} domain
     * @returns {boolean}
     */
    function isCorrectDomain(domain) {
      const parts = domain.split('.');

      if (
        parts.length < 2 ||
        (parts[parts.length - 1] &&
          (/_/.test(parts[parts.length - 1]) ||
            !/[a-zA-Z\d]/.test(parts[parts.length - 1]))) ||
        (parts[parts.length - 2] &&
          (/_/.test(parts[parts.length - 2]) ||
            !/[a-zA-Z\d]/.test(parts[parts.length - 2])))
      ) {
        return false
      }

      return true
    }

    /**
     * @param {string} url
     * @returns {[string, string | undefined]}
     */
    function splitUrl(url) {
      const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);

      if (!trailExec) {
        return [url, undefined]
      }

      url = url.slice(0, trailExec.index);

      let trail = trailExec[0];
      let closingParenIndex = trail.indexOf(')');
      const openingParens = ccount(url, '(');
      let closingParens = ccount(url, ')');

      while (closingParenIndex !== -1 && openingParens > closingParens) {
        url += trail.slice(0, closingParenIndex + 1);
        trail = trail.slice(closingParenIndex + 1);
        closingParenIndex = trail.indexOf(')');
        closingParens++;
      }

      return [url, trail]
    }

    /**
     * @param {RegExpMatchObject} match
     * @param {boolean | null | undefined} [email=false]
     * @returns {boolean}
     */
    function previous$1(match, email) {
      const code = match.input.charCodeAt(match.index - 1);

      return (
        (match.index === 0 ||
          unicodeWhitespace$2(code) ||
          unicodePunctuation$3(code)) &&
        (!email || code !== 47)
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition
     * @typedef {import('mdast').FootnoteReference} FootnoteReference
     * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
     * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
     * @typedef {import('mdast-util-to-markdown').Map} Map
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     */

    footnoteReference.peek = footnoteReferencePeek;

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes
     * in markdown.
     *
     * @returns {FromMarkdownExtension}
     *   Extension for `mdast-util-from-markdown`.
     */
    function gfmFootnoteFromMarkdown() {
      return {
        enter: {
          gfmFootnoteDefinition: enterFootnoteDefinition,
          gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
          gfmFootnoteCall: enterFootnoteCall,
          gfmFootnoteCallString: enterFootnoteCallString
        },
        exit: {
          gfmFootnoteDefinition: exitFootnoteDefinition,
          gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
          gfmFootnoteCall: exitFootnoteCall,
          gfmFootnoteCallString: exitFootnoteCallString
        }
      }
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes
     * in markdown.
     *
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown`.
     */
    function gfmFootnoteToMarkdown() {
      return {
        // This is on by default already.
        unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],
        handlers: {footnoteDefinition, footnoteReference}
      }
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterFootnoteDefinition(token) {
      this.enter(
        {type: 'footnoteDefinition', identifier: '', label: '', children: []},
        token
      );
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterFootnoteDefinitionLabelString() {
      this.buffer();
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitFootnoteDefinitionLabelString(token) {
      const label = this.resume();
      const node = this.stack[this.stack.length - 1];
      ok$1(node.type === 'footnoteDefinition');
      node.label = label;
      node.identifier = normalizeIdentifier$4(
        this.sliceSerialize(token)
      ).toLowerCase();
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitFootnoteDefinition(token) {
      this.exit(token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterFootnoteCall(token) {
      this.enter({type: 'footnoteReference', identifier: '', label: ''}, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterFootnoteCallString() {
      this.buffer();
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitFootnoteCallString(token) {
      const label = this.resume();
      const node = this.stack[this.stack.length - 1];
      ok$1(node.type === 'footnoteReference');
      node.label = label;
      node.identifier = normalizeIdentifier$4(
        this.sliceSerialize(token)
      ).toLowerCase();
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitFootnoteCall(token) {
      this.exit(token);
    }

    /**
     * @type {ToMarkdownHandle}
     * @param {FootnoteReference} node
     */
    function footnoteReference(node, _, state, info) {
      const tracker = state.createTracker(info);
      let value = tracker.move('[^');
      const exit = state.enter('footnoteReference');
      const subexit = state.enter('reference');
      value += tracker.move(
        state.safe(state.associationId(node), {
          ...tracker.current(),
          before: value,
          after: ']'
        })
      );
      subexit();
      exit();
      value += tracker.move(']');
      return value
    }

    /** @type {ToMarkdownHandle} */
    function footnoteReferencePeek() {
      return '['
    }

    /**
     * @type {ToMarkdownHandle}
     * @param {FootnoteDefinition} node
     */
    function footnoteDefinition(node, _, state, info) {
      const tracker = state.createTracker(info);
      let value = tracker.move('[^');
      const exit = state.enter('footnoteDefinition');
      const subexit = state.enter('label');
      value += tracker.move(
        state.safe(state.associationId(node), {
          ...tracker.current(),
          before: value,
          after: ']'
        })
      );
      subexit();
      value += tracker.move(
        ']:' + (node.children && node.children.length > 0 ? ' ' : '')
      );
      tracker.shift(4);
      value += tracker.move(
        state.indentLines(state.containerFlow(node, tracker.current()), map$4)
      );
      exit();

      return value
    }

    /** @type {Map} */
    function map$4(line, index, blank) {
      if (index === 0) {
        return line
      }

      return (blank ? '' : '    ') + line
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Delete} Delete
     *
     * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
     *
     * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
     * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     */

    /**
     * List of constructs that occur in phrasing (paragraphs, headings), but cannot
     * contain strikethrough.
     * So they sort of cancel each other out.
     * Note: could use a better name.
     *
     * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
     *
     * @type {Array<ConstructName>}
     */
    const constructsWithoutStrikethrough = [
      'autolink',
      'destinationLiteral',
      'destinationRaw',
      'reference',
      'titleQuote',
      'titleApostrophe'
    ];

    handleDelete.peek = peekDelete;

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM
     * strikethrough in markdown.
     *
     * @returns {FromMarkdownExtension}
     *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.
     */
    function gfmStrikethroughFromMarkdown() {
      return {
        canContainEols: ['delete'],
        enter: {strikethrough: enterStrikethrough},
        exit: {strikethrough: exitStrikethrough}
      }
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM
     * strikethrough in markdown.
     *
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.
     */
    function gfmStrikethroughToMarkdown() {
      return {
        unsafe: [
          {
            character: '~',
            inConstruct: 'phrasing',
            notInConstruct: constructsWithoutStrikethrough
          }
        ],
        handlers: {delete: handleDelete}
      }
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterStrikethrough(token) {
      this.enter({type: 'delete', children: []}, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitStrikethrough(token) {
      this.exit(token);
    }

    /**
     * @type {ToMarkdownHandle}
     * @param {Delete} node
     */
    function handleDelete(node, _, state, info) {
      const tracker = state.createTracker(info);
      const exit = state.enter('strikethrough');
      let value = tracker.move('~~');
      value += state.containerPhrasing(node, {
        ...tracker.current(),
        before: value,
        after: '~'
      });
      value += tracker.move('~~');
      exit();
      return value
    }

    /** @type {ToMarkdownHandle} */
    function peekDelete() {
      return '~'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef Options
     *   Configuration (optional).
     * @property {string|null|Array<string|null|undefined>} [align]
     *   One style for all columns, or styles for their respective columns.
     *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).
     *   Other values are treated as `''`, which doesn’t place the colon in the
     *   alignment row but does align left.
     *   *Only the lowercased first character is used, so `Right` is fine.*
     * @property {boolean} [padding=true]
     *   Whether to add a space of padding between delimiters and cells.
     *
     *   When `true`, there is padding:
     *
     *   ```markdown
     *   | Alpha | B     |
     *   | ----- | ----- |
     *   | C     | Delta |
     *   ```
     *
     *   When `false`, there is no padding:
     *
     *   ```markdown
     *   |Alpha|B    |
     *   |-----|-----|
     *   |C    |Delta|
     *   ```
     * @property {boolean} [delimiterStart=true]
     *   Whether to begin each row with the delimiter.
     *
     *   > 👉 **Note**: please don’t use this: it could create fragile structures
     *   > that aren’t understandable to some markdown parsers.
     *
     *   When `true`, there are starting delimiters:
     *
     *   ```markdown
     *   | Alpha | B     |
     *   | ----- | ----- |
     *   | C     | Delta |
     *   ```
     *
     *   When `false`, there are no starting delimiters:
     *
     *   ```markdown
     *   Alpha | B     |
     *   ----- | ----- |
     *   C     | Delta |
     *   ```
     * @property {boolean} [delimiterEnd=true]
     *   Whether to end each row with the delimiter.
     *
     *   > 👉 **Note**: please don’t use this: it could create fragile structures
     *   > that aren’t understandable to some markdown parsers.
     *
     *   When `true`, there are ending delimiters:
     *
     *   ```markdown
     *   | Alpha | B     |
     *   | ----- | ----- |
     *   | C     | Delta |
     *   ```
     *
     *   When `false`, there are no ending delimiters:
     *
     *   ```markdown
     *   | Alpha | B
     *   | ----- | -----
     *   | C     | Delta
     *   ```
     * @property {boolean} [alignDelimiters=true]
     *   Whether to align the delimiters.
     *   By default, they are aligned:
     *
     *   ```markdown
     *   | Alpha | B     |
     *   | ----- | ----- |
     *   | C     | Delta |
     *   ```
     *
     *   Pass `false` to make them staggered:
     *
     *   ```markdown
     *   | Alpha | B |
     *   | - | - |
     *   | C | Delta |
     *   ```
     * @property {(value: string) => number} [stringLength]
     *   Function to detect the length of table cell content.
     *   This is used when aligning the delimiters (`|`) between table cells.
     *   Full-width characters and emoji mess up delimiter alignment when viewing
     *   the markdown source.
     *   To fix this, you can pass this function, which receives the cell content
     *   and returns its “visible” size.
     *   Note that what is and isn’t visible depends on where the text is displayed.
     *
     *   Without such a function, the following:
     *
     *   ```js
     *   markdownTable([
     *     ['Alpha', 'Bravo'],
     *     ['中文', 'Charlie'],
     *     ['👩‍❤️‍👩', 'Delta']
     *   ])
     *   ```
     *
     *   Yields:
     *
     *   ```markdown
     *   | Alpha | Bravo |
     *   | - | - |
     *   | 中文 | Charlie |
     *   | 👩‍❤️‍👩 | Delta |
     *   ```
     *
     *   With [`string-width`](https://github.com/sindresorhus/string-width):
     *
     *   ```js
     *   import stringWidth from 'string-width'
     *
     *   markdownTable(
     *     [
     *       ['Alpha', 'Bravo'],
     *       ['中文', 'Charlie'],
     *       ['👩‍❤️‍👩', 'Delta']
     *     ],
     *     {stringLength: stringWidth}
     *   )
     *   ```
     *
     *   Yields:
     *
     *   ```markdown
     *   | Alpha | Bravo   |
     *   | ----- | ------- |
     *   | 中文  | Charlie |
     *   | 👩‍❤️‍👩    | Delta   |
     *   ```
     */

    /**
     * @typedef {Options} MarkdownTableOptions
     * @todo
     *   Remove next major.
     */

    /**
     * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..
     *
     * @param {Array<Array<string|null|undefined>>} table
     *   Table data (matrix of strings).
     * @param {Options} [options]
     *   Configuration (optional).
     * @returns {string}
     */
    function markdownTable(table, options = {}) {
      const align = (options.align || []).concat();
      const stringLength = options.stringLength || defaultStringLength;
      /** @type {Array<number>} Character codes as symbols for alignment per column. */
      const alignments = [];
      /** @type {Array<Array<string>>} Cells per row. */
      const cellMatrix = [];
      /** @type {Array<Array<number>>} Sizes of each cell per row. */
      const sizeMatrix = [];
      /** @type {Array<number>} */
      const longestCellByColumn = [];
      let mostCellsPerRow = 0;
      let rowIndex = -1;

      // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
      // do superfluous work when aligning, so optimize for aligning.
      while (++rowIndex < table.length) {
        /** @type {Array<string>} */
        const row = [];
        /** @type {Array<number>} */
        const sizes = [];
        let columnIndex = -1;

        if (table[rowIndex].length > mostCellsPerRow) {
          mostCellsPerRow = table[rowIndex].length;
        }

        while (++columnIndex < table[rowIndex].length) {
          const cell = serialize(table[rowIndex][columnIndex]);

          if (options.alignDelimiters !== false) {
            const size = stringLength(cell);
            sizes[columnIndex] = size;

            if (
              longestCellByColumn[columnIndex] === undefined ||
              size > longestCellByColumn[columnIndex]
            ) {
              longestCellByColumn[columnIndex] = size;
            }
          }

          row.push(cell);
        }

        cellMatrix[rowIndex] = row;
        sizeMatrix[rowIndex] = sizes;
      }

      // Figure out which alignments to use.
      let columnIndex = -1;

      if (typeof align === 'object' && 'length' in align) {
        while (++columnIndex < mostCellsPerRow) {
          alignments[columnIndex] = toAlignment(align[columnIndex]);
        }
      } else {
        const code = toAlignment(align);

        while (++columnIndex < mostCellsPerRow) {
          alignments[columnIndex] = code;
        }
      }

      // Inject the alignment row.
      columnIndex = -1;
      /** @type {Array<string>} */
      const row = [];
      /** @type {Array<number>} */
      const sizes = [];

      while (++columnIndex < mostCellsPerRow) {
        const code = alignments[columnIndex];
        let before = '';
        let after = '';

        if (code === 99 /* `c` */) {
          before = ':';
          after = ':';
        } else if (code === 108 /* `l` */) {
          before = ':';
        } else if (code === 114 /* `r` */) {
          after = ':';
        }

        // There *must* be at least one hyphen-minus in each alignment cell.
        let size =
          options.alignDelimiters === false
            ? 1
            : Math.max(
                1,
                longestCellByColumn[columnIndex] - before.length - after.length
              );

        const cell = before + '-'.repeat(size) + after;

        if (options.alignDelimiters !== false) {
          size = before.length + size + after.length;

          if (size > longestCellByColumn[columnIndex]) {
            longestCellByColumn[columnIndex] = size;
          }

          sizes[columnIndex] = size;
        }

        row[columnIndex] = cell;
      }

      // Inject the alignment row.
      cellMatrix.splice(1, 0, row);
      sizeMatrix.splice(1, 0, sizes);

      rowIndex = -1;
      /** @type {Array<string>} */
      const lines = [];

      while (++rowIndex < cellMatrix.length) {
        const row = cellMatrix[rowIndex];
        const sizes = sizeMatrix[rowIndex];
        columnIndex = -1;
        /** @type {Array<string>} */
        const line = [];

        while (++columnIndex < mostCellsPerRow) {
          const cell = row[columnIndex] || '';
          let before = '';
          let after = '';

          if (options.alignDelimiters !== false) {
            const size =
              longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
            const code = alignments[columnIndex];

            if (code === 114 /* `r` */) {
              before = ' '.repeat(size);
            } else if (code === 99 /* `c` */) {
              if (size % 2) {
                before = ' '.repeat(size / 2 + 0.5);
                after = ' '.repeat(size / 2 - 0.5);
              } else {
                before = ' '.repeat(size / 2);
                after = before;
              }
            } else {
              after = ' '.repeat(size);
            }
          }

          if (options.delimiterStart !== false && !columnIndex) {
            line.push('|');
          }

          if (
            options.padding !== false &&
            // Don’t add the opening space if we’re not aligning and the cell is
            // empty: there will be a closing space.
            !(options.alignDelimiters === false && cell === '') &&
            (options.delimiterStart !== false || columnIndex)
          ) {
            line.push(' ');
          }

          if (options.alignDelimiters !== false) {
            line.push(before);
          }

          line.push(cell);

          if (options.alignDelimiters !== false) {
            line.push(after);
          }

          if (options.padding !== false) {
            line.push(' ');
          }

          if (
            options.delimiterEnd !== false ||
            columnIndex !== mostCellsPerRow - 1
          ) {
            line.push('|');
          }
        }

        lines.push(
          options.delimiterEnd === false
            ? line.join('').replace(/ +$/, '')
            : line.join('')
        );
      }

      return lines.join('\n')
    }

    /**
     * @param {string|null|undefined} [value]
     * @returns {string}
     */
    function serialize(value) {
      return value === null || value === undefined ? '' : String(value)
    }

    /**
     * @param {string} value
     * @returns {number}
     */
    function defaultStringLength(value) {
      return value.length
    }

    /**
     * @param {string|null|undefined} value
     * @returns {number}
     */
    function toAlignment(value) {
      const code = typeof value === 'string' ? value.codePointAt(0) : 0;

      return code === 67 /* `C` */ || code === 99 /* `c` */
        ? 99 /* `c` */
        : code === 76 /* `L` */ || code === 108 /* `l` */
        ? 108 /* `l` */
        : code === 82 /* `R` */ || code === 114 /* `r` */
        ? 114 /* `r` */
        : 0
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Blockquote} Blockquote
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').Map} Map
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Blockquote} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function blockquote(node, _, state, info) {
      const exit = state.enter('blockquote');
      const tracker = state.createTracker(info);
      tracker.move('> ');
      tracker.shift(2);
      const value = state.indentLines(
        state.containerFlow(node, tracker.current()),
        map$3
      );
      exit();
      return value
    }

    /** @type {Map} */
    function map$3(line, _, blank) {
      return '>' + (blank ? '' : ' ') + line
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').ConstructName} ConstructName
     * @typedef {import('../types.js').Unsafe} Unsafe
     */

    /**
     * @param {Array<ConstructName>} stack
     * @param {Unsafe} pattern
     * @returns {boolean}
     */
    function patternInScope(stack, pattern) {
      return (
        listInScope(stack, pattern.inConstruct, true) &&
        !listInScope(stack, pattern.notInConstruct, false)
      )
    }

    /**
     * @param {Array<ConstructName>} stack
     * @param {Unsafe['inConstruct']} list
     * @param {boolean} none
     * @returns {boolean}
     */
    function listInScope(stack, list, none) {
      if (typeof list === 'string') {
        list = [list];
      }

      if (!list || list.length === 0) {
        return none
      }

      let index = -1;

      while (++index < list.length) {
        if (stack.includes(list[index])) {
          return true
        }
      }

      return false
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Break} Break
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Break} _
     * @param {Parents | undefined} _1
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function hardBreak(_, _1, state, info) {
      let index = -1;

      while (++index < state.unsafe.length) {
        // If we can’t put eols in this construct (setext headings, tables), use a
        // space instead.
        if (
          state.unsafe[index].character === '\n' &&
          patternInScope(state.stack, state.unsafe[index])
        ) {
          return /[ \t]/.test(info.before) ? '' : ' '
        }
      }

      return '\\\n'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Get the count of the longest repeating streak of `character` in `value`.
     *
     * @param {string} value
     *   Content to search in.
     * @param {string} character
     *   Single character to look for.
     * @returns {number}
     *   Count of most frequent adjacent `character`s in `value`.
     */
    function longestStreak(value, character) {
      const source = String(value);
      let index = source.indexOf(character);
      let expected = index;
      let count = 0;
      let max = 0;

      if (typeof character !== 'string' || character.length !== 1) {
        throw new Error('Expected character')
      }

      while (index !== -1) {
        if (index === expected) {
          if (++count > max) {
            max = count;
          }
        } else {
          count = 1;
        }

        expected = index + 1;
        index = source.indexOf(character, expected);
      }

      return max
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Code} Code
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Code} node
     * @param {State} state
     * @returns {boolean}
     */
    function formatCodeAsIndented(node, state) {
      return Boolean(
        state.options.fences === false &&
          node.value &&
          // If there’s no info…
          !node.lang &&
          // And there’s a non-whitespace character…
          /[^ \r\n]/.test(node.value) &&
          // And the value doesn’t start or end in a blank…
          !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['fence'], null | undefined>}
     */
    function checkFence(state) {
      const marker = state.options.fence || '`';

      if (marker !== '`' && marker !== '~') {
        throw new Error(
          'Cannot serialize code with `' +
            marker +
            '` for `options.fence`, expected `` ` `` or `~`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Code} Code
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').Map} Map
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Code} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function code$1(node, _, state, info) {
      const marker = checkFence(state);
      const raw = node.value || '';
      const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';

      if (formatCodeAsIndented(node, state)) {
        const exit = state.enter('codeIndented');
        const value = state.indentLines(raw, map$2);
        exit();
        return value
      }

      const tracker = state.createTracker(info);
      const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
      const exit = state.enter('codeFenced');
      let value = tracker.move(sequence);

      if (node.lang) {
        const subexit = state.enter(`codeFencedLang${suffix}`);
        value += tracker.move(
          state.safe(node.lang, {
            before: value,
            after: ' ',
            encode: ['`'],
            ...tracker.current()
          })
        );
        subexit();
      }

      if (node.lang && node.meta) {
        const subexit = state.enter(`codeFencedMeta${suffix}`);
        value += tracker.move(' ');
        value += tracker.move(
          state.safe(node.meta, {
            before: value,
            after: '\n',
            encode: ['`'],
            ...tracker.current()
          })
        );
        subexit();
      }

      value += tracker.move('\n');

      if (raw) {
        value += tracker.move(raw + '\n');
      }

      value += tracker.move(sequence);
      exit();
      return value
    }

    /** @type {Map} */
    function map$2(line, _, blank) {
      return (blank ? '' : '    ') + line
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['quote'], null | undefined>}
     */
    function checkQuote(state) {
      const marker = state.options.quote || '"';

      if (marker !== '"' && marker !== "'") {
        throw new Error(
          'Cannot serialize title with `' +
            marker +
            '` for `options.quote`, expected `"`, or `\'`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Definition} Definition
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Definition} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function definition$2(node, _, state, info) {
      const quote = checkQuote(state);
      const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
      const exit = state.enter('definition');
      let subexit = state.enter('label');
      const tracker = state.createTracker(info);
      let value = tracker.move('[');
      value += tracker.move(
        state.safe(state.associationId(node), {
          before: value,
          after: ']',
          ...tracker.current()
        })
      );
      value += tracker.move(']: ');

      subexit();

      if (
        // If there’s no url, or…
        !node.url ||
        // If there are control characters or whitespace.
        /[\0- \u007F]/.test(node.url)
      ) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(
          state.safe(node.url, {before: value, after: '>', ...tracker.current()})
        );
        value += tracker.move('>');
      } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(
          state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : '\n',
            ...tracker.current()
          })
        );
      }

      subexit();

      if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(
          state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
          })
        );
        value += tracker.move(quote);
        subexit();
      }

      exit();

      return value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['emphasis'], null | undefined>}
     */
    function checkEmphasis(state) {
      const marker = state.options.emphasis || '*';

      if (marker !== '*' && marker !== '_') {
        throw new Error(
          'Cannot serialize emphasis with `' +
            marker +
            '` for `options.emphasis`, expected `*`, or `_`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Emphasis} Emphasis
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    emphasis.peek = emphasisPeek;

    // To do: there are cases where emphasis cannot “form” depending on the
    // previous or next character of sequences.
    // There’s no way around that though, except for injecting zero-width stuff.
    // Do we need to safeguard against that?
    /**
     * @param {Emphasis} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function emphasis(node, _, state, info) {
      const marker = checkEmphasis(state);
      const exit = state.enter('emphasis');
      const tracker = state.createTracker(info);
      let value = tracker.move(marker);
      value += tracker.move(
        state.containerPhrasing(node, {
          before: value,
          after: marker,
          ...tracker.current()
        })
      );
      value += tracker.move(marker);
      exit();
      return value
    }

    /**
     * @param {Emphasis} _
     * @param {Parents | undefined} _1
     * @param {State} state
     * @returns {string}
     */
    function emphasisPeek(_, _1, state) {
      return state.options.emphasis || '*'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Heading} Heading
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Heading} node
     * @param {State} state
     * @returns {boolean}
     */
    function formatHeadingAsSetext(node, state) {
      let literalWithBreak = false;

      // Look for literals with a line break.
      // Note that this also
      visit$5(node, function (node) {
        if (
          ('value' in node && /\r?\n|\r/.test(node.value)) ||
          node.type === 'break'
        ) {
          literalWithBreak = true;
          return EXIT$2
        }
      });

      return Boolean(
        (!node.depth || node.depth < 3) &&
          toString$5(node) &&
          (state.options.setext || literalWithBreak)
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Heading} Heading
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Heading} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function heading(node, _, state, info) {
      const rank = Math.max(Math.min(6, node.depth || 1), 1);
      const tracker = state.createTracker(info);

      if (formatHeadingAsSetext(node, state)) {
        const exit = state.enter('headingSetext');
        const subexit = state.enter('phrasing');
        const value = state.containerPhrasing(node, {
          ...tracker.current(),
          before: '\n',
          after: '\n'
        });
        subexit();
        exit();

        return (
          value +
          '\n' +
          (rank === 1 ? '=' : '-').repeat(
            // The whole size…
            value.length -
              // Minus the position of the character after the last EOL (or
              // 0 if there is none)…
              (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1)
          )
        )
      }

      const sequence = '#'.repeat(rank);
      const exit = state.enter('headingAtx');
      const subexit = state.enter('phrasing');

      // Note: for proper tracking, we should reset the output positions when there
      // is no content returned, because then the space is not output.
      // Practically, in that case, there is no content, so it doesn’t matter that
      // we’ve tracked one too many characters.
      tracker.move(sequence + ' ');

      let value = state.containerPhrasing(node, {
        before: '# ',
        after: '\n',
        ...tracker.current()
      });

      if (/^[\t ]/.test(value)) {
        // To do: what effect has the character reference on tracking?
        value =
          '&#x' +
          value.charCodeAt(0).toString(16).toUpperCase() +
          ';' +
          value.slice(1);
      }

      value = value ? sequence + ' ' + value : sequence;

      if (state.options.closeAtx) {
        value += ' ' + sequence;
      }

      subexit();
      exit();

      return value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Html} Html
     */

    html.peek = htmlPeek;

    /**
     * @param {Html} node
     * @returns {string}
     */
    function html(node) {
      return node.value || ''
    }

    /**
     * @returns {string}
     */
    function htmlPeek() {
      return '<'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Image} Image
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    image$1.peek = imagePeek;

    /**
     * @param {Image} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function image$1(node, _, state, info) {
      const quote = checkQuote(state);
      const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
      const exit = state.enter('image');
      let subexit = state.enter('label');
      const tracker = state.createTracker(info);
      let value = tracker.move('![');
      value += tracker.move(
        state.safe(node.alt, {before: value, after: ']', ...tracker.current()})
      );
      value += tracker.move('](');

      subexit();

      if (
        // If there’s no url but there is a title…
        (!node.url && node.title) ||
        // If there are control characters or whitespace.
        /[\0- \u007F]/.test(node.url)
      ) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(
          state.safe(node.url, {before: value, after: '>', ...tracker.current()})
        );
        value += tracker.move('>');
      } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(
          state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : ')',
            ...tracker.current()
          })
        );
      }

      subexit();

      if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(
          state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
          })
        );
        value += tracker.move(quote);
        subexit();
      }

      value += tracker.move(')');
      exit();

      return value
    }

    /**
     * @returns {string}
     */
    function imagePeek() {
      return '!'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').ImageReference} ImageReference
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    imageReference.peek = imageReferencePeek;

    /**
     * @param {ImageReference} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function imageReference(node, _, state, info) {
      const type = node.referenceType;
      const exit = state.enter('imageReference');
      let subexit = state.enter('label');
      const tracker = state.createTracker(info);
      let value = tracker.move('![');
      const alt = state.safe(node.alt, {
        before: value,
        after: ']',
        ...tracker.current()
      });
      value += tracker.move(alt + '][');

      subexit();
      // Hide the fact that we’re in phrasing, because escapes don’t work.
      const stack = state.stack;
      state.stack = [];
      subexit = state.enter('reference');
      // Note: for proper tracking, we should reset the output positions when we end
      // up making a `shortcut` reference, because then there is no brace output.
      // Practically, in that case, there is no content, so it doesn’t matter that
      // we’ve tracked one too many characters.
      const reference = state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
      });
      subexit();
      state.stack = stack;
      exit();

      if (type === 'full' || !alt || alt !== reference) {
        value += tracker.move(reference + ']');
      } else if (type === 'shortcut') {
        // Remove the unwanted `[`.
        value = value.slice(0, -1);
      } else {
        value += tracker.move(']');
      }

      return value
    }

    /**
     * @returns {string}
     */
    function imageReferencePeek() {
      return '!'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').InlineCode} InlineCode
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').State} State
     */

    inlineCode.peek = inlineCodePeek;

    /**
     * @param {InlineCode} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @returns {string}
     */
    function inlineCode(node, _, state) {
      let value = node.value || '';
      let sequence = '`';
      let index = -1;

      // If there is a single grave accent on its own in the code, use a fence of
      // two.
      // If there are two in a row, use one.
      while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
        sequence += '`';
      }

      // If this is not just spaces or eols (tabs don’t count), and either the
      // first or last character are a space, eol, or tick, then pad with spaces.
      if (
        /[^ \r\n]/.test(value) &&
        ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) || /^`|`$/.test(value))
      ) {
        value = ' ' + value + ' ';
      }

      // We have a potential problem: certain characters after eols could result in
      // blocks being seen.
      // For example, if someone injected the string `'\n# b'`, then that would
      // result in an ATX heading.
      // We can’t escape characters in `inlineCode`, but because eols are
      // transformed to spaces when going from markdown to HTML anyway, we can swap
      // them out.
      while (++index < state.unsafe.length) {
        const pattern = state.unsafe[index];
        const expression = state.compilePattern(pattern);
        /** @type {RegExpExecArray | null} */
        let match;

        // Only look for `atBreak`s.
        // Btw: note that `atBreak` patterns will always start the regex at LF or
        // CR.
        if (!pattern.atBreak) continue

        while ((match = expression.exec(value))) {
          let position = match.index;

          // Support CRLF (patterns only look for one of the characters).
          if (
            value.charCodeAt(position) === 10 /* `\n` */ &&
            value.charCodeAt(position - 1) === 13 /* `\r` */
          ) {
            position--;
          }

          value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
        }
      }

      return sequence + value + sequence
    }

    /**
     * @returns {string}
     */
    function inlineCodePeek() {
      return '`'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Link} Link
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Link} node
     * @param {State} state
     * @returns {boolean}
     */
    function formatLinkAsAutolink(node, state) {
      const raw = toString$5(node);

      return Boolean(
        !state.options.resourceLink &&
          // If there’s a url…
          node.url &&
          // And there’s a no title…
          !node.title &&
          // And the content of `node` is a single text node…
          node.children &&
          node.children.length === 1 &&
          node.children[0].type === 'text' &&
          // And if the url is the same as the content…
          (raw === node.url || 'mailto:' + raw === node.url) &&
          // And that starts w/ a protocol…
          /^[a-z][a-z+.-]+:/i.test(node.url) &&
          // And that doesn’t contain ASCII control codes (character escapes and
          // references don’t work), space, or angle brackets…
          !/[\0- <>\u007F]/.test(node.url)
      )
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Link} Link
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Exit} Exit
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    link.peek = linkPeek;

    /**
     * @param {Link} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function link(node, _, state, info) {
      const quote = checkQuote(state);
      const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
      const tracker = state.createTracker(info);
      /** @type {Exit} */
      let exit;
      /** @type {Exit} */
      let subexit;

      if (formatLinkAsAutolink(node, state)) {
        // Hide the fact that we’re in phrasing, because escapes don’t work.
        const stack = state.stack;
        state.stack = [];
        exit = state.enter('autolink');
        let value = tracker.move('<');
        value += tracker.move(
          state.containerPhrasing(node, {
            before: value,
            after: '>',
            ...tracker.current()
          })
        );
        value += tracker.move('>');
        exit();
        state.stack = stack;
        return value
      }

      exit = state.enter('link');
      subexit = state.enter('label');
      let value = tracker.move('[');
      value += tracker.move(
        state.containerPhrasing(node, {
          before: value,
          after: '](',
          ...tracker.current()
        })
      );
      value += tracker.move('](');
      subexit();

      if (
        // If there’s no url but there is a title…
        (!node.url && node.title) ||
        // If there are control characters or whitespace.
        /[\0- \u007F]/.test(node.url)
      ) {
        subexit = state.enter('destinationLiteral');
        value += tracker.move('<');
        value += tracker.move(
          state.safe(node.url, {before: value, after: '>', ...tracker.current()})
        );
        value += tracker.move('>');
      } else {
        // No whitespace, raw is prettier.
        subexit = state.enter('destinationRaw');
        value += tracker.move(
          state.safe(node.url, {
            before: value,
            after: node.title ? ' ' : ')',
            ...tracker.current()
          })
        );
      }

      subexit();

      if (node.title) {
        subexit = state.enter(`title${suffix}`);
        value += tracker.move(' ' + quote);
        value += tracker.move(
          state.safe(node.title, {
            before: value,
            after: quote,
            ...tracker.current()
          })
        );
        value += tracker.move(quote);
        subexit();
      }

      value += tracker.move(')');

      exit();
      return value
    }

    /**
     * @param {Link} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @returns {string}
     */
    function linkPeek(node, _, state) {
      return formatLinkAsAutolink(node, state) ? '<' : '['
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').LinkReference} LinkReference
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    linkReference.peek = linkReferencePeek;

    /**
     * @param {LinkReference} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function linkReference(node, _, state, info) {
      const type = node.referenceType;
      const exit = state.enter('linkReference');
      let subexit = state.enter('label');
      const tracker = state.createTracker(info);
      let value = tracker.move('[');
      const text = state.containerPhrasing(node, {
        before: value,
        after: ']',
        ...tracker.current()
      });
      value += tracker.move(text + '][');

      subexit();
      // Hide the fact that we’re in phrasing, because escapes don’t work.
      const stack = state.stack;
      state.stack = [];
      subexit = state.enter('reference');
      // Note: for proper tracking, we should reset the output positions when we end
      // up making a `shortcut` reference, because then there is no brace output.
      // Practically, in that case, there is no content, so it doesn’t matter that
      // we’ve tracked one too many characters.
      const reference = state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
      });
      subexit();
      state.stack = stack;
      exit();

      if (type === 'full' || !text || text !== reference) {
        value += tracker.move(reference + ']');
      } else if (type === 'shortcut') {
        // Remove the unwanted `[`.
        value = value.slice(0, -1);
      } else {
        value += tracker.move(']');
      }

      return value
    }

    /**
     * @returns {string}
     */
    function linkReferencePeek() {
      return '['
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['bullet'], null | undefined>}
     */
    function checkBullet(state) {
      const marker = state.options.bullet || '*';

      if (marker !== '*' && marker !== '+' && marker !== '-') {
        throw new Error(
          'Cannot serialize items with `' +
            marker +
            '` for `options.bullet`, expected `*`, `+`, or `-`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['bullet'], null | undefined>}
     */
    function checkBulletOther(state) {
      const bullet = checkBullet(state);
      const bulletOther = state.options.bulletOther;

      if (!bulletOther) {
        return bullet === '*' ? '-' : '*'
      }

      if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
        throw new Error(
          'Cannot serialize items with `' +
            bulletOther +
            '` for `options.bulletOther`, expected `*`, `+`, or `-`'
        )
      }

      if (bulletOther === bullet) {
        throw new Error(
          'Expected `bullet` (`' +
            bullet +
            '`) and `bulletOther` (`' +
            bulletOther +
            '`) to be different'
        )
      }

      return bulletOther
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
     */
    function checkBulletOrdered(state) {
      const marker = state.options.bulletOrdered || '.';

      if (marker !== '.' && marker !== ')') {
        throw new Error(
          'Cannot serialize items with `' +
            marker +
            '` for `options.bulletOrdered`, expected `.` or `)`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['rule'], null | undefined>}
     */
    function checkRule(state) {
      const marker = state.options.rule || '*';

      if (marker !== '*' && marker !== '-' && marker !== '_') {
        throw new Error(
          'Cannot serialize rules with `' +
            marker +
            '` for `options.rule`, expected `*`, `-`, or `_`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').List} List
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {List} node
     * @param {Parents | undefined} parent
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function list$2(node, parent, state, info) {
      const exit = state.enter('list');
      const bulletCurrent = state.bulletCurrent;
      /** @type {string} */
      let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);
      /** @type {string} */
      const bulletOther = node.ordered
        ? bullet === '.'
          ? ')'
          : '.'
        : checkBulletOther(state);
      let useDifferentMarker =
        parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;

      if (!node.ordered) {
        const firstListItem = node.children ? node.children[0] : undefined;

        // If there’s an empty first list item directly in two list items,
        // we have to use a different bullet:
        //
        // ```markdown
        // * - *
        // ```
        //
        // …because otherwise it would become one big thematic break.
        if (
          // Bullet could be used as a thematic break marker:
          (bullet === '*' || bullet === '-') &&
          // Empty first list item:
          firstListItem &&
          (!firstListItem.children || !firstListItem.children[0]) &&
          // Directly in two other list items:
          state.stack[state.stack.length - 1] === 'list' &&
          state.stack[state.stack.length - 2] === 'listItem' &&
          state.stack[state.stack.length - 3] === 'list' &&
          state.stack[state.stack.length - 4] === 'listItem' &&
          // That are each the first child.
          state.indexStack[state.indexStack.length - 1] === 0 &&
          state.indexStack[state.indexStack.length - 2] === 0 &&
          state.indexStack[state.indexStack.length - 3] === 0
        ) {
          useDifferentMarker = true;
        }

        // If there’s a thematic break at the start of the first list item,
        // we have to use a different bullet:
        //
        // ```markdown
        // * ---
        // ```
        //
        // …because otherwise it would become one big thematic break.
        if (checkRule(state) === bullet && firstListItem) {
          let index = -1;

          while (++index < node.children.length) {
            const item = node.children[index];

            if (
              item &&
              item.type === 'listItem' &&
              item.children &&
              item.children[0] &&
              item.children[0].type === 'thematicBreak'
            ) {
              useDifferentMarker = true;
              break
            }
          }
        }
      }

      if (useDifferentMarker) {
        bullet = bulletOther;
      }

      state.bulletCurrent = bullet;
      const value = state.containerFlow(node, info);
      state.bulletLastUsed = bullet;
      state.bulletCurrent = bulletCurrent;
      exit();
      return value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['listItemIndent'], null | undefined>}
     */
    function checkListItemIndent(state) {
      const style = state.options.listItemIndent || 'one';

      if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
        throw new Error(
          'Cannot serialize items with `' +
            style +
            '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
        )
      }

      return style
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').ListItem} ListItem
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').Map} Map
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {ListItem} node
     * @param {Parents | undefined} parent
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function listItem(node, parent, state, info) {
      const listItemIndent = checkListItemIndent(state);
      let bullet = state.bulletCurrent || checkBullet(state);

      // Add the marker value for ordered lists.
      if (parent && parent.type === 'list' && parent.ordered) {
        bullet =
          (typeof parent.start === 'number' && parent.start > -1
            ? parent.start
            : 1) +
          (state.options.incrementListMarker === false
            ? 0
            : parent.children.indexOf(node)) +
          bullet;
      }

      let size = bullet.length + 1;

      if (
        listItemIndent === 'tab' ||
        (listItemIndent === 'mixed' &&
          ((parent && parent.type === 'list' && parent.spread) || node.spread))
      ) {
        size = Math.ceil(size / 4) * 4;
      }

      const tracker = state.createTracker(info);
      tracker.move(bullet + ' '.repeat(size - bullet.length));
      tracker.shift(size);
      const exit = state.enter('listItem');
      const value = state.indentLines(
        state.containerFlow(node, tracker.current()),
        map
      );
      exit();

      return value

      /** @type {Map} */
      function map(line, index, blank) {
        if (index) {
          return (blank ? '' : ' '.repeat(size)) + line
        }

        return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Paragraph} Paragraph
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Paragraph} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function paragraph(node, _, state, info) {
      const exit = state.enter('paragraph');
      const subexit = state.enter('phrasing');
      const value = state.containerPhrasing(node, info);
      subexit();
      exit();
      return value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').PhrasingContent} PhrasingContent
     */

    /**
     * Check if the given value is *phrasing content*.
     *
     * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.
     *
     * @param node
     *   Thing to check, typically `Node`.
     * @returns
     *   Whether `value` is phrasing content.
     */

    const phrasing =
      /** @type {(node?: unknown) => node is PhrasingContent} */
      (
        convert$2([
          'break',
          'delete',
          'emphasis',
          'footnote',
          'footnoteReference',
          'image',
          'imageReference',
          'inlineCode',
          'link',
          'linkReference',
          'strong',
          'text'
        ])
      );

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').Root} Root
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Root} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function root$3(node, _, state, info) {
      // Note: `html` nodes are ambiguous.
      const hasPhrasing = node.children.some(function (d) {
        return phrasing(d)
      });
      const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
      return fn.call(state, node, info)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['strong'], null | undefined>}
     */
    function checkStrong(state) {
      const marker = state.options.strong || '*';

      if (marker !== '*' && marker !== '_') {
        throw new Error(
          'Cannot serialize strong with `' +
            marker +
            '` for `options.strong`, expected `*`, or `_`'
        )
      }

      return marker
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').Strong} Strong
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    strong.peek = strongPeek;

    // To do: there are cases where emphasis cannot “form” depending on the
    // previous or next character of sequences.
    // There’s no way around that though, except for injecting zero-width stuff.
    // Do we need to safeguard against that?
    /**
     * @param {Strong} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function strong(node, _, state, info) {
      const marker = checkStrong(state);
      const exit = state.enter('strong');
      const tracker = state.createTracker(info);
      let value = tracker.move(marker + marker);
      value += tracker.move(
        state.containerPhrasing(node, {
          before: value,
          after: marker,
          ...tracker.current()
        })
      );
      value += tracker.move(marker + marker);
      exit();
      return value
    }

    /**
     * @param {Strong} _
     * @param {Parents | undefined} _1
     * @param {State} state
     * @returns {string}
     */
    function strongPeek(_, _1, state) {
      return state.options.strong || '*'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').Text} Text
     * @typedef {import('../types.js').Info} Info
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {Text} node
     * @param {Parents | undefined} _
     * @param {State} state
     * @param {Info} info
     * @returns {string}
     */
    function text$6(node, _, state, info) {
      return state.safe(node.value, info)
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('../types.js').Options} Options
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {State} state
     * @returns {Exclude<Options['ruleRepetition'], null | undefined>}
     */
    function checkRuleRepetition(state) {
      const repetition = state.options.ruleRepetition || 3;

      if (repetition < 3) {
        throw new Error(
          'Cannot serialize rules with repetition `' +
            repetition +
            '` for `options.ruleRepetition`, expected `3` or more'
        )
      }

      return repetition
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').Parents} Parents
     * @typedef {import('mdast').ThematicBreak} ThematicBreak
     * @typedef {import('../types.js').State} State
     */

    /**
     * @param {ThematicBreak} _
     * @param {Parents | undefined} _1
     * @param {State} state
     * @returns {string}
     */
    function thematicBreak$3(_, _1, state) {
      const value = (
        checkRule(state) + (state.options.ruleSpaces ? ' ' : '')
      ).repeat(checkRuleRepetition(state));

      return state.options.ruleSpaces ? value.slice(0, -1) : value
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Default (CommonMark) handlers.
     */
    const handle = {
      blockquote,
      break: hardBreak,
      code: code$1,
      definition: definition$2,
      emphasis,
      hardBreak,
      heading,
      html,
      image: image$1,
      imageReference,
      inlineCode,
      link,
      linkReference,
      list: list$2,
      listItem,
      paragraph,
      root: root$3,
      strong,
      text: text$6,
      thematicBreak: thematicBreak$3
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').InlineCode} InlineCode
     * @typedef {import('mdast').Table} Table
     * @typedef {import('mdast').TableCell} TableCell
     * @typedef {import('mdast').TableRow} TableRow
     *
     * @typedef {import('markdown-table').Options} MarkdownTableOptions
     *
     * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
     *
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
     * @typedef {import('mdast-util-to-markdown').State} State
     * @typedef {import('mdast-util-to-markdown').Info} Info
     */

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM tables in
     * markdown.
     *
     * @returns {FromMarkdownExtension}
     *   Extension for `mdast-util-from-markdown` to enable GFM tables.
     */
    function gfmTableFromMarkdown() {
      return {
        enter: {
          table: enterTable,
          tableData: enterCell,
          tableHeader: enterCell,
          tableRow: enterRow
        },
        exit: {
          codeText: exitCodeText,
          table: exitTable,
          tableData: exit$1,
          tableHeader: exit$1,
          tableRow: exit$1
        }
      }
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterTable(token) {
      const align = token._align;
      this.enter(
        {
          type: 'table',
          align: align.map(function (d) {
            return d === 'none' ? null : d
          }),
          children: []
        },
        token
      );
      this.data.inTable = true;
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitTable(token) {
      this.exit(token);
      this.data.inTable = undefined;
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterRow(token) {
      this.enter({type: 'tableRow', children: []}, token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exit$1(token) {
      this.exit(token);
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function enterCell(token) {
      this.enter({type: 'tableCell', children: []}, token);
    }

    // Overwrite the default code text data handler to unescape escaped pipes when
    // they are in tables.
    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitCodeText(token) {
      let value = this.resume();

      if (this.data.inTable) {
        value = value.replace(/\\([\\|])/g, replace);
      }

      const node = this.stack[this.stack.length - 1];
      ok$1(node.type === 'inlineCode');
      node.value = value;
      this.exit(token);
    }

    /**
     * @param {string} $0
     * @param {string} $1
     * @returns {string}
     */
    function replace($0, $1) {
      // Pipes work, backslashes don’t (but can’t escape pipes).
      return $1 === '|' ? $1 : $0
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM tables in
     * markdown.
     *
     * @param {Options | null | undefined} [options]
     *   Configuration.
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM tables.
     */
    function gfmTableToMarkdown(options) {
      const settings = options || {};
      const padding = settings.tableCellPadding;
      const alignDelimiters = settings.tablePipeAlign;
      const stringLength = settings.stringLength;
      const around = padding ? ' ' : '|';

      return {
        unsafe: [
          {character: '\r', inConstruct: 'tableCell'},
          {character: '\n', inConstruct: 'tableCell'},
          // A pipe, when followed by a tab or space (padding), or a dash or colon
          // (unpadded delimiter row), could result in a table.
          {atBreak: true, character: '|', after: '[\t :-]'},
          // A pipe in a cell must be encoded.
          {character: '|', inConstruct: 'tableCell'},
          // A colon must be followed by a dash, in which case it could start a
          // delimiter row.
          {atBreak: true, character: ':', after: '-'},
          // A delimiter row can also start with a dash, when followed by more
          // dashes, a colon, or a pipe.
          // This is a stricter version than the built in check for lists, thematic
          // breaks, and setex heading underlines though:
          // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
          {atBreak: true, character: '-', after: '[:|-]'}
        ],
        handlers: {
          inlineCode: inlineCodeWithTable,
          table: handleTable,
          tableCell: handleTableCell,
          tableRow: handleTableRow
        }
      }

      /**
       * @type {ToMarkdownHandle}
       * @param {Table} node
       */
      function handleTable(node, _, state, info) {
        return serializeData(handleTableAsData(node, state, info), node.align)
      }

      /**
       * This function isn’t really used normally, because we handle rows at the
       * table level.
       * But, if someone passes in a table row, this ensures we make somewhat sense.
       *
       * @type {ToMarkdownHandle}
       * @param {TableRow} node
       */
      function handleTableRow(node, _, state, info) {
        const row = handleTableRowAsData(node, state, info);
        const value = serializeData([row]);
        // `markdown-table` will always add an align row
        return value.slice(0, value.indexOf('\n'))
      }

      /**
       * @type {ToMarkdownHandle}
       * @param {TableCell} node
       */
      function handleTableCell(node, _, state, info) {
        const exit = state.enter('tableCell');
        const subexit = state.enter('phrasing');
        const value = state.containerPhrasing(node, {
          ...info,
          before: around,
          after: around
        });
        subexit();
        exit();
        return value
      }

      /**
       * @param {Array<Array<string>>} matrix
       * @param {Array<string | null | undefined> | null | undefined} [align]
       */
      function serializeData(matrix, align) {
        return markdownTable(matrix, {
          align,
          // @ts-expect-error: `markdown-table` types should support `null`.
          alignDelimiters,
          // @ts-expect-error: `markdown-table` types should support `null`.
          padding,
          // @ts-expect-error: `markdown-table` types should support `null`.
          stringLength
        })
      }

      /**
       * @param {Table} node
       * @param {State} state
       * @param {Info} info
       */
      function handleTableAsData(node, state, info) {
        const children = node.children;
        let index = -1;
        /** @type {Array<Array<string>>} */
        const result = [];
        const subexit = state.enter('table');

        while (++index < children.length) {
          result[index] = handleTableRowAsData(children[index], state, info);
        }

        subexit();

        return result
      }

      /**
       * @param {TableRow} node
       * @param {State} state
       * @param {Info} info
       */
      function handleTableRowAsData(node, state, info) {
        const children = node.children;
        let index = -1;
        /** @type {Array<string>} */
        const result = [];
        const subexit = state.enter('tableRow');

        while (++index < children.length) {
          // Note: the positional info as used here is incorrect.
          // Making it correct would be impossible due to aligning cells?
          // And it would need copy/pasting `markdown-table` into this project.
          result[index] = handleTableCell(children[index], node, state, info);
        }

        subexit();

        return result
      }

      /**
       * @type {ToMarkdownHandle}
       * @param {InlineCode} node
       */
      function inlineCodeWithTable(node, parent, state) {
        let value = handle.inlineCode(node, parent, state);

        if (state.stack.includes('tableCell')) {
          value = value.replace(/\|/g, '\\$&');
        }

        return value
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast').ListItem} ListItem
     * @typedef {import('mdast').Paragraph} Paragraph
     * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
     */

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM task
     * list items in markdown.
     *
     * @returns {FromMarkdownExtension}
     *   Extension for `mdast-util-from-markdown` to enable GFM task list items.
     */
    function gfmTaskListItemFromMarkdown() {
      return {
        exit: {
          taskListCheckValueChecked: exitCheck,
          taskListCheckValueUnchecked: exitCheck,
          paragraph: exitParagraphWithTaskListItem
        }
      }
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM task list
     * items in markdown.
     *
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM task list items.
     */
    function gfmTaskListItemToMarkdown() {
      return {
        unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],
        handlers: {listItem: listItemWithTaskListItem}
      }
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitCheck(token) {
      // We’re always in a paragraph, in a list item.
      const node = this.stack[this.stack.length - 2];
      ok$1(node.type === 'listItem');
      node.checked = token.type === 'taskListCheckValueChecked';
    }

    /**
     * @this {CompileContext}
     * @type {FromMarkdownHandle}
     */
    function exitParagraphWithTaskListItem(token) {
      const parent = this.stack[this.stack.length - 2];

      if (
        parent &&
        parent.type === 'listItem' &&
        typeof parent.checked === 'boolean'
      ) {
        const node = this.stack[this.stack.length - 1];
        ok$1(node.type === 'paragraph');
        const head = node.children[0];

        if (head && head.type === 'text') {
          const siblings = parent.children;
          let index = -1;
          /** @type {Paragraph | undefined} */
          let firstParaghraph;

          while (++index < siblings.length) {
            const sibling = siblings[index];
            if (sibling.type === 'paragraph') {
              firstParaghraph = sibling;
              break
            }
          }

          if (firstParaghraph === node) {
            // Must start with a space or a tab.
            head.value = head.value.slice(1);

            if (head.value.length === 0) {
              node.children.shift();
            } else if (
              node.position &&
              head.position &&
              typeof head.position.start.offset === 'number'
            ) {
              head.position.start.column++;
              head.position.start.offset++;
              node.position.start = Object.assign({}, head.position.start);
            }
          }
        }
      }

      this.exit(token);
    }

    /**
     * @type {ToMarkdownHandle}
     * @param {ListItem} node
     */
    function listItemWithTaskListItem(node, parent, state, info) {
      const head = node.children[0];
      const checkable =
        typeof node.checked === 'boolean' && head && head.type === 'paragraph';
      const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';
      const tracker = state.createTracker(info);

      if (checkable) {
        tracker.move(checkbox);
      }

      let value = handle.listItem(node, parent, state, {
        ...info,
        ...tracker.current()
      });

      if (checkable) {
        value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
      }

      return value

      /**
       * @param {string} $0
       * @returns {string}
       */
      function check($0) {
        return $0 + checkbox
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
     * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
     */

    /**
     * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink
     * literals, footnotes, strikethrough, tables, tasklists).
     *
     * @returns {Array<FromMarkdownExtension>}
     *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,
     *   footnotes, strikethrough, tables, tasklists).
     */
    function gfmFromMarkdown() {
      return [
        gfmAutolinkLiteralFromMarkdown(),
        gfmFootnoteFromMarkdown(),
        gfmStrikethroughFromMarkdown(),
        gfmTableFromMarkdown(),
        gfmTaskListItemFromMarkdown()
      ]
    }

    /**
     * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink
     * literals, footnotes, strikethrough, tables, tasklists).
     *
     * @param {Options | null | undefined} [options]
     *   Configuration.
     * @returns {ToMarkdownExtension}
     *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,
     *   footnotes, strikethrough, tables, tasklists).
     */
    function gfmToMarkdown(options) {
      return {
        extensions: [
          gfmAutolinkLiteralToMarkdown(),
          gfmFootnoteToMarkdown(),
          gfmStrikethroughToMarkdown(),
          gfmTableToMarkdown(options),
          gfmTaskListItemToMarkdown()
        ]
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Code} Code
     * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').Previous} Previous
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    const wwwPrefix = {
      tokenize: tokenizeWwwPrefix,
      partial: true
    };
    const domain = {
      tokenize: tokenizeDomain,
      partial: true
    };
    const path$2 = {
      tokenize: tokenizePath,
      partial: true
    };
    const trail = {
      tokenize: tokenizeTrail,
      partial: true
    };
    const emailDomainDotTrail = {
      tokenize: tokenizeEmailDomainDotTrail,
      partial: true
    };
    const wwwAutolink = {
      tokenize: tokenizeWwwAutolink,
      previous: previousWww
    };
    const protocolAutolink = {
      tokenize: tokenizeProtocolAutolink,
      previous: previousProtocol
    };
    const emailAutolink = {
      tokenize: tokenizeEmailAutolink,
      previous: previousEmail
    };

    /** @type {ConstructRecord} */
    const text$5 = {};

    /**
     * Create an extension for `micromark` to support GitHub autolink literal
     * syntax.
     *
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `extensions` to enable GFM
     *   autolink literal syntax.
     */
    function gfmAutolinkLiteral() {
      return {
        text: text$5
      }
    }

    /** @type {Code} */
    let code = 48;

    // Add alphanumerics.
    while (code < 123) {
      text$5[code] = emailAutolink;
      code++;
      if (code === 58) code = 65;
      else if (code === 91) code = 97;
    }
    text$5[43] = emailAutolink;
    text$5[45] = emailAutolink;
    text$5[46] = emailAutolink;
    text$5[95] = emailAutolink;
    text$5[72] = [emailAutolink, protocolAutolink];
    text$5[104] = [emailAutolink, protocolAutolink];
    text$5[87] = [emailAutolink, wwwAutolink];
    text$5[119] = [emailAutolink, wwwAutolink];

    // To do: perform email autolink literals on events, afterwards.
    // That’s where `markdown-rs` and `cmark-gfm` perform it.
    // It should look for `@`, then for atext backwards, and then for a label
    // forwards.
    // To do: `mailto:`, `xmpp:` protocol as prefix.

    /**
     * Email autolink literal.
     *
     * ```markdown
     * > | a contact@example.org b
     *       ^^^^^^^^^^^^^^^^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeEmailAutolink(effects, ok, nok) {
      const self = this;
      /** @type {boolean | undefined} */
      let dot;
      /** @type {boolean} */
      let data;
      return start

      /**
       * Start of email autolink literal.
       *
       * ```markdown
       * > | a contact@example.org b
       *       ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        if (
          !gfmAtext(code) ||
          !previousEmail.call(self, self.previous) ||
          previousUnbalanced(self.events)
        ) {
          return nok(code)
        }
        effects.enter('literalAutolink');
        effects.enter('literalAutolinkEmail');
        return atext(code)
      }

      /**
       * In email atext.
       *
       * ```markdown
       * > | a contact@example.org b
       *       ^
       * ```
       *
       * @type {State}
       */
      function atext(code) {
        if (gfmAtext(code)) {
          effects.consume(code);
          return atext
        }
        if (code === 64) {
          effects.consume(code);
          return emailDomain
        }
        return nok(code)
      }

      /**
       * In email domain.
       *
       * The reference code is a bit overly complex as it handles the `@`, of which
       * there may be just one.
       * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>
       *
       * ```markdown
       * > | a contact@example.org b
       *               ^
       * ```
       *
       * @type {State}
       */
      function emailDomain(code) {
        // Dot followed by alphanumerical (not `-` or `_`).
        if (code === 46) {
          return effects.check(
            emailDomainDotTrail,
            emailDomainAfter,
            emailDomainDot
          )(code)
        }

        // Alphanumerical, `-`, and `_`.
        if (code === 45 || code === 95 || asciiAlphanumeric$5(code)) {
          data = true;
          effects.consume(code);
          return emailDomain
        }

        // To do: `/` if xmpp.

        // Note: normally we’d truncate trailing punctuation from the link.
        // However, email autolink literals cannot contain any of those markers,
        // except for `.`, but that can only occur if it isn’t trailing.
        // So we can ignore truncating!
        return emailDomainAfter(code)
      }

      /**
       * In email domain, on dot that is not a trail.
       *
       * ```markdown
       * > | a contact@example.org b
       *                      ^
       * ```
       *
       * @type {State}
       */
      function emailDomainDot(code) {
        effects.consume(code);
        dot = true;
        return emailDomain
      }

      /**
       * After email domain.
       *
       * ```markdown
       * > | a contact@example.org b
       *                          ^
       * ```
       *
       * @type {State}
       */
      function emailDomainAfter(code) {
        // Domain must not be empty, must include a dot, and must end in alphabetical.
        // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.
        if (data && dot && asciiAlpha$4(self.previous)) {
          effects.exit('literalAutolinkEmail');
          effects.exit('literalAutolink');
          return ok(code)
        }
        return nok(code)
      }
    }

    /**
     * `www` autolink literal.
     *
     * ```markdown
     * > | a www.example.org b
     *       ^^^^^^^^^^^^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeWwwAutolink(effects, ok, nok) {
      const self = this;
      return wwwStart

      /**
       * Start of www autolink literal.
       *
       * ```markdown
       * > | www.example.com/a?b#c
       *     ^
       * ```
       *
       * @type {State}
       */
      function wwwStart(code) {
        if (
          (code !== 87 && code !== 119) ||
          !previousWww.call(self, self.previous) ||
          previousUnbalanced(self.events)
        ) {
          return nok(code)
        }
        effects.enter('literalAutolink');
        effects.enter('literalAutolinkWww');
        // Note: we *check*, so we can discard the `www.` we parsed.
        // If it worked, we consider it as a part of the domain.
        return effects.check(
          wwwPrefix,
          effects.attempt(domain, effects.attempt(path$2, wwwAfter), nok),
          nok
        )(code)
      }

      /**
       * After a www autolink literal.
       *
       * ```markdown
       * > | www.example.com/a?b#c
       *                          ^
       * ```
       *
       * @type {State}
       */
      function wwwAfter(code) {
        effects.exit('literalAutolinkWww');
        effects.exit('literalAutolink');
        return ok(code)
      }
    }

    /**
     * Protocol autolink literal.
     *
     * ```markdown
     * > | a https://example.org b
     *       ^^^^^^^^^^^^^^^^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeProtocolAutolink(effects, ok, nok) {
      const self = this;
      let buffer = '';
      let seen = false;
      return protocolStart

      /**
       * Start of protocol autolink literal.
       *
       * ```markdown
       * > | https://example.com/a?b#c
       *     ^
       * ```
       *
       * @type {State}
       */
      function protocolStart(code) {
        if (
          (code === 72 || code === 104) &&
          previousProtocol.call(self, self.previous) &&
          !previousUnbalanced(self.events)
        ) {
          effects.enter('literalAutolink');
          effects.enter('literalAutolinkHttp');
          buffer += String.fromCodePoint(code);
          effects.consume(code);
          return protocolPrefixInside
        }
        return nok(code)
      }

      /**
       * In protocol.
       *
       * ```markdown
       * > | https://example.com/a?b#c
       *     ^^^^^
       * ```
       *
       * @type {State}
       */
      function protocolPrefixInside(code) {
        // `5` is size of `https`
        if (asciiAlpha$4(code) && buffer.length < 5) {
          // @ts-expect-error: definitely number.
          buffer += String.fromCodePoint(code);
          effects.consume(code);
          return protocolPrefixInside
        }
        if (code === 58) {
          const protocol = buffer.toLowerCase();
          if (protocol === 'http' || protocol === 'https') {
            effects.consume(code);
            return protocolSlashesInside
          }
        }
        return nok(code)
      }

      /**
       * In slashes.
       *
       * ```markdown
       * > | https://example.com/a?b#c
       *           ^^
       * ```
       *
       * @type {State}
       */
      function protocolSlashesInside(code) {
        if (code === 47) {
          effects.consume(code);
          if (seen) {
            return afterProtocol
          }
          seen = true;
          return protocolSlashesInside
        }
        return nok(code)
      }

      /**
       * After protocol, before domain.
       *
       * ```markdown
       * > | https://example.com/a?b#c
       *             ^
       * ```
       *
       * @type {State}
       */
      function afterProtocol(code) {
        // To do: this is different from `markdown-rs`:
        // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182
        return code === null ||
          asciiControl$3(code) ||
          markdownLineEndingOrSpace$9(code) ||
          unicodeWhitespace$2(code) ||
          unicodePunctuation$3(code)
          ? nok(code)
          : effects.attempt(domain, effects.attempt(path$2, protocolAfter), nok)(code)
      }

      /**
       * After a protocol autolink literal.
       *
       * ```markdown
       * > | https://example.com/a?b#c
       *                              ^
       * ```
       *
       * @type {State}
       */
      function protocolAfter(code) {
        effects.exit('literalAutolinkHttp');
        effects.exit('literalAutolink');
        return ok(code)
      }
    }

    /**
     * `www` prefix.
     *
     * ```markdown
     * > | a www.example.org b
     *       ^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeWwwPrefix(effects, ok, nok) {
      let size = 0;
      return wwwPrefixInside

      /**
       * In www prefix.
       *
       * ```markdown
       * > | www.example.com
       *     ^^^^
       * ```
       *
       * @type {State}
       */
      function wwwPrefixInside(code) {
        if ((code === 87 || code === 119) && size < 3) {
          size++;
          effects.consume(code);
          return wwwPrefixInside
        }
        if (code === 46 && size === 3) {
          effects.consume(code);
          return wwwPrefixAfter
        }
        return nok(code)
      }

      /**
       * After www prefix.
       *
       * ```markdown
       * > | www.example.com
       *         ^
       * ```
       *
       * @type {State}
       */
      function wwwPrefixAfter(code) {
        // If there is *anything*, we can link.
        return code === null ? nok(code) : ok(code)
      }
    }

    /**
     * Domain.
     *
     * ```markdown
     * > | a https://example.org b
     *               ^^^^^^^^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeDomain(effects, ok, nok) {
      /** @type {boolean | undefined} */
      let underscoreInLastSegment;
      /** @type {boolean | undefined} */
      let underscoreInLastLastSegment;
      /** @type {boolean | undefined} */
      let seen;
      return domainInside

      /**
       * In domain.
       *
       * ```markdown
       * > | https://example.com/a
       *             ^^^^^^^^^^^
       * ```
       *
       * @type {State}
       */
      function domainInside(code) {
        // Check whether this marker, which is a trailing punctuation
        // marker, optionally followed by more trailing markers, and then
        // followed by an end.
        if (code === 46 || code === 95) {
          return effects.check(trail, domainAfter, domainAtPunctuation)(code)
        }

        // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can
        // occur, which sounds like ASCII only, but they also support `www.點看.com`,
        // so that’s Unicode.
        // Instead of some new production for Unicode alphanumerics, markdown
        // already has that for Unicode punctuation and whitespace, so use those.
        // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.
        if (
          code === null ||
          markdownLineEndingOrSpace$9(code) ||
          unicodeWhitespace$2(code) ||
          (code !== 45 && unicodePunctuation$3(code))
        ) {
          return domainAfter(code)
        }
        seen = true;
        effects.consume(code);
        return domainInside
      }

      /**
       * In domain, at potential trailing punctuation, that was not trailing.
       *
       * ```markdown
       * > | https://example.com
       *                    ^
       * ```
       *
       * @type {State}
       */
      function domainAtPunctuation(code) {
        // There is an underscore in the last segment of the domain
        if (code === 95) {
          underscoreInLastSegment = true;
        }
        // Otherwise, it’s a `.`: save the last segment underscore in the
        // penultimate segment slot.
        else {
          underscoreInLastLastSegment = underscoreInLastSegment;
          underscoreInLastSegment = undefined;
        }
        effects.consume(code);
        return domainInside
      }

      /**
       * After domain.
       *
       * ```markdown
       * > | https://example.com/a
       *                        ^
       * ```
       *
       * @type {State} */
      function domainAfter(code) {
        // Note: that’s GH says a dot is needed, but it’s not true:
        // <https://github.com/github/cmark-gfm/issues/279>
        if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
          return nok(code)
        }
        return ok(code)
      }
    }

    /**
     * Path.
     *
     * ```markdown
     * > | a https://example.org/stuff b
     *                          ^^^^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizePath(effects, ok) {
      let sizeOpen = 0;
      let sizeClose = 0;
      return pathInside

      /**
       * In path.
       *
       * ```markdown
       * > | https://example.com/a
       *                        ^^
       * ```
       *
       * @type {State}
       */
      function pathInside(code) {
        if (code === 40) {
          sizeOpen++;
          effects.consume(code);
          return pathInside
        }

        // To do: `markdown-rs` also needs this.
        // If this is a paren, and there are less closings than openings,
        // we don’t check for a trail.
        if (code === 41 && sizeClose < sizeOpen) {
          return pathAtPunctuation(code)
        }

        // Check whether this trailing punctuation marker is optionally
        // followed by more trailing markers, and then followed
        // by an end.
        if (
          code === 33 ||
          code === 34 ||
          code === 38 ||
          code === 39 ||
          code === 41 ||
          code === 42 ||
          code === 44 ||
          code === 46 ||
          code === 58 ||
          code === 59 ||
          code === 60 ||
          code === 63 ||
          code === 93 ||
          code === 95 ||
          code === 126
        ) {
          return effects.check(trail, ok, pathAtPunctuation)(code)
        }
        if (
          code === null ||
          markdownLineEndingOrSpace$9(code) ||
          unicodeWhitespace$2(code)
        ) {
          return ok(code)
        }
        effects.consume(code);
        return pathInside
      }

      /**
       * In path, at potential trailing punctuation, that was not trailing.
       *
       * ```markdown
       * > | https://example.com/a"b
       *                          ^
       * ```
       *
       * @type {State}
       */
      function pathAtPunctuation(code) {
        // Count closing parens.
        if (code === 41) {
          sizeClose++;
        }
        effects.consume(code);
        return pathInside
      }
    }

    /**
     * Trail.
     *
     * This calls `ok` if this *is* the trail, followed by an end, which means
     * the entire trail is not part of the link.
     * It calls `nok` if this *is* part of the link.
     *
     * ```markdown
     * > | https://example.com").
     *                        ^^^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeTrail(effects, ok, nok) {
      return trail

      /**
       * In trail of domain or path.
       *
       * ```markdown
       * > | https://example.com").
       *                        ^
       * ```
       *
       * @type {State}
       */
      function trail(code) {
        // Regular trailing punctuation.
        if (
          code === 33 ||
          code === 34 ||
          code === 39 ||
          code === 41 ||
          code === 42 ||
          code === 44 ||
          code === 46 ||
          code === 58 ||
          code === 59 ||
          code === 63 ||
          code === 95 ||
          code === 126
        ) {
          effects.consume(code);
          return trail
        }

        // `&` followed by one or more alphabeticals and then a `;`, is
        // as a whole considered as trailing punctuation.
        // In all other cases, it is considered as continuation of the URL.
        if (code === 38) {
          effects.consume(code);
          return trailCharRefStart
        }

        // Needed because we allow literals after `[`, as we fix:
        // <https://github.com/github/cmark-gfm/issues/278>.
        // Check that it is not followed by `(` or `[`.
        if (code === 93) {
          effects.consume(code);
          return trailBracketAfter
        }
        if (
          // `<` is an end.
          code === 60 ||
          // So is whitespace.
          code === null ||
          markdownLineEndingOrSpace$9(code) ||
          unicodeWhitespace$2(code)
        ) {
          return ok(code)
        }
        return nok(code)
      }

      /**
       * In trail, after `]`.
       *
       * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.
       * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.
       *
       * ```markdown
       * > | https://example.com](
       *                         ^
       * ```
       *
       * @type {State}
       */
      function trailBracketAfter(code) {
        // Whitespace or something that could start a resource or reference is the end.
        // Switch back to trail otherwise.
        if (
          code === null ||
          code === 40 ||
          code === 91 ||
          markdownLineEndingOrSpace$9(code) ||
          unicodeWhitespace$2(code)
        ) {
          return ok(code)
        }
        return trail(code)
      }

      /**
       * In character-reference like trail, after `&`.
       *
       * ```markdown
       * > | https://example.com&amp;).
       *                         ^
       * ```
       *
       * @type {State}
       */
      function trailCharRefStart(code) {
        // When non-alpha, it’s not a trail.
        return asciiAlpha$4(code) ? trailCharRefInside(code) : nok(code)
      }

      /**
       * In character-reference like trail.
       *
       * ```markdown
       * > | https://example.com&amp;).
       *                         ^
       * ```
       *
       * @type {State}
       */
      function trailCharRefInside(code) {
        // Switch back to trail if this is well-formed.
        if (code === 59) {
          effects.consume(code);
          return trail
        }
        if (asciiAlpha$4(code)) {
          effects.consume(code);
          return trailCharRefInside
        }

        // It’s not a trail.
        return nok(code)
      }
    }

    /**
     * Dot in email domain trail.
     *
     * This calls `ok` if this *is* the trail, followed by an end, which means
     * the trail is not part of the link.
     * It calls `nok` if this *is* part of the link.
     *
     * ```markdown
     * > | contact@example.org.
     *                        ^
     * ```
     *
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeEmailDomainDotTrail(effects, ok, nok) {
      return start

      /**
       * Dot.
       *
       * ```markdown
       * > | contact@example.org.
       *                    ^   ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        // Must be dot.
        effects.consume(code);
        return after
      }

      /**
       * After dot.
       *
       * ```markdown
       * > | contact@example.org.
       *                     ^   ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        // Not a trail if alphanumeric.
        return asciiAlphanumeric$5(code) ? nok(code) : ok(code)
      }
    }

    /**
     * See:
     * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.
     *
     * @type {Previous}
     */
    function previousWww(code) {
      return (
        code === null ||
        code === 40 ||
        code === 42 ||
        code === 95 ||
        code === 91 ||
        code === 93 ||
        code === 126 ||
        markdownLineEndingOrSpace$9(code)
      )
    }

    /**
     * See:
     * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.
     *
     * @type {Previous}
     */
    function previousProtocol(code) {
      return !asciiAlpha$4(code)
    }

    /**
     * @this {TokenizeContext}
     * @type {Previous}
     */
    function previousEmail(code) {
      // Do not allow a slash “inside” atext.
      // The reference code is a bit weird, but that’s what it results in.
      // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.
      // Other than slash, every preceding character is allowed.
      return !(code === 47 || gfmAtext(code))
    }

    /**
     * @param {Code} code
     * @returns {boolean}
     */
    function gfmAtext(code) {
      return (
        code === 43 ||
        code === 45 ||
        code === 46 ||
        code === 95 ||
        asciiAlphanumeric$5(code)
      )
    }

    /**
     * @param {Array<Event>} events
     * @returns {boolean}
     */
    function previousUnbalanced(events) {
      let index = events.length;
      let result = false;
      while (index--) {
        const token = events[index][1];
        if (
          (token.type === 'labelLink' || token.type === 'labelImage') &&
          !token._balanced
        ) {
          result = true;
          break
        }

        // If we’ve seen this token, and it was marked as not having any unbalanced
        // bracket before it, we can exit.
        if (token._gfmAutolinkLiteralWalkedInto) {
          result = false;
          break
        }
      }
      if (events.length > 0 && !result) {
        // Mark the last token as “walked into” w/o finding
        // anything.
        events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
      }
      return result
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Exiter} Exiter
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    const indent = {
      tokenize: tokenizeIndent$1,
      partial: true
    };

    // To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only
    // affects label start (image).
    // That will let us drop `tokenizePotentialGfmFootnote*`.
    // It currently has a `_hiddenFootnoteSupport`, which affects that and more.
    // That can be removed when `micromark-extension-footnote` is archived.

    /**
     * Create an extension for `micromark` to enable GFM footnote syntax.
     *
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `extensions` to
     *   enable GFM footnote syntax.
     */
    function gfmFootnote() {
      /** @type {Extension} */
      return {
        document: {
          [91]: {
            tokenize: tokenizeDefinitionStart,
            continuation: {
              tokenize: tokenizeDefinitionContinuation
            },
            exit: gfmFootnoteDefinitionEnd
          }
        },
        text: {
          [91]: {
            tokenize: tokenizeGfmFootnoteCall
          },
          [93]: {
            add: 'after',
            tokenize: tokenizePotentialGfmFootnoteCall,
            resolveTo: resolveToPotentialGfmFootnoteCall
          }
        }
      }
    }

    // To do: remove after micromark update.
    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizePotentialGfmFootnoteCall(effects, ok, nok) {
      const self = this;
      let index = self.events.length;
      const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
      /** @type {Token} */
      let labelStart;

      // Find an opening.
      while (index--) {
        const token = self.events[index][1];
        if (token.type === 'labelImage') {
          labelStart = token;
          break
        }

        // Exit if we’ve walked far enough.
        if (
          token.type === 'gfmFootnoteCall' ||
          token.type === 'labelLink' ||
          token.type === 'label' ||
          token.type === 'image' ||
          token.type === 'link'
        ) {
          break
        }
      }
      return start

      /**
       * @type {State}
       */
      function start(code) {
        if (!labelStart || !labelStart._balanced) {
          return nok(code)
        }
        const id = normalizeIdentifier$4(
          self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
          })
        );
        if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {
          return nok(code)
        }
        effects.enter('gfmFootnoteCallLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallLabelMarker');
        return ok(code)
      }
    }

    // To do: remove after micromark update.
    /** @type {Resolver} */
    function resolveToPotentialGfmFootnoteCall(events, context) {
      let index = events.length;

      // Find an opening.
      while (index--) {
        if (
          events[index][1].type === 'labelImage' &&
          events[index][0] === 'enter'
        ) {
          events[index][1];
          break
        }
      }
      // Change the `labelImageMarker` to a `data`.
      events[index + 1][1].type = 'data';
      events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';

      // The whole (without `!`):
      /** @type {Token} */
      const call = {
        type: 'gfmFootnoteCall',
        start: Object.assign({}, events[index + 3][1].start),
        end: Object.assign({}, events[events.length - 1][1].end)
      };
      // The `^` marker
      /** @type {Token} */
      const marker = {
        type: 'gfmFootnoteCallMarker',
        start: Object.assign({}, events[index + 3][1].end),
        end: Object.assign({}, events[index + 3][1].end)
      };
      // Increment the end 1 character.
      marker.end.column++;
      marker.end.offset++;
      marker.end._bufferIndex++;
      /** @type {Token} */
      const string = {
        type: 'gfmFootnoteCallString',
        start: Object.assign({}, marker.end),
        end: Object.assign({}, events[events.length - 1][1].start)
      };
      /** @type {Token} */
      const chunk = {
        type: 'chunkString',
        contentType: 'string',
        start: Object.assign({}, string.start),
        end: Object.assign({}, string.end)
      };

      /** @type {Array<Event>} */
      const replacement = [
        // Take the `labelImageMarker` (now `data`, the `!`)
        events[index + 1],
        events[index + 2],
        ['enter', call, context],
        // The `[`
        events[index + 3],
        events[index + 4],
        // The `^`.
        ['enter', marker, context],
        ['exit', marker, context],
        // Everything in between.
        ['enter', string, context],
        ['enter', chunk, context],
        ['exit', chunk, context],
        ['exit', string, context],
        // The ending (`]`, properly parsed and labelled).
        events[events.length - 2],
        events[events.length - 1],
        ['exit', call, context]
      ];
      events.splice(index, events.length - index + 1, ...replacement);
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeGfmFootnoteCall(effects, ok, nok) {
      const self = this;
      const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
      let size = 0;
      /** @type {boolean} */
      let data;

      // Note: the implementation of `markdown-rs` is different, because it houses
      // core *and* extensions in one project.
      // Therefore, it can include footnote logic inside `label-end`.
      // We can’t do that, but luckily, we can parse footnotes in a simpler way than
      // needed for labels.
      return start

      /**
       * Start of footnote label.
       *
       * ```markdown
       * > | a [^b] c
       *       ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('gfmFootnoteCall');
        effects.enter('gfmFootnoteCallLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallLabelMarker');
        return callStart
      }

      /**
       * After `[`, at `^`.
       *
       * ```markdown
       * > | a [^b] c
       *        ^
       * ```
       *
       * @type {State}
       */
      function callStart(code) {
        if (code !== 94) return nok(code)
        effects.enter('gfmFootnoteCallMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteCallMarker');
        effects.enter('gfmFootnoteCallString');
        effects.enter('chunkString').contentType = 'string';
        return callData
      }

      /**
       * In label.
       *
       * ```markdown
       * > | a [^b] c
       *         ^
       * ```
       *
       * @type {State}
       */
      function callData(code) {
        if (
          // Too long.
          size > 999 ||
          // Closing brace with nothing.
          (code === 93 && !data) ||
          // Space or tab is not supported by GFM for some reason.
          // `\n` and `[` not being supported makes sense.
          code === null ||
          code === 91 ||
          markdownLineEndingOrSpace$9(code)
        ) {
          return nok(code)
        }
        if (code === 93) {
          effects.exit('chunkString');
          const token = effects.exit('gfmFootnoteCallString');
          if (!defined.includes(normalizeIdentifier$4(self.sliceSerialize(token)))) {
            return nok(code)
          }
          effects.enter('gfmFootnoteCallLabelMarker');
          effects.consume(code);
          effects.exit('gfmFootnoteCallLabelMarker');
          effects.exit('gfmFootnoteCall');
          return ok
        }
        if (!markdownLineEndingOrSpace$9(code)) {
          data = true;
        }
        size++;
        effects.consume(code);
        return code === 92 ? callEscape : callData
      }

      /**
       * On character after escape.
       *
       * ```markdown
       * > | a [^b\c] d
       *           ^
       * ```
       *
       * @type {State}
       */
      function callEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
          effects.consume(code);
          size++;
          return callData
        }
        return callData(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeDefinitionStart(effects, ok, nok) {
      const self = this;
      const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);
      /** @type {string} */
      let identifier;
      let size = 0;
      /** @type {boolean | undefined} */
      let data;
      return start

      /**
       * Start of GFM footnote definition.
       *
       * ```markdown
       * > | [^a]: b
       *     ^
       * ```
       *
       * @type {State}
       */
      function start(code) {
        effects.enter('gfmFootnoteDefinition')._container = true;
        effects.enter('gfmFootnoteDefinitionLabel');
        effects.enter('gfmFootnoteDefinitionLabelMarker');
        effects.consume(code);
        effects.exit('gfmFootnoteDefinitionLabelMarker');
        return labelAtMarker
      }

      /**
       * In label, at caret.
       *
       * ```markdown
       * > | [^a]: b
       *      ^
       * ```
       *
       * @type {State}
       */
      function labelAtMarker(code) {
        if (code === 94) {
          effects.enter('gfmFootnoteDefinitionMarker');
          effects.consume(code);
          effects.exit('gfmFootnoteDefinitionMarker');
          effects.enter('gfmFootnoteDefinitionLabelString');
          effects.enter('chunkString').contentType = 'string';
          return labelInside
        }
        return nok(code)
      }

      /**
       * In label.
       *
       * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote
       * > definition labels.
       *
       * ```markdown
       * > | [^a]: b
       *       ^
       * ```
       *
       * @type {State}
       */
      function labelInside(code) {
        if (
          // Too long.
          size > 999 ||
          // Closing brace with nothing.
          (code === 93 && !data) ||
          // Space or tab is not supported by GFM for some reason.
          // `\n` and `[` not being supported makes sense.
          code === null ||
          code === 91 ||
          markdownLineEndingOrSpace$9(code)
        ) {
          return nok(code)
        }
        if (code === 93) {
          effects.exit('chunkString');
          const token = effects.exit('gfmFootnoteDefinitionLabelString');
          identifier = normalizeIdentifier$4(self.sliceSerialize(token));
          effects.enter('gfmFootnoteDefinitionLabelMarker');
          effects.consume(code);
          effects.exit('gfmFootnoteDefinitionLabelMarker');
          effects.exit('gfmFootnoteDefinitionLabel');
          return labelAfter
        }
        if (!markdownLineEndingOrSpace$9(code)) {
          data = true;
        }
        size++;
        effects.consume(code);
        return code === 92 ? labelEscape : labelInside
      }

      /**
       * After `\`, at a special character.
       *
       * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:
       * > <https://github.com/github/cmark-gfm/issues/240>
       *
       * ```markdown
       * > | [^a\*b]: c
       *         ^
       * ```
       *
       * @type {State}
       */
      function labelEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
          effects.consume(code);
          size++;
          return labelInside
        }
        return labelInside(code)
      }

      /**
       * After definition label.
       *
       * ```markdown
       * > | [^a]: b
       *         ^
       * ```
       *
       * @type {State}
       */
      function labelAfter(code) {
        if (code === 58) {
          effects.enter('definitionMarker');
          effects.consume(code);
          effects.exit('definitionMarker');
          if (!defined.includes(identifier)) {
            defined.push(identifier);
          }

          // Any whitespace after the marker is eaten, forming indented code
          // is not possible.
          // No space is also fine, just like a block quote marker.
          return factorySpace$i(
            effects,
            whitespaceAfter,
            'gfmFootnoteDefinitionWhitespace'
          )
        }
        return nok(code)
      }

      /**
       * After definition prefix.
       *
       * ```markdown
       * > | [^a]: b
       *           ^
       * ```
       *
       * @type {State}
       */
      function whitespaceAfter(code) {
        // `markdown-rs` has a wrapping token for the prefix that is closed here.
        return ok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeDefinitionContinuation(effects, ok, nok) {
      /// Start of footnote definition continuation.
      ///
      /// ```markdown
      ///   | [^a]: b
      /// > |     c
      ///     ^
      /// ```
      //
      // Either a blank line, which is okay, or an indented thing.
      return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))
    }

    /** @type {Exiter} */
    function gfmFootnoteDefinitionEnd(effects) {
      effects.exit('gfmFootnoteDefinition');
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeIndent$1(effects, ok, nok) {
      const self = this;
      return factorySpace$i(
        effects,
        afterPrefix,
        'gfmFootnoteDefinitionIndent',
        4 + 1
      )

      /**
       * @type {State}
       */
      function afterPrefix(code) {
        const tail = self.events[self.events.length - 1];
        return tail &&
          tail[1].type === 'gfmFootnoteDefinitionIndent' &&
          tail[2].sliceSerialize(tail[1], true).length === 4
          ? ok(code)
          : nok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     *
     * @typedef Options
     *   Configuration (optional).
     * @property {boolean | null | undefined} [singleTilde=true]
     *   Whether to support strikethrough with a single tilde (default: `true`).
     *
     *   Single tildes work on github.com, but are technically prohibited by the
     *   GFM spec.
     */
    /**
     * Create an extension for `micromark` to enable GFM strikethrough syntax.
     *
     * @param {Options | null | undefined} [options={}]
     *   Configuration.
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `extensions`, to
     *   enable GFM strikethrough syntax.
     */
    function gfmStrikethrough(options) {
      const options_ = options || {};
      let single = options_.singleTilde;
      const tokenizer = {
        tokenize: tokenizeStrikethrough,
        resolveAll: resolveAllStrikethrough
      };
      if (single === null || single === undefined) {
        single = true;
      }
      return {
        text: {
          [126]: tokenizer
        },
        insideSpan: {
          null: [tokenizer]
        },
        attentionMarkers: {
          null: [126]
        }
      }

      /**
       * Take events and resolve strikethrough.
       *
       * @type {Resolver}
       */
      function resolveAllStrikethrough(events, context) {
        let index = -1;

        // Walk through all events.
        while (++index < events.length) {
          // Find a token that can close.
          if (
            events[index][0] === 'enter' &&
            events[index][1].type === 'strikethroughSequenceTemporary' &&
            events[index][1]._close
          ) {
            let open = index;

            // Now walk back to find an opener.
            while (open--) {
              // Find a token that can open the closer.
              if (
                events[open][0] === 'exit' &&
                events[open][1].type === 'strikethroughSequenceTemporary' &&
                events[open][1]._open &&
                // If the sizes are the same:
                events[index][1].end.offset - events[index][1].start.offset ===
                  events[open][1].end.offset - events[open][1].start.offset
              ) {
                events[index][1].type = 'strikethroughSequence';
                events[open][1].type = 'strikethroughSequence';

                /** @type {Token} */
                const strikethrough = {
                  type: 'strikethrough',
                  start: Object.assign({}, events[open][1].start),
                  end: Object.assign({}, events[index][1].end)
                };

                /** @type {Token} */
                const text = {
                  type: 'strikethroughText',
                  start: Object.assign({}, events[open][1].end),
                  end: Object.assign({}, events[index][1].start)
                };

                // Opening.
                /** @type {Array<Event>} */
                const nextEvents = [
                  ['enter', strikethrough, context],
                  ['enter', events[open][1], context],
                  ['exit', events[open][1], context],
                  ['enter', text, context]
                ];
                const insideSpan = context.parser.constructs.insideSpan.null;
                if (insideSpan) {
                  // Between.
                  splice$3(
                    nextEvents,
                    nextEvents.length,
                    0,
                    resolveAll$4(insideSpan, events.slice(open + 1, index), context)
                  );
                }

                // Closing.
                splice$3(nextEvents, nextEvents.length, 0, [
                  ['exit', text, context],
                  ['enter', events[index][1], context],
                  ['exit', events[index][1], context],
                  ['exit', strikethrough, context]
                ]);
                splice$3(events, open - 1, index - open + 3, nextEvents);
                index = open + nextEvents.length - 2;
                break
              }
            }
          }
        }
        index = -1;
        while (++index < events.length) {
          if (events[index][1].type === 'strikethroughSequenceTemporary') {
            events[index][1].type = 'data';
          }
        }
        return events
      }

      /**
       * @this {TokenizeContext}
       * @type {Tokenizer}
       */
      function tokenizeStrikethrough(effects, ok, nok) {
        const previous = this.previous;
        const events = this.events;
        let size = 0;
        return start

        /** @type {State} */
        function start(code) {
          if (
            previous === 126 &&
            events[events.length - 1][1].type !== 'characterEscape'
          ) {
            return nok(code)
          }
          effects.enter('strikethroughSequenceTemporary');
          return more(code)
        }

        /** @type {State} */
        function more(code) {
          const before = classifyCharacter$2(previous);
          if (code === 126) {
            // If this is the third marker, exit.
            if (size > 1) return nok(code)
            effects.consume(code);
            size++;
            return more
          }
          if (size < 2 && !single) return nok(code)
          const token = effects.exit('strikethroughSequenceTemporary');
          const after = classifyCharacter$2(code);
          token._open = !after || (after === 2 && Boolean(before));
          token._close = !before || (before === 2 && Boolean(after));
          return ok(code)
        }
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     */

    // Port of `edit_map.rs` from `markdown-rs`.
    // This should move to `markdown-js` later.

    // Deal with several changes in events, batching them together.
    //
    // Preferably, changes should be kept to a minimum.
    // Sometimes, it’s needed to change the list of events, because parsing can be
    // messy, and it helps to expose a cleaner interface of events to the compiler
    // and other users.
    // It can also help to merge many adjacent similar events.
    // And, in other cases, it’s needed to parse subcontent: pass some events
    // through another tokenizer and inject the result.

    /**
     * @typedef {[number, number, Array<Event>]} Change
     * @typedef {[number, number, number]} Jump
     */

    /**
     * Tracks a bunch of edits.
     */
    class EditMap {
      /**
       * Create a new edit map.
       */
      constructor() {
        /**
         * Record of changes.
         *
         * @type {Array<Change>}
         */
        this.map = [];
      }

      /**
       * Create an edit: a remove and/or add at a certain place.
       *
       * @param {number} index
       * @param {number} remove
       * @param {Array<Event>} add
       * @returns {undefined}
       */
      add(index, remove, add) {
        addImpl(this, index, remove, add);
      }

      // To do: add this when moving to `micromark`.
      // /**
      //  * Create an edit: but insert `add` before existing additions.
      //  *
      //  * @param {number} index
      //  * @param {number} remove
      //  * @param {Array<Event>} add
      //  * @returns {undefined}
      //  */
      // addBefore(index, remove, add) {
      //   addImpl(this, index, remove, add, true)
      // }

      /**
       * Done, change the events.
       *
       * @param {Array<Event>} events
       * @returns {undefined}
       */
      consume(events) {
        this.map.sort(function (a, b) {
          return a[0] - b[0]
        });

        /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
        if (this.map.length === 0) {
          return
        }

        // To do: if links are added in events, like they are in `markdown-rs`,
        // this is needed.
        // // Calculate jumps: where items in the current list move to.
        // /** @type {Array<Jump>} */
        // const jumps = []
        // let index = 0
        // let addAcc = 0
        // let removeAcc = 0
        // while (index < this.map.length) {
        //   const [at, remove, add] = this.map[index]
        //   removeAcc += remove
        //   addAcc += add.length
        //   jumps.push([at, removeAcc, addAcc])
        //   index += 1
        // }
        //
        // . shiftLinks(events, jumps)

        let index = this.map.length;
        /** @type {Array<Array<Event>>} */
        const vecs = [];
        while (index > 0) {
          index -= 1;
          vecs.push(
            events.slice(this.map[index][0] + this.map[index][1]),
            this.map[index][2]
          );

          // Truncate rest.
          events.length = this.map[index][0];
        }
        vecs.push([...events]);
        events.length = 0;
        let slice = vecs.pop();
        while (slice) {
          events.push(...slice);
          slice = vecs.pop();
        }

        // Truncate everything.
        this.map.length = 0;
      }
    }

    /**
     * Create an edit.
     *
     * @param {EditMap} editMap
     * @param {number} at
     * @param {number} remove
     * @param {Array<Event>} add
     * @returns {undefined}
     */
    function addImpl(editMap, at, remove, add) {
      let index = 0;

      /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
      if (remove === 0 && add.length === 0) {
        return
      }
      while (index < editMap.map.length) {
        if (editMap.map[index][0] === at) {
          editMap.map[index][1] += remove;

          // To do: before not used by tables, use when moving to micromark.
          // if (before) {
          //   add.push(...editMap.map[index][2])
          //   editMap.map[index][2] = add
          // } else {
          editMap.map[index][2].push(...add);
          // }

          return
        }
        index += 1;
      }
      editMap.map.push([at, remove, add]);
    }

    // /**
    //  * Shift `previous` and `next` links according to `jumps`.
    //  *
    //  * This fixes links in case there are events removed or added between them.
    //  *
    //  * @param {Array<Event>} events
    //  * @param {Array<Jump>} jumps
    //  */
    // function shiftLinks(events, jumps) {
    //   let jumpIndex = 0
    //   let index = 0
    //   let add = 0
    //   let rm = 0

    //   while (index < events.length) {
    //     const rmCurr = rm

    //     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {
    //       add = jumps[jumpIndex][2]
    //       rm = jumps[jumpIndex][1]
    //       jumpIndex += 1
    //     }

    //     // Ignore items that will be removed.
    //     if (rm > rmCurr) {
    //       index += rm - rmCurr
    //     } else {
    //       // ?
    //       // if let Some(link) = &events[index].link {
    //       //     if let Some(next) = link.next {
    //       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);
    //       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {
    //       //             add = jumps[jumpIndex].2;
    //       //             rm = jumps[jumpIndex].1;
    //       //             jumpIndex += 1;
    //       //         }
    //       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);
    //       //         index = next;
    //       //         continue;
    //       //     }
    //       // }
    //       index += 1
    //     }
    //   }
    // }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     */

    /**
     * @typedef {'center' | 'left' | 'none' | 'right'} Align
     */

    /**
     * Figure out the alignment of a GFM table.
     *
     * @param {Readonly<Array<Event>>} events
     *   List of events.
     * @param {number} index
     *   Table enter event.
     * @returns {Array<Align>}
     *   List of aligns.
     */
    function gfmTableAlign(events, index) {
      let inDelimiterRow = false;
      /** @type {Array<Align>} */
      const align = [];
      while (index < events.length) {
        const event = events[index];
        if (inDelimiterRow) {
          if (event[0] === 'enter') {
            // Start of alignment value: set a new column.
            // To do: `markdown-rs` uses `tableDelimiterCellValue`.
            if (event[1].type === 'tableContent') {
              align.push(
                events[index + 1][1].type === 'tableDelimiterMarker'
                  ? 'left'
                  : 'none'
              );
            }
          }
          // Exits:
          // End of alignment value: change the column.
          // To do: `markdown-rs` uses `tableDelimiterCellValue`.
          else if (event[1].type === 'tableContent') {
            if (events[index - 1][1].type === 'tableDelimiterMarker') {
              const alignIndex = align.length - 1;
              align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';
            }
          }
          // Done!
          else if (event[1].type === 'tableDelimiterRow') {
            break
          }
        } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
          inDelimiterRow = true;
        }
        index += 1;
      }
      return align
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Event} Event
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').Point} Point
     * @typedef {import('micromark-util-types').Resolver} Resolver
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').Token} Token
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */

    /**
     * Create an HTML extension for `micromark` to support GitHub tables syntax.
     *
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `extensions` to enable GFM
     *   table syntax.
     */
    function gfmTable() {
      return {
        flow: {
          null: {
            tokenize: tokenizeTable,
            resolveAll: resolveTable
          }
        }
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeTable(effects, ok, nok) {
      const self = this;
      let size = 0;
      let sizeB = 0;
      /** @type {boolean | undefined} */
      let seen;
      return start

      /**
       * Start of a GFM table.
       *
       * If there is a valid table row or table head before, then we try to parse
       * another row.
       * Otherwise, we try to parse a head.
       *
       * ```markdown
       * > | | a |
       *     ^
       *   | | - |
       * > | | b |
       *     ^
       * ```
       * @type {State}
       */
      function start(code) {
        let index = self.events.length - 1;
        while (index > -1) {
          const type = self.events[index][1].type;
          if (
            type === 'lineEnding' ||
            // Note: markdown-rs uses `whitespace` instead of `linePrefix`
            type === 'linePrefix'
          )
            index--;
          else break
        }
        const tail = index > -1 ? self.events[index][1].type : null;
        const next =
          tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;

        // Don’t allow lazy body rows.
        if (next === bodyRowStart && self.parser.lazy[self.now().line]) {
          return nok(code)
        }
        return next(code)
      }

      /**
       * Before table head row.
       *
       * ```markdown
       * > | | a |
       *     ^
       *   | | - |
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headRowBefore(code) {
        effects.enter('tableHead');
        effects.enter('tableRow');
        return headRowStart(code)
      }

      /**
       * Before table head row, after whitespace.
       *
       * ```markdown
       * > | | a |
       *     ^
       *   | | - |
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headRowStart(code) {
        if (code === 124) {
          return headRowBreak(code)
        }

        // To do: micromark-js should let us parse our own whitespace in extensions,
        // like `markdown-rs`:
        //
        // ```js
        // // 4+ spaces.
        // if (markdownSpace(code)) {
        //   return nok(code)
        // }
        // ```

        seen = true;
        // Count the first character, that isn’t a pipe, double.
        sizeB += 1;
        return headRowBreak(code)
      }

      /**
       * At break in table head row.
       *
       * ```markdown
       * > | | a |
       *     ^
       *       ^
       *         ^
       *   | | - |
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headRowBreak(code) {
        if (code === null) {
          // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
          return nok(code)
        }
        if (markdownLineEnding$k(code)) {
          // If anything other than one pipe (ignoring whitespace) was used, it’s fine.
          if (sizeB > 1) {
            sizeB = 0;
            // To do: check if this works.
            // Feel free to interrupt:
            self.interrupt = true;
            effects.exit('tableRow');
            effects.enter('lineEnding');
            effects.consume(code);
            effects.exit('lineEnding');
            return headDelimiterStart
          }

          // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
          return nok(code)
        }
        if (markdownSpace$a(code)) {
          // To do: check if this is fine.
          // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)
          // State::Retry(space_or_tab(tokenizer))
          return factorySpace$i(effects, headRowBreak, 'whitespace')(code)
        }
        sizeB += 1;
        if (seen) {
          seen = false;
          // Header cell count.
          size += 1;
        }
        if (code === 124) {
          effects.enter('tableCellDivider');
          effects.consume(code);
          effects.exit('tableCellDivider');
          // Whether a delimiter was seen.
          seen = true;
          return headRowBreak
        }

        // Anything else is cell data.
        effects.enter('data');
        return headRowData(code)
      }

      /**
       * In table head row data.
       *
       * ```markdown
       * > | | a |
       *       ^
       *   | | - |
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headRowData(code) {
        if (code === null || code === 124 || markdownLineEndingOrSpace$9(code)) {
          effects.exit('data');
          return headRowBreak(code)
        }
        effects.consume(code);
        return code === 92 ? headRowEscape : headRowData
      }

      /**
       * In table head row escape.
       *
       * ```markdown
       * > | | a\-b |
       *         ^
       *   | | ---- |
       *   | | c    |
       * ```
       *
       * @type {State}
       */
      function headRowEscape(code) {
        if (code === 92 || code === 124) {
          effects.consume(code);
          return headRowData
        }
        return headRowData(code)
      }

      /**
       * Before delimiter row.
       *
       * ```markdown
       *   | | a |
       * > | | - |
       *     ^
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headDelimiterStart(code) {
        // Reset `interrupt`.
        self.interrupt = false;

        // Note: in `markdown-rs`, we need to handle piercing here too.
        if (self.parser.lazy[self.now().line]) {
          return nok(code)
        }
        effects.enter('tableDelimiterRow');
        // Track if we’ve seen a `:` or `|`.
        seen = false;
        if (markdownSpace$a(code)) {
          return factorySpace$i(
            effects,
            headDelimiterBefore,
            'linePrefix',
            self.parser.constructs.disable.null.includes('codeIndented')
              ? undefined
              : 4
          )(code)
        }
        return headDelimiterBefore(code)
      }

      /**
       * Before delimiter row, after optional whitespace.
       *
       * Reused when a `|` is found later, to parse another cell.
       *
       * ```markdown
       *   | | a |
       * > | | - |
       *     ^
       *   | | b |
       * ```
       *
       * @type {State}
       */
      function headDelimiterBefore(code) {
        if (code === 45 || code === 58) {
          return headDelimiterValueBefore(code)
        }
        if (code === 124) {
          seen = true;
          // If we start with a pipe, we open a cell marker.
          effects.enter('tableCellDivider');
          effects.consume(code);
          effects.exit('tableCellDivider');
          return headDelimiterCellBefore
        }

        // More whitespace / empty row not allowed at start.
        return headDelimiterNok(code)
      }

      /**
       * After `|`, before delimiter cell.
       *
       * ```markdown
       *   | | a |
       * > | | - |
       *      ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterCellBefore(code) {
        if (markdownSpace$a(code)) {
          return factorySpace$i(effects, headDelimiterValueBefore, 'whitespace')(code)
        }
        return headDelimiterValueBefore(code)
      }

      /**
       * Before delimiter cell value.
       *
       * ```markdown
       *   | | a |
       * > | | - |
       *       ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterValueBefore(code) {
        // Align: left.
        if (code === 58) {
          sizeB += 1;
          seen = true;
          effects.enter('tableDelimiterMarker');
          effects.consume(code);
          effects.exit('tableDelimiterMarker');
          return headDelimiterLeftAlignmentAfter
        }

        // Align: none.
        if (code === 45) {
          sizeB += 1;
          // To do: seems weird that this *isn’t* left aligned, but that state is used?
          return headDelimiterLeftAlignmentAfter(code)
        }
        if (code === null || markdownLineEnding$k(code)) {
          return headDelimiterCellAfter(code)
        }
        return headDelimiterNok(code)
      }

      /**
       * After delimiter cell left alignment marker.
       *
       * ```markdown
       *   | | a  |
       * > | | :- |
       *        ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterLeftAlignmentAfter(code) {
        if (code === 45) {
          effects.enter('tableDelimiterFiller');
          return headDelimiterFiller(code)
        }

        // Anything else is not ok after the left-align colon.
        return headDelimiterNok(code)
      }

      /**
       * In delimiter cell filler.
       *
       * ```markdown
       *   | | a |
       * > | | - |
       *       ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterFiller(code) {
        if (code === 45) {
          effects.consume(code);
          return headDelimiterFiller
        }

        // Align is `center` if it was `left`, `right` otherwise.
        if (code === 58) {
          seen = true;
          effects.exit('tableDelimiterFiller');
          effects.enter('tableDelimiterMarker');
          effects.consume(code);
          effects.exit('tableDelimiterMarker');
          return headDelimiterRightAlignmentAfter
        }
        effects.exit('tableDelimiterFiller');
        return headDelimiterRightAlignmentAfter(code)
      }

      /**
       * After delimiter cell right alignment marker.
       *
       * ```markdown
       *   | |  a |
       * > | | -: |
       *         ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterRightAlignmentAfter(code) {
        if (markdownSpace$a(code)) {
          return factorySpace$i(effects, headDelimiterCellAfter, 'whitespace')(code)
        }
        return headDelimiterCellAfter(code)
      }

      /**
       * After delimiter cell.
       *
       * ```markdown
       *   | |  a |
       * > | | -: |
       *          ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterCellAfter(code) {
        if (code === 124) {
          return headDelimiterBefore(code)
        }
        if (code === null || markdownLineEnding$k(code)) {
          // Exit when:
          // * there was no `:` or `|` at all (it’s a thematic break or setext
          //   underline instead)
          // * the header cell count is not the delimiter cell count
          if (!seen || size !== sizeB) {
            return headDelimiterNok(code)
          }

          // Note: in markdown-rs`, a reset is needed here.
          effects.exit('tableDelimiterRow');
          effects.exit('tableHead');
          // To do: in `markdown-rs`, resolvers need to be registered manually.
          // effects.register_resolver(ResolveName::GfmTable)
          return ok(code)
        }
        return headDelimiterNok(code)
      }

      /**
       * In delimiter row, at a disallowed byte.
       *
       * ```markdown
       *   | | a |
       * > | | x |
       *       ^
       * ```
       *
       * @type {State}
       */
      function headDelimiterNok(code) {
        // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
        return nok(code)
      }

      /**
       * Before table body row.
       *
       * ```markdown
       *   | | a |
       *   | | - |
       * > | | b |
       *     ^
       * ```
       *
       * @type {State}
       */
      function bodyRowStart(code) {
        // Note: in `markdown-rs` we need to manually take care of a prefix,
        // but in `micromark-js` that is done for us, so if we’re here, we’re
        // never at whitespace.
        effects.enter('tableRow');
        return bodyRowBreak(code)
      }

      /**
       * At break in table body row.
       *
       * ```markdown
       *   | | a |
       *   | | - |
       * > | | b |
       *     ^
       *       ^
       *         ^
       * ```
       *
       * @type {State}
       */
      function bodyRowBreak(code) {
        if (code === 124) {
          effects.enter('tableCellDivider');
          effects.consume(code);
          effects.exit('tableCellDivider');
          return bodyRowBreak
        }
        if (code === null || markdownLineEnding$k(code)) {
          effects.exit('tableRow');
          return ok(code)
        }
        if (markdownSpace$a(code)) {
          return factorySpace$i(effects, bodyRowBreak, 'whitespace')(code)
        }

        // Anything else is cell content.
        effects.enter('data');
        return bodyRowData(code)
      }

      /**
       * In table body row data.
       *
       * ```markdown
       *   | | a |
       *   | | - |
       * > | | b |
       *       ^
       * ```
       *
       * @type {State}
       */
      function bodyRowData(code) {
        if (code === null || code === 124 || markdownLineEndingOrSpace$9(code)) {
          effects.exit('data');
          return bodyRowBreak(code)
        }
        effects.consume(code);
        return code === 92 ? bodyRowEscape : bodyRowData
      }

      /**
       * In table body row escape.
       *
       * ```markdown
       *   | | a    |
       *   | | ---- |
       * > | | b\-c |
       *         ^
       * ```
       *
       * @type {State}
       */
      function bodyRowEscape(code) {
        if (code === 92 || code === 124) {
          effects.consume(code);
          return bodyRowData
        }
        return bodyRowData(code)
      }
    }

    /** @type {Resolver} */

    function resolveTable(events, context) {
      let index = -1;
      let inFirstCellAwaitingPipe = true;
      /** @type {RowKind} */
      let rowKind = 0;
      /** @type {Range} */
      let lastCell = [0, 0, 0, 0];
      /** @type {Range} */
      let cell = [0, 0, 0, 0];
      let afterHeadAwaitingFirstBodyRow = false;
      let lastTableEnd = 0;
      /** @type {Token | undefined} */
      let currentTable;
      /** @type {Token | undefined} */
      let currentBody;
      /** @type {Token | undefined} */
      let currentCell;
      const map = new EditMap();
      while (++index < events.length) {
        const event = events[index];
        const token = event[1];
        if (event[0] === 'enter') {
          // Start of head.
          if (token.type === 'tableHead') {
            afterHeadAwaitingFirstBodyRow = false;

            // Inject previous (body end and) table end.
            if (lastTableEnd !== 0) {
              flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
              currentBody = undefined;
              lastTableEnd = 0;
            }

            // Inject table start.
            currentTable = {
              type: 'table',
              start: Object.assign({}, token.start),
              // Note: correct end is set later.
              end: Object.assign({}, token.end)
            };
            map.add(index, 0, [['enter', currentTable, context]]);
          } else if (
            token.type === 'tableRow' ||
            token.type === 'tableDelimiterRow'
          ) {
            inFirstCellAwaitingPipe = true;
            currentCell = undefined;
            lastCell = [0, 0, 0, 0];
            cell = [0, index + 1, 0, 0];

            // Inject table body start.
            if (afterHeadAwaitingFirstBodyRow) {
              afterHeadAwaitingFirstBodyRow = false;
              currentBody = {
                type: 'tableBody',
                start: Object.assign({}, token.start),
                // Note: correct end is set later.
                end: Object.assign({}, token.end)
              };
              map.add(index, 0, [['enter', currentBody, context]]);
            }
            rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;
          }
          // Cell data.
          else if (
            rowKind &&
            (token.type === 'data' ||
              token.type === 'tableDelimiterMarker' ||
              token.type === 'tableDelimiterFiller')
          ) {
            inFirstCellAwaitingPipe = false;

            // First value in cell.
            if (cell[2] === 0) {
              if (lastCell[1] !== 0) {
                cell[0] = cell[1];
                currentCell = flushCell(
                  map,
                  context,
                  lastCell,
                  rowKind,
                  undefined,
                  currentCell
                );
                lastCell = [0, 0, 0, 0];
              }
              cell[2] = index;
            }
          } else if (token.type === 'tableCellDivider') {
            if (inFirstCellAwaitingPipe) {
              inFirstCellAwaitingPipe = false;
            } else {
              if (lastCell[1] !== 0) {
                cell[0] = cell[1];
                currentCell = flushCell(
                  map,
                  context,
                  lastCell,
                  rowKind,
                  undefined,
                  currentCell
                );
              }
              lastCell = cell;
              cell = [lastCell[1], index, 0, 0];
            }
          }
        }
        // Exit events.
        else if (token.type === 'tableHead') {
          afterHeadAwaitingFirstBodyRow = true;
          lastTableEnd = index;
        } else if (
          token.type === 'tableRow' ||
          token.type === 'tableDelimiterRow'
        ) {
          lastTableEnd = index;
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(
              map,
              context,
              lastCell,
              rowKind,
              index,
              currentCell
            );
          } else if (cell[1] !== 0) {
            currentCell = flushCell(map, context, cell, rowKind, index, currentCell);
          }
          rowKind = 0;
        } else if (
          rowKind &&
          (token.type === 'data' ||
            token.type === 'tableDelimiterMarker' ||
            token.type === 'tableDelimiterFiller')
        ) {
          cell[3] = index;
        }
      }
      if (lastTableEnd !== 0) {
        flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
      }
      map.consume(context.events);

      // To do: move this into `html`, when events are exposed there.
      // That’s what `markdown-rs` does.
      // That needs updates to `mdast-util-gfm-table`.
      index = -1;
      while (++index < context.events.length) {
        const event = context.events[index];
        if (event[0] === 'enter' && event[1].type === 'table') {
          event[1]._align = gfmTableAlign(context.events, index);
        }
      }
      return events
    }

    /**
     * Generate a cell.
     *
     * @param {EditMap} map
     * @param {Readonly<TokenizeContext>} context
     * @param {Readonly<Range>} range
     * @param {RowKind} rowKind
     * @param {number | undefined} rowEnd
     * @param {Token | undefined} previousCell
     * @returns {Token | undefined}
     */
    // eslint-disable-next-line max-params
    function flushCell(map, context, range, rowKind, rowEnd, previousCell) {
      // `markdown-rs` uses:
      // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'
      const groupName =
        rowKind === 1
          ? 'tableHeader'
          : rowKind === 2
          ? 'tableDelimiter'
          : 'tableData';
      // `markdown-rs` uses:
      // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'
      const valueName = 'tableContent';

      // Insert an exit for the previous cell, if there is one.
      //
      // ```markdown
      // > | | aa | bb | cc |
      //          ^-- exit
      //           ^^^^-- this cell
      // ```
      if (range[0] !== 0) {
        previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
        map.add(range[0], 0, [['exit', previousCell, context]]);
      }

      // Insert enter of this cell.
      //
      // ```markdown
      // > | | aa | bb | cc |
      //           ^-- enter
      //           ^^^^-- this cell
      // ```
      const now = getPoint(context.events, range[1]);
      previousCell = {
        type: groupName,
        start: Object.assign({}, now),
        // Note: correct end is set later.
        end: Object.assign({}, now)
      };
      map.add(range[1], 0, [['enter', previousCell, context]]);

      // Insert text start at first data start and end at last data end, and
      // remove events between.
      //
      // ```markdown
      // > | | aa | bb | cc |
      //            ^-- enter
      //             ^-- exit
      //           ^^^^-- this cell
      // ```
      if (range[2] !== 0) {
        const relatedStart = getPoint(context.events, range[2]);
        const relatedEnd = getPoint(context.events, range[3]);
        /** @type {Token} */
        const valueToken = {
          type: valueName,
          start: Object.assign({}, relatedStart),
          end: Object.assign({}, relatedEnd)
        };
        map.add(range[2], 0, [['enter', valueToken, context]]);
        if (rowKind !== 2) {
          // Fix positional info on remaining events
          const start = context.events[range[2]];
          const end = context.events[range[3]];
          start[1].end = Object.assign({}, end[1].end);
          start[1].type = 'chunkText';
          start[1].contentType = 'text';

          // Remove if needed.
          if (range[3] > range[2] + 1) {
            const a = range[2] + 1;
            const b = range[3] - range[2] - 1;
            map.add(a, b, []);
          }
        }
        map.add(range[3] + 1, 0, [['exit', valueToken, context]]);
      }

      // Insert an exit for the last cell, if at the row end.
      //
      // ```markdown
      // > | | aa | bb | cc |
      //                    ^-- exit
      //               ^^^^^^-- this cell (the last one contains two “between” parts)
      // ```
      if (rowEnd !== undefined) {
        previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
        map.add(rowEnd, 0, [['exit', previousCell, context]]);
        previousCell = undefined;
      }
      return previousCell
    }

    /**
     * Generate table end (and table body end).
     *
     * @param {Readonly<EditMap>} map
     * @param {Readonly<TokenizeContext>} context
     * @param {number} index
     * @param {Token} table
     * @param {Token | undefined} tableBody
     */
    // eslint-disable-next-line max-params
    function flushTableEnd(map, context, index, table, tableBody) {
      /** @type {Array<Event>} */
      const exits = [];
      const related = getPoint(context.events, index);
      if (tableBody) {
        tableBody.end = Object.assign({}, related);
        exits.push(['exit', tableBody, context]);
      }
      table.end = Object.assign({}, related);
      exits.push(['exit', table, context]);
      map.add(index + 1, 0, exits);
    }

    /**
     * @param {Readonly<Array<Event>>} events
     * @param {number} index
     * @returns {Readonly<Point>}
     */
    function getPoint(events, index) {
      const event = events[index];
      const side = event[0] === 'enter' ? 'start' : 'end';
      return event[1][side]
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').State} State
     * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
     * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
     */
    const tasklistCheck = {
      tokenize: tokenizeTasklistCheck
    };

    /**
     * Create an HTML extension for `micromark` to support GFM task list items
     * syntax.
     *
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `htmlExtensions` to
     *   support GFM task list items when serializing to HTML.
     */
    function gfmTaskListItem() {
      return {
        text: {
          [91]: tasklistCheck
        }
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeTasklistCheck(effects, ok, nok) {
      const self = this;
      return open

      /**
       * At start of task list item check.
       *
       * ```markdown
       * > | * [x] y.
       *       ^
       * ```
       *
       * @type {State}
       */
      function open(code) {
        if (
          // Exit if there’s stuff before.
          self.previous !== null ||
          // Exit if not in the first content that is the first child of a list
          // item.
          !self._gfmTasklistFirstContentOfListItem
        ) {
          return nok(code)
        }
        effects.enter('taskListCheck');
        effects.enter('taskListCheckMarker');
        effects.consume(code);
        effects.exit('taskListCheckMarker');
        return inside
      }

      /**
       * In task list item check.
       *
       * ```markdown
       * > | * [x] y.
       *        ^
       * ```
       *
       * @type {State}
       */
      function inside(code) {
        // Currently we match how GH works in files.
        // To match how GH works in comments, use `markdownSpace` (`[\t ]`) instead
        // of `markdownLineEndingOrSpace` (`[\t\n\r ]`).
        if (markdownLineEndingOrSpace$9(code)) {
          effects.enter('taskListCheckValueUnchecked');
          effects.consume(code);
          effects.exit('taskListCheckValueUnchecked');
          return close
        }
        if (code === 88 || code === 120) {
          effects.enter('taskListCheckValueChecked');
          effects.consume(code);
          effects.exit('taskListCheckValueChecked');
          return close
        }
        return nok(code)
      }

      /**
       * At close of task list item check.
       *
       * ```markdown
       * > | * [x] y.
       *         ^
       * ```
       *
       * @type {State}
       */
      function close(code) {
        if (code === 93) {
          effects.enter('taskListCheckMarker');
          effects.consume(code);
          effects.exit('taskListCheckMarker');
          effects.exit('taskListCheck');
          return after
        }
        return nok(code)
      }

      /**
       * @type {State}
       */
      function after(code) {
        // EOL in paragraph means there must be something else after it.
        if (markdownLineEnding$k(code)) {
          return ok(code)
        }

        // Space or tab?
        // Check what comes after.
        if (markdownSpace$a(code)) {
          return effects.check(
            {
              tokenize: spaceThenNonSpace
            },
            ok,
            nok
          )(code)
        }

        // EOF, or non-whitespace, both wrong.
        return nok(code)
      }
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function spaceThenNonSpace(effects, ok, nok) {
      return factorySpace$i(effects, after, 'whitespace')

      /**
       * After whitespace, after task list item check.
       *
       * ```markdown
       * > | * [x] y.
       *           ^
       * ```
       *
       * @type {State}
       */
      function after(code) {
        // EOF means there was nothing, so bad.
        // EOL means there’s content after it, so good.
        // Impossible to have more spaces.
        // Anything else is good.
        return code === null ? nok(code) : ok(code)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions
     * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options
     * @typedef {import('micromark-util-types').Extension} Extension
     * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
     */

    /**
     * Create an extension for `micromark` to enable GFM syntax.
     *
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     *
     *   Passed to `micromark-extens-gfm-strikethrough`.
     * @returns {Extension}
     *   Extension for `micromark` that can be passed in `extensions` to enable GFM
     *   syntax.
     */
    function gfm(options) {
      return combineExtensions$2([
        gfmAutolinkLiteral(),
        gfmFootnote(),
        gfmStrikethrough(options),
        gfmTable(),
        gfmTaskListItem()
      ])
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/// <reference types="remark-parse" />

    /** @type {Options} */
    const emptyOptions = {};

    /**
     * Add support GFM (autolink literals, footnotes, strikethrough, tables,
     * tasklists).
     *
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     * @returns {undefined}
     *   Nothing.
     */
    function remarkGfm(options) {
      // @ts-expect-error: TS is wrong about `this`.
      // eslint-disable-next-line unicorn/no-this-assignment
      const self = /** @type {Processor} */ (this);
      const settings = options || emptyOptions;
      const data = self.data();

      const micromarkExtensions =
        data.micromarkExtensions || (data.micromarkExtensions = []);
      const fromMarkdownExtensions =
        data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
      const toMarkdownExtensions =
        data.toMarkdownExtensions || (data.toMarkdownExtensions = []);

      micromarkExtensions.push(gfm(settings));
      fromMarkdownExtensions.push(gfmFromMarkdown());
      toMarkdownExtensions.push(gfmToMarkdown(settings));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Anchor = function (_a) {
        var children = _a.children, href = _a.href;
        var isEmail = href === null || href === void 0 ? void 0 : href.startsWith('mailto:');
        var isUrl = href === null || href === void 0 ? void 0 : href.startsWith('http');
        if (!href || (!isEmail && !isUrl))
            return React__default["default"].createElement(React__default["default"].Fragment, null, children);
        return (React__default["default"].createElement("a", { className: clsx({ 'str-chat__message-url-link': isUrl }), href: href, rel: 'nofollow noreferrer noopener', target: '_blank' }, children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Emoji = function (_a) {
        var children = _a.children;
        return (React__default["default"].createElement("span", { className: 'inline-text-emoji', "data-testid": 'inline-text-emoji' }, children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Mention = function (_a) {
        var children = _a.children, mentionedUser = _a.node.mentionedUser;
        return (React__default["default"].createElement("span", { className: 'str-chat__message-mention', "data-user-id": mentionedUser.id }, children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultAllowedTagNames = [
        'html',
        'text',
        'br',
        'p',
        'em',
        'strong',
        'a',
        'ol',
        'ul',
        'li',
        'code',
        'pre',
        'blockquote',
        'del',
        // custom types (tagNames)
        'emoji',
        'mention',
    ];
    function formatUrlForDisplay(url) {
        try {
            return decodeURIComponent(url).replace(detectHttp, '');
        }
        catch (e) {
            return url;
        }
    }
    function encodeDecode(url) {
        try {
            return encodeURI(decodeURIComponent(url));
        }
        catch (error) {
            return url;
        }
    }
    var urlTransform = function (uri) { return (uri.startsWith('app://') ? uri : defaultUrlTransform(uri)); };
    var getPluginsForward = function (plugins) { return plugins; };
    var markDownRenderers$1 = {
        a: Anchor,
        emoji: Emoji,
        mention: Mention,
    };
    var renderText = function (text, mentionedUsers, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.allowedTagNames, allowedTagNames = _c === void 0 ? defaultAllowedTagNames : _c, customMarkDownRenderers = _b.customMarkDownRenderers, _d = _b.getRehypePlugins, getRehypePlugins = _d === void 0 ? getPluginsForward : _d, _e = _b.getRemarkPlugins, getRemarkPlugins = _e === void 0 ? getPluginsForward : _e;
        // take the @ mentions and turn them into markdown?
        // translate links
        if (!text)
            return null;
        if (text.trim().length === 1)
            return React__default["default"].createElement(React__default["default"].Fragment, null, text);
        var newText = text;
        var markdownLinks = matchMarkdownLinks$1(newText);
        var codeBlocks = messageCodeBlocks(newText);
        // extract all valid links/emails within text and replace it with proper markup
        uniqBy(__spreadArray(__spreadArray([], find$2(newText, 'email'), true), find$2(newText, 'url'), true), 'value').forEach(function (_a) {
            var href = _a.href, type = _a.type, value = _a.value;
            var linkIsInBlock = codeBlocks.some(function (block) { return block === null || block === void 0 ? void 0 : block.includes(value); });
            // check if message is already  markdown
            var noParsingNeeded = markdownLinks &&
                markdownLinks.filter(function (text) {
                    var strippedHref = href === null || href === void 0 ? void 0 : href.replace(detectHttp, '');
                    var strippedText = text === null || text === void 0 ? void 0 : text.replace(detectHttp, '');
                    if (!strippedHref || !strippedText)
                        return false;
                    return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
                });
            if (noParsingNeeded.length > 0 || linkIsInBlock)
                return;
            try {
                // special case for mentions:
                // it could happen that a user's name matches with an e-mail format pattern.
                // in that case, we check whether the found e-mail is actually a mention
                // by naively checking for an existence of @ sign in front of it.
                if (type === 'email' && mentionedUsers) {
                    var emailMatchesWithName = mentionedUsers.some(function (u) { return u.name === value; });
                    if (emailMatchesWithName) {
                        newText = newText.replace(new RegExp(escapeRegExp(value), 'g'), function (match, position) {
                            var isMention = newText.charAt(position - 1) === '@';
                            // in case of mention, we leave the match in its original form,
                            // and we let `mentionsMarkdownPlugin` to do its job
                            return isMention ? match : "[".concat(match, "](").concat(encodeDecode(href), ")");
                        });
                        return;
                    }
                }
                var displayLink = type === 'email' ? value : formatUrlForDisplay(href);
                newText = newText.replace(new RegExp(escapeRegExp(value), 'g'), "[".concat(displayLink, "](").concat(encodeDecode(href), ")"));
            }
            catch (e) {
            }
        });
        var remarkPlugins = [
            htmlToTextPlugin,
            keepLineBreaksPlugin,
            [remarkGfm, { singleTilde: false }],
        ];
        var rehypePlugins = [emojiMarkdownPlugin];
        if (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) {
            rehypePlugins.push(mentionsMarkdownPlugin(mentionedUsers));
        }
        return (React__default["default"].createElement(Markdown, { allowedElements: allowedTagNames, components: __assign(__assign({}, markDownRenderers$1), customMarkDownRenderers), rehypePlugins: getRehypePlugins(rehypePlugins), remarkPlugins: getRemarkPlugins(remarkPlugins), skipHtml: true, unwrapDisallowed: true, urlTransform: urlTransform }, newText));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const List$1 = _ref => {
      let {
        className,
        component,
        currentTrigger,
        dropdownScroll,
        getSelectedItem,
        getTextToReplace,
        Header: PropHeader,
        itemClassName,
        itemStyle,
        onSelect,
        selectionEnd,
        style,
        SuggestionItem: PropSuggestionItem,
        value: propValue,
        values
      } = _ref;
      const {
        AutocompleteSuggestionHeader,
        AutocompleteSuggestionItem
      } = useComponentContext('SuggestionList');
      const {
        themeVersion
      } = useChatContext('SuggestionList');
      const SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item$2;
      const SuggestionHeader = PropHeader || AutocompleteSuggestionHeader || DefaultSuggestionListHeader;
      const [selectedItemIndex, setSelectedItemIndex] = React$2.useState(undefined);
      const itemsRef = [];
      const isSelected = item => selectedItemIndex === values.findIndex(value => getId(value) === getId(item));
      const getId = item => {
        const textToReplace = getTextToReplace(item);
        if (textToReplace.key) {
          return textToReplace.key;
        }
        if (typeof item === 'string' || !item.key) {
          return textToReplace.text;
        }
        return item.key;
      };
      const findItemIndex = React$2.useCallback(item => values.findIndex(value => value.id ? value.id === item.id : value.name === item.name), [values]);
      const modifyText = value => {
        if (!value) return;
        onSelect(getTextToReplace(value));
        if (getSelectedItem) getSelectedItem(value);
      };
      const handleClick = React$2.useCallback((e, item) => {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        const index = findItemIndex(item);
        modifyText(values[index]);
      }, [modifyText, findItemIndex]);
      const selectItem = React$2.useCallback(item => {
        const index = findItemIndex(item);
        setSelectedItemIndex(index);
      }, [findItemIndex]);
      const handleKeyDown = React$2.useCallback(event => {
        if (event.key === 'ArrowUp') {
          setSelectedItemIndex(prevSelected => {
            if (prevSelected === undefined) return 0;
            const newIndex = prevSelected === 0 ? values.length - 1 : prevSelected - 1;
            dropdownScroll(itemsRef[newIndex]);
            return newIndex;
          });
        }
        if (event.key === 'ArrowDown') {
          setSelectedItemIndex(prevSelected => {
            if (prevSelected === undefined) return 0;
            const newIndex = prevSelected === values.length - 1 ? 0 : prevSelected + 1;
            dropdownScroll(itemsRef[newIndex]);
            return newIndex;
          });
        }
        if ((event.key === 'Enter' || event.key === 'Tab') && selectedItemIndex !== undefined) {
          handleClick(event, values[selectedItemIndex]);
        }
        return null;
      }, [selectedItemIndex, values]);
      React$2.useEffect(() => {
        document.addEventListener('keydown', handleKeyDown, false);
        return () => document.removeEventListener('keydown', handleKeyDown);
      }, [handleKeyDown]);
      React$2.useEffect(() => {
        if (values !== null && values !== void 0 && values.length) selectItem(values[0]);
      }, [values]); // eslint-disable-line

      const restructureItem = React$2.useCallback(item => {
        const matched = item.name || item.id;
        const textBeforeCursor = propValue.slice(0, selectionEnd);
        const triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);
        const editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));
        const parts = matched.split(new RegExp("(".concat(editedPropValue, ")"), 'gi'));
        const itemNameParts = {
          match: editedPropValue,
          parts
        };
        return {
          ...item,
          itemNameParts
        };
      }, [propValue, selectionEnd, currentTrigger]);
      const restructuredValues = React$2.useMemo(() => values.map(restructureItem), [values, restructureItem]);
      return /*#__PURE__*/React__default["default"].createElement("ul", {
        className: clsx('rta__list', className),
        style: style
      }, themeVersion === '1' && /*#__PURE__*/React__default["default"].createElement("li", {
        className: "rta__list-header"
      }, /*#__PURE__*/React__default["default"].createElement(SuggestionHeader, {
        currentTrigger: currentTrigger,
        value: propValue
      })), restructuredValues.map((item, i) => /*#__PURE__*/React__default["default"].createElement(SuggestionItem, {
        className: itemClassName,
        component: component,
        item: item,
        key: getId(item),
        onClickHandler: handleClick,
        onSelectHandler: selectItem,
        ref: ref => {
          itemsRef[i] = ref;
        },
        selected: isSelected(item),
        style: itemStyle,
        value: propValue
      })));
    };

    var _extends$3 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	function _extends() {
    	  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    	    for (var i = 1; i < arguments.length; i++) {
    	      var source = arguments[i];
    	      for (var key in source) {
    	        if (Object.prototype.hasOwnProperty.call(source, key)) {
    	          target[key] = source[key];
    	        }
    	      }
    	    }
    	    return target;
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    	  return _extends.apply(this, arguments);
    	}
    	module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    } (_extends$3));

    var _extends$2 = /*@__PURE__*/getDefaultExportFromCjs(_extends$3.exports);

    var defineProperty = {exports: {}};

    var toPropertyKey = {exports: {}};

    var _typeof$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	function _typeof(o) {
    	  "@babel/helpers - typeof";

    	  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    	    return typeof o;
    	  } : function (o) {
    	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    	  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
    	}
    	module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    } (_typeof$1));

    var toPrimitive = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	var _typeof = _typeof$1.exports["default"];
    	function toPrimitive(t, r) {
    	  if ("object" != _typeof(t) || !t) return t;
    	  var e = t[Symbol.toPrimitive];
    	  if (void 0 !== e) {
    	    var i = e.call(t, r || "default");
    	    if ("object" != _typeof(i)) return i;
    	    throw new TypeError("@@toPrimitive must return a primitive value.");
    	  }
    	  return ("string" === r ? String : Number)(t);
    	}
    	module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
    } (toPrimitive));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	var _typeof = _typeof$1.exports["default"];
    	var toPrimitive$1 = toPrimitive.exports;
    	function toPropertyKey(t) {
    	  var i = toPrimitive$1(t, "string");
    	  return "symbol" == _typeof(i) ? i : String(i);
    	}
    	module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
    } (toPropertyKey));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	var toPropertyKey$1 = toPropertyKey.exports;
    	function _defineProperty(obj, key, value) {
    	  key = toPropertyKey$1(key);
    	  if (key in obj) {
    	    Object.defineProperty(obj, key, {
    	      value: value,
    	      enumerable: true,
    	      configurable: true,
    	      writable: true
    	    });
    	  } else {
    	    obj[key] = value;
    	  }
    	  return obj;
    	}
    	module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
    } (defineProperty));

    var _defineProperty = /*@__PURE__*/getDefaultExportFromCjs(defineProperty.exports);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var index$2 =  React$2.useLayoutEffect ;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var useLatest = function useLatest(value) {
      var ref = React$2.useRef(value);
      index$2(function () {
        ref.current = value;
      });
      return ref;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var updateRef = function updateRef(ref, value) {
      if (typeof ref === 'function') {
        ref(value);
        return;
      }
      ref.current = value;
    };

    var useComposedRef = function useComposedRef(libRef, userRef) {
      var prevUserRef = React$2.useRef();
      return React$2.useCallback(function (instance) {
        libRef.current = instance;

        if (prevUserRef.current) {
          updateRef(prevUserRef.current, null);
        }

        prevUserRef.current = userRef;

        if (!userRef) {
          return;
        }

        updateRef(userRef, instance);
      }, [userRef]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var HIDDEN_TEXTAREA_STYLE = {
      'min-height': '0',
      'max-height': 'none',
      height: '0',
      visibility: 'hidden',
      overflow: 'hidden',
      position: 'absolute',
      'z-index': '-1000',
      top: '0',
      right: '0'
    };

    var forceHiddenStyles = function forceHiddenStyles(node) {
      Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function (key) {
        node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
      });
    };

    //   export type CalculatedNodeHeights = [height: number, rowHeight: number];
    // https://github.com/microsoft/TypeScript/issues/28259

    var hiddenTextarea = null;

    var getHeight = function getHeight(node, sizingData) {
      var height = node.scrollHeight;

      if (sizingData.sizingStyle.boxSizing === 'border-box') {
        // border-box: add border, since height = content + padding + border
        return height + sizingData.borderSize;
      } // remove padding, since height = content


      return height - sizingData.paddingSize;
    };

    function calculateNodeHeight(sizingData, value, minRows, maxRows) {
      if (minRows === void 0) {
        minRows = 1;
      }

      if (maxRows === void 0) {
        maxRows = Infinity;
      }

      if (!hiddenTextarea) {
        hiddenTextarea = document.createElement('textarea');
        hiddenTextarea.setAttribute('tab-index', '-1');
        hiddenTextarea.setAttribute('aria-hidden', 'true');
        forceHiddenStyles(hiddenTextarea);
      }

      if (hiddenTextarea.parentNode === null) {
        document.body.appendChild(hiddenTextarea);
      }

      var paddingSize = sizingData.paddingSize,
          borderSize = sizingData.borderSize,
          sizingStyle = sizingData.sizingStyle;
      var boxSizing = sizingStyle.boxSizing;
      Object.keys(sizingStyle).forEach(function (_key) {
        var key = _key;
        hiddenTextarea.style[key] = sizingStyle[key];
      });
      forceHiddenStyles(hiddenTextarea);
      hiddenTextarea.value = value;
      var height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

      hiddenTextarea.value = 'x';
      var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
      var minHeight = rowHeight * minRows;

      if (boxSizing === 'border-box') {
        minHeight = minHeight + paddingSize + borderSize;
      }

      height = Math.max(minHeight, height);
      var maxHeight = rowHeight * maxRows;

      if (boxSizing === 'border-box') {
        maxHeight = maxHeight + paddingSize + borderSize;
      }

      height = Math.min(maxHeight, height);
      return [height, rowHeight];
    }

    var noop$3 = function noop() {};
    var pick = function pick(props, obj) {
      return props.reduce(function (acc, prop) {
        acc[prop] = obj[prop];
        return acc;
      }, {});
    };

    var SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', // non-standard
    'tabSize', 'textIndent', // non-standard
    'textRendering', 'textTransform', 'width'];
    var isIE$1 = !!document.documentElement.currentStyle ;

    var getSizingData = function getSizingData(node) {
      var style = window.getComputedStyle(node);

      if (style === null) {
        return null;
      }

      var sizingStyle = pick(SIZING_STYLE, style);
      var boxSizing = sizingStyle.boxSizing; // probably node is detached from DOM, can't read computed dimensions

      if (boxSizing === '') {
        return null;
      } // IE (Edge has already correct behaviour) returns content width as computed width
      // so we need to add manually padding and border widths


      if (isIE$1 && boxSizing === 'border-box') {
        sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';
      }

      var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
      var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
      return {
        sizingStyle: sizingStyle,
        paddingSize: paddingSize,
        borderSize: borderSize
      };
    };

    var useWindowResizeListener = function useWindowResizeListener(listener) {
      var latestListener = useLatest(listener);
      React$2.useLayoutEffect(function () {
        var handler = function handler(event) {
          latestListener.current(event);
        };

        window.addEventListener('resize', handler);
        return function () {
          window.removeEventListener('resize', handler);
        };
      }, []);
    };

    var TextareaAutosize = function TextareaAutosize(_ref, userRef) {
      var cacheMeasurements = _ref.cacheMeasurements,
          maxRows = _ref.maxRows,
          minRows = _ref.minRows,
          _ref$onChange = _ref.onChange,
          onChange = _ref$onChange === void 0 ? noop$3 : _ref$onChange,
          _ref$onHeightChange = _ref.onHeightChange,
          onHeightChange = _ref$onHeightChange === void 0 ? noop$3 : _ref$onHeightChange,
          props = _objectWithoutPropertiesLoose$1(_ref, ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"]);

      var isControlled = props.value !== undefined;
      var libRef = React$2.useRef(null);
      var ref = useComposedRef(libRef, userRef);
      var heightRef = React$2.useRef(0);
      var measurementsCacheRef = React$2.useRef();

      var resizeTextarea = function resizeTextarea() {
        var node = libRef.current;
        var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);

        if (!nodeSizingData) {
          return;
        }

        measurementsCacheRef.current = nodeSizingData;

        var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', minRows, maxRows),
            height = _calculateNodeHeight[0],
            rowHeight = _calculateNodeHeight[1];

        if (heightRef.current !== height) {
          heightRef.current = height;
          node.style.setProperty('height', height + "px", 'important');
          onHeightChange(height, {
            rowHeight: rowHeight
          });
        }
      };

      var handleChange = function handleChange(event) {
        if (!isControlled) {
          resizeTextarea();
        }

        onChange(event);
      };

      {
        React$2.useLayoutEffect(resizeTextarea);
        useWindowResizeListener(resizeTextarea);
      }

      return /*#__PURE__*/React$2.createElement("textarea", _extends$1({}, props, {
        onChange: handleChange,
        ref: ref
      }));
    };

    var index$1 = /* #__PURE__ */React$2.forwardRef(TextareaAutosize);

    var textareaCaret = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* jshint browser: true */

    (function (module) {
    	(function () {

    	// We'll copy the properties below into the mirror div.
    	// Note that some browsers, such as Firefox, do not concatenate properties
    	// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),
    	// so we have to list every single property explicitly.
    	var properties = [
    	  'direction',  // RTL support
    	  'boxSizing',
    	  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
    	  'height',
    	  'overflowX',
    	  'overflowY',  // copy the scrollbar for IE

    	  'borderTopWidth',
    	  'borderRightWidth',
    	  'borderBottomWidth',
    	  'borderLeftWidth',
    	  'borderStyle',

    	  'paddingTop',
    	  'paddingRight',
    	  'paddingBottom',
    	  'paddingLeft',

    	  // https://developer.mozilla.org/en-US/docs/Web/CSS/font
    	  'fontStyle',
    	  'fontVariant',
    	  'fontWeight',
    	  'fontStretch',
    	  'fontSize',
    	  'fontSizeAdjust',
    	  'lineHeight',
    	  'fontFamily',

    	  'textAlign',
    	  'textTransform',
    	  'textIndent',
    	  'textDecoration',  // might not make a difference, but better be safe

    	  'letterSpacing',
    	  'wordSpacing',

    	  'tabSize',
    	  'MozTabSize'

    	];

    	var isBrowser = (typeof window !== 'undefined');
    	var isFirefox = (isBrowser && window.mozInnerScreenX != null);

    	function getCaretCoordinates(element, position, options) {
    	  if (!isBrowser) {
    	    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');
    	  }

    	  var debug = options && options.debug || false;
    	  if (debug) {
    	    var el = document.querySelector('#input-textarea-caret-position-mirror-div');
    	    if (el) el.parentNode.removeChild(el);
    	  }

    	  // The mirror div will replicate the textarea's style
    	  var div = document.createElement('div');
    	  div.id = 'input-textarea-caret-position-mirror-div';
    	  document.body.appendChild(div);

    	  var style = div.style;
    	  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9
    	  var isInput = element.nodeName === 'INPUT';

    	  // Default textarea styles
    	  style.whiteSpace = 'pre-wrap';
    	  if (!isInput)
    	    style.wordWrap = 'break-word';  // only for textarea-s

    	  // Position off-screen
    	  style.position = 'absolute';  // required to return coordinates properly
    	  if (!debug)
    	    style.visibility = 'hidden';  // not 'display: none' because we want rendering

    	  // Transfer the element's properties to the div
    	  properties.forEach(function (prop) {
    	    if (isInput && prop === 'lineHeight') {
    	      // Special case for <input>s because text is rendered centered and line height may be != height
    	      style.lineHeight = computed.height;
    	    } else {
    	      style[prop] = computed[prop];
    	    }
    	  });

    	  if (isFirefox) {
    	    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
    	    if (element.scrollHeight > parseInt(computed.height))
    	      style.overflowY = 'scroll';
    	  } else {
    	    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
    	  }

    	  div.textContent = element.value.substring(0, position);
    	  // The second special handling for input type="text" vs textarea:
    	  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
    	  if (isInput)
    	    div.textContent = div.textContent.replace(/\s/g, '\u00a0');

    	  var span = document.createElement('span');
    	  // Wrapping must be replicated *exactly*, including when a long word gets
    	  // onto the next line, with whitespace at the end of the line before (#7).
    	  // The  *only* reliable way to do that is to copy the *entire* rest of the
    	  // textarea's content into the <span> created at the caret position.
    	  // For inputs, just '.' would be enough, but no need to bother.
    	  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all
    	  div.appendChild(span);

    	  var coordinates = {
    	    top: span.offsetTop + parseInt(computed['borderTopWidth']),
    	    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),
    	    height: parseInt(computed['lineHeight'])
    	  };

    	  if (debug) {
    	    span.style.backgroundColor = '#aaa';
    	  } else {
    	    document.body.removeChild(div);
    	  }

    	  return coordinates;
    	}

    	{
    	  module.exports = getCaretCoordinates;
    	}

    	}());
    } (textareaCaret));

    var getCaretCoordinates = textareaCaret.exports;

    var reactIs$1 = {exports: {}};

    var reactIs_production_min$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @license React
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b$2=Symbol.for("react.element"),c$2=Symbol.for("react.portal"),d$2=Symbol.for("react.fragment"),e$2=Symbol.for("react.strict_mode"),f$2=Symbol.for("react.profiler"),g$3=Symbol.for("react.provider"),h$3=Symbol.for("react.context"),k$2=Symbol.for("react.server_context"),l$2=Symbol.for("react.forward_ref"),m$2=Symbol.for("react.suspense"),n$1=Symbol.for("react.suspense_list"),p$3=Symbol.for("react.memo"),q$2=Symbol.for("react.lazy"),t$2=Symbol.for("react.offscreen"),u$1;u$1=Symbol.for("react.module.reference");
    function v$2(a){if("object"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b$2:switch(a=a.type,a){case d$2:case f$2:case e$2:case m$2:case n$1:return a;default:switch(a=a&&a.$$typeof,a){case k$2:case h$3:case l$2:case q$2:case p$3:case g$3:return a;default:return r}}case c$2:return r}}}reactIs_production_min$1.ContextConsumer=h$3;reactIs_production_min$1.ContextProvider=g$3;reactIs_production_min$1.Element=b$2;reactIs_production_min$1.ForwardRef=l$2;reactIs_production_min$1.Fragment=d$2;reactIs_production_min$1.Lazy=q$2;reactIs_production_min$1.Memo=p$3;reactIs_production_min$1.Portal=c$2;reactIs_production_min$1.Profiler=f$2;reactIs_production_min$1.StrictMode=e$2;reactIs_production_min$1.Suspense=m$2;
    reactIs_production_min$1.SuspenseList=n$1;reactIs_production_min$1.isAsyncMode=function(){return !1};reactIs_production_min$1.isConcurrentMode=function(){return !1};reactIs_production_min$1.isContextConsumer=function(a){return v$2(a)===h$3};reactIs_production_min$1.isContextProvider=function(a){return v$2(a)===g$3};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b$2};reactIs_production_min$1.isForwardRef=function(a){return v$2(a)===l$2};reactIs_production_min$1.isFragment=function(a){return v$2(a)===d$2};reactIs_production_min$1.isLazy=function(a){return v$2(a)===q$2};reactIs_production_min$1.isMemo=function(a){return v$2(a)===p$3};
    reactIs_production_min$1.isPortal=function(a){return v$2(a)===c$2};reactIs_production_min$1.isProfiler=function(a){return v$2(a)===f$2};reactIs_production_min$1.isStrictMode=function(a){return v$2(a)===e$2};reactIs_production_min$1.isSuspense=function(a){return v$2(a)===m$2};reactIs_production_min$1.isSuspenseList=function(a){return v$2(a)===n$1};
    reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d$2||a===f$2||a===e$2||a===m$2||a===n$1||a===t$2||"object"===typeof a&&null!==a&&(a.$$typeof===q$2||a.$$typeof===p$3||a.$$typeof===g$3||a.$$typeof===h$3||a.$$typeof===l$2||a.$$typeof===u$1||void 0!==a.getModuleId)?!0:!1};reactIs_production_min$1.typeOf=v$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {

    	{
    	  module.exports = reactIs_production_min$1;
    	}
    } (reactIs$1));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};const DEFAULT_CARET_POSITION = 'next';
    function defaultScrollToItem(container, item) {
      if (!item) return;
      const itemHeight = parseInt(getComputedStyle(item).getPropertyValue('height'), 10);
      const containerHight = parseInt(getComputedStyle(container).getPropertyValue('height'), 10) - itemHeight;
      const actualScrollTop = container.scrollTop;
      const itemOffsetTop = item.offsetTop;
      if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {
        return;
      }

      // eslint-disable-next-line
      container.scrollTop = itemOffsetTop;
    }
    const errorMessage = message => console.error("RTA: dataProvider fails: ".concat(message, "\n    \nCheck the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues"));
    const triggerPropsCheck = _ref => {
      let {
        trigger
      } = _ref;
      if (!trigger) return Error('Invalid prop trigger. Prop missing.');
      const triggers = Object.entries(trigger);
      for (let i = 0; i < triggers.length; i += 1) {
        const [triggerChar, settings] = triggers[i];
        if (typeof triggerChar !== 'string' || triggerChar.length !== 1) {
          return Error('Invalid prop trigger. Keys of the object has to be string / one character.');
        }

        // $FlowFixMe
        const triggerSetting = settings;
        const {
          callback,
          component,
          dataProvider,
          output
        } = triggerSetting;
        if (!reactIs$1.exports.isValidElementType(component)) {
          return Error('Invalid prop trigger: component should be defined.');
        }
        if (!dataProvider || typeof dataProvider !== 'function') {
          return Error('Invalid prop trigger: dataProvider should be defined.');
        }
        if (output && typeof output !== 'function') {
          return Error('Invalid prop trigger: output should be a function.');
        }
        if (callback && typeof callback !== 'function') {
          return Error('Invalid prop trigger: callback should be a function.');
        }
      }
      return null;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedCommandItem = function (props) {
        var entity = props.entity;
        return (React__default["default"].createElement("div", { className: 'str-chat__slash-command' },
            React__default["default"].createElement("span", { className: 'str-chat__slash-command-header' },
                React__default["default"].createElement("strong", null, entity.name),
                " ",
                entity.args),
            React__default["default"].createElement("br", null),
            React__default["default"].createElement("span", { className: 'str-chat__slash-command-description' }, entity.description)));
    };
    var CommandItem = React__default["default"].memo(UnMemoizedCommandItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt#getting_whole_characters
    var getWholeChar = function (str, i) {
        var code = str.charCodeAt(i);
        if (Number.isNaN(code))
            return '';
        if (code < 0xd800 || code > 0xdfff)
            return str.charAt(i);
        if (0xd800 <= code && code <= 0xdbff) {
            if (str.length <= i + 1) {
                throw 'High surrogate without following low surrogate';
            }
            var next = str.charCodeAt(i + 1);
            if (0xdc00 > next || next > 0xdfff) {
                throw 'High surrogate without following low surrogate';
            }
            return str.charAt(i) + str.charAt(i + 1);
        }
        if (i === 0) {
            throw 'Low surrogate without preceding high surrogate';
        }
        var prev = str.charCodeAt(i - 1);
        if (0xd800 > prev || prev > 0xdbff) {
            throw 'Low surrogate without preceding high surrogate';
        }
        return '';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A round avatar image with fallback to username's first letter
     */
    var Avatar = function (props) {
        var image = props.image, name = props.name, _a = props.onClick, onClick = _a === void 0 ? function () { return undefined; } : _a, _b = props.onMouseOver, onMouseOver = _b === void 0 ? function () { return undefined; } : _b, _c = props.shape, shape = _c === void 0 ? 'circle' : _c, _d = props.size, size = _d === void 0 ? 32 : _d;
        var _e = React$2.useState(false), error = _e[0], setError = _e[1];
        var _f = React$2.useState(false), loaded = _f[0], setLoaded = _f[1];
        React$2.useEffect(function () {
            setError(false);
            setLoaded(false);
        }, [image]);
        var nameStr = (name === null || name === void 0 ? void 0 : name.toString()) || '';
        var initials = getWholeChar(nameStr, 0);
        return (React__default["default"].createElement("div", { className: "str-chat__avatar str-chat__avatar--".concat(shape, " str-chat__message-sender-avatar"), "data-testid": 'avatar', onClick: onClick, onMouseOver: onMouseOver, style: {
                flexBasis: "".concat(size, "px"),
                fontSize: "".concat(size / 2, "px"),
                height: "".concat(size, "px"),
                lineHeight: "".concat(size, "px"),
                width: "".concat(size, "px"),
            }, title: name }, image && !error ? (React__default["default"].createElement("img", { alt: initials, className: "str-chat__avatar-image".concat(loaded ? ' str-chat__avatar-image--loaded' : ''), "data-testid": 'avatar-img', onError: function () { return setError(true); }, onLoad: function () { return setLoaded(true); }, src: image, style: {
                flexBasis: "".concat(size, "px"),
                height: "".concat(size, "px"),
                objectFit: 'cover',
                width: "".concat(size, "px"),
            } })) : (React__default["default"].createElement("div", { className: 'str-chat__avatar-fallback', "data-testid": 'avatar-fallback' }, initials))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * UI component for mentions rendered in suggestion list
     */
    var UnMemoizedUserItem = function (_a) {
        var _b = _a.Avatar, Avatar$1 = _b === void 0 ? Avatar : _b, entity = _a.entity;
        var themeVersion = useChatContext('UserItem').themeVersion;
        var hasEntity = !!Object.keys(entity).length;
        var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
        var renderName = function () {
            if (!hasEntity)
                return null;
            return itemParts.parts.map(function (part, i) {
                var matches = part.toLowerCase() === itemParts.match.toLowerCase();
                return (React__default["default"].createElement("span", { className: clsx({
                        'str-chat__emoji-item--highlight': matches,
                        'str-chat__emoji-item--part': !matches,
                    }), key: "part-".concat(i) }, part));
            });
        };
        return (React__default["default"].createElement("div", { className: 'str-chat__user-item' },
            React__default["default"].createElement(Avatar$1, { image: entity.image, name: entity.name || entity.id, size: 20 }),
            React__default["default"].createElement("span", { className: 'str-chat__user-item--name', "data-testid": 'user-item-name' }, renderName()),
            themeVersion === '2' && React__default["default"].createElement("div", { className: 'str-chat__user-item-at' }, "@")));
    };
    var UserItem = React__default["default"].memo(UnMemoizedUserItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isSafari = function () {
        if (typeof navigator === 'undefined')
            return false;
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};class ReactTextareaAutocomplete extends React__default["default"].Component {
      constructor(_props) {
        var _this;
        super(_props);
        _this = this;
        _defineProperty(this, "getSelectionPosition", () => {
          if (!this.textareaRef) return null;
          return {
            selectionEnd: this.textareaRef.selectionEnd,
            selectionStart: this.textareaRef.selectionStart
          };
        });
        _defineProperty(this, "getSelectedText", () => {
          if (!this.textareaRef) return null;
          const {
            selectionEnd,
            selectionStart
          } = this.textareaRef;
          if (selectionStart === selectionEnd) return null;
          return this.state.value.substr(selectionStart, selectionEnd - selectionStart);
        });
        _defineProperty(this, "setCaretPosition", function () {
          let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          if (!_this.textareaRef) return;
          _this.textareaRef.focus();
          _this.textareaRef.setSelectionRange(position, position);
        });
        _defineProperty(this, "getCaretPosition", () => {
          if (!this.textareaRef) return 0;
          return this.textareaRef.selectionEnd;
        });
        _defineProperty(this, "_defaultShouldSubmit", event => event.key === 'Enter' && !event.shiftKey && !event.nativeEvent.isComposing);
        _defineProperty(this, "_handleKeyDown", event => {
          const {
            shouldSubmit = this._defaultShouldSubmit
          } = this.props;

          // prevent default behaviour when the selection list is rendered
          if ((event.key === 'ArrowUp' || event.key === 'ArrowDown') && this.dropdownRef) event.preventDefault();
          if (shouldSubmit !== null && shouldSubmit !== void 0 && shouldSubmit(event)) return this._onEnter(event);
          if (event.key === ' ') return this._onSpace(event);
          if (event.key === 'Escape') return this._closeAutocomplete();
        });
        _defineProperty(this, "_onEnter", event => {
          if (!this.textareaRef) return;
          const trigger = this.state.currentTrigger;
          if (!trigger || !this.state.data) {
            // trigger a submit
            this._replaceWord();
            if (this.textareaRef) {
              this.textareaRef.selectionEnd = 0;
            }
            this.props.handleSubmit(event);
            this._closeAutocomplete();
          }
        });
        _defineProperty(this, "_onSpace", () => {
          if (!this.props.replaceWord || !this.textareaRef) return;

          // don't change characters if the element doesn't have focus
          const hasFocus = this.textareaRef.matches(':focus');
          if (!hasFocus) return;
          this._replaceWord();
        });
        _defineProperty(this, "_replaceWord", async () => {
          const {
            value
          } = this.state;
          const lastWordRegex = /([^\s]+)(\s*)$/;
          const match = lastWordRegex.exec(value.slice(0, this.getCaretPosition()));
          const lastWord = match && match[1];
          if (!lastWord) return;
          const spaces = match[2];
          const newWord = await this.props.replaceWord(lastWord);
          if (newWord == null) return;
          const textBeforeWord = value.slice(0, this.getCaretPosition() - match[0].length);
          const textAfterCaret = value.slice(this.getCaretPosition(), -1);
          const newText = textBeforeWord + newWord + spaces + textAfterCaret;
          this.setState({
            value: newText
          }, () => {
            // fire onChange event after successful selection
            const e = new CustomEvent('change', {
              bubbles: true
            });
            this.textareaRef.dispatchEvent(e);
            if (this.props.onChange) this.props.onChange(e);
          });
        });
        _defineProperty(this, "_onSelect", newToken => {
          const {
            closeCommandsList,
            closeMentionsList,
            onChange,
            showCommandsList,
            showMentionsList
          } = this.props;
          const {
            currentTrigger: stateTrigger,
            selectionEnd,
            value: textareaValue
          } = this.state;
          const currentTrigger = showCommandsList ? '/' : showMentionsList ? '@' : stateTrigger;
          if (!currentTrigger) return;
          const computeCaretPosition = (position, token, startToken) => {
            switch (position) {
              case 'start':
                return startToken;
              case 'next':
              case 'end':
                return startToken + token.length;
              default:
                if (!Number.isInteger(position)) {
                  throw new Error('RTA: caretPosition should be "start", "next", "end" or number.');
                }
                return position;
            }
          };
          const textToModify = showCommandsList ? '/' : showMentionsList ? '@' : textareaValue.slice(0, selectionEnd);
          const startOfTokenPosition = textToModify.lastIndexOf(currentTrigger);

          // we add space after emoji is selected if a caret position is next
          const newTokenString = newToken.caretPosition === 'next' ? "".concat(newToken.text, " ") : newToken.text;
          const newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);
          const modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;
          const valueToReplace = textareaValue.replace(textToModify, modifiedText);

          // set the new textarea value and after that set the caret back to its position
          this.setState({
            dataLoading: false,
            value: valueToReplace
          }, () => {
            // fire onChange event after successful selection
            const e = new CustomEvent('change', {
              bubbles: true
            });
            this.textareaRef.dispatchEvent(e);
            if (onChange) onChange(e);
            this.setCaretPosition(newCaretPosition);
          });
          this._closeAutocomplete();
          if (showCommandsList) closeCommandsList();
          if (showMentionsList) closeMentionsList();
        });
        _defineProperty(this, "_getItemOnSelect", paramTrigger => {
          const {
            currentTrigger: stateTrigger
          } = this.state;
          const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
          const currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !triggerSettings) return null;
          const {
            callback
          } = triggerSettings;
          if (!callback) return null;
          return item => {
            if (typeof callback !== 'function') {
              throw new Error('Output functor is not defined! You have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
            }
            if (callback) {
              return callback(item, currentTrigger);
            }
            return null;
          };
        });
        _defineProperty(this, "_getTextToReplace", paramTrigger => {
          const {
            actualToken,
            currentTrigger: stateTrigger
          } = this.state;
          const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
          const currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !triggerSettings) return null;
          const {
            output
          } = triggerSettings;
          return item => {
            if (typeof item === 'object' && (!output || typeof output !== 'function')) {
              throw new Error('Output functor is not defined! If you are using items as object you have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');
            }
            if (output) {
              const textToReplace = output(item, currentTrigger);
              if (!textToReplace || typeof textToReplace === 'number') {
                throw new Error("Output functor should return string or object in shape {text: string, caretPosition: string | number}.\nGot \"".concat(String(textToReplace), "\". Check the implementation for trigger \"").concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n\nSee https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.\n"));
              }
              if (typeof textToReplace === 'string') {
                return {
                  caretPosition: DEFAULT_CARET_POSITION,
                  text: textToReplace
                };
              }
              if (!textToReplace.text && currentTrigger !== ':') {
                throw new Error("Output \"text\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \"".concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n"));
              }
              if (!textToReplace.caretPosition) {
                throw new Error("Output \"caretPosition\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \"".concat(currentTrigger, "\" and its token \"").concat(actualToken, "\"\n"));
              }
              return textToReplace;
            }
            if (typeof item !== 'string') {
              throw new Error('Output item should be string\n');
            }
            return {
              caretPosition: DEFAULT_CARET_POSITION,
              text: "".concat(currentTrigger).concat(item).concat(currentTrigger)
            };
          };
        });
        _defineProperty(this, "_getCurrentTriggerSettings", paramTrigger => {
          const {
            currentTrigger: stateTrigger
          } = this.state;
          const currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger) return null;
          return this.props.trigger[currentTrigger];
        });
        _defineProperty(this, "_getValuesFromProvider", () => {
          const {
            actualToken,
            currentTrigger
          } = this.state;
          const triggerSettings = this._getCurrentTriggerSettings();
          if (!currentTrigger || !triggerSettings) return;
          const {
            component,
            dataProvider
          } = triggerSettings;
          if (typeof dataProvider !== 'function') {
            throw new Error('Trigger provider has to be a function!');
          }
          this.setState({
            dataLoading: true
          });

          // Modified: send the full text to support / style commands
          dataProvider(actualToken, this.state.value, (data, token) => {
            // Make sure that the result is still relevant for current query
            if (token !== this.state.actualToken) return;
            if (!Array.isArray(data)) {
              throw new Error('Trigger provider has to provide an array!');
            }
            if (!reactIs$1.exports.isValidElementType(component)) {
              throw new Error('Component should be defined!');
            }

            // throw away if we resolved old trigger
            if (currentTrigger !== this.state.currentTrigger) return;

            // if we haven't resolved any data let's close the autocomplete
            if (!data.length) {
              this._closeAutocomplete();
              return;
            }
            this.setState({
              component,
              data,
              dataLoading: false
            });
          });
        });
        _defineProperty(this, "_getSuggestions", paramTrigger => {
          const {
            currentTrigger: stateTrigger,
            data
          } = this.state;
          const currentTrigger = paramTrigger || stateTrigger;
          if (!currentTrigger || !data || data && !data.length) return null;
          return data;
        });
        _defineProperty(this, "_closeAutocomplete", () => {
          this.setState({
            currentTrigger: null,
            data: null,
            dataLoading: false,
            left: null,
            top: null
          });
        });
        _defineProperty(this, "_cleanUpProps", () => {
          const props = {
            ...this.props
          };
          const notSafe = ['additionalTextareaProps', 'className', 'closeCommandsList', 'closeMentionsList', 'closeOnClickOutside', 'containerClassName', 'containerStyle', 'disableMentions', 'dropdownClassName', 'dropdownStyle', 'grow', 'handleSubmit', 'innerRef', 'itemClassName', 'itemStyle', 'listClassName', 'listStyle', 'loaderClassName', 'loaderStyle', 'loadingComponent', 'minChar', 'movePopupAsYouType', 'onCaretPositionChange', 'onChange', 'ref', 'replaceWord', 'scrollToItem', 'shouldSubmit', 'showCommandsList', 'showMentionsList', 'SuggestionItem', 'SuggestionList', 'trigger', 'value'];

          // eslint-disable-next-line
          for (const prop in props) {
            if (notSafe.includes(prop)) delete props[prop];
          }
          return props;
        });
        _defineProperty(this, "_isCommand", text => {
          if (text[0] !== '/') return false;
          const tokens = text.split(' ');
          return tokens.length <= 1;
        });
        _defineProperty(this, "_changeHandler", e => {
          const {
            minChar,
            movePopupAsYouType,
            onCaretPositionChange,
            onChange,
            trigger
          } = this.props;
          const {
            left,
            top
          } = this.state;
          const textarea = e.target;
          const {
            selectionEnd,
            selectionStart,
            value
          } = textarea;
          if (onChange) {
            e.persist();
            onChange(e);
          }
          if (onCaretPositionChange) onCaretPositionChange(this.getCaretPosition());
          this.setState({
            value
          });
          let currentTrigger;
          let lastToken;
          if (this._isCommand(value)) {
            currentTrigger = '/';
            lastToken = value;
          } else {
            const triggerTokens = Object.keys(trigger).join().replace('/', '');
            const triggerNorWhitespace = "[^\\s".concat(triggerTokens, "]*");
            const regex = new RegExp("(?!^|\\W)?[".concat(triggerTokens, "]").concat(triggerNorWhitespace, "\\s?").concat(triggerNorWhitespace, "$"), 'g');
            const tokenMatch = value.slice(0, selectionEnd).match(regex);
            lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();
            currentTrigger = lastToken && Object.keys(trigger).find(a => a === lastToken[0]) || null;
          }

          /*
           if we lost the trigger token or there is no following character we want to close
           the autocomplete
          */
          if (!lastToken || lastToken.length <= minChar) {
            this._closeAutocomplete();
            return;
          }
          const actualToken = lastToken.slice(1);

          // if trigger is not configured step out from the function, otherwise proceed
          if (!currentTrigger) return;
          if (movePopupAsYouType || top === null && left === null ||
          // if we have single char - trigger it means we want to re-position the autocomplete
          lastToken.length === 1) {
            const {
              left: newLeft,
              top: newTop
            } = getCaretCoordinates(textarea, selectionEnd);
            this.setState({
              // make position relative to textarea
              left: newLeft,
              top: newTop - this.textareaRef.scrollTop || 0
            });
          }
          this.setState({
            actualToken,
            currentTrigger,
            selectionEnd,
            selectionStart
          }, () => {
            try {
              this._getValuesFromProvider();
            } catch (err) {
              errorMessage(err.message);
            }
          });
        });
        _defineProperty(this, "_selectHandler", e => {
          const {
            onCaretPositionChange,
            onSelect
          } = this.props;
          if (onCaretPositionChange) onCaretPositionChange(this.getCaretPosition());
          if (onSelect) {
            e.persist();
            onSelect(e);
          }
        });
        _defineProperty(this, "_onClickAndBlurHandler", e => {
          const {
            closeOnClickOutside,
            onBlur
          } = this.props;

          // If this is a click: e.target is the textarea, and e.relatedTarget is the thing
          // that was actually clicked. If we clicked inside the auto-select dropdown, then
          // that's not a blur, from the auto-select point of view, so then do nothing.
          const el = e.relatedTarget;
          // If this is a blur event in Safari, then relatedTarget is never a dropdown item, but a common parent
          // of textarea and dropdown container. That means that dropdownRef will not contain its parent and the
          // autocomplete will be closed before onclick handler can be invoked selecting an item.
          // It seems that Safari has different implementation determining the relatedTarget node than Chrome and Firefox.
          // Therefore, if focused away in Safari, the dropdown will be kept rendered until pressing Esc or selecting and item from it.
          const focusedAwayInSafari = isSafari() && e.type === 'blur';
          if (this.dropdownRef && el instanceof Node && this.dropdownRef.contains(el) || focusedAwayInSafari) {
            return;
          }
          if (closeOnClickOutside) this._closeAutocomplete();
          if (onBlur) {
            e.persist();
            onBlur(e);
          }
        });
        _defineProperty(this, "_onScrollHandler", () => this._closeAutocomplete());
        _defineProperty(this, "_dropdownScroll", item => {
          const {
            scrollToItem
          } = this.props;
          if (!scrollToItem) return;
          if (scrollToItem === true) {
            defaultScrollToItem(this.dropdownRef, item);
            return;
          }
          if (typeof scrollToItem !== 'function' || scrollToItem.length !== 2) {
            throw new Error('`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.');
          }
          scrollToItem(this.dropdownRef, item);
        });
        _defineProperty(this, "getTriggerProps", () => {
          const {
            showCommandsList,
            showMentionsList,
            trigger
          } = this.props;
          const {
            component,
            currentTrigger,
            selectionEnd,
            value
          } = this.state;
          const selectedItem = this._getItemOnSelect();
          const suggestionData = this._getSuggestions();
          const textToReplace = this._getTextToReplace();
          const triggerProps = {
            component,
            currentTrigger,
            getSelectedItem: selectedItem,
            getTextToReplace: textToReplace,
            selectionEnd,
            value,
            values: suggestionData
          };
          if (showCommandsList && trigger['/'] || showMentionsList && trigger['@']) {
            let currentCommands;
            const getCommands = trigger[showCommandsList ? '/' : '@'].dataProvider;
            getCommands === null || getCommands === void 0 ? void 0 : getCommands('', showCommandsList ? '/' : '@', data => {
              currentCommands = data;
            });
            triggerProps.component = showCommandsList ? CommandItem : UserItem;
            triggerProps.currentTrigger = showCommandsList ? '/' : '@';
            triggerProps.getTextToReplace = this._getTextToReplace(showCommandsList ? '/' : '@');
            triggerProps.getSelectedItem = this._getItemOnSelect(showCommandsList ? '/' : '@');
            triggerProps.selectionEnd = 1;
            triggerProps.value = showCommandsList ? '/' : '@';
            triggerProps.values = currentCommands;
          }
          return triggerProps;
        });
        _defineProperty(this, "setDropdownRef", element => {
          this.dropdownRef = element;
        });
        const {
          loadingComponent,
          trigger: _trigger,
          value: _value
        } = this.props;

        // TODO: it would be better to have the parent control state...
        // if (value) this.state.value = value;

        if (!loadingComponent) {
          throw new Error('RTA: loadingComponent is not defined');
        }
        if (!_trigger) {
          throw new Error('RTA: trigger is not defined');
        }
        this.state = {
          actualToken: '',
          component: null,
          currentTrigger: null,
          data: null,
          dataLoading: false,
          isComposing: false,
          left: null,
          selectionEnd: 0,
          selectionStart: 0,
          top: null,
          value: _value || ''
        };
      }

      // FIXME: unused method

      // FIXME: unused method

      /**
       * isComposing prevents double submissions in Korean and other languages.
       * starting point for a read:
       * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing
       * In the long term, the fix should happen by handling keypress, but changing this has unknown implications.
       * @param event React.KeyboardEvent
       */

      /**
       * setup to emulate the UNSAFE_componentWillReceiveProps
       */
      static getDerivedStateFromProps(props, state) {
        if (props.value !== state.propsValue || !state.value) {
          return {
            propsValue: props.value,
            value: props.value
          };
        } else {
          return null;
        }
      }
      /**
       * Close autocomplete, also clean up trigger (to avoid slow promises)
       */

      // The textarea itself is outside the auto-select dropdown.

      renderSuggestionListContainer() {
        const {
          disableMentions,
          dropdownClassName,
          dropdownStyle,
          itemClassName,
          itemStyle,
          listClassName,
          SuggestionItem,
          SuggestionList = List$1
        } = this.props;
        const {
          isComposing
        } = this.state;
        const triggerProps = this.getTriggerProps();
        if (isComposing || !triggerProps.values || !triggerProps.currentTrigger || disableMentions && triggerProps.currentTrigger === '@') return null;
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: clsx('rta__autocomplete', 'str-chat__suggestion-list-container', dropdownClassName),
          ref: this.setDropdownRef,
          style: dropdownStyle
        }, /*#__PURE__*/React__default["default"].createElement(SuggestionList, _extends$2({
          className: clsx('str-chat__suggestion-list', listClassName),
          dropdownScroll: this._dropdownScroll,
          itemClassName: clsx('str-chat__suggestion-list-item', itemClassName),
          itemStyle: itemStyle,
          onSelect: this._onSelect,
          SuggestionItem: SuggestionItem
        }, triggerProps)));
      }
      render() {
        const {
          className,
          containerClassName,
          containerStyle,
          style
        } = this.props;
        const {
          onBlur,
          onChange,
          onClick,
          onFocus,
          onKeyDown,
          onScroll,
          onSelect,
          ...restAdditionalTextareaProps
        } = this.props.additionalTextareaProps || {};
        let {
          maxRows
        } = this.props;
        const {
          dataLoading,
          value
        } = this.state;
        if (!this.props.grow) maxRows = 1;

        // By setting defaultValue to undefined, avoid error:
        // ForwardRef(TextareaAutosize) contains a textarea with both value and defaultValue props.
        // Textarea elements must be either controlled or uncontrolled

        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: clsx('rta', containerClassName, {
            'rta--loading': dataLoading
          }),
          style: containerStyle
        }, this.renderSuggestionListContainer(), /*#__PURE__*/React__default["default"].createElement(index$1, _extends$2({
          "data-testid": "message-input"
        }, this._cleanUpProps(), {
          className: clsx('rta__textarea', className),
          maxRows: maxRows,
          onBlur: e => {
            this._onClickAndBlurHandler(e);
            onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
          },
          onChange: e => {
            this._changeHandler(e);
            onChange === null || onChange === void 0 ? void 0 : onChange(e);
          },
          onClick: e => {
            this._onClickAndBlurHandler(e);
            onClick === null || onClick === void 0 ? void 0 : onClick(e);
          },
          onCompositionEnd: () => this.setState(pv => ({
            ...pv,
            isComposing: false
          })),
          onCompositionStart: () => this.setState(pv => ({
            ...pv,
            isComposing: true
          })),
          onFocus: e => {
            var _this$props$onFocus, _this$props;
            (_this$props$onFocus = (_this$props = this.props).onFocus) === null || _this$props$onFocus === void 0 ? void 0 : _this$props$onFocus.call(_this$props, e);
            onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
          },
          onKeyDown: e => {
            this._handleKeyDown(e);
            onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
          },
          onScroll: e => {
            this._onScrollHandler(e);
            onScroll === null || onScroll === void 0 ? void 0 : onScroll(e);
          },
          onSelect: e => {
            this._selectHandler(e);
            onSelect === null || onSelect === void 0 ? void 0 : onSelect(e);
          },
          ref: ref => {
            var _this$props2;
            (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.innerRef(ref);
            this.textareaRef = ref;
          },
          style: style,
          value: value
        }, restAdditionalTextareaProps, {
          defaultValue: undefined
        })));
      }
    }
    _defineProperty(ReactTextareaAutocomplete, "defaultProps", {
      closeOnClickOutside: true,
      maxRows: 10,
      minChar: 1,
      movePopupAsYouType: false,
      scrollToItem: true,
      value: ''
    });
    ReactTextareaAutocomplete.propTypes = {
      className: propTypes$1.exports.string,
      closeOnClickOutside: propTypes$1.exports.bool,
      containerClassName: propTypes$1.exports.string,
      containerStyle: propTypes$1.exports.object,
      disableMentions: propTypes$1.exports.bool,
      dropdownClassName: propTypes$1.exports.string,
      dropdownStyle: propTypes$1.exports.object,
      itemClassName: propTypes$1.exports.string,
      itemStyle: propTypes$1.exports.object,
      listClassName: propTypes$1.exports.string,
      listStyle: propTypes$1.exports.object,
      loaderClassName: propTypes$1.exports.string,
      loaderStyle: propTypes$1.exports.object,
      loadingComponent: propTypes$1.exports.elementType,
      minChar: propTypes$1.exports.number,
      onBlur: propTypes$1.exports.func,
      onCaretPositionChange: propTypes$1.exports.func,
      onChange: propTypes$1.exports.func,
      onSelect: propTypes$1.exports.func,
      shouldSubmit: propTypes$1.exports.func,
      style: propTypes$1.exports.object,
      SuggestionList: propTypes$1.exports.elementType,
      trigger: triggerPropsCheck,
      value: propTypes$1.exports.string
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag$2 = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim$1 = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary$1 = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal$1 = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt$1 = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$2 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf$2 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$2 = freeGlobal$2 || freeSelf$2 || Function('return this')();

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$2 = objectProto$2.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max,
        nativeMin$1 = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now$1 = function() {
      return root$2.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$2(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber$1(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax$1(toNumber$1(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin$1(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now$1();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now$1());
      }

      function debounced() {
        var time = now$1(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject$1(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$2(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$2(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$2(value) && objectToString$2.call(value) == symbolTag$2);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$1(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$2(value)) {
        return NAN$1;
      }
      if (isObject$1(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$1(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim$1, '');
      var isBinary = reIsBinary$1.test(value);
      return (isBinary || reIsOctal$1.test(value))
        ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex$1.test(value) ? NAN$1 : +value);
    }

    var lodash_debounce = debounce$2;

    var lodash_defaultsdeep = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    	/** Used as the size to enable large array optimizations. */
    	var LARGE_ARRAY_SIZE = 200;

    	/** Used to stand-in for `undefined` hash values. */
    	var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	/** Used to detect hot functions by number of calls within a span of milliseconds. */
    	var HOT_COUNT = 800,
    	    HOT_SPAN = 16;

    	/** Used as references for various `Number` constants. */
    	var MAX_SAFE_INTEGER = 9007199254740991;

    	/** `Object#toString` result references. */
    	var argsTag = '[object Arguments]',
    	    arrayTag = '[object Array]',
    	    asyncTag = '[object AsyncFunction]',
    	    boolTag = '[object Boolean]',
    	    dateTag = '[object Date]',
    	    errorTag = '[object Error]',
    	    funcTag = '[object Function]',
    	    genTag = '[object GeneratorFunction]',
    	    mapTag = '[object Map]',
    	    numberTag = '[object Number]',
    	    nullTag = '[object Null]',
    	    objectTag = '[object Object]',
    	    proxyTag = '[object Proxy]',
    	    regexpTag = '[object RegExp]',
    	    setTag = '[object Set]',
    	    stringTag = '[object String]',
    	    undefinedTag = '[object Undefined]',
    	    weakMapTag = '[object WeakMap]';

    	var arrayBufferTag = '[object ArrayBuffer]',
    	    dataViewTag = '[object DataView]',
    	    float32Tag = '[object Float32Array]',
    	    float64Tag = '[object Float64Array]',
    	    int8Tag = '[object Int8Array]',
    	    int16Tag = '[object Int16Array]',
    	    int32Tag = '[object Int32Array]',
    	    uint8Tag = '[object Uint8Array]',
    	    uint8ClampedTag = '[object Uint8ClampedArray]',
    	    uint16Tag = '[object Uint16Array]',
    	    uint32Tag = '[object Uint32Array]';

    	/**
    	 * Used to match `RegExp`
    	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	 */
    	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    	/** Used to detect host constructors (Safari). */
    	var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	/** Used to detect unsigned integer values. */
    	var reIsUint = /^(?:0|[1-9]\d*)$/;

    	/** Used to identify `toStringTag` values of typed arrays. */
    	var typedArrayTags = {};
    	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	typedArrayTags[uint32Tag] = true;
    	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	typedArrayTags[weakMapTag] = false;

    	/** Detect free variable `global` from Node.js. */
    	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	/** Detect free variable `self`. */
    	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	/** Used as a reference to the global object. */
    	var root = freeGlobal || freeSelf || Function('return this')();

    	/** Detect free variable `exports`. */
    	var freeExports = exports && !exports.nodeType && exports;

    	/** Detect free variable `module`. */
    	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	/** Detect the popular CommonJS extension `module.exports`. */
    	var moduleExports = freeModule && freeModule.exports === freeExports;

    	/** Detect free variable `process` from Node.js. */
    	var freeProcess = moduleExports && freeGlobal.process;

    	/** Used to access faster Node.js helpers. */
    	var nodeUtil = (function() {
    	  try {
    	    // Use `util.types` for Node.js 10+.
    	    var types = freeModule && freeModule.require && freeModule.require('util').types;

    	    if (types) {
    	      return types;
    	    }

    	    // Legacy `process.binding('util')` for Node.js < 10.
    	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	  } catch (e) {}
    	}());

    	/* Node.js helper references. */
    	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	/**
    	 * A faster alternative to `Function#apply`, this function invokes `func`
    	 * with the `this` binding of `thisArg` and the arguments of `args`.
    	 *
    	 * @private
    	 * @param {Function} func The function to invoke.
    	 * @param {*} thisArg The `this` binding of `func`.
    	 * @param {Array} args The arguments to invoke `func` with.
    	 * @returns {*} Returns the result of `func`.
    	 */
    	function apply(func, thisArg, args) {
    	  switch (args.length) {
    	    case 0: return func.call(thisArg);
    	    case 1: return func.call(thisArg, args[0]);
    	    case 2: return func.call(thisArg, args[0], args[1]);
    	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
    	  }
    	  return func.apply(thisArg, args);
    	}

    	/**
    	 * The base implementation of `_.times` without support for iteratee shorthands
    	 * or max array length checks.
    	 *
    	 * @private
    	 * @param {number} n The number of times to invoke `iteratee`.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @returns {Array} Returns the array of results.
    	 */
    	function baseTimes(n, iteratee) {
    	  var index = -1,
    	      result = Array(n);

    	  while (++index < n) {
    	    result[index] = iteratee(index);
    	  }
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.unary` without support for storing metadata.
    	 *
    	 * @private
    	 * @param {Function} func The function to cap arguments for.
    	 * @returns {Function} Returns the new capped function.
    	 */
    	function baseUnary(func) {
    	  return function(value) {
    	    return func(value);
    	  };
    	}

    	/**
    	 * Gets the value at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} [object] The object to query.
    	 * @param {string} key The key of the property to get.
    	 * @returns {*} Returns the property value.
    	 */
    	function getValue(object, key) {
    	  return object == null ? undefined : object[key];
    	}

    	/**
    	 * Creates a unary function that invokes `func` with its argument transformed.
    	 *
    	 * @private
    	 * @param {Function} func The function to wrap.
    	 * @param {Function} transform The argument transform.
    	 * @returns {Function} Returns the new function.
    	 */
    	function overArg(func, transform) {
    	  return function(arg) {
    	    return func(transform(arg));
    	  };
    	}

    	/** Used for built-in method references. */
    	var arrayProto = Array.prototype,
    	    funcProto = Function.prototype,
    	    objectProto = Object.prototype;

    	/** Used to detect overreaching core-js shims. */
    	var coreJsData = root['__core-js_shared__'];

    	/** Used to resolve the decompiled source of functions. */
    	var funcToString = funcProto.toString;

    	/** Used to check objects for own properties. */
    	var hasOwnProperty = objectProto.hasOwnProperty;

    	/** Used to detect methods masquerading as native. */
    	var maskSrcKey = (function() {
    	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	  return uid ? ('Symbol(src)_1.' + uid) : '';
    	}());

    	/**
    	 * Used to resolve the
    	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	 * of values.
    	 */
    	var nativeObjectToString = objectProto.toString;

    	/** Used to infer the `Object` constructor. */
    	var objectCtorString = funcToString.call(Object);

    	/** Used to detect if a method is native. */
    	var reIsNative = RegExp('^' +
    	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	);

    	/** Built-in value references. */
    	var Buffer = moduleExports ? root.Buffer : undefined,
    	    Symbol = root.Symbol,
    	    Uint8Array = root.Uint8Array,
    	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
    	    getPrototype = overArg(Object.getPrototypeOf, Object),
    	    objectCreate = Object.create,
    	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	    splice = arrayProto.splice,
    	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    	var defineProperty = (function() {
    	  try {
    	    var func = getNative(Object, 'defineProperty');
    	    func({}, '', {});
    	    return func;
    	  } catch (e) {}
    	}());

    	/* Built-in method references for those with the same name as other `lodash` methods. */
    	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    	    nativeMax = Math.max,
    	    nativeNow = Date.now;

    	/* Built-in method references that are verified to be native. */
    	var Map = getNative(root, 'Map'),
    	    nativeCreate = getNative(Object, 'create');

    	/**
    	 * The base implementation of `_.create` without support for assigning
    	 * properties to the created object.
    	 *
    	 * @private
    	 * @param {Object} proto The object to inherit from.
    	 * @returns {Object} Returns the new object.
    	 */
    	var baseCreate = (function() {
    	  function object() {}
    	  return function(proto) {
    	    if (!isObject(proto)) {
    	      return {};
    	    }
    	    if (objectCreate) {
    	      return objectCreate(proto);
    	    }
    	    object.prototype = proto;
    	    var result = new object;
    	    object.prototype = undefined;
    	    return result;
    	  };
    	}());

    	/**
    	 * Creates a hash object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Hash(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the hash.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Hash
    	 */
    	function hashClear() {
    	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the hash.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Hash
    	 * @param {Object} hash The hash to modify.
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function hashDelete(key) {
    	  var result = this.has(key) && delete this.__data__[key];
    	  this.size -= result ? 1 : 0;
    	  return result;
    	}

    	/**
    	 * Gets the hash value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function hashGet(key) {
    	  var data = this.__data__;
    	  if (nativeCreate) {
    	    var result = data[key];
    	    return result === HASH_UNDEFINED ? undefined : result;
    	  }
    	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
    	}

    	/**
    	 * Checks if a hash value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Hash
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function hashHas(key) {
    	  var data = this.__data__;
    	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    	}

    	/**
    	 * Sets the hash `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Hash
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the hash instance.
    	 */
    	function hashSet(key, value) {
    	  var data = this.__data__;
    	  this.size += this.has(key) ? 0 : 1;
    	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    	  return this;
    	}

    	// Add methods to `Hash`.
    	Hash.prototype.clear = hashClear;
    	Hash.prototype['delete'] = hashDelete;
    	Hash.prototype.get = hashGet;
    	Hash.prototype.has = hashHas;
    	Hash.prototype.set = hashSet;

    	/**
    	 * Creates an list cache object.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function ListCache(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the list cache.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf ListCache
    	 */
    	function listCacheClear() {
    	  this.__data__ = [];
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the list cache.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function listCacheDelete(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    return false;
    	  }
    	  var lastIndex = data.length - 1;
    	  if (index == lastIndex) {
    	    data.pop();
    	  } else {
    	    splice.call(data, index, 1);
    	  }
    	  --this.size;
    	  return true;
    	}

    	/**
    	 * Gets the list cache value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function listCacheGet(key) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  return index < 0 ? undefined : data[index][1];
    	}

    	/**
    	 * Checks if a list cache value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf ListCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function listCacheHas(key) {
    	  return assocIndexOf(this.__data__, key) > -1;
    	}

    	/**
    	 * Sets the list cache `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf ListCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the list cache instance.
    	 */
    	function listCacheSet(key, value) {
    	  var data = this.__data__,
    	      index = assocIndexOf(data, key);

    	  if (index < 0) {
    	    ++this.size;
    	    data.push([key, value]);
    	  } else {
    	    data[index][1] = value;
    	  }
    	  return this;
    	}

    	// Add methods to `ListCache`.
    	ListCache.prototype.clear = listCacheClear;
    	ListCache.prototype['delete'] = listCacheDelete;
    	ListCache.prototype.get = listCacheGet;
    	ListCache.prototype.has = listCacheHas;
    	ListCache.prototype.set = listCacheSet;

    	/**
    	 * Creates a map cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function MapCache(entries) {
    	  var index = -1,
    	      length = entries == null ? 0 : entries.length;

    	  this.clear();
    	  while (++index < length) {
    	    var entry = entries[index];
    	    this.set(entry[0], entry[1]);
    	  }
    	}

    	/**
    	 * Removes all key-value entries from the map.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf MapCache
    	 */
    	function mapCacheClear() {
    	  this.size = 0;
    	  this.__data__ = {
    	    'hash': new Hash,
    	    'map': new (Map || ListCache),
    	    'string': new Hash
    	  };
    	}

    	/**
    	 * Removes `key` and its value from the map.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function mapCacheDelete(key) {
    	  var result = getMapData(this, key)['delete'](key);
    	  this.size -= result ? 1 : 0;
    	  return result;
    	}

    	/**
    	 * Gets the map value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function mapCacheGet(key) {
    	  return getMapData(this, key).get(key);
    	}

    	/**
    	 * Checks if a map value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf MapCache
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function mapCacheHas(key) {
    	  return getMapData(this, key).has(key);
    	}

    	/**
    	 * Sets the map `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf MapCache
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the map cache instance.
    	 */
    	function mapCacheSet(key, value) {
    	  var data = getMapData(this, key),
    	      size = data.size;

    	  data.set(key, value);
    	  this.size += data.size == size ? 0 : 1;
    	  return this;
    	}

    	// Add methods to `MapCache`.
    	MapCache.prototype.clear = mapCacheClear;
    	MapCache.prototype['delete'] = mapCacheDelete;
    	MapCache.prototype.get = mapCacheGet;
    	MapCache.prototype.has = mapCacheHas;
    	MapCache.prototype.set = mapCacheSet;

    	/**
    	 * Creates a stack cache object to store key-value pairs.
    	 *
    	 * @private
    	 * @constructor
    	 * @param {Array} [entries] The key-value pairs to cache.
    	 */
    	function Stack(entries) {
    	  var data = this.__data__ = new ListCache(entries);
    	  this.size = data.size;
    	}

    	/**
    	 * Removes all key-value entries from the stack.
    	 *
    	 * @private
    	 * @name clear
    	 * @memberOf Stack
    	 */
    	function stackClear() {
    	  this.__data__ = new ListCache;
    	  this.size = 0;
    	}

    	/**
    	 * Removes `key` and its value from the stack.
    	 *
    	 * @private
    	 * @name delete
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to remove.
    	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	 */
    	function stackDelete(key) {
    	  var data = this.__data__,
    	      result = data['delete'](key);

    	  this.size = data.size;
    	  return result;
    	}

    	/**
    	 * Gets the stack value for `key`.
    	 *
    	 * @private
    	 * @name get
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to get.
    	 * @returns {*} Returns the entry value.
    	 */
    	function stackGet(key) {
    	  return this.__data__.get(key);
    	}

    	/**
    	 * Checks if a stack value for `key` exists.
    	 *
    	 * @private
    	 * @name has
    	 * @memberOf Stack
    	 * @param {string} key The key of the entry to check.
    	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	 */
    	function stackHas(key) {
    	  return this.__data__.has(key);
    	}

    	/**
    	 * Sets the stack `key` to `value`.
    	 *
    	 * @private
    	 * @name set
    	 * @memberOf Stack
    	 * @param {string} key The key of the value to set.
    	 * @param {*} value The value to set.
    	 * @returns {Object} Returns the stack cache instance.
    	 */
    	function stackSet(key, value) {
    	  var data = this.__data__;
    	  if (data instanceof ListCache) {
    	    var pairs = data.__data__;
    	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	      pairs.push([key, value]);
    	      this.size = ++data.size;
    	      return this;
    	    }
    	    data = this.__data__ = new MapCache(pairs);
    	  }
    	  data.set(key, value);
    	  this.size = data.size;
    	  return this;
    	}

    	// Add methods to `Stack`.
    	Stack.prototype.clear = stackClear;
    	Stack.prototype['delete'] = stackDelete;
    	Stack.prototype.get = stackGet;
    	Stack.prototype.has = stackHas;
    	Stack.prototype.set = stackSet;

    	/**
    	 * Creates an array of the enumerable property names of the array-like `value`.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @param {boolean} inherited Specify returning inherited property names.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function arrayLikeKeys(value, inherited) {
    	  var isArr = isArray(value),
    	      isArg = !isArr && isArguments(value),
    	      isBuff = !isArr && !isArg && isBuffer(value),
    	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    	      skipIndexes = isArr || isArg || isBuff || isType,
    	      result = skipIndexes ? baseTimes(value.length, String) : [],
    	      length = result.length;

    	  for (var key in value) {
    	    if ((inherited || hasOwnProperty.call(value, key)) &&
    	        !(skipIndexes && (
    	           // Safari 9 has enumerable `arguments.length` in strict mode.
    	           key == 'length' ||
    	           // Node.js 0.10 has enumerable non-index properties on buffers.
    	           (isBuff && (key == 'offset' || key == 'parent')) ||
    	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
    	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
    	           // Skip index properties.
    	           isIndex(key, length)
    	        ))) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * This function is like `assignValue` except that it doesn't assign
    	 * `undefined` values.
    	 *
    	 * @private
    	 * @param {Object} object The object to modify.
    	 * @param {string} key The key of the property to assign.
    	 * @param {*} value The value to assign.
    	 */
    	function assignMergeValue(object, key, value) {
    	  if ((value !== undefined && !eq(object[key], value)) ||
    	      (value === undefined && !(key in object))) {
    	    baseAssignValue(object, key, value);
    	  }
    	}

    	/**
    	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * for equality comparisons.
    	 *
    	 * @private
    	 * @param {Object} object The object to modify.
    	 * @param {string} key The key of the property to assign.
    	 * @param {*} value The value to assign.
    	 */
    	function assignValue(object, key, value) {
    	  var objValue = object[key];
    	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	      (value === undefined && !(key in object))) {
    	    baseAssignValue(object, key, value);
    	  }
    	}

    	/**
    	 * Gets the index at which the `key` is found in `array` of key-value pairs.
    	 *
    	 * @private
    	 * @param {Array} array The array to inspect.
    	 * @param {*} key The key to search for.
    	 * @returns {number} Returns the index of the matched value, else `-1`.
    	 */
    	function assocIndexOf(array, key) {
    	  var length = array.length;
    	  while (length--) {
    	    if (eq(array[length][0], key)) {
    	      return length;
    	    }
    	  }
    	  return -1;
    	}

    	/**
    	 * The base implementation of `assignValue` and `assignMergeValue` without
    	 * value checks.
    	 *
    	 * @private
    	 * @param {Object} object The object to modify.
    	 * @param {string} key The key of the property to assign.
    	 * @param {*} value The value to assign.
    	 */
    	function baseAssignValue(object, key, value) {
    	  if (key == '__proto__' && defineProperty) {
    	    defineProperty(object, key, {
    	      'configurable': true,
    	      'enumerable': true,
    	      'value': value,
    	      'writable': true
    	    });
    	  } else {
    	    object[key] = value;
    	  }
    	}

    	/**
    	 * The base implementation of `baseForOwn` which iterates over `object`
    	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
    	 * Iteratee functions may exit iteration early by explicitly returning `false`.
    	 *
    	 * @private
    	 * @param {Object} object The object to iterate over.
    	 * @param {Function} iteratee The function invoked per iteration.
    	 * @param {Function} keysFunc The function to get the keys of `object`.
    	 * @returns {Object} Returns `object`.
    	 */
    	var baseFor = createBaseFor();

    	/**
    	 * The base implementation of `getTag` without fallbacks for buggy environments.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the `toStringTag`.
    	 */
    	function baseGetTag(value) {
    	  if (value == null) {
    	    return value === undefined ? undefinedTag : nullTag;
    	  }
    	  return (symToStringTag && symToStringTag in Object(value))
    	    ? getRawTag(value)
    	    : objectToString(value);
    	}

    	/**
    	 * The base implementation of `_.isArguments`.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 */
    	function baseIsArguments(value) {
    	  return isObjectLike(value) && baseGetTag(value) == argsTag;
    	}

    	/**
    	 * The base implementation of `_.isNative` without bad shim checks.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a native function,
    	 *  else `false`.
    	 */
    	function baseIsNative(value) {
    	  if (!isObject(value) || isMasked(value)) {
    	    return false;
    	  }
    	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    	  return pattern.test(toSource(value));
    	}

    	/**
    	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 */
    	function baseIsTypedArray(value) {
    	  return isObjectLike(value) &&
    	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    	}

    	/**
    	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function baseKeysIn(object) {
    	  if (!isObject(object)) {
    	    return nativeKeysIn(object);
    	  }
    	  var isProto = isPrototype(object),
    	      result = [];

    	  for (var key in object) {
    	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * The base implementation of `_.merge` without support for multiple sources.
    	 *
    	 * @private
    	 * @param {Object} object The destination object.
    	 * @param {Object} source The source object.
    	 * @param {number} srcIndex The index of `source`.
    	 * @param {Function} [customizer] The function to customize merged values.
    	 * @param {Object} [stack] Tracks traversed source values and their merged
    	 *  counterparts.
    	 */
    	function baseMerge(object, source, srcIndex, customizer, stack) {
    	  if (object === source) {
    	    return;
    	  }
    	  baseFor(source, function(srcValue, key) {
    	    stack || (stack = new Stack);
    	    if (isObject(srcValue)) {
    	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    	    }
    	    else {
    	      var newValue = customizer
    	        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
    	        : undefined;

    	      if (newValue === undefined) {
    	        newValue = srcValue;
    	      }
    	      assignMergeValue(object, key, newValue);
    	    }
    	  }, keysIn);
    	}

    	/**
    	 * A specialized version of `baseMerge` for arrays and objects which performs
    	 * deep merges and tracks traversed objects enabling objects with circular
    	 * references to be merged.
    	 *
    	 * @private
    	 * @param {Object} object The destination object.
    	 * @param {Object} source The source object.
    	 * @param {string} key The key of the value to merge.
    	 * @param {number} srcIndex The index of `source`.
    	 * @param {Function} mergeFunc The function to merge values.
    	 * @param {Function} [customizer] The function to customize assigned values.
    	 * @param {Object} [stack] Tracks traversed source values and their merged
    	 *  counterparts.
    	 */
    	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    	  var objValue = safeGet(object, key),
    	      srcValue = safeGet(source, key),
    	      stacked = stack.get(srcValue);

    	  if (stacked) {
    	    assignMergeValue(object, key, stacked);
    	    return;
    	  }
    	  var newValue = customizer
    	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    	    : undefined;

    	  var isCommon = newValue === undefined;

    	  if (isCommon) {
    	    var isArr = isArray(srcValue),
    	        isBuff = !isArr && isBuffer(srcValue),
    	        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    	    newValue = srcValue;
    	    if (isArr || isBuff || isTyped) {
    	      if (isArray(objValue)) {
    	        newValue = objValue;
    	      }
    	      else if (isArrayLikeObject(objValue)) {
    	        newValue = copyArray(objValue);
    	      }
    	      else if (isBuff) {
    	        isCommon = false;
    	        newValue = cloneBuffer(srcValue, true);
    	      }
    	      else if (isTyped) {
    	        isCommon = false;
    	        newValue = cloneTypedArray(srcValue, true);
    	      }
    	      else {
    	        newValue = [];
    	      }
    	    }
    	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
    	      newValue = objValue;
    	      if (isArguments(objValue)) {
    	        newValue = toPlainObject(objValue);
    	      }
    	      else if (!isObject(objValue) || isFunction(objValue)) {
    	        newValue = initCloneObject(srcValue);
    	      }
    	    }
    	    else {
    	      isCommon = false;
    	    }
    	  }
    	  if (isCommon) {
    	    // Recursively merge objects and arrays (susceptible to call stack limits).
    	    stack.set(srcValue, newValue);
    	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    	    stack['delete'](srcValue);
    	  }
    	  assignMergeValue(object, key, newValue);
    	}

    	/**
    	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
    	 *
    	 * @private
    	 * @param {Function} func The function to apply a rest parameter to.
    	 * @param {number} [start=func.length-1] The start position of the rest parameter.
    	 * @returns {Function} Returns the new function.
    	 */
    	function baseRest(func, start) {
    	  return setToString(overRest(func, start, identity), func + '');
    	}

    	/**
    	 * The base implementation of `setToString` without support for hot loop shorting.
    	 *
    	 * @private
    	 * @param {Function} func The function to modify.
    	 * @param {Function} string The `toString` result.
    	 * @returns {Function} Returns `func`.
    	 */
    	var baseSetToString = !defineProperty ? identity : function(func, string) {
    	  return defineProperty(func, 'toString', {
    	    'configurable': true,
    	    'enumerable': false,
    	    'value': constant(string),
    	    'writable': true
    	  });
    	};

    	/**
    	 * Creates a clone of  `buffer`.
    	 *
    	 * @private
    	 * @param {Buffer} buffer The buffer to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Buffer} Returns the cloned buffer.
    	 */
    	function cloneBuffer(buffer, isDeep) {
    	  if (isDeep) {
    	    return buffer.slice();
    	  }
    	  var length = buffer.length,
    	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    	  buffer.copy(result);
    	  return result;
    	}

    	/**
    	 * Creates a clone of `arrayBuffer`.
    	 *
    	 * @private
    	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	 * @returns {ArrayBuffer} Returns the cloned array buffer.
    	 */
    	function cloneArrayBuffer(arrayBuffer) {
    	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	  return result;
    	}

    	/**
    	 * Creates a clone of `typedArray`.
    	 *
    	 * @private
    	 * @param {Object} typedArray The typed array to clone.
    	 * @param {boolean} [isDeep] Specify a deep clone.
    	 * @returns {Object} Returns the cloned typed array.
    	 */
    	function cloneTypedArray(typedArray, isDeep) {
    	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	}

    	/**
    	 * Copies the values of `source` to `array`.
    	 *
    	 * @private
    	 * @param {Array} source The array to copy values from.
    	 * @param {Array} [array=[]] The array to copy values to.
    	 * @returns {Array} Returns `array`.
    	 */
    	function copyArray(source, array) {
    	  var index = -1,
    	      length = source.length;

    	  array || (array = Array(length));
    	  while (++index < length) {
    	    array[index] = source[index];
    	  }
    	  return array;
    	}

    	/**
    	 * Copies properties of `source` to `object`.
    	 *
    	 * @private
    	 * @param {Object} source The object to copy properties from.
    	 * @param {Array} props The property identifiers to copy.
    	 * @param {Object} [object={}] The object to copy properties to.
    	 * @param {Function} [customizer] The function to customize copied values.
    	 * @returns {Object} Returns `object`.
    	 */
    	function copyObject(source, props, object, customizer) {
    	  var isNew = !object;
    	  object || (object = {});

    	  var index = -1,
    	      length = props.length;

    	  while (++index < length) {
    	    var key = props[index];

    	    var newValue = customizer
    	      ? customizer(object[key], source[key], key, object, source)
    	      : undefined;

    	    if (newValue === undefined) {
    	      newValue = source[key];
    	    }
    	    if (isNew) {
    	      baseAssignValue(object, key, newValue);
    	    } else {
    	      assignValue(object, key, newValue);
    	    }
    	  }
    	  return object;
    	}

    	/**
    	 * Creates a function like `_.assign`.
    	 *
    	 * @private
    	 * @param {Function} assigner The function to assign values.
    	 * @returns {Function} Returns the new assigner function.
    	 */
    	function createAssigner(assigner) {
    	  return baseRest(function(object, sources) {
    	    var index = -1,
    	        length = sources.length,
    	        customizer = length > 1 ? sources[length - 1] : undefined,
    	        guard = length > 2 ? sources[2] : undefined;

    	    customizer = (assigner.length > 3 && typeof customizer == 'function')
    	      ? (length--, customizer)
    	      : undefined;

    	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	      customizer = length < 3 ? undefined : customizer;
    	      length = 1;
    	    }
    	    object = Object(object);
    	    while (++index < length) {
    	      var source = sources[index];
    	      if (source) {
    	        assigner(object, source, index, customizer);
    	      }
    	    }
    	    return object;
    	  });
    	}

    	/**
    	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
    	 *
    	 * @private
    	 * @param {boolean} [fromRight] Specify iterating from right to left.
    	 * @returns {Function} Returns the new base function.
    	 */
    	function createBaseFor(fromRight) {
    	  return function(object, iteratee, keysFunc) {
    	    var index = -1,
    	        iterable = Object(object),
    	        props = keysFunc(object),
    	        length = props.length;

    	    while (length--) {
    	      var key = props[fromRight ? length : ++index];
    	      if (iteratee(iterable[key], key, iterable) === false) {
    	        break;
    	      }
    	    }
    	    return object;
    	  };
    	}

    	/**
    	 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
    	 * objects into destination objects that are passed thru.
    	 *
    	 * @private
    	 * @param {*} objValue The destination value.
    	 * @param {*} srcValue The source value.
    	 * @param {string} key The key of the property to merge.
    	 * @param {Object} object The parent object of `objValue`.
    	 * @param {Object} source The parent object of `srcValue`.
    	 * @param {Object} [stack] Tracks traversed source values and their merged
    	 *  counterparts.
    	 * @returns {*} Returns the value to assign.
    	 */
    	function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    	  if (isObject(objValue) && isObject(srcValue)) {
    	    // Recursively merge objects and arrays (susceptible to call stack limits).
    	    stack.set(srcValue, objValue);
    	    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    	    stack['delete'](srcValue);
    	  }
    	  return objValue;
    	}

    	/**
    	 * Gets the data for `map`.
    	 *
    	 * @private
    	 * @param {Object} map The map to query.
    	 * @param {string} key The reference key.
    	 * @returns {*} Returns the map data.
    	 */
    	function getMapData(map, key) {
    	  var data = map.__data__;
    	  return isKeyable(key)
    	    ? data[typeof key == 'string' ? 'string' : 'hash']
    	    : data.map;
    	}

    	/**
    	 * Gets the native function at `key` of `object`.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {string} key The key of the method to get.
    	 * @returns {*} Returns the function if it's native, else `undefined`.
    	 */
    	function getNative(object, key) {
    	  var value = getValue(object, key);
    	  return baseIsNative(value) ? value : undefined;
    	}

    	/**
    	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    	 *
    	 * @private
    	 * @param {*} value The value to query.
    	 * @returns {string} Returns the raw `toStringTag`.
    	 */
    	function getRawTag(value) {
    	  var isOwn = hasOwnProperty.call(value, symToStringTag),
    	      tag = value[symToStringTag];

    	  try {
    	    value[symToStringTag] = undefined;
    	    var unmasked = true;
    	  } catch (e) {}

    	  var result = nativeObjectToString.call(value);
    	  if (unmasked) {
    	    if (isOwn) {
    	      value[symToStringTag] = tag;
    	    } else {
    	      delete value[symToStringTag];
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Initializes an object clone.
    	 *
    	 * @private
    	 * @param {Object} object The object to clone.
    	 * @returns {Object} Returns the initialized clone.
    	 */
    	function initCloneObject(object) {
    	  return (typeof object.constructor == 'function' && !isPrototype(object))
    	    ? baseCreate(getPrototype(object))
    	    : {};
    	}

    	/**
    	 * Checks if `value` is a valid array-like index.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	 */
    	function isIndex(value, length) {
    	  var type = typeof value;
    	  length = length == null ? MAX_SAFE_INTEGER : length;

    	  return !!length &&
    	    (type == 'number' ||
    	      (type != 'symbol' && reIsUint.test(value))) &&
    	        (value > -1 && value % 1 == 0 && value < length);
    	}

    	/**
    	 * Checks if the given arguments are from an iteratee call.
    	 *
    	 * @private
    	 * @param {*} value The potential iteratee value argument.
    	 * @param {*} index The potential iteratee index or key argument.
    	 * @param {*} object The potential iteratee object argument.
    	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
    	 *  else `false`.
    	 */
    	function isIterateeCall(value, index, object) {
    	  if (!isObject(object)) {
    	    return false;
    	  }
    	  var type = typeof index;
    	  if (type == 'number'
    	        ? (isArrayLike(object) && isIndex(index, object.length))
    	        : (type == 'string' && index in object)
    	      ) {
    	    return eq(object[index], value);
    	  }
    	  return false;
    	}

    	/**
    	 * Checks if `value` is suitable for use as unique object key.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	 */
    	function isKeyable(value) {
    	  var type = typeof value;
    	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	    ? (value !== '__proto__')
    	    : (value === null);
    	}

    	/**
    	 * Checks if `func` has its source masked.
    	 *
    	 * @private
    	 * @param {Function} func The function to check.
    	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	 */
    	function isMasked(func) {
    	  return !!maskSrcKey && (maskSrcKey in func);
    	}

    	/**
    	 * Checks if `value` is likely a prototype object.
    	 *
    	 * @private
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	 */
    	function isPrototype(value) {
    	  var Ctor = value && value.constructor,
    	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	  return value === proto;
    	}

    	/**
    	 * This function is like
    	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	 * except that it includes inherited enumerable properties.
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 */
    	function nativeKeysIn(object) {
    	  var result = [];
    	  if (object != null) {
    	    for (var key in Object(object)) {
    	      result.push(key);
    	    }
    	  }
    	  return result;
    	}

    	/**
    	 * Converts `value` to a string using `Object.prototype.toString`.
    	 *
    	 * @private
    	 * @param {*} value The value to convert.
    	 * @returns {string} Returns the converted string.
    	 */
    	function objectToString(value) {
    	  return nativeObjectToString.call(value);
    	}

    	/**
    	 * A specialized version of `baseRest` which transforms the rest array.
    	 *
    	 * @private
    	 * @param {Function} func The function to apply a rest parameter to.
    	 * @param {number} [start=func.length-1] The start position of the rest parameter.
    	 * @param {Function} transform The rest array transform.
    	 * @returns {Function} Returns the new function.
    	 */
    	function overRest(func, start, transform) {
    	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    	  return function() {
    	    var args = arguments,
    	        index = -1,
    	        length = nativeMax(args.length - start, 0),
    	        array = Array(length);

    	    while (++index < length) {
    	      array[index] = args[start + index];
    	    }
    	    index = -1;
    	    var otherArgs = Array(start + 1);
    	    while (++index < start) {
    	      otherArgs[index] = args[index];
    	    }
    	    otherArgs[start] = transform(array);
    	    return apply(func, this, otherArgs);
    	  };
    	}

    	/**
    	 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
    	 *
    	 * @private
    	 * @param {Object} object The object to query.
    	 * @param {string} key The key of the property to get.
    	 * @returns {*} Returns the property value.
    	 */
    	function safeGet(object, key) {
    	  if (key === 'constructor' && typeof object[key] === 'function') {
    	    return;
    	  }

    	  if (key == '__proto__') {
    	    return;
    	  }

    	  return object[key];
    	}

    	/**
    	 * Sets the `toString` method of `func` to return `string`.
    	 *
    	 * @private
    	 * @param {Function} func The function to modify.
    	 * @param {Function} string The `toString` result.
    	 * @returns {Function} Returns `func`.
    	 */
    	var setToString = shortOut(baseSetToString);

    	/**
    	 * Creates a function that'll short out and invoke `identity` instead
    	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
    	 * milliseconds.
    	 *
    	 * @private
    	 * @param {Function} func The function to restrict.
    	 * @returns {Function} Returns the new shortable function.
    	 */
    	function shortOut(func) {
    	  var count = 0,
    	      lastCalled = 0;

    	  return function() {
    	    var stamp = nativeNow(),
    	        remaining = HOT_SPAN - (stamp - lastCalled);

    	    lastCalled = stamp;
    	    if (remaining > 0) {
    	      if (++count >= HOT_COUNT) {
    	        return arguments[0];
    	      }
    	    } else {
    	      count = 0;
    	    }
    	    return func.apply(undefined, arguments);
    	  };
    	}

    	/**
    	 * Converts `func` to its source code.
    	 *
    	 * @private
    	 * @param {Function} func The function to convert.
    	 * @returns {string} Returns the source code.
    	 */
    	function toSource(func) {
    	  if (func != null) {
    	    try {
    	      return funcToString.call(func);
    	    } catch (e) {}
    	    try {
    	      return (func + '');
    	    } catch (e) {}
    	  }
    	  return '';
    	}

    	/**
    	 * Performs a
    	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	 * comparison between two values to determine if they are equivalent.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to compare.
    	 * @param {*} other The other value to compare.
    	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 * var other = { 'a': 1 };
    	 *
    	 * _.eq(object, object);
    	 * // => true
    	 *
    	 * _.eq(object, other);
    	 * // => false
    	 *
    	 * _.eq('a', 'a');
    	 * // => true
    	 *
    	 * _.eq('a', Object('a'));
    	 * // => false
    	 *
    	 * _.eq(NaN, NaN);
    	 * // => true
    	 */
    	function eq(value, other) {
    	  return value === other || (value !== value && other !== other);
    	}

    	/**
    	 * Checks if `value` is likely an `arguments` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArguments(function() { return arguments; }());
    	 * // => true
    	 *
    	 * _.isArguments([1, 2, 3]);
    	 * // => false
    	 */
    	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    	    !propertyIsEnumerable.call(value, 'callee');
    	};

    	/**
    	 * Checks if `value` is classified as an `Array` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	 * @example
    	 *
    	 * _.isArray([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArray(document.body.children);
    	 * // => false
    	 *
    	 * _.isArray('abc');
    	 * // => false
    	 *
    	 * _.isArray(_.noop);
    	 * // => false
    	 */
    	var isArray = Array.isArray;

    	/**
    	 * Checks if `value` is array-like. A value is considered array-like if it's
    	 * not a function and has a `value.length` that's an integer greater than or
    	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	 * @example
    	 *
    	 * _.isArrayLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLike(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLike('abc');
    	 * // => true
    	 *
    	 * _.isArrayLike(_.noop);
    	 * // => false
    	 */
    	function isArrayLike(value) {
    	  return value != null && isLength(value.length) && !isFunction(value);
    	}

    	/**
    	 * This method is like `_.isArrayLike` except that it also checks if `value`
    	 * is an object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an array-like object,
    	 *  else `false`.
    	 * @example
    	 *
    	 * _.isArrayLikeObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject(document.body.children);
    	 * // => true
    	 *
    	 * _.isArrayLikeObject('abc');
    	 * // => false
    	 *
    	 * _.isArrayLikeObject(_.noop);
    	 * // => false
    	 */
    	function isArrayLikeObject(value) {
    	  return isObjectLike(value) && isArrayLike(value);
    	}

    	/**
    	 * Checks if `value` is a buffer.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.3.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	 * @example
    	 *
    	 * _.isBuffer(new Buffer(2));
    	 * // => true
    	 *
    	 * _.isBuffer(new Uint8Array(2));
    	 * // => false
    	 */
    	var isBuffer = nativeIsBuffer || stubFalse;

    	/**
    	 * Checks if `value` is classified as a `Function` object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	 * @example
    	 *
    	 * _.isFunction(_);
    	 * // => true
    	 *
    	 * _.isFunction(/abc/);
    	 * // => false
    	 */
    	function isFunction(value) {
    	  if (!isObject(value)) {
    	    return false;
    	  }
    	  // The use of `Object#toString` avoids issues with the `typeof` operator
    	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
    	  var tag = baseGetTag(value);
    	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    	}

    	/**
    	 * Checks if `value` is a valid array-like length.
    	 *
    	 * **Note:** This method is loosely based on
    	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	 * @example
    	 *
    	 * _.isLength(3);
    	 * // => true
    	 *
    	 * _.isLength(Number.MIN_VALUE);
    	 * // => false
    	 *
    	 * _.isLength(Infinity);
    	 * // => false
    	 *
    	 * _.isLength('3');
    	 * // => false
    	 */
    	function isLength(value) {
    	  return typeof value == 'number' &&
    	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	}

    	/**
    	 * Checks if `value` is the
    	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.1.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	 * @example
    	 *
    	 * _.isObject({});
    	 * // => true
    	 *
    	 * _.isObject([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObject(_.noop);
    	 * // => true
    	 *
    	 * _.isObject(null);
    	 * // => false
    	 */
    	function isObject(value) {
    	  var type = typeof value;
    	  return value != null && (type == 'object' || type == 'function');
    	}

    	/**
    	 * Checks if `value` is object-like. A value is object-like if it's not `null`
    	 * and has a `typeof` result of "object".
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	 * @example
    	 *
    	 * _.isObjectLike({});
    	 * // => true
    	 *
    	 * _.isObjectLike([1, 2, 3]);
    	 * // => true
    	 *
    	 * _.isObjectLike(_.noop);
    	 * // => false
    	 *
    	 * _.isObjectLike(null);
    	 * // => false
    	 */
    	function isObjectLike(value) {
    	  return value != null && typeof value == 'object';
    	}

    	/**
    	 * Checks if `value` is a plain object, that is, an object created by the
    	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 0.8.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.a = 1;
    	 * }
    	 *
    	 * _.isPlainObject(new Foo);
    	 * // => false
    	 *
    	 * _.isPlainObject([1, 2, 3]);
    	 * // => false
    	 *
    	 * _.isPlainObject({ 'x': 0, 'y': 0 });
    	 * // => true
    	 *
    	 * _.isPlainObject(Object.create(null));
    	 * // => true
    	 */
    	function isPlainObject(value) {
    	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    	    return false;
    	  }
    	  var proto = getPrototype(value);
    	  if (proto === null) {
    	    return true;
    	  }
    	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    	    funcToString.call(Ctor) == objectCtorString;
    	}

    	/**
    	 * Checks if `value` is classified as a typed array.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.0.0
    	 * @category Lang
    	 * @param {*} value The value to check.
    	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	 * @example
    	 *
    	 * _.isTypedArray(new Uint8Array);
    	 * // => true
    	 *
    	 * _.isTypedArray([]);
    	 * // => false
    	 */
    	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	/**
    	 * Converts `value` to a plain object flattening inherited enumerable string
    	 * keyed properties of `value` to own properties of the plain object.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.0.0
    	 * @category Lang
    	 * @param {*} value The value to convert.
    	 * @returns {Object} Returns the converted plain object.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.b = 2;
    	 * }
    	 *
    	 * Foo.prototype.c = 3;
    	 *
    	 * _.assign({ 'a': 1 }, new Foo);
    	 * // => { 'a': 1, 'b': 2 }
    	 *
    	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    	 * // => { 'a': 1, 'b': 2, 'c': 3 }
    	 */
    	function toPlainObject(value) {
    	  return copyObject(value, keysIn(value));
    	}

    	/**
    	 * This method is like `_.defaults` except that it recursively assigns
    	 * default properties.
    	 *
    	 * **Note:** This method mutates `object`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.10.0
    	 * @category Object
    	 * @param {Object} object The destination object.
    	 * @param {...Object} [sources] The source objects.
    	 * @returns {Object} Returns `object`.
    	 * @see _.defaults
    	 * @example
    	 *
    	 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
    	 * // => { 'a': { 'b': 2, 'c': 3 } }
    	 */
    	var defaultsDeep = baseRest(function(args) {
    	  args.push(undefined, customDefaultsMerge);
    	  return apply(mergeWith, undefined, args);
    	});

    	/**
    	 * Creates an array of the own and inherited enumerable property names of `object`.
    	 *
    	 * **Note:** Non-object values are coerced to objects.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 3.0.0
    	 * @category Object
    	 * @param {Object} object The object to query.
    	 * @returns {Array} Returns the array of property names.
    	 * @example
    	 *
    	 * function Foo() {
    	 *   this.a = 1;
    	 *   this.b = 2;
    	 * }
    	 *
    	 * Foo.prototype.c = 3;
    	 *
    	 * _.keysIn(new Foo);
    	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
    	 */
    	function keysIn(object) {
    	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    	}

    	/**
    	 * This method is like `_.merge` except that it accepts `customizer` which
    	 * is invoked to produce the merged values of the destination and source
    	 * properties. If `customizer` returns `undefined`, merging is handled by the
    	 * method instead. The `customizer` is invoked with six arguments:
    	 * (objValue, srcValue, key, object, source, stack).
    	 *
    	 * **Note:** This method mutates `object`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.0.0
    	 * @category Object
    	 * @param {Object} object The destination object.
    	 * @param {...Object} sources The source objects.
    	 * @param {Function} customizer The function to customize assigned values.
    	 * @returns {Object} Returns `object`.
    	 * @example
    	 *
    	 * function customizer(objValue, srcValue) {
    	 *   if (_.isArray(objValue)) {
    	 *     return objValue.concat(srcValue);
    	 *   }
    	 * }
    	 *
    	 * var object = { 'a': [1], 'b': [2] };
    	 * var other = { 'a': [3], 'b': [4] };
    	 *
    	 * _.mergeWith(object, other, customizer);
    	 * // => { 'a': [1, 3], 'b': [2, 4] }
    	 */
    	var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    	  baseMerge(object, source, srcIndex, customizer);
    	});

    	/**
    	 * Creates a function that returns `value`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 2.4.0
    	 * @category Util
    	 * @param {*} value The value to return from the new function.
    	 * @returns {Function} Returns the new constant function.
    	 * @example
    	 *
    	 * var objects = _.times(2, _.constant({ 'a': 1 }));
    	 *
    	 * console.log(objects);
    	 * // => [{ 'a': 1 }, { 'a': 1 }]
    	 *
    	 * console.log(objects[0] === objects[1]);
    	 * // => true
    	 */
    	function constant(value) {
    	  return function() {
    	    return value;
    	  };
    	}

    	/**
    	 * This method returns the first argument it receives.
    	 *
    	 * @static
    	 * @since 0.1.0
    	 * @memberOf _
    	 * @category Util
    	 * @param {*} value Any value.
    	 * @returns {*} Returns `value`.
    	 * @example
    	 *
    	 * var object = { 'a': 1 };
    	 *
    	 * console.log(_.identity(object) === object);
    	 * // => true
    	 */
    	function identity(value) {
    	  return value;
    	}

    	/**
    	 * This method returns `false`.
    	 *
    	 * @static
    	 * @memberOf _
    	 * @since 4.13.0
    	 * @category Util
    	 * @returns {boolean} Returns `false`.
    	 * @example
    	 *
    	 * _.times(2, _.stubFalse);
    	 * // => [false, false]
    	 */
    	function stubFalse() {
    	  return false;
    	}

    	module.exports = defaultsDeep;
    } (lodash_defaultsdeep, lodash_defaultsdeep.exports));

    var defaultsDeep = lodash_defaultsdeep.exports;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** `Object#toString` result references. */
    var symbolTag$1 = '[object Symbol]';

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString$1 = objectProto$1.toString;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max,
        nativeMin = Math.min;

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = function() {
      return root$1.Date.now();
    };

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce$1(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce$1(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike$1(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$1(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$1(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var lodash_throttle = throttle;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};let nanoid = (size = 21) =>
      crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
        byte &= 63;
        if (byte < 36) {
          id += byte.toString(36);
        } else if (byte < 62) {
          id += (byte - 26).toString(36).toUpperCase();
        } else if (byte > 62) {
          id += '-';
        } else {
          id += '_';
        }
        return id
      }, '');

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var channelReducer = function (state, action) {
        var _a;
        switch (action.type) {
            case 'closeThread': {
                return __assign(__assign({}, state), { thread: null, threadLoadingMore: false, threadMessages: [] });
            }
            case 'copyMessagesFromChannel': {
                var channel = action.channel, parentId = action.parentId;
                return __assign(__assign({}, state), { messages: __spreadArray([], channel.state.messages, true), pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true), 
                    // copying messages from channel happens with new message - this resets the suppressAutoscroll
                    suppressAutoscroll: false, threadMessages: parentId
                        ? __assign({}, channel.state.threads)[parentId] || []
                        : state.threadMessages });
            }
            case 'copyStateFromChannelOnEvent': {
                var channel = action.channel;
                return __assign(__assign({}, state), { members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages, true), pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });
            }
            case 'initStateFromChannel': {
                var channel = action.channel, hasMore = action.hasMore;
                return __assign(__assign({}, state), { hasMore: hasMore, loading: false, members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages, true), pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });
            }
            case 'jumpToLatestMessage': {
                return __assign(__assign({}, state), { hasMoreNewer: false, highlightedMessageId: undefined, loading: false, suppressAutoscroll: false });
            }
            case 'jumpToMessageFinished': {
                return __assign(__assign({}, state), { hasMoreNewer: action.hasMoreNewer, highlightedMessageId: action.highlightedMessageId });
            }
            case 'clearHighlightedMessage': {
                return __assign(__assign({}, state), { highlightedMessageId: undefined });
            }
            case 'loadMoreFinished': {
                var hasMore = action.hasMore, messages = action.messages;
                return __assign(__assign({}, state), { hasMore: hasMore, loadingMore: false, messages: messages, suppressAutoscroll: false });
            }
            case 'loadMoreNewerFinished': {
                var hasMoreNewer = action.hasMoreNewer, messages = action.messages;
                return __assign(__assign({}, state), { hasMoreNewer: hasMoreNewer, loadingMoreNewer: false, messages: messages });
            }
            case 'loadMoreThreadFinished': {
                var threadHasMore = action.threadHasMore, threadMessages = action.threadMessages;
                return __assign(__assign({}, state), { threadHasMore: threadHasMore, threadLoadingMore: false, threadMessages: threadMessages });
            }
            case 'openThread': {
                var channel = action.channel, message = action.message;
                return __assign(__assign({}, state), { thread: message, threadMessages: message.id ? __assign({}, channel.state.threads)[message.id] || [] : [], threadSuppressAutoscroll: false });
            }
            case 'setError': {
                var error = action.error;
                return __assign(__assign({}, state), { error: error });
            }
            case 'setLoadingMore': {
                var loadingMore = action.loadingMore;
                // suppress the autoscroll behavior
                return __assign(__assign({}, state), { loadingMore: loadingMore, suppressAutoscroll: loadingMore });
            }
            case 'setLoadingMoreNewer': {
                var loadingMoreNewer = action.loadingMoreNewer;
                return __assign(__assign({}, state), { loadingMoreNewer: loadingMoreNewer });
            }
            case 'setThread': {
                var message = action.message;
                return __assign(__assign({}, state), { thread: message });
            }
            case 'setTyping': {
                var channel = action.channel;
                return __assign(__assign({}, state), { typing: __assign({}, channel.state.typing) });
            }
            case 'startLoadingThread': {
                return __assign(__assign({}, state), { threadLoadingMore: true, threadSuppressAutoscroll: true });
            }
            case 'updateThreadOnEvent': {
                var channel = action.channel, message = action.message;
                if (!state.thread)
                    return state;
                return __assign(__assign({}, state), { thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread, threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign({}, channel.state.threads)[state.thread.id] || [] : [] });
            }
            default:
                return state;
        }
    };
    var initialState = {
        error: null,
        hasMore: true,
        hasMoreNewer: false,
        loading: true,
        loadingMore: false,
        members: {},
        messages: [],
        pinnedMessages: [],
        read: {},
        suppressAutoscroll: false,
        thread: null,
        threadHasMore: true,
        threadLoadingMore: false,
        threadMessages: [],
        threadSuppressAutoscroll: false,
        typing: {},
        watcherCount: 0,
        watchers: {},
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateChannelStateContext = function (value) {
        var _a;
        var acceptedFiles = value.acceptedFiles, channel = value.channel, _b = value.channelCapabilitiesArray, channelCapabilitiesArray = _b === void 0 ? [] : _b, channelConfig = value.channelConfig, debounceURLEnrichmentMs = value.debounceURLEnrichmentMs, dragAndDropWindow = value.dragAndDropWindow, enrichURLForPreview = value.enrichURLForPreview, giphyVersion = value.giphyVersion, error = value.error, findURLFn = value.findURLFn, hasMore = value.hasMore, hasMoreNewer = value.hasMoreNewer, imageAttachmentSizeHandler = value.imageAttachmentSizeHandler, suppressAutoscroll = value.suppressAutoscroll, highlightedMessageId = value.highlightedMessageId, loading = value.loading, loadingMore = value.loadingMore, maxNumberOfFiles = value.maxNumberOfFiles, members = value.members, _c = value.messages, messages = _c === void 0 ? [] : _c, multipleUploads = value.multipleUploads, mutes = value.mutes, notifications = value.notifications, onLinkPreviewDismissed = value.onLinkPreviewDismissed, pinnedMessages = value.pinnedMessages, quotedMessage = value.quotedMessage, _d = value.read, read = _d === void 0 ? {} : _d, shouldGenerateVideoThumbnail = value.shouldGenerateVideoThumbnail, skipMessageDataMemoization = value.skipMessageDataMemoization, thread = value.thread, threadHasMore = value.threadHasMore, threadLoadingMore = value.threadLoadingMore, _e = value.threadMessages, threadMessages = _e === void 0 ? [] : _e, channelUnreadUiState = value.channelUnreadUiState, videoAttachmentSizeHandler = value.videoAttachmentSizeHandler, watcherCount = value.watcherCount, watcher_count = value.watcher_count, watchers = value.watchers;
        var channelId = channel.cid;
        var lastRead = channel.initialized && ((_a = channel.lastRead()) === null || _a === void 0 ? void 0 : _a.getTime());
        var membersLength = Object.keys(members || []).length;
        var notificationsLength = notifications.length;
        var readUsers = Object.values(read);
        var readUsersLength = readUsers.length;
        var readUsersLastReads = readUsers.map(function (_a) {
            var last_read = _a.last_read;
            return last_read.toISOString();
        }).join();
        var threadMessagesLength = threadMessages === null || threadMessages === void 0 ? void 0 : threadMessages.length;
        var channelCapabilities = {};
        channelCapabilitiesArray.forEach(function (capability) {
            channelCapabilities[capability] = true;
        });
        var memoizedMessageData = skipMessageDataMemoization
            ? messages
            : messages
                .map(function (_a) {
                var deleted_at = _a.deleted_at, latest_reactions = _a.latest_reactions, pinned = _a.pinned, reply_count = _a.reply_count, status = _a.status, updated_at = _a.updated_at, user = _a.user;
                return "".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function (_a) {
                    var type = _a.type;
                    return type;
                }).join() : '').concat(pinned).concat(reply_count).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))
                    ? updated_at.toISOString()
                    : updated_at || '').concat(user === null || user === void 0 ? void 0 : user.updated_at);
            })
                .join();
        var memoizedThreadMessageData = threadMessages
            .map(function (_a) {
            var deleted_at = _a.deleted_at, latest_reactions = _a.latest_reactions, pinned = _a.pinned, status = _a.status, updated_at = _a.updated_at, user = _a.user;
            return "".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function (_a) {
                var type = _a.type;
                return type;
            }).join() : '').concat(pinned).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))
                ? updated_at.toISOString()
                : updated_at || '').concat(user === null || user === void 0 ? void 0 : user.updated_at);
        })
            .join();
        var channelStateContext = React$2.useMemo(function () { return ({
            acceptedFiles: acceptedFiles,
            channel: channel,
            channelCapabilities: channelCapabilities,
            channelConfig: channelConfig,
            channelUnreadUiState: channelUnreadUiState,
            debounceURLEnrichmentMs: debounceURLEnrichmentMs,
            dragAndDropWindow: dragAndDropWindow,
            enrichURLForPreview: enrichURLForPreview,
            error: error,
            findURLFn: findURLFn,
            giphyVersion: giphyVersion,
            hasMore: hasMore,
            hasMoreNewer: hasMoreNewer,
            highlightedMessageId: highlightedMessageId,
            imageAttachmentSizeHandler: imageAttachmentSizeHandler,
            loading: loading,
            loadingMore: loadingMore,
            maxNumberOfFiles: maxNumberOfFiles,
            members: members,
            messages: messages,
            multipleUploads: multipleUploads,
            mutes: mutes,
            notifications: notifications,
            onLinkPreviewDismissed: onLinkPreviewDismissed,
            pinnedMessages: pinnedMessages,
            quotedMessage: quotedMessage,
            read: read,
            shouldGenerateVideoThumbnail: shouldGenerateVideoThumbnail,
            suppressAutoscroll: suppressAutoscroll,
            thread: thread,
            threadHasMore: threadHasMore,
            threadLoadingMore: threadLoadingMore,
            threadMessages: threadMessages,
            videoAttachmentSizeHandler: videoAttachmentSizeHandler,
            watcher_count: watcher_count,
            watcherCount: watcherCount,
            watchers: watchers,
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
            channelId,
            channelUnreadUiState,
            debounceURLEnrichmentMs,
            enrichURLForPreview,
            error,
            findURLFn,
            hasMore,
            hasMoreNewer,
            highlightedMessageId,
            lastRead,
            loading,
            loadingMore,
            membersLength,
            memoizedMessageData,
            memoizedThreadMessageData,
            notificationsLength,
            onLinkPreviewDismissed,
            quotedMessage,
            readUsersLength,
            readUsersLastReads,
            shouldGenerateVideoThumbnail,
            skipMessageDataMemoization,
            suppressAutoscroll,
            thread,
            threadHasMore,
            threadLoadingMore,
            threadMessagesLength,
            watcherCount,
        ]);
        return channelStateContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateTypingContext = function (value) {
        var typing = value.typing;
        var typingValue = Object.keys(typing || {}).join();
        var typingContext = React$2.useMemo(function () { return ({
            typing: typing,
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [typingValue]);
        return typingContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEditMessageHandler = function (doUpdateMessageRequest) {
        var _a = useChatContext('useEditMessageHandler'), channel = _a.channel, client = _a.client;
        return function (updatedMessage, options) {
            if (doUpdateMessageRequest && channel) {
                return Promise.resolve(doUpdateMessageRequest(channel.cid, updatedMessage, options));
            }
            return client.updateMessage(updatedMessage, undefined, options);
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useIsMounted = function () {
        var isMounted = React$2.useRef(false);
        React$2.useEffect(function () {
            isMounted.current = true;
            return function () {
                isMounted.current = false;
            };
        }, []);
        return isMounted;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMentionsHandlers = function (onMentionsHover, onMentionsClick) {
        return React$2.useCallback(function (event, mentioned_users) {
            if ((!onMentionsHover && !onMentionsClick) || !(event.target instanceof HTMLElement)) {
                return;
            }
            var target = event.target;
            var textContent = target.innerHTML.replace('*', '');
            if (textContent[0] === '@') {
                var userName_1 = textContent.replace('@', '');
                var user = mentioned_users === null || mentioned_users === void 0 ? void 0 : mentioned_users.find(function (_a) {
                    var id = _a.id, name = _a.name;
                    return name === userName_1 || id === userName_1;
                });
                if (onMentionsHover &&
                    typeof onMentionsHover === 'function' &&
                    event.type === 'mouseover') {
                    onMentionsHover(event, user);
                }
                if (onMentionsClick && event.type === 'click' && typeof onMentionsClick === 'function') {
                    onMentionsClick(event, user);
                }
            }
        }, [onMentionsClick, onMentionsHover]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LoadingItems = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channels-item str-chat__channel-preview-loading' },
        React__default["default"].createElement("div", { className: 'str-chat__loading-channels-avatar' }),
        React__default["default"].createElement("div", { className: 'str-chat__loading-channels-meta str-chat__channel-preview-end-loading' },
            React__default["default"].createElement("div", { className: 'str-chat__loading-channels-username' }),
            React__default["default"].createElement("div", { className: 'str-chat__loading-channels-status' })))); };
    var UnMemoizedLoadingChannels = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channels' },
        React__default["default"].createElement(LoadingItems, null),
        React__default["default"].createElement(LoadingItems, null),
        React__default["default"].createElement(LoadingItems, null))); };
    /**
     * Loading indicator for the ChannelList
     */
    var LoadingChannels = React__default["default"].memo(UnMemoizedLoadingChannels);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * UI component for error indicator in a Channel
     */
    var UnMemoizedLoadingErrorIndicator = function (_a) {
        var error = _a.error;
        var t = useTranslationContext('LoadingErrorIndicator').t;
        if (!error)
            return null;
        return (React__default["default"].createElement("div", null, t('Error: {{ errorMessage }}', { errorMessage: error.message })));
    };
    var LoadingErrorIndicator = React__default["default"].memo(UnMemoizedLoadingErrorIndicator, function (prevProps, nextProps) { var _a, _b; return ((_a = prevProps.error) === null || _a === void 0 ? void 0 : _a.message) === ((_b = nextProps.error) === null || _b === void 0 ? void 0 : _b.message); });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadingIndicator = function (props) {
        var _a = props.color, color = _a === void 0 ? '#006CFF' : _a, _b = props.size, size = _b === void 0 ? 15 : _b;
        return (React__default["default"].createElement("div", { className: "str-chat__loading-indicator", "data-testid": 'loading-indicator-wrapper', style: { height: size, width: size } },
            React__default["default"].createElement("svg", { height: size, viewBox: "0 0 30 30", width: size, xmlns: 'http://www.w3.org/2000/svg' },
                React__default["default"].createElement("defs", null,
                    React__default["default"].createElement("linearGradient", { id: 'a', x1: '50%', x2: '50%', y1: '0%', y2: '100%' },
                        React__default["default"].createElement("stop", { offset: '0%', stopColor: '#FFF', stopOpacity: '0' }),
                        React__default["default"].createElement("stop", { "data-testid": 'loading-indicator-circle', offset: '100%', stopColor: color, stopOpacity: '1', style: { stopColor: color } }))),
                React__default["default"].createElement("path", { d: 'M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z', fill: 'url(#a)', fillRule: 'evenodd' }))));
    };
    /**
     * Simple loading spinner
     */
    var LoadingIndicator = React__default["default"].memo(UnMemoizedLoadingIndicator, function (prevProps, nextProps) {
        return prevProps.color === nextProps.color && prevProps.size === nextProps.size;
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LoadingMessage = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message' },
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-avatar' }),
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-end' },
            React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-sender' }),
            React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-last-row' },
                React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-text' }),
                React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-date' }))))); };
    var LoadingMessageInput = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-input-row' },
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-input' }),
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-send' }))); };
    var LoadingChannelHeader = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channel-header' },
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-header-avatar' }),
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-header-end' },
            React__default["default"].createElement("div", { className: 'str-chat__loading-channel-header-name' }),
            React__default["default"].createElement("div", { className: 'str-chat__loading-channel-header-info' })))); };
    var LoadingChannel = function () { return (React__default["default"].createElement("div", { className: 'str-chat__loading-channel' },
        React__default["default"].createElement(LoadingChannelHeader, null),
        React__default["default"].createElement("div", { className: 'str-chat__loading-channel-message-list' }, Array.from(Array(3)).map(function (_, i) { return (React__default["default"].createElement(LoadingMessage, { key: "loading-message-".concat(i) })); })),
        React__default["default"].createElement(LoadingMessageInput, null))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ActionsIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b;
        return (React__default["default"].createElement("svg", { className: className, height: '4', viewBox: '0 0 11 4', width: '11', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z', fillRule: 'nonzero' })));
    };
    var ReplyIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'reply-icon', height: '15', width: '18', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M.56 10.946H.06l-.002-.498L.025.92a.5.5 0 1 1 1-.004l.032 9.029H9.06v-4l9 4.5-9 4.5v-4H.56z', fillRule: 'nonzero' }))); };
    var DeliveredCheckIcon = function () { return (React__default["default"].createElement("svg", { height: '16', width: '16', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm3.72 6.633a.955.955 0 1 0-1.352-1.352L6.986 8.663 5.633 7.31A.956.956 0 1 0 4.28 8.663l2.029 2.028a.956.956 0 0 0 1.353 0l4.058-4.058z', fill: '#006CFF', fillRule: 'evenodd' }))); };
    var ReactionIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b;
        return (React__default["default"].createElement("svg", { className: className, height: '12', viewBox: '0 0 12 12', width: '12', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
                React__default["default"].createElement("path", { d: 'M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z' }),
                React__default["default"].createElement("path", { d: 'M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z' }))));
    };
    var ThreadIcon = function (_a) {
        var _b = _a.className, className = _b === void 0 ? '' : _b;
        return (React__default["default"].createElement("svg", { className: className, height: '10', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z', fillRule: 'evenodd' })));
    };
    var ErrorIcon = function () { return (React__default["default"].createElement("svg", { height: '14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M7 0a7 7 0 1 0 0 14A7 7 0 0 0 7 0zm.875 10.938a.438.438 0 0 1-.438.437h-.875a.438.438 0 0 1-.437-.438v-.874c0-.242.196-.438.438-.438h.875c.241 0 .437.196.437.438v.874zm0-2.626a.438.438 0 0 1-.438.438h-.875a.438.438 0 0 1-.437-.438v-5.25c0-.241.196-.437.438-.437h.875c.241 0 .437.196.437.438v5.25z', fill: '#EA152F', fillRule: 'evenodd' }))); };
    var PinIcon = function () { return (React__default["default"].createElement("svg", { height: '13', viewBox: '0 0 14 13', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z', fillRule: 'evenodd' }))); };
    var PinIndicator = function (_a) {
        var _b, _c;
        var message = _a.message, t = _a.t;
        if (!message || !t)
            return null;
        return (React__default["default"].createElement("div", { style: { alignItems: 'center', display: 'flex' } },
            React__default["default"].createElement(PinIcon, null),
            React__default["default"].createElement("div", { style: {
                    fontSize: '14px',
                    marginBottom: '0',
                    marginLeft: '8px',
                    marginTop: '0',
                } }, message.pinned_by
                ? "".concat(t('Pinned by'), " ").concat(((_b = message.pinned_by) === null || _b === void 0 ? void 0 : _b.name) || ((_c = message.pinned_by) === null || _c === void 0 ? void 0 : _c.id))
                : t('Message pinned'))));
    };
    var MessageDeliveredIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'delivered-icon', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z', fill: 'black', fillRule: 'evenodd' }))); };
    var MessageErrorIcon = function () { return (React__default["default"].createElement("div", { className: 'str-chat__message-error-icon' },
        React__default["default"].createElement("svg", { "data-testid": 'error', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z', fill: 'black', id: 'background' }),
            React__default["default"].createElement("path", { d: 'M13 17H11V15H13V17ZM13 13H11V7H13V13Z', fill: 'white' })))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function MessageBounceModal(_a) {
        var MessageBouncePrompt = _a.MessageBouncePrompt, modalProps = __rest(_a, ["MessageBouncePrompt"]);
        return (React__default["default"].createElement(Modal, __assign({}, modalProps),
            React__default["default"].createElement(MessageBounceProvider, null,
                React__default["default"].createElement(MessageBouncePrompt, { onClose: modalProps.onClose }))));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function MessageBouncePrompt(_a) {
        var children = _a.children, onClose = _a.onClose;
        var _b = useMessageBounceContext('MessageBouncePrompt'), handleDelete = _b.handleDelete, handleEdit = _b.handleEdit, handleRetry = _b.handleRetry;
        var t = useTranslationContext('MessageBouncePrompt').t;
        function createHandler(handle) {
            return function (e) {
                handle(e);
                onClose === null || onClose === void 0 ? void 0 : onClose(e);
            };
        }
        return (React__default["default"].createElement("div", { className: 'str-chat__message-bounce-prompt', "data-testid": 'message-bounce-prompt' },
            React__default["default"].createElement("div", { className: 'str-chat__message-bounce-prompt-header' }, children !== null && children !== void 0 ? children : t('This message did not meet our content guidelines')),
            React__default["default"].createElement("div", { className: 'str-chat__message-bounce-actions' },
                React__default["default"].createElement("button", { className: 'str-chat__message-bounce-edit', "data-testid": 'message-bounce-edit', onClick: createHandler(handleEdit), type: 'button' }, t('Edit Message')),
                React__default["default"].createElement("button", { className: 'str-chat__message-bounce-send', "data-testid": 'message-bounce-send', onClick: createHandler(handleRetry) }, t('Send Anyway')),
                React__default["default"].createElement("button", { className: 'str-chat__message-bounce-delete', "data-testid": 'message-bounce-delete', onClick: createHandler(handleDelete) }, t('Delete')))));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserRole = function (message, onlySenderCanEdit, disableQuotedMessages) {
        var _a, _b, _c;
        var _d = useChannelStateContext('useUserRole'), channel = _d.channel, _e = _d.channelCapabilities, channelCapabilities = _e === void 0 ? {} : _e;
        var client = useChatContext('useUserRole').client;
        /**
         * @deprecated as it relies on `membership.role` check which is already deprecated and shouldn't be used anymore.
         * `isAdmin` will be removed in future release. See `channelCapabilities`.
         */
        var isAdmin = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) === 'admin' || channel.state.membership.role === 'admin';
        /**
         * @deprecated as it relies on `membership.role` check which is already deprecated and shouldn't be used anymore.
         * `isOwner` will be removed in future release. See `channelCapabilities`.
         */
        var isOwner = channel.state.membership.role === 'owner';
        /**
         * @deprecated as it relies on `membership.role` check which is already deprecated and shouldn't be used anymore.
         * `isModerator` will be removed in future release. See `channelCapabilities`.
         */
        var isModerator = ((_b = client.user) === null || _b === void 0 ? void 0 : _b.role) === 'channel_moderator' ||
            channel.state.membership.role === 'channel_moderator' ||
            channel.state.membership.role === 'moderator' ||
            channel.state.membership.is_moderator === true ||
            channel.state.membership.channel_role === 'channel_moderator';
        var isMyMessage = client.userID === ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id);
        var canEdit = (!onlySenderCanEdit && channelCapabilities['update-any-message']) ||
            (isMyMessage && channelCapabilities['update-own-message']);
        var canDelete = channelCapabilities['delete-any-message'] ||
            (isMyMessage && channelCapabilities['delete-own-message']);
        var canFlag = !isMyMessage && channelCapabilities['flag-message'];
        var canMarkUnread = channelCapabilities['read-events'];
        var canMute = !isMyMessage && channelCapabilities['mute-channel'];
        var canQuote = !disableQuotedMessages && channelCapabilities['quote-message'];
        var canReact = channelCapabilities['send-reaction'];
        var canReply = channelCapabilities['send-reply'];
        return {
            canDelete: canDelete,
            canEdit: canEdit,
            canFlag: canFlag,
            canMarkUnread: canMarkUnread,
            canMute: canMute,
            canQuote: canQuote,
            canReact: canReact,
            canReply: canReply,
            isAdmin: isAdmin,
            isModerator: isModerator,
            isMyMessage: isMyMessage,
            isOwner: isOwner,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageDeleted = function (props) {
        var message = props.message;
        var t = useTranslationContext('MessageDeleted').t;
        var isMyMessage = useUserRole(message).isMyMessage;
        var messageClasses = isMyMessage
            ? 'str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me'
            : 'str-chat__message str-chat__message-simple str-chat__message--other';
        return (React__default["default"].createElement("div", { className: "".concat(messageClasses, " str-chat__message--deleted ").concat(message.type, " "), "data-testid": 'message-deleted-component', key: message.id },
            React__default["default"].createElement("div", { className: 'str-chat__message--deleted-inner' }, t('This message was deleted...'))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Following function validates a function which returns notification message.
     * It validates if the first parameter is function and also if return value of function is string or no.
     */
    var validateAndGetMessage = function (func, args) {
        if (!func || typeof func !== 'function')
            return null;
        // below is due to tests passing a single argument
        // rather than an array.
        if (!(args instanceof Array)) {
            // @ts-expect-error
            args = [args];
        }
        var returnValue = func.apply(void 0, args);
        if (typeof returnValue !== 'string')
            return null;
        return returnValue;
    };
    /**
     * Tell if the owner of the current message is muted
     */
    var isUserMuted = function (message, mutes) {
        if (!mutes || !message)
            return false;
        var userMuted = mutes.filter(function (el) { var _a; return el.target.id === ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id); });
        return !!userMuted.length;
    };
    var MESSAGE_ACTIONS = {
        delete: 'delete',
        edit: 'edit',
        flag: 'flag',
        markUnread: 'markUnread',
        mute: 'mute',
        pin: 'pin',
        quote: 'quote',
        react: 'react',
        reply: 'reply',
    };
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    var defaultPinPermissions = {
        commerce: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: true,
            user: false,
        },
        gaming: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: false,
            user: false,
        },
        livestream: {
            admin: true,
            anonymous: false,
            channel_member: false,
            channel_moderator: true,
            guest: false,
            member: false,
            moderator: true,
            owner: true,
            user: false,
        },
        messaging: {
            admin: true,
            anonymous: false,
            channel_member: true,
            channel_moderator: true,
            guest: false,
            member: true,
            moderator: true,
            owner: true,
            user: false,
        },
        team: {
            admin: true,
            anonymous: false,
            channel_member: true,
            channel_moderator: true,
            guest: false,
            member: true,
            moderator: true,
            owner: true,
            user: false,
        },
    };
    var getMessageActions = function (actions, _a) {
        var canDelete = _a.canDelete, canEdit = _a.canEdit, canFlag = _a.canFlag, canMarkUnread = _a.canMarkUnread, canMute = _a.canMute, canPin = _a.canPin, canQuote = _a.canQuote, canReact = _a.canReact, canReply = _a.canReply;
        var messageActionsAfterPermission = [];
        var messageActions = [];
        if (actions && typeof actions === 'boolean') {
            // If value of actions is true, then populate all the possible values
            messageActions = Object.keys(MESSAGE_ACTIONS);
        }
        else if (actions && actions.length > 0) {
            messageActions = __spreadArray([], actions, true);
        }
        else {
            return [];
        }
        if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
        }
        if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
        }
        if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
        }
        if (canMarkUnread && messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.markUnread);
        }
        if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
        }
        if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
        }
        if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
        }
        if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
        }
        if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
            messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
        }
        return messageActionsAfterPermission;
    };
    var ACTIONS_NOT_WORKING_IN_THREAD = [
        MESSAGE_ACTIONS.pin,
        MESSAGE_ACTIONS.react,
        MESSAGE_ACTIONS.reply,
        MESSAGE_ACTIONS.markUnread,
    ];
    var showMessageActionsBox = function (actions, inThread) {
        if (actions.length === 0) {
            return false;
        }
        if (inThread &&
            actions.filter(function (action) { return !ACTIONS_NOT_WORKING_IN_THREAD.includes(action); }).length === 0) {
            return false;
        }
        if (actions.length === 1 && (actions.includes('react') || actions.includes('reply'))) {
            return false;
        }
        if (actions.length === 2 && actions.includes('react') && actions.includes('reply')) {
            return false;
        }
        return true;
    };
    var areMessagesEqual = function (prevMessage, nextMessage) {
        var _a, _b, _c, _d, _e, _f;
        return prevMessage.deleted_at === nextMessage.deleted_at &&
            ((_a = prevMessage.latest_reactions) === null || _a === void 0 ? void 0 : _a.length) === ((_b = nextMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) &&
            ((_c = prevMessage.own_reactions) === null || _c === void 0 ? void 0 : _c.length) === ((_d = nextMessage.own_reactions) === null || _d === void 0 ? void 0 : _d.length) &&
            prevMessage.pinned === nextMessage.pinned &&
            prevMessage.reply_count === nextMessage.reply_count &&
            prevMessage.status === nextMessage.status &&
            prevMessage.text === nextMessage.text &&
            prevMessage.type === nextMessage.type &&
            prevMessage.updated_at === nextMessage.updated_at &&
            ((_e = prevMessage.user) === null || _e === void 0 ? void 0 : _e.updated_at) === ((_f = nextMessage.user) === null || _f === void 0 ? void 0 : _f.updated_at);
    };
    var areMessagePropsEqual = function (prevProps, nextProps) {
        var prevMessage = prevProps.message, prevMessageUI = prevProps.Message;
        var nextMessage = nextProps.message, nextMessageUI = nextProps.Message;
        if (prevMessageUI !== nextMessageUI)
            return false;
        if (prevProps.endOfGroup !== nextProps.endOfGroup)
            return false;
        if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
            return false;
        }
        var messagesAreEqual = areMessagesEqual(prevMessage, nextMessage);
        if (!messagesAreEqual)
            return false;
        var deepEqualProps = reactFastCompare(nextProps.messageActions, prevProps.messageActions) &&
            reactFastCompare(nextProps.readBy, prevProps.readBy) &&
            reactFastCompare(nextProps.highlighted, prevProps.highlighted) &&
            reactFastCompare(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
            reactFastCompare(nextProps.mutes, prevProps.mutes) &&
            reactFastCompare(nextProps.lastReceivedId, prevProps.lastReceivedId);
        if (!deepEqualProps)
            return false;
        return (prevProps.messageListRect === nextProps.messageListRect // MessageList wrapper layout changes
        );
    };
    var areMessageUIPropsEqual = function (prevProps, nextProps) {
        var _a, _b, _c, _d;
        var prevLastReceivedId = prevProps.lastReceivedId, prevMessage = prevProps.message;
        var nextLastReceivedId = nextProps.lastReceivedId, nextMessage = nextProps.message;
        if (prevProps.editing !== nextProps.editing)
            return false;
        if (prevProps.highlighted !== nextProps.highlighted)
            return false;
        if (prevProps.endOfGroup !== nextProps.endOfGroup)
            return false;
        if (((_a = prevProps.mutes) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = nextProps.mutes) === null || _b === void 0 ? void 0 : _b.length))
            return false;
        if (((_c = prevProps.readBy) === null || _c === void 0 ? void 0 : _c.length) !== ((_d = nextProps.readBy) === null || _d === void 0 ? void 0 : _d.length))
            return false;
        if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
            return false;
        }
        if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) &&
            prevLastReceivedId !== nextLastReceivedId) {
            return false;
        }
        return areMessagesEqual(prevMessage, nextMessage);
    };
    var messageHasReactions = function (message) { var _a; return Object.values((_a = message === null || message === void 0 ? void 0 : message.reaction_counts) !== null && _a !== void 0 ? _a : {}).some(function (count) { return count > 0; }); };
    var messageHasAttachments = function (message) { return !!(message === null || message === void 0 ? void 0 : message.attachments) && !!message.attachments.length; };
    var getImages = function (message) {
        if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
            return [];
        }
        return message.attachments.filter(function (item) { return item.type === 'image'; });
    };
    var getNonImageAttachments = function (message) {
        if (!(message === null || message === void 0 ? void 0 : message.attachments)) {
            return [];
        }
        return message.attachments.filter(function (item) { return item.type !== 'image'; });
    };
    /**
     * Default Tooltip Username mapper implementation.
     *
     * @param user the user.
     */
    var mapToUserNameOrId = function (user) { return user.name || user.id; };
    var getReadByTooltipText = function (users, t, client, tooltipUserNameMapper) {
        var outStr = '';
        if (!t) {
            throw new Error('getReadByTooltipText was called, but translation function is not available');
        }
        if (!tooltipUserNameMapper) {
            throw new Error('getReadByTooltipText was called, but tooltipUserNameMapper function is not available');
        }
        // first filter out client user, so restLength won't count it
        var otherUsers = users
            .filter(function (item) { return item && (client === null || client === void 0 ? void 0 : client.user) && item.id !== client.user.id; })
            .map(tooltipUserNameMapper);
        var slicedArr = otherUsers.slice(0, 5);
        var restLength = otherUsers.length - slicedArr.length;
        if (slicedArr.length === 1) {
            outStr = "".concat(slicedArr[0], " ");
        }
        else if (slicedArr.length === 2) {
            // joins all with "and" but =no commas
            // example: "bob and sam"
            outStr = t('{{ firstUser }} and {{ secondUser }}', {
                firstUser: slicedArr[0],
                secondUser: slicedArr[1],
            });
        }
        else if (slicedArr.length > 2) {
            // joins all with commas, but last one gets ", and" (oxford comma!)
            // example: "bob, joe, sam and 4 more"
            if (restLength === 0) {
                // mutate slicedArr to remove last user to display it separately
                var lastUser = slicedArr.splice(slicedArr.length - 1, 1);
                outStr = t('{{ commaSeparatedUsers }}, and {{ lastUser }}', {
                    commaSeparatedUsers: slicedArr.join(', '),
                    lastUser: lastUser,
                });
            }
            else {
                outStr = t('{{ commaSeparatedUsers }} and {{ moreCount }} more', {
                    commaSeparatedUsers: slicedArr.join(', '),
                    moreCount: restLength,
                });
            }
        }
        return outStr;
    };
    var isOnlyEmojis = function (text) {
        if (!text)
            return false;
        var noEmojis = text.replace(emojiRegex(), '');
        var noSpace = noEmojis.replace(/[\s\n]/gm, '');
        return !noSpace;
    };
    var isMessageBounced = function (message) {
        var _a;
        return message.type === 'error' &&
            ((_a = message.moderation_details) === null || _a === void 0 ? void 0 : _a.action) === 'MESSAGE_RESPONSE_ACTION_BOUNCE';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CustomMessageActionsList = function (props) {
        var customMessageActions = props.customMessageActions, message = props.message;
        if (!customMessageActions)
            return null;
        var customActionsArray = Object.keys(customMessageActions);
        return (React__default["default"].createElement(React__default["default"].Fragment, null, customActionsArray.map(function (customAction) {
            var customHandler = customMessageActions[customAction];
            return (React__default["default"].createElement("button", { "aria-selected": 'false', className: 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button', key: customAction, onClick: function (event) { return customHandler(message, event); }, role: 'option' }, customAction));
        })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageActionsBox = React__default["default"].forwardRef(function (props, ref) {
        var getMessageActions = props.getMessageActions, handleDelete = props.handleDelete, handleEdit = props.handleEdit, handleFlag = props.handleFlag, handleMarkUnread = props.handleMarkUnread, handleMute = props.handleMute, handlePin = props.handlePin, isUserMuted = props.isUserMuted; props.mine; var _a = props.open, open = _a === void 0 ? false : _a, restDivProps = __rest(props, ["getMessageActions", "handleDelete", "handleEdit", "handleFlag", "handleMarkUnread", "handleMute", "handlePin", "isUserMuted", "mine", "open"]);
        var _b = useComponentContext('MessageActionsBox').CustomMessageActionsList, CustomMessageActionsList$1 = _b === void 0 ? CustomMessageActionsList : _b;
        var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;
        var _c = useMessageContext('MessageActionsBox'), customMessageActions = _c.customMessageActions, message = _c.message, threadList = _c.threadList;
        var t = useTranslationContext('MessageActionsBox').t;
        var messageActions = getMessageActions();
        var handleQuote = function () {
            setQuotedMessage(message);
            var elements = message.parent_id
                ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')
                : document.getElementsByClassName('str-chat__textarea__textarea');
            var textarea = elements.item(0);
            if (textarea instanceof HTMLTextAreaElement) {
                textarea.focus();
            }
        };
        var rootClassName = clsx('str-chat__message-actions-box', {
            'str-chat__message-actions-box--open': open,
        });
        var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';
        return (React__default["default"].createElement("div", __assign({}, restDivProps, { className: rootClassName, "data-testid": 'message-actions-box', ref: ref }),
            React__default["default"].createElement("div", { "aria-label": t('aria/Message Options'), className: 'str-chat__message-actions-list', role: 'listbox' },
                React__default["default"].createElement(CustomMessageActionsList$1, { customMessageActions: customMessageActions, message: message }),
                messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleQuote, role: 'option' }, t('Reply'))),
                messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),
                messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleMarkUnread, role: 'option' }, t('Mark as unread'))),
                messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleFlag, role: 'option' }, t('Flag'))),
                messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),
                messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleEdit, role: 'option' }, t('Edit Message'))),
                messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React__default["default"].createElement("button", { "aria-selected": 'false', className: buttonClassName, onClick: handleDelete, role: 'option' }, t('Delete'))))));
    });
    /**
     * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.
     */
    var MessageActionsBox = React__default["default"].memo(UnMemoizedMessageActionsBox);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};React__namespace.createContext();
    React__namespace.createContext();

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Simple ponyfill for Object.fromEntries
     */

    var fromEntries = function fromEntries(entries) {
      return entries.reduce(function (acc, _ref) {
        var key = _ref[0],
            value = _ref[1];
        acc[key] = value;
        return acc;
      }, {});
    };
    /**
     * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
     */

    var useIsomorphicLayoutEffect$1 = typeof window !== 'undefined' && window.document && window.document.createElement ? React__namespace.useLayoutEffect : React__namespace.useEffect;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var top$1 = 'top';
    var bottom$1 = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top$1, bottom$1, right, left];
    var start$1 = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start$1, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start$1, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`

        if (offsetWidth > 0) {
          scaleX = round(rect.width) / offsetWidth || 1;
        }

        if (offsetHeight > 0) {
          scaleY = round(rect.height) / offsetHeight || 1;
        }
      }

      return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function contains$1(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top$1 : left;
      var maxProp = axis === 'y' ? bottom$1 : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (!contains$1(state.elements.popper, arrowElement)) {

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getVariation(placement) {
      return placement.split('-')[1];
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top$1;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top$1 || (placement === left || placement === right) && variation === end) {
          sideY = bottom$1;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top$1 || placement === bottom$1) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top$1:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom$1:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start$1:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom$1].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top$1, bottom$1].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start$1;
        var isVertical = [top$1, bottom$1].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom$1 : top$1;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top$1, right, bottom$1, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top$1 : left;
        var altSide = mainAxis === 'y' ? bottom$1 : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start$1 ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start$1 ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top$1 : left;

        var _altSide = mainAxis === 'x' ? bottom$1 : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top$1, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function order$2(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order$2(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_OPTIONS$1 = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });

            for (var index = 0; index < state.orderedModifiers.length; index++) {

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var EMPTY_MODIFIERS = [];
    var usePopper = function usePopper(referenceElement, popperElement, options) {
      if (options === void 0) {
        options = {};
      }

      var prevOptions = React__namespace.useRef(null);
      var optionsWithDefaults = {
        onFirstUpdate: options.onFirstUpdate,
        placement: options.placement || 'bottom',
        strategy: options.strategy || 'absolute',
        modifiers: options.modifiers || EMPTY_MODIFIERS
      };

      var _React$useState = React__namespace.useState({
        styles: {
          popper: {
            position: optionsWithDefaults.strategy,
            left: '0',
            top: '0'
          },
          arrow: {
            position: 'absolute'
          }
        },
        attributes: {}
      }),
          state = _React$useState[0],
          setState = _React$useState[1];

      var updateStateModifier = React__namespace.useMemo(function () {
        return {
          name: 'updateState',
          enabled: true,
          phase: 'write',
          fn: function fn(_ref) {
            var state = _ref.state;
            var elements = Object.keys(state.elements);
            ReactDOM__namespace.flushSync(function () {
              setState({
                styles: fromEntries(elements.map(function (element) {
                  return [element, state.styles[element] || {}];
                })),
                attributes: fromEntries(elements.map(function (element) {
                  return [element, state.attributes[element]];
                }))
              });
            });
          },
          requires: ['computeStyles']
        };
      }, []);
      var popperOptions = React__namespace.useMemo(function () {
        var newOptions = {
          onFirstUpdate: optionsWithDefaults.onFirstUpdate,
          placement: optionsWithDefaults.placement,
          strategy: optionsWithDefaults.strategy,
          modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
            name: 'applyStyles',
            enabled: false
          }])
        };

        if (reactFastCompare(prevOptions.current, newOptions)) {
          return prevOptions.current || newOptions;
        } else {
          prevOptions.current = newOptions;
          return newOptions;
        }
      }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
      var popperInstanceRef = React__namespace.useRef();
      useIsomorphicLayoutEffect$1(function () {
        if (popperInstanceRef.current) {
          popperInstanceRef.current.setOptions(popperOptions);
        }
      }, [popperOptions]);
      useIsomorphicLayoutEffect$1(function () {
        if (referenceElement == null || popperElement == null) {
          return;
        }

        var createPopper$1 = options.createPopper || createPopper;
        var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
        popperInstanceRef.current = popperInstance;
        return function () {
          popperInstance.destroy();
          popperInstanceRef.current = null;
        };
      }, [referenceElement, popperElement, options.createPopper]);
      return {
        state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
        styles: state.styles,
        attributes: state.attributes,
        update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
        forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
      };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Public components
     // Public types

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useMessageActionsBoxPopper(_a) {
        var open = _a.open, placement = _a.placement, referenceElement = _a.referenceElement;
        var popperElementRef = React$2.useRef(null);
        var _b = usePopper(referenceElement, popperElementRef.current, {
            modifiers: [
                {
                    name: 'eventListeners',
                    options: {
                        // It's not safe to update popper position on resize and scroll, since popper's
                        // reference element might not be visible at the time.
                        resize: false,
                        scroll: false,
                    },
                },
            ],
            placement: placement,
        }), attributes = _b.attributes, styles = _b.styles, update = _b.update;
        React$2.useEffect(function () {
            if (open) {
                // Since the popper's reference element might not be (and usually is not) visible
                // all the time, it's safer to force popper update before showing it.
                update === null || update === void 0 ? void 0 : update();
            }
        }, [open, update]);
        return {
            attributes: attributes,
            popperElementRef: popperElementRef,
            styles: styles,
        };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageActions = function (props) {
        var _a = props.ActionsIcon, ActionsIcon$1 = _a === void 0 ? ActionsIcon : _a, _b = props.customWrapperClass, customWrapperClass = _b === void 0 ? '' : _b, propGetMessageActions = props.getMessageActions, propHandleDelete = props.handleDelete, propHandleFlag = props.handleFlag, propHandleMarkUnread = props.handleMarkUnread, propHandleMute = props.handleMute, propHandlePin = props.handlePin, inline = props.inline, propMessage = props.message, messageWrapperRef = props.messageWrapperRef, mine = props.mine;
        var mutes = useChatContext('MessageActions').mutes;
        var _c = useMessageContext('MessageActions'), customMessageActions = _c.customMessageActions, contextGetMessageActions = _c.getMessageActions, contextHandleDelete = _c.handleDelete, contextHandleFlag = _c.handleFlag, contextHandleMarkUnread = _c.handleMarkUnread, contextHandleMute = _c.handleMute, contextHandlePin = _c.handlePin, isMyMessage = _c.isMyMessage, contextMessage = _c.message, setEditingState = _c.setEditingState;
        var t = useTranslationContext('MessageActions').t;
        var getMessageActions = propGetMessageActions || contextGetMessageActions;
        var handleDelete = propHandleDelete || contextHandleDelete;
        var handleFlag = propHandleFlag || contextHandleFlag;
        var handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;
        var handleMute = propHandleMute || contextHandleMute;
        var handlePin = propHandlePin || contextHandlePin;
        var message = propMessage || contextMessage;
        var isMine = mine ? mine() : isMyMessage();
        var _d = React$2.useState(false), actionsBoxOpen = _d[0], setActionsBoxOpen = _d[1];
        var isMuted = React$2.useCallback(function () { return isUserMuted(message, mutes); }, [message, mutes]);
        var hideOptions = React$2.useCallback(function (event) {
            if (event instanceof KeyboardEvent && event.key !== 'Escape') {
                return;
            }
            setActionsBoxOpen(false);
        }, []);
        var messageActions = getMessageActions();
        var messageDeletedAt = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
        React$2.useEffect(function () {
            if (messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current) {
                messageWrapperRef.current.addEventListener('mouseleave', hideOptions);
            }
        }, [hideOptions, messageWrapperRef]);
        React$2.useEffect(function () {
            if (messageDeletedAt) {
                document.removeEventListener('click', hideOptions);
            }
        }, [hideOptions, messageDeletedAt]);
        React$2.useEffect(function () {
            if (!actionsBoxOpen)
                return;
            document.addEventListener('click', hideOptions);
            document.addEventListener('keyup', hideOptions);
            return function () {
                document.removeEventListener('click', hideOptions);
                document.removeEventListener('keyup', hideOptions);
            };
        }, [actionsBoxOpen, hideOptions]);
        var actionsBoxButtonRef = React$2.useRef(null);
        var _e = useMessageActionsBoxPopper({
            open: actionsBoxOpen,
            placement: isMine ? 'top-end' : 'top-start',
            referenceElement: actionsBoxButtonRef.current,
        }), attributes = _e.attributes, popperElementRef = _e.popperElementRef, styles = _e.styles;
        if (!messageActions.length && !customMessageActions)
            return null;
        return (React__default["default"].createElement(MessageActionsWrapper, { customWrapperClass: customWrapperClass, inline: inline, setActionsBoxOpen: setActionsBoxOpen },
            React__default["default"].createElement(MessageActionsBox, __assign({}, attributes.popper, { getMessageActions: getMessageActions, handleDelete: handleDelete, handleEdit: setEditingState, handleFlag: handleFlag, handleMarkUnread: handleMarkUnread, handleMute: handleMute, handlePin: handlePin, isUserMuted: isMuted, mine: isMine, open: actionsBoxOpen, ref: popperElementRef, style: styles.popper })),
            React__default["default"].createElement("button", { "aria-expanded": actionsBoxOpen, "aria-haspopup": 'true', "aria-label": t('aria/Open Message Actions Menu'), className: 'str-chat__message-actions-box-button', ref: actionsBoxButtonRef },
                React__default["default"].createElement(ActionsIcon$1, { className: 'str-chat__message-action-icon' }))));
    };
    var MessageActionsWrapper = function (props) {
        var children = props.children, customWrapperClass = props.customWrapperClass, inline = props.inline, setActionsBoxOpen = props.setActionsBoxOpen;
        var defaultWrapperClass = "\n  str-chat__message-simple__actions__action\n  str-chat__message-simple__actions__action--options\n  str-chat__message-actions-container";
        var wrapperClass = customWrapperClass || defaultWrapperClass;
        var onClickOptionsAction = function (event) {
            event.stopPropagation();
            setActionsBoxOpen(function (prev) { return !prev; });
        };
        var wrapperProps = {
            className: wrapperClass,
            'data-testid': 'message-actions',
            onClick: onClickOptionsAction,
        };
        if (inline)
            return React__default["default"].createElement("span", __assign({}, wrapperProps), children);
        return React__default["default"].createElement("div", __assign({}, wrapperProps), children);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageOptions = function (props) {
        var _a = props.ActionsIcon, ActionsIcon$1 = _a === void 0 ? ActionsIcon : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.ReactionIcon, ReactionIcon$1 = _c === void 0 ? ReactionIcon : _c, _d = props.theme, theme = _d === void 0 ? 'simple' : _d, _e = props.ThreadIcon, ThreadIcon$1 = _e === void 0 ? ThreadIcon : _e;
        var _f = useMessageContext('MessageOptions'), customMessageActions = _f.customMessageActions, getMessageActions = _f.getMessageActions, contextHandleOpenThread = _f.handleOpenThread, initialMessage = _f.initialMessage, message = _f.message, onReactionListClick = _f.onReactionListClick, showDetailedReactions = _f.showDetailedReactions, threadList = _f.threadList;
        var t = useTranslationContext('MessageOptions').t;
        var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
        var messageActions = getMessageActions();
        var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;
        var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
        var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
        if (!message.type ||
            message.type === 'error' ||
            message.type === 'system' ||
            message.type === 'ephemeral' ||
            message.status === 'failed' ||
            message.status === 'sending' ||
            initialMessage) {
            return null;
        }
        var rootClassName = "str-chat__message-".concat(theme, "__actions str-chat__message-options");
        return (React__default["default"].createElement("div", { className: rootClassName, "data-testid": 'message-options' },
            showActionsBox && (React__default["default"].createElement(MessageActions, { ActionsIcon: ActionsIcon$1, messageWrapperRef: messageWrapperRef })),
            shouldShowReplies && (React__default["default"].createElement("button", { "aria-label": t('aria/Open Thread'), className: "str-chat__message-".concat(theme, "__actions__action str-chat__message-").concat(theme, "__actions__action--thread str-chat__message-reply-in-thread-button"), "data-testid": 'thread-action', onClick: handleOpenThread },
                React__default["default"].createElement(ThreadIcon$1, { className: 'str-chat__message-action-icon' }))),
            shouldShowReactions && (React__default["default"].createElement("button", { "aria-expanded": showDetailedReactions, "aria-label": t('aria/Open Reaction Selector'), className: "str-chat__message-".concat(theme, "__actions__action str-chat__message-").concat(theme, "__actions__action--reactions str-chat__message-reactions-button"), "data-testid": 'message-reaction-action', onClick: onReactionListClick },
                React__default["default"].createElement(ReactionIcon$1, { className: 'str-chat__message-action-icon' })))));
    };
    var MessageOptions = React__default["default"].memo(UnMemoizedMessageOptions);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageRepliesCountButton = function (props) {
        var labelPlural = props.labelPlural, labelSingle = props.labelSingle, onClick = props.onClick, _a = props.reply_count, reply_count = _a === void 0 ? 0 : _a;
        var t = useTranslationContext('MessageRepliesCountButton').t;
        var themeVersion = useChatContext('MessageRepliesCountButton').themeVersion;
        if (!reply_count)
            return null;
        var replyCountText = t('replyCount', { count: reply_count });
        if (labelPlural && reply_count > 1) {
            replyCountText = "".concat(reply_count, " ").concat(labelPlural);
        }
        else if (labelSingle) {
            replyCountText = "1 ".concat(labelSingle);
        }
        return (React__default["default"].createElement("div", { className: 'str-chat__message-simple-reply-button str-chat__message-replies-count-button-wrapper' },
            React__default["default"].createElement("button", { className: 'str-chat__message-replies-count-button', "data-testid": 'replies-count-button', onClick: onClick },
                themeVersion === '1' && React__default["default"].createElement(ReplyIcon, null),
                replyCountText)));
    };
    var MessageRepliesCountButton = React__default["default"].memo(UnMemoizedMessageRepliesCountButton);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var Tooltip = function (_a) {
        var children = _a.children, rest = __rest(_a, ["children"]);
        return (React__default["default"].createElement("div", __assign({ className: 'str-chat__tooltip' }, rest), children));
    };
    var PopperTooltip = function (_a) {
        var children = _a.children, _b = _a.offset, offset = _b === void 0 ? [0, 10] : _b, referenceElement = _a.referenceElement, _c = _a.placement, placement = _c === void 0 ? 'top' : _c, _d = _a.visible, visible = _d === void 0 ? false : _d;
        var _e = React$2.useState(null), popperElement = _e[0], setPopperElement = _e[1];
        var _f = usePopper(referenceElement, popperElement, {
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: offset,
                    },
                },
            ],
            placement: placement,
        }), attributes = _f.attributes, styles = _f.styles;
        if (!visible)
            return null;
        return (React__default["default"].createElement("div", __assign({ className: 'str-chat__tooltip', ref: setPopperElement, style: styles.popper }, attributes.popper), children));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEnterLeaveHandlers = function (_a) {
        var _b = _a === void 0 ? {} : _a, onMouseEnter = _b.onMouseEnter, onMouseLeave = _b.onMouseLeave;
        var _c = React$2.useState(false), tooltipVisible = _c[0], setTooltipVisible = _c[1];
        var handleEnter = React$2.useCallback(function (e) {
            setTooltipVisible(true);
            onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
        }, [onMouseEnter]);
        var handleLeave = React$2.useCallback(function (e) {
            setTooltipVisible(false);
            onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
        }, [onMouseLeave]);
        return { handleEnter: handleEnter, handleLeave: handleLeave, tooltipVisible: tooltipVisible };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageStatus = function (props) {
        var _a;
        var propAvatar = props.Avatar, _b = props.messageType, messageType = _b === void 0 ? 'simple' : _b, _c = props.tooltipUserNameMapper, tooltipUserNameMapper = _c === void 0 ? mapToUserNameOrId : _c;
        var _d = useEnterLeaveHandlers(), handleEnter = _d.handleEnter, handleLeave = _d.handleLeave, tooltipVisible = _d.tooltipVisible;
        var client = useChatContext('MessageStatus').client;
        var contextAvatar = useComponentContext('MessageStatus').Avatar;
        var _e = useMessageContext('MessageStatus'), isMyMessage = _e.isMyMessage, lastReceivedId = _e.lastReceivedId, message = _e.message, readBy = _e.readBy, threadList = _e.threadList;
        var t = useTranslationContext('MessageStatus').t;
        var themeVersion = useChatContext('MessageStatus').themeVersion;
        var _f = React$2.useState(null), referenceElement = _f[0], setReferenceElement = _f[1];
        var Avatar$1 = propAvatar || contextAvatar || Avatar;
        if (!isMyMessage() || message.type === 'error')
            return null;
        var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
        var rootClassName = "str-chat__message-".concat(messageType, "-status str-chat__message-status");
        var sending = message.status === 'sending';
        var delivered = message.status === 'received' && message.id === lastReceivedId && !threadList;
        var deliveredAndRead = !!((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe);
        var lastReadUser = (deliveredAndRead
            ? readBy.filter(function (item) { var _a; return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id); })
            : [])[0];
        return (React__default["default"].createElement("span", { className: rootClassName, "data-testid": clsx({
                'message-status-read-by': deliveredAndRead,
                'message-status-received': delivered && !deliveredAndRead,
                'message-status-sending': sending,
            }), onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
            sending && (React__default["default"].createElement(React__default["default"].Fragment, null,
                themeVersion === '1' && React__default["default"].createElement(Tooltip, null, t('Sending...')),
                themeVersion === '2' && (React__default["default"].createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, t('Sending...'))),
                React__default["default"].createElement(LoadingIndicator, null))),
            delivered && !deliveredAndRead && (React__default["default"].createElement(React__default["default"].Fragment, null,
                themeVersion === '1' && React__default["default"].createElement(Tooltip, null, t('Delivered')),
                themeVersion === '2' && (React__default["default"].createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, t('Delivered'))),
                themeVersion === '2' ? React__default["default"].createElement(MessageDeliveredIcon, null) : React__default["default"].createElement(DeliveredCheckIcon, null))),
            deliveredAndRead && (React__default["default"].createElement(React__default["default"].Fragment, null,
                themeVersion === '1' && (React__default["default"].createElement(Tooltip, null, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper))),
                themeVersion === '2' && (React__default["default"].createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper))),
                React__default["default"].createElement(Avatar$1, { image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, size: 15, user: lastReadUser }),
                readBy.length > 2 && (React__default["default"].createElement("span", { className: "str-chat__message-".concat(messageType, "-status-number"), "data-testid": 'message-status-read-by-many' }, readBy.length - 1))))));
    };
    var MessageStatus = React__default["default"].memo(UnMemoizedMessageStatus);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var QuotedMessage = function () {
        var _a, _b, _c;
        var _d = useComponentContext('QuotedMessage'), Attachment = _d.Attachment, ContextAvatar = _d.Avatar;
        var _e = useMessageContext('QuotedMessage'), isMyMessage = _e.isMyMessage, message = _e.message;
        var _f = useTranslationContext('QuotedMessage'), t = _f.t, userLanguage = _f.userLanguage;
        var jumpToMessage = useChannelActionContext('QuotedMessage').jumpToMessage;
        var Avatar$1 = ContextAvatar || Avatar;
        var quoted_message = message.quoted_message;
        if (!quoted_message)
            return null;
        var quotedMessageDeleted = quoted_message.deleted_at || quoted_message.type === 'deleted';
        var quotedMessageText = quotedMessageDeleted
            ? t('This message was deleted...')
            : ((_a = quoted_message.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) ||
                quoted_message.text;
        var quotedMessageAttachment = ((_b = quoted_message.attachments) === null || _b === void 0 ? void 0 : _b.length) && !quotedMessageDeleted
            ? quoted_message.attachments[0]
            : null;
        if (!quotedMessageText && !quotedMessageAttachment)
            return null;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", { className: clsx('str-chat__quoted-message-preview quoted-message', { mine: isMyMessage() }), "data-testid": 'quoted-message', onClickCapture: function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    jumpToMessage(quoted_message.id);
                } },
                quoted_message.user && (React__default["default"].createElement(Avatar$1, { image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, size: 20, user: quoted_message.user })),
                React__default["default"].createElement("div", { className: 'quoted-message-inner str-chat__quoted-message-bubble', "data-testid": 'quoted-message-contents' },
                    quotedMessageAttachment && React__default["default"].createElement(Attachment, { attachments: [quotedMessageAttachment] }),
                    React__default["default"].createElement("div", { "data-testid": 'quoted-message-text' }, quotedMessageText))),
            ((_c = message.attachments) === null || _c === void 0 ? void 0 : _c.length) ? React__default["default"].createElement(Attachment, { attachments: message.attachments }) : null));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function MessageErrorText(_a) {
        var message = _a.message, theme = _a.theme;
        var t = useTranslationContext('MessageText').t;
        if (message.type === 'error' && !isMessageBounced(message)) {
            return (React__default["default"].createElement("div", { className: "str-chat__".concat(theme, "-message--error-message str-chat__message--error-message") }, t('Error · Unsent')));
        }
        if (message.status === 'failed') {
            return (React__default["default"].createElement("div", { className: "str-chat__".concat(theme, "-message--error-message str-chat__message--error-message") }, message.errorStatusCode !== 403
                ? t('Message Failed · Click to try again')
                : t('Message Failed · Unauthorized')));
        }
        return null;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageTextComponent = function (props) {
        var _a, _b;
        var customInnerClass = props.customInnerClass, _c = props.customWrapperClass, customWrapperClass = _c === void 0 ? '' : _c, propMessage = props.message, propsRenderText = props.renderText, _d = props.theme, theme = _d === void 0 ? 'simple' : _d;
        var _e = useComponentContext('MessageText').QuotedMessage, QuotedMessage$1 = _e === void 0 ? QuotedMessage : _e;
        var _f = useMessageContext('MessageText'), contextMessage = _f.message, onMentionsClickMessage = _f.onMentionsClickMessage, onMentionsHoverMessage = _f.onMentionsHoverMessage, contextRenderText = _f.renderText, unsafeHTML = _f.unsafeHTML;
        var renderText$1 = (_a = propsRenderText !== null && propsRenderText !== void 0 ? propsRenderText : contextRenderText) !== null && _a !== void 0 ? _a : renderText;
        var userLanguage = useTranslationContext('MessageText').userLanguage;
        var message = propMessage || contextMessage;
        var hasAttachment = messageHasAttachments(message);
        var messageTextToRender = ((_b = message.i18n) === null || _b === void 0 ? void 0 : _b["".concat(userLanguage, "_text")]) || message.text;
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var messageText = React$2.useMemo(function () { return renderText$1(messageTextToRender, message.mentioned_users); }, [
            message.mentioned_users,
            messageTextToRender,
        ]);
        var wrapperClass = customWrapperClass || 'str-chat__message-text';
        var innerClass = customInnerClass || "str-chat__message-text-inner str-chat__message-".concat(theme, "-text-inner");
        if (!messageTextToRender && !message.quoted_message)
            return null;
        return (React__default["default"].createElement("div", { className: wrapperClass, tabIndex: 0 },
            React__default["default"].createElement("div", { className: "\n          ".concat(innerClass, "\n          ").concat(hasAttachment ? " str-chat__message-".concat(theme, "-text-inner--has-attachment") : '', "\n          ").concat(isOnlyEmojis(message.text) && !message.quoted_message
                    ? " str-chat__message-".concat(theme, "-text-inner--is-emoji")
                    : '', "\n        ").trim(), "data-testid": 'message-text-inner-wrapper', onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage },
                message.quoted_message && React__default["default"].createElement(QuotedMessage$1, null),
                React__default["default"].createElement(MessageErrorText, { message: message, theme: theme }),
                unsafeHTML && message.html ? (React__default["default"].createElement("div", { dangerouslySetInnerHTML: { __html: message.html } })) : (React__default["default"].createElement("div", null, messageText)))));
    };
    var MessageText = React__default["default"].memo(UnMemoizedMessageTextComponent);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';
    var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';
    function getDateString(_a) {
        var calendar = _a.calendar, format = _a.format, formatDate = _a.formatDate, messageCreatedAt = _a.messageCreatedAt, tDateTimeParser = _a.tDateTimeParser;
        if (!messageCreatedAt ||
            (typeof messageCreatedAt === 'string' && !Date.parse(messageCreatedAt))) {
            console.warn(notValidDateWarning);
            return null;
        }
        if (typeof formatDate === 'function') {
            return formatDate(new Date(messageCreatedAt));
        }
        if (!tDateTimeParser) {
            console.warn(noParsingFunctionWarning);
            return null;
        }
        var parsedTime = tDateTimeParser(messageCreatedAt);
        if (isDayOrMoment(parsedTime)) {
            /**
             * parsedTime.calendar is guaranteed on the type but is only
             * available when a user calls dayjs.extend(calendar)
             */
            return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);
        }
        if (isDate(parsedTime)) {
            return parsedTime.toDateString();
        }
        if (isNumberOrString(parsedTime)) {
            return parsedTime;
        }
        return null;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultTimestampFormat = 'h:mmA';
    var UnMemoizedMessageTimestamp = function (props) {
        var _a = props.calendar, calendar = _a === void 0 ? false : _a, _b = props.customClass, customClass = _b === void 0 ? '' : _b, _c = props.format, format = _c === void 0 ? defaultTimestampFormat : _c, propMessage = props.message;
        var _d = useMessageContext('MessageTimestamp'), formatDate = _d.formatDate, contextMessage = _d.message;
        var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;
        var message = propMessage || contextMessage;
        var messageCreatedAt = message.created_at && isDate(message.created_at)
            ? message.created_at.toISOString()
            : message.created_at;
        var when = React$2.useMemo(function () { return getDateString({ calendar: calendar, format: format, formatDate: formatDate, messageCreatedAt: messageCreatedAt, tDateTimeParser: tDateTimeParser }); }, [formatDate, calendar, tDateTimeParser, format, messageCreatedAt]);
        if (!when)
            return null;
        return (React__default["default"].createElement("time", { className: customClass, dateTime: messageCreatedAt, title: messageCreatedAt }, when));
    };
    var MessageTimestamp = React__default["default"].memo(UnMemoizedMessageTimestamp);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CUSTOM_MESSAGE_TYPE = {
        date: 'message.date',
        intro: 'channel.intro',
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useFileState = function (file) {
        return React$2.useMemo(function () { return ({
            failed: file.state === 'failed',
            finished: file.state === 'finished',
            uploading: file.state === 'uploading',
        }); }, [file.state]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var EmojiIconLarge = function () {
        var t = useTranslationContext('EmojiIconLarge').t;
        return (React__default["default"].createElement("svg", { height: '28', viewBox: '0 0 28 28', width: '28', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Open emoji picker')),
            React__default["default"].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
                React__default["default"].createElement("path", { d: 'M14 4.4C8.6 4.4 4.4 8.6 4.4 14c0 5.4 4.2 9.6 9.6 9.6c5.4 0 9.6-4.2 9.6-9.6c0-5.4-4.2-9.6-9.6-9.6zM2 14c0-6.6 5.4-12 12-12s12 5.4 12 12s-5.4 12-12 12s-12-5.4-12-12zM12.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM18.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM8.6 15.4c.6-.4 1.2-.2 1.6.2c.6.8 1.6 1.8 3 2c1.2.4 2.8.2 4.8-2c.4-.4 1.2-.6 1.6 0c.4.4.6 1.2 0 1.6c-2.2 2.6-4.8 3.4-7 3c-2-.4-3.6-1.8-4.4-3c-.4-.6-.2-1.2.4-1.8z' }))));
    };
    var EmojiIconSmall = function () {
        var t = useTranslationContext('EmojiIconSmall').t;
        return (React__default["default"].createElement("svg", { height: '14', viewBox: '0 0 14 14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Open emoji picker')),
            React__default["default"].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
                React__default["default"].createElement("path", { d: 'M6.7 1.42C3.73 1.42 1.42 3.73 1.42 6.7c0 2.97 2.31 5.28 5.28 5.28c2.97 0 5.28-2.31 5.28-5.28c0-2.97-2.31-5.28-5.28-5.28zM.1 6.7c0-3.63 2.97-6.6 6.6-6.6s6.6 2.97 6.6 6.6s-2.97 6.6-6.6 6.6s-6.6-2.97-6.6-6.6zM6.04 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM9.34 5.05c0 .55-.44.99-.99.99s-.99-.44-.99-.99s.44-.99.99-.99s.99.44.99.99zM3.73 7.47c.33-.22.66-.11.88.11c.33.44.88.99 1.65 1.1c.66.22 1.54.11 2.64-1.1c.22-.22.66-.33.88 0c.22.22.33.66 0 .88c-1.21 1.43-2.64 1.87-3.85 1.65c-1.1-.22-1.98-.99-2.42-1.65c-.22-.33-.11-.66.22-.99z' }))));
    };
    // ThemingV2 icon
    var EmojiPickerIcon = function () { return (React__default["default"].createElement("svg", { preserveAspectRatio: 'xMinYMin', viewBox: '0 0 28 28', width: '100%', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("g", { clipRule: 'evenodd', fillRule: 'evenodd' },
            React__default["default"].createElement("path", { d: 'M14 4.4C8.6 4.4 4.4 8.6 4.4 14c0 5.4 4.2 9.6 9.6 9.6c5.4 0 9.6-4.2 9.6-9.6c0-5.4-4.2-9.6-9.6-9.6zM2 14c0-6.6 5.4-12 12-12s12 5.4 12 12s-5.4 12-12 12s-12-5.4-12-12zM12.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM18.8 11c0 1-.8 1.8-1.8 1.8s-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8s1.8.8 1.8 1.8zM8.6 15.4c.6-.4 1.2-.2 1.6.2c.6.8 1.6 1.8 3 2c1.2.4 2.8.2 4.8-2c.4-.4 1.2-.6 1.6 0c.4.4.6 1.2 0 1.6c-2.2 2.6-4.8 3.4-7 3c-2-.4-3.6-1.8-4.4-3c-.4-.6-.2-1.2.4-1.8z' })))); };
    var FileUploadIcon = function () {
        var t = useTranslationContext('FileUploadIcon').t;
        return (React__default["default"].createElement("svg", { height: '14', viewBox: '0 0 14 14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Attach files')),
            React__default["default"].createElement("path", { d: 'M7 .5c3.59 0 6.5 2.91 6.5 6.5s-2.91 6.5-6.5 6.5S.5 10.59.5 7 3.41.5 7 .5zm0 12c3.031 0 5.5-2.469 5.5-5.5S10.031 1.5 7 1.5A5.506 5.506 0 0 0 1.5 7c0 3.034 2.469 5.5 5.5 5.5zM7.506 3v3.494H11v1.05H7.506V11h-1.05V7.544H3v-1.05h3.456V3h1.05z', fillRule: 'nonzero' })));
    };
    var FileUploadIconFlat = function () {
        var t = useTranslationContext('FileUploadIconFlat').t;
        return (React__default["default"].createElement("svg", { height: '14', viewBox: '0 0 14 14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Attach files')),
            React__default["default"].createElement("path", { d: 'M1.667.333h10.666c.737 0 1.334.597 1.334 1.334v10.666c0 .737-.597 1.334-1.334 1.334H1.667a1.333 1.333 0 0 1-1.334-1.334V1.667C.333.93.93.333 1.667.333zm2 1.334a1.667 1.667 0 1 0 0 3.333 1.667 1.667 0 0 0 0-3.333zm-2 9.333v1.333h10.666v-4l-2-2-4 4-2-2L1.667 11z', fillRule: 'nonzero' })));
    };
    var LoadingIndicatorIcon = function (_a) {
        var _b = _a.size, size = _b === void 0 ? 20 : _b;
        var id = React$2.useMemo(function () { return nanoid(); }, []);
        return (React__default["default"].createElement("div", { className: 'str-chat__loading-indicator' },
            React__default["default"].createElement("svg", { "data-testid": 'loading-indicator', height: size, viewBox: '0 0 30 30', width: size, xmlns: 'http://www.w3.org/2000/svg' },
                React__default["default"].createElement("defs", null,
                    React__default["default"].createElement("linearGradient", { id: "".concat(id, "-linear-gradient"), x1: '50%', x2: '50%', y1: '0%', y2: '100%' },
                        React__default["default"].createElement("stop", { offset: '0%', stopColor: '#FFF', stopOpacity: '0' }),
                        React__default["default"].createElement("stop", { "data-testid": 'stop-color', offset: '100%', stopOpacity: '1' }))),
                React__default["default"].createElement("path", { d: 'M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z', fill: "url(#".concat(id, "-linear-gradient)"), fillRule: 'evenodd' }))));
    };
    // ThemingV2 icon
    var UploadIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'attach', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("g", { clipPath: 'url(#clip0_10878_5)' },
            React__default["default"].createElement("path", { d: 'M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z', fill: 'black' })),
        React__default["default"].createElement("defs", null,
            React__default["default"].createElement("clipPath", { id: 'clip0_10878_5' },
                React__default["default"].createElement("rect", { fill: 'white', height: '24', width: '24' }))))); };
    var CloseIcon$2 = function () { return (React__default["default"].createElement("svg", { "data-testid": 'close-no-outline', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z', fill: 'black' }))); };
    var RetryIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'retry', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z', fill: 'black' }))); };
    var DownloadIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'download', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z', fill: 'black' }))); };
    var LinkIcon = function () { return (React__default["default"].createElement("svg", { fill: 'none', height: '11', viewBox: '0 0 20 11', width: '20', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M1.9 5.5C1.9 3.79 3.29 2.4 5 2.4H8.05C8.57467 2.4 9 1.97467 9 1.45C9 0.925329 8.57467 0.5 8.05 0.5H5C2.24 0.5 0 2.74 0 5.5C0 8.26 2.24 10.5 5 10.5H8.05C8.57467 10.5 9 10.0747 9 9.55C9 9.02533 8.57467 8.6 8.05 8.6H5C3.29 8.6 1.9 7.21 1.9 5.5ZM6 5.5C6 6.05228 6.44772 6.5 7 6.5H13C13.5523 6.5 14 6.05228 14 5.5C14 4.94772 13.5523 4.5 13 4.5H7C6.44772 4.5 6 4.94772 6 5.5ZM15 0.5H11.95C11.4253 0.5 11 0.925329 11 1.45C11 1.97467 11.4253 2.4 11.95 2.4H15C16.71 2.4 18.1 3.79 18.1 5.5C18.1 7.21 16.71 8.6 15 8.6H11.95C11.4253 8.6 11 9.02533 11 9.55C11 10.0747 11.4253 10.5 11.95 10.5H15C17.76 10.5 20 8.26 20 5.5C20 2.74 17.76 0.5 15 0.5Z', fill: '#005DFF', fillRule: 'evenodd' }))); };
    var SendIconV1 = function () {
        var t = useTranslationContext('SendButton').t;
        return (React__default["default"].createElement("svg", { height: '17', viewBox: '0 0 18 17', width: '18', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Send')),
            React__default["default"].createElement("path", { d: 'M0 17.015l17.333-8.508L0 0v6.617l12.417 1.89L0 10.397z', fill: '#006cff', fillRule: 'evenodd' })));
    };
    var SendIconV2 = function () {
        var t = useTranslationContext('SendButton').t;
        return (React__default["default"].createElement("svg", { "data-testid": 'send', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, t('Send')),
            React__default["default"].createElement("path", { d: 'M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z', fill: 'black' })));
    };
    var SendButton = function (_a) {
        var sendMessage = _a.sendMessage, rest = __rest(_a, ["sendMessage"]);
        var themeVersion = useChatContext('SendButton').themeVersion;
        var t = useTranslationContext('SendButton').t;
        return (React__default["default"].createElement("button", __assign({ "aria-label": t('aria/Send'), className: 'str-chat__send-button', "data-testid": 'send-button', onClick: sendMessage, type: 'button' }, rest), themeVersion === '2' ? React__default["default"].createElement(SendIconV2, null) : React__default["default"].createElement(SendIconV1, null)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var AttachmentPreviewList = function () {
        var _a = useMessageInputContext('AttachmentPreviewList'), fileOrder = _a.fileOrder, imageOrder = _a.imageOrder;
        return (React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-list' },
            React__default["default"].createElement("div", { className: 'str-chat__attachment-list-scroll-container', "data-testid": 'attachment-list-scroll-container' },
                imageOrder.map(function (id) { return (React__default["default"].createElement(ImagePreviewItem, { id: id, key: id })); }),
                fileOrder.map(function (id) { return (React__default["default"].createElement(FilePreviewItem, { id: id, key: id })); }))));
    };
    var ImagePreviewItem = function (_a) {
        var _b;
        var id = _a.id;
        var _c = useComponentContext('ImagePreviewItem').BaseImage, BaseImage$1 = _c === void 0 ? BaseImage : _c;
        var _d = useMessageInputContext('ImagePreviewItem'), imageUploads = _d.imageUploads, removeImage = _d.removeImage, uploadImage = _d.uploadImage;
        var _e = React$2.useState(false), previewError = _e[0], setPreviewError = _e[1];
        var handleRemove = React$2.useCallback(function (e) {
            e.stopPropagation();
            removeImage(id);
        }, [removeImage, id]);
        var handleRetry = React$2.useCallback(function () { return uploadImage(id); }, [uploadImage, id]);
        var handleLoadError = React$2.useCallback(function () { return setPreviewError(true); }, []);
        var image = imageUploads[id];
        // do not display scraped attachments
        if (!image || image.og_scrape_url)
            return null;
        return (React__default["default"].createElement("div", { className: clsx('str-chat__attachment-preview-image', {
                'str-chat__attachment-preview-image--error': previewError,
            }), "data-testid": 'attachment-preview-image' },
            React__default["default"].createElement("button", { className: 'str-chat__attachment-preview-delete', "data-testid": 'image-preview-item-delete-button', disabled: image.state === 'uploading', onClick: handleRemove },
                React__default["default"].createElement(CloseIcon$2, null)),
            image.state === 'failed' && (React__default["default"].createElement("button", { className: 'str-chat__attachment-preview-error str-chat__attachment-preview-error-image', "data-testid": 'image-preview-item-retry-button', onClick: handleRetry },
                React__default["default"].createElement(RetryIcon, null))),
            image.state === 'uploading' && (React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-image-loading' },
                React__default["default"].createElement(LoadingIndicatorIcon, { size: 17 }))),
            (image.previewUri || image.url) && (React__default["default"].createElement(BaseImage$1, { alt: image.file.name, className: 'str-chat__attachment-preview-thumbnail', onError: handleLoadError, src: (_b = image.previewUri) !== null && _b !== void 0 ? _b : image.url, title: image.file.name }))));
    };
    var FilePreviewItem = function (_a) {
        var id = _a.id;
        var _b = useMessageInputContext('FilePreviewItem'), fileUploads = _b.fileUploads, removeFile = _b.removeFile, uploadFile = _b.uploadFile;
        var handleRemove = React$2.useCallback(function (e) {
            e.stopPropagation();
            removeFile(id);
        }, [removeFile, id]);
        var handleRetry = React$2.useCallback(function () { return uploadFile(id); }, [uploadFile, id]);
        var file = fileUploads[id];
        var state = useFileState(file);
        if (!file)
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-file', "data-testid": 'attachment-preview-file' },
            React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-file-icon' },
                React__default["default"].createElement(FileIcon, { filename: file.file.name, mimeType: file.file.type, version: '2' })),
            React__default["default"].createElement("button", { className: 'str-chat__attachment-preview-delete', "data-testid": 'file-preview-item-delete-button', disabled: state.uploading, onClick: handleRemove },
                React__default["default"].createElement(CloseIcon$2, null)),
            state.failed && (React__default["default"].createElement("button", { className: 'str-chat__attachment-preview-error str-chat__attachment-preview-error-file', "data-testid": 'file-preview-item-retry-button', onClick: handleRetry },
                React__default["default"].createElement(RetryIcon, null))),
            React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-file-end' },
                React__default["default"].createElement("div", { className: 'str-chat__attachment-preview-file-name' }, file.file.name),
                state.finished && (React__default["default"].createElement("a", { className: 'str-chat__attachment-preview-file-download', download: true, href: file.url, rel: 'noreferrer', target: '_blank' },
                    React__default["default"].createElement(DownloadIcon, null))),
                state.uploading && React__default["default"].createElement(LoadingIndicatorIcon, { size: 17 }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CooldownTimer = function (_a) {
        var cooldownInterval = _a.cooldownInterval;
        var _b = React$2.useState(), seconds = _b[0], setSeconds = _b[1];
        React$2.useEffect(function () {
            var countdownTimeout;
            if (typeof seconds === 'number' && seconds > 0) {
                countdownTimeout = setTimeout(function () {
                    setSeconds(seconds - 1);
                }, 1000);
            }
            return function () {
                clearTimeout(countdownTimeout);
            };
        }, [seconds]);
        React$2.useEffect(function () {
            setSeconds(cooldownInterval !== null && cooldownInterval !== void 0 ? cooldownInterval : 0);
        }, [cooldownInterval]);
        return (React__default["default"].createElement("div", { className: 'str-chat__message-input-cooldown', "data-testid": 'cooldown-timer' }, seconds));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCommandTrigger = function () {
        var themeVersion = useChatContext('useCommandTrigger').themeVersion;
        var channelConfig = useChannelStateContext('useCommandTrigger').channelConfig;
        var t = useTranslationContext('useCommandTrigger').t;
        var commands = channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.commands;
        return {
            component: CommandItem,
            dataProvider: function (query, text, onReady) {
                if (text.indexOf('/') !== 0 || !commands) {
                    return [];
                }
                var selectedCommands = commands.filter(function (command) { var _a; return ((_a = command.name) === null || _a === void 0 ? void 0 : _a.indexOf(query)) !== -1; });
                // sort alphabetically unless you're matching the first char
                selectedCommands.sort(function (a, b) {
                    var _a, _b;
                    var nameA = (_a = a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();
                    var nameB = (_b = b.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();
                    if ((nameA === null || nameA === void 0 ? void 0 : nameA.indexOf(query)) === 0) {
                        nameA = "0".concat(nameA);
                    }
                    if ((nameB === null || nameB === void 0 ? void 0 : nameB.indexOf(query)) === 0) {
                        nameB = "0".concat(nameB);
                    }
                    // Should confirm possible null / undefined when TS is fully implemented
                    if (nameA != null && nameB != null) {
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                    }
                    return 0;
                });
                var result = selectedCommands.slice(0, themeVersion === '2' ? 5 : 10);
                if (onReady)
                    onReady(result
                        .filter(function (result) {
                        return result.name !== undefined;
                    })
                        .map(function (commandData) {
                        var translatedCommandData = {
                            name: commandData.name,
                        };
                        if (commandData.args)
                            translatedCommandData.args = t("".concat(commandData.name, "-command-args"), {
                                defaultValue: commandData.args,
                            });
                        if (commandData.description)
                            translatedCommandData.description = t("".concat(commandData.name, "-command-description"), {
                                defaultValue: commandData.description,
                            });
                        return translatedCommandData;
                    }), query);
                return result;
            },
            output: function (entity) { return ({
                caretPosition: 'next',
                key: entity.name,
                text: "/".concat(entity.name),
            }); },
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedEmoticonItem = function (props) {
        var entity = props.entity;
        var hasEntity = Object.keys(entity).length;
        var itemParts = entity === null || entity === void 0 ? void 0 : entity.itemNameParts;
        var renderName = function () {
            if (!hasEntity)
                return null;
            return (hasEntity &&
                itemParts.parts.map(function (part, i) {
                    return part.toLowerCase() === itemParts.match.toLowerCase() ? (React__default["default"].createElement("span", { className: 'str-chat__emoji-item--highlight', key: "part-".concat(i) }, part)) : (React__default["default"].createElement("span", { className: 'str-chat__emoji-item--part', key: "part-".concat(i) }, part));
                }));
        };
        return (React__default["default"].createElement("div", { className: 'str-chat__emoji-item' },
            React__default["default"].createElement("span", { className: 'str-chat__emoji-item--entity' }, entity.native),
            React__default["default"].createElement("span", { className: 'str-chat__emoji-item--name' }, renderName())));
    };
    var EmoticonItem = React__default["default"].memo(UnMemoizedEmoticonItem);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEmojiTrigger = function (emojiSearchIndex) {
        var themeVersion = useChatContext('useEmojiTrigger').themeVersion;
        return {
            component: EmoticonItem,
            dataProvider: function (query, _, onReady) { return __awaiter(void 0, void 0, void 0, function () {
                var emojis, result;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
                                return [2 /*return*/, onReady([], query)];
                            }
                            return [4 /*yield*/, (emojiSearchIndex === null || emojiSearchIndex === void 0 ? void 0 : emojiSearchIndex.search(query))];
                        case 1:
                            emojis = (_a = (_b.sent())) !== null && _a !== void 0 ? _a : [];
                            result = emojis
                                .filter(Boolean)
                                .slice(0, themeVersion === '2' ? 7 : 10)
                                .map(function (_a) {
                                var id = _a.id, name = _a.name, native = _a.native, _b = _a.skins, skins = _b === void 0 ? [] : _b;
                                var firstSkin = skins[0];
                                return {
                                    id: id,
                                    name: name,
                                    native: native !== null && native !== void 0 ? native : firstSkin.native,
                                };
                            });
                            if (onReady)
                                onReady(result, query);
                            return [2 /*return*/];
                    }
                });
            }); },
            output: function (entity) { return ({
                caretPosition: 'next',
                key: entity.id,
                text: "".concat('native' in entity ? entity.native : ''),
            }); },
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var accentsMap = {
        a: 'á|à|ã|â|À|Á|Ã|Â',
        c: 'ç|Ç',
        e: 'é|è|ê|É|È|Ê',
        i: 'í|ì|î|Í|Ì|Î',
        n: 'ñ|Ñ',
        o: 'ó|ò|ô|ő|õ|Ó|Ò|Ô|Õ',
        u: 'ú|ù|û|ü|Ú|Ù|Û|Ü',
    };
    var removeDiacritics = function (text) {
        if (!text)
            return '';
        return Object.keys(accentsMap).reduce(function (acc, current) { return acc.replace(new RegExp(accentsMap[current], 'g'), current); }, text);
    };
    var calculateLevenshtein = function (query, name) {
        if (query.length === 0)
            return name.length;
        if (name.length === 0)
            return query.length;
        var matrix = [];
        var i;
        for (i = 0; i <= name.length; i++) {
            matrix[i] = [i];
        }
        var j;
        for (j = 0; j <= query.length; j++) {
            matrix[0][j] = j;
        }
        for (i = 1; i <= name.length; i++) {
            for (j = 1; j <= query.length; j++) {
                if (name.charAt(i - 1) === query.charAt(j - 1)) {
                    matrix[i][j] = matrix[i - 1][j - 1];
                }
                else {
                    matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
                    Math.min(matrix[i][j - 1] + 1, // insertion
                    matrix[i - 1][j] + 1)); // deletion
                }
            }
        }
        return matrix[name.length][query.length];
    };
    var searchLocalUsers = function (params) {
        var ownUserId = params.ownUserId, query = params.query, text = params.text, useMentionsTransliteration = params.useMentionsTransliteration, users = params.users;
        var matchingUsers = users.filter(function (user) {
            if (user.id === ownUserId)
                return false;
            if (!query)
                return true;
            var updatedId = removeDiacritics(user.id).toLowerCase();
            var updatedName = removeDiacritics(user.name).toLowerCase();
            var updatedQuery = removeDiacritics(query).toLowerCase();
            if (useMentionsTransliteration) {
                (function () { return __awaiter(void 0, void 0, void 0, function () {
                    var transliterate;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, Promise.resolve().then(function () { return index_modern; })];
                            case 1:
                                transliterate = (_a.sent()).default;
                                updatedName = transliterate(user.name || '').toLowerCase();
                                updatedQuery = transliterate(query).toLowerCase();
                                updatedId = transliterate(user.id).toLowerCase();
                                return [2 /*return*/];
                        }
                    });
                }); })();
            }
            var maxDistance = 3;
            var lastDigits = text.slice(-(maxDistance + 1)).includes('@');
            if (updatedName) {
                var levenshtein_1 = calculateLevenshtein(updatedQuery, updatedName);
                if (updatedName.includes(updatedQuery) || (levenshtein_1 <= maxDistance && lastDigits)) {
                    return true;
                }
            }
            var levenshtein = calculateLevenshtein(updatedQuery, updatedId);
            return updatedId.includes(updatedQuery) || (levenshtein <= maxDistance && lastDigits);
        });
        return matchingUsers;
    };
    var checkUploadPermissions = function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var addNotification, file, getAppSettings, t, uploadType, appSettings, _a, allowed_file_extensions, allowed_mime_types, blocked_file_extensions, blocked_mime_types, sendErrorNotification, allowed, blocked, allowed, blocked;
        var _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    addNotification = params.addNotification, file = params.file, getAppSettings = params.getAppSettings, t = params.t, uploadType = params.uploadType;
                    appSettings = null;
                    return [4 /*yield*/, getAppSettings()];
                case 1:
                    appSettings = _d.sent();
                    _a = (uploadType === 'image'
                        ? (_b = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _b === void 0 ? void 0 : _b.image_upload_config
                        : (_c = appSettings === null || appSettings === void 0 ? void 0 : appSettings.app) === null || _c === void 0 ? void 0 : _c.file_upload_config) || {}, allowed_file_extensions = _a.allowed_file_extensions, allowed_mime_types = _a.allowed_mime_types, blocked_file_extensions = _a.blocked_file_extensions, blocked_mime_types = _a.blocked_mime_types;
                    sendErrorNotification = function () {
                        return addNotification(t("Upload type: \"{{ type }}\" is not allowed", { type: file.type || 'unknown type' }), 'error');
                    };
                    if (allowed_file_extensions === null || allowed_file_extensions === void 0 ? void 0 : allowed_file_extensions.length) {
                        allowed = allowed_file_extensions.some(function (ext) {
                            return file.name.toLowerCase().endsWith(ext.toLowerCase());
                        });
                        if (!allowed) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (blocked_file_extensions === null || blocked_file_extensions === void 0 ? void 0 : blocked_file_extensions.length) {
                        blocked = blocked_file_extensions.some(function (ext) {
                            return file.name.toLowerCase().endsWith(ext.toLowerCase());
                        });
                        if (blocked) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (allowed_mime_types === null || allowed_mime_types === void 0 ? void 0 : allowed_mime_types.length) {
                        allowed = allowed_mime_types.some(function (type) { var _a; return type.toLowerCase() === ((_a = file.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
                        if (!allowed) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    if (blocked_mime_types === null || blocked_mime_types === void 0 ? void 0 : blocked_mime_types.length) {
                        blocked = blocked_mime_types.some(function (type) { var _a; return type.toLowerCase() === ((_a = file.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
                        if (blocked) {
                            sendErrorNotification();
                            return [2 /*return*/, false];
                        }
                    }
                    return [2 /*return*/, true];
            }
        });
    }); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserTrigger = function (params) {
        var disableMentions = params.disableMentions, mentionAllAppUsers = params.mentionAllAppUsers, _a = params.mentionQueryParams, mentionQueryParams = _a === void 0 ? {} : _a, onSelectUser = params.onSelectUser, useMentionsTransliteration = params.useMentionsTransliteration;
        var _b = React$2.useState(false), searching = _b[0], setSearching = _b[1];
        var _c = useChatContext('useUserTrigger'), client = _c.client, mutes = _c.mutes, themeVersion = _c.themeVersion;
        var channel = useChannelStateContext('useUserTrigger').channel;
        var members = channel.state.members;
        var watchers = channel.state.watchers;
        var getMembersAndWatchers = React$2.useCallback(function () {
            var memberUsers = members ? Object.values(members).map(function (_a) {
                var user = _a.user;
                return user;
            }) : [];
            var watcherUsers = watchers ? Object.values(watchers) : [];
            var users = __spreadArray(__spreadArray([], memberUsers, true), watcherUsers, true);
            // make sure we don't list users twice
            var uniqueUsers = {};
            users.forEach(function (user) {
                if (user && !uniqueUsers[user.id]) {
                    uniqueUsers[user.id] = user;
                }
            });
            return Object.values(uniqueUsers);
        }, [members, watchers]);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var queryMembersThrottled = React$2.useCallback(lodash_throttle(function (query, onReady) { return __awaiter(void 0, void 0, void 0, function () {
            var response, users, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, channel.queryMembers({
                                name: { $autocomplete: query },
                            })];
                    case 1:
                        response = _a.sent();
                        users = response.members.map(function (member) { return member.user; });
                        if (onReady && users.length) {
                            onReady(users);
                        }
                        else {
                            onReady([]);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        console.log({ error: error_1 });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); }, 200), [channel]);
        var queryUsers = function (query, onReady) { return __awaiter(void 0, void 0, void 0, function () {
            var users, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!query || searching)
                            return [2 /*return*/];
                        setSearching(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.queryUsers(__assign({ $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }], id: { $ne: client.userID } }, (typeof mentionQueryParams.filters === 'function'
                                ? mentionQueryParams.filters(query)
                                : mentionQueryParams.filters)), Array.isArray(mentionQueryParams.sort)
                                ? __spreadArray([{ id: 1 }], mentionQueryParams.sort, true) : __assign({ id: 1 }, mentionQueryParams.sort), __assign({ limit: 10 }, mentionQueryParams.options))];
                    case 2:
                        users = (_a.sent()).users;
                        if (onReady && users.length) {
                            onReady(users);
                        }
                        else {
                            onReady([]);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        console.log({ error: error_2 });
                        return [3 /*break*/, 4];
                    case 4:
                        setSearching(false);
                        return [2 /*return*/];
                }
            });
        }); };
        var queryUsersThrottled = lodash_throttle(queryUsers, 200);
        return {
            callback: function (item) { return onSelectUser(item); },
            component: UserItem,
            dataProvider: function (query, text, onReady) {
                var _a, _b;
                if (disableMentions)
                    return;
                var filterMutes = function (data) {
                    if (text.includes('/unmute') && !mutes.length) {
                        return [];
                    }
                    if (!mutes.length)
                        return data;
                    if (text.includes('/unmute')) {
                        return data.filter(function (suggestion) {
                            return mutes.some(function (mute) { return mute.target.id === suggestion.id; });
                        });
                    }
                    return data.filter(function (suggestion) { return mutes.every(function (mute) { return mute.target.id !== suggestion.id; }); });
                };
                if (mentionAllAppUsers) {
                    return queryUsersThrottled(query, function (data) {
                        if (onReady)
                            onReady(filterMutes(data), query);
                    });
                }
                /**
                 * By default, we return maximum 100 members via queryChannels api call.
                 * Thus it is safe to assume, that if number of members in channel.state is < 100,
                 * then all the members are already available on client side and we don't need to
                 * make any api call to queryMembers endpoint.
                 */
                if (!query || Object.values(members || {}).length < 100) {
                    var users = getMembersAndWatchers();
                    var params_1 = {
                        ownUserId: client.userID,
                        query: query,
                        text: text,
                        useMentionsTransliteration: useMentionsTransliteration,
                        users: users,
                    };
                    var matchingUsers = searchLocalUsers(params_1);
                    var usersToShow = (_b = (_a = mentionQueryParams.options) === null || _a === void 0 ? void 0 : _a.limit) !== null && _b !== void 0 ? _b : (themeVersion === '2' ? 7 : 10);
                    var data = matchingUsers.slice(0, usersToShow);
                    if (onReady)
                        onReady(filterMutes(data), query);
                    return data;
                }
                return queryMembersThrottled(query, function (data) {
                    if (onReady)
                        onReady(filterMutes(data), query);
                });
            },
            output: function (entity) { return ({
                caretPosition: 'next',
                key: entity.id,
                text: "@".concat(entity.name || entity.id),
            }); },
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultTriggerProvider = function (_a) {
        var children = _a.children;
        var currentValue = useMessageInputContext('DefaultTriggerProvider');
        var defaultAutocompleteTriggers = {
            '/': useCommandTrigger(),
            ':': useEmojiTrigger(currentValue.emojiSearchIndex),
            '@': useUserTrigger({
                disableMentions: currentValue.disableMentions,
                mentionAllAppUsers: currentValue.mentionAllAppUsers,
                mentionQueryParams: currentValue.mentionQueryParams,
                onSelectUser: currentValue.onSelectUser,
                useMentionsTransliteration: currentValue.useMentionsTransliteration,
            }),
        };
        var newValue = __assign(__assign({}, currentValue), { autocompleteTriggers: defaultAutocompleteTriggers });
        return React__default["default"].createElement(MessageInputContextProvider, { value: newValue }, children);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @deprecated This component has been deprecated in favor of `AttachmentPreviewList` as this component
     * utilises outdated components from the package [`react-file-utils`](https://github.com/GetStream/react-file-utils)
     * which will no longer receive updates for aforementioned components.
     *
     * **Will be removed with the complete transition to the theming V2 (next major release - `v11.0.0`).**
     */
    var UploadsPreview = function () {
        var themeVersion = useChatContext('UploadsPreview').themeVersion;
        var _a = useChannelStateContext('UploadsPreview'), _b = _a.maxNumberOfFiles, maxNumberOfFiles = _b === void 0 ? 0 : _b, multipleUploads = _a.multipleUploads;
        var _c = useMessageInputContext('UploadsPreview'), fileOrder = _c.fileOrder, fileUploads = _c.fileUploads, imageOrder = _c.imageOrder, imageUploads = _c.imageUploads, _d = _c.numberOfUploads, numberOfUploads = _d === void 0 ? 0 : _d, removeFile = _c.removeFile, removeImage = _c.removeImage, uploadFile = _c.uploadFile, uploadImage = _c.uploadImage, uploadNewFiles = _c.uploadNewFiles;
        var imagesToPreview = imageOrder
            .map(function (id) { return imageUploads[id]; })
            // filter OG scraped images
            .filter(function (image) { return !image.og_scrape_url; });
        var filesToPreview = fileOrder.map(function (id) { return fileUploads[id]; });
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            imageOrder.length > 0 && (React__default["default"].createElement(ImagePreviewer, { disabled: !multipleUploads || numberOfUploads >= maxNumberOfFiles, handleFiles: uploadNewFiles, handleRemove: removeImage, handleRetry: uploadImage, imageUploads: imagesToPreview, multiple: multipleUploads })),
            fileOrder.length > 0 && (React__default["default"].createElement(FilePreviewer, { fileIconProps: {
                    className: 'str-chat__file-icon',
                    version: themeVersion,
                }, handleFiles: uploadNewFiles, handleRemove: removeFile, handleRetry: uploadFile, uploads: filesToPreview }))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChatAutoComplete = function (props) {
        var _a = useComponentContext('ChatAutoComplete'), SuggestionItem = _a.AutocompleteSuggestionItem, SuggestionList = _a.AutocompleteSuggestionList;
        var t = useTranslationContext('ChatAutoComplete').t;
        var messageInput = useMessageInputContext('ChatAutoComplete');
        var cooldownRemaining = messageInput.cooldownRemaining, disabled = messageInput.disabled, emojiSearchIndex = messageInput.emojiSearchIndex, innerRef = messageInput.textareaRef;
        var placeholder = props.placeholder || t('Type your message');
        var emojiReplace = props.wordReplace
            ? function (word) { var _a; return (_a = props.wordReplace) === null || _a === void 0 ? void 0 : _a.call(props, word, emojiSearchIndex); }
            : function (word) { return __awaiter(void 0, void 0, void 0, function () {
                var found, emoji, firstSkin;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, (emojiSearchIndex === null || emojiSearchIndex === void 0 ? void 0 : emojiSearchIndex.search(word))];
                        case 1:
                            found = (_c.sent()) || [];
                            emoji = found
                                .filter(Boolean)
                                .slice(0, 10)
                                .find(function (_a) {
                                var emoticons = _a.emoticons;
                                return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));
                            });
                            if (!emoji)
                                return [2 /*return*/, null];
                            firstSkin = ((_a = emoji.skins) !== null && _a !== void 0 ? _a : [])[0];
                            return [2 /*return*/, (_b = emoji.native) !== null && _b !== void 0 ? _b : firstSkin.native];
                    }
                });
            }); };
        var updateInnerRef = React$2.useCallback(function (ref) {
            if (innerRef) {
                innerRef.current = ref;
            }
        }, [innerRef]);
        return (React__default["default"].createElement(ReactTextareaAutocomplete, { additionalTextareaProps: messageInput.additionalTextareaProps, "aria-label": cooldownRemaining ? t('Slow Mode ON') : placeholder, className: 'str-chat__textarea__textarea str-chat__message-textarea', closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: 'str-chat__textarea str-chat__message-textarea-react-host', disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, dropdownClassName: 'str-chat__emojisearch', grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, itemClassName: 'str-chat__emojisearch__item', listClassName: 'str-chat__emojisearch__list', loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, shouldSubmit: messageInput.shouldSubmit, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem: SuggestionItem, SuggestionList: SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text }));
    };
    var ChatAutoComplete = React__default["default"].memo(UnMemoizedChatAutoComplete);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var QuotedMessagePreviewHeader = function () {
        var setQuotedMessage = useChannelActionContext('QuotedMessagePreview').setQuotedMessage;
        var t = useTranslationContext('QuotedMessagePreview').t;
        return (React__default["default"].createElement("div", { className: 'quoted-message-preview-header str-chat__quoted-message-preview-header' },
            React__default["default"].createElement("div", { className: 'str-chat__quoted-message-reply-to-message' }, t('Reply to Message')),
            React__default["default"].createElement("button", { "aria-label": t('aria/Cancel Reply'), className: 'str-chat__square-button str-chat__quoted-message-remove', onClick: function () { return setQuotedMessage(undefined); } },
                React__default["default"].createElement(CloseIcon$2, null))));
    };
    var QuotedMessagePreview = function (_a) {
        var _b;
        var quotedMessage = _a.quotedMessage;
        var _c = useComponentContext('QuotedMessagePreview'), Attachment = _c.Attachment, _d = _c.Avatar, Avatar$1 = _d === void 0 ? Avatar : _d;
        var userLanguage = useTranslationContext('QuotedMessagePreview').userLanguage;
        var themeVersion = useChatContext('QuotedMessagePreview').themeVersion;
        var quotedMessageText = ((_b = quotedMessage.i18n) === null || _b === void 0 ? void 0 : _b["".concat(userLanguage, "_text")]) ||
            quotedMessage.text;
        var quotedMessageAttachment = React$2.useMemo(function () {
            var _a;
            var attachment = ((_a = quotedMessage.attachments) !== null && _a !== void 0 ? _a : [])[0];
            return attachment ? [attachment] : [];
        }, [quotedMessage.attachments]);
        if (!quotedMessageText && !quotedMessageAttachment)
            return null;
        // TODO: remove div.quoted-message-preview-content when deprecating V1 theming
        // move str-chat__quoted-message-preview to main div
        return (React__default["default"].createElement("div", { className: 'quoted-message-preview', "data-testid": 'quoted-message-preview' },
            themeVersion === '1' && React__default["default"].createElement(QuotedMessagePreviewHeader, null),
            React__default["default"].createElement("div", { className: 'quoted-message-preview-content str-chat__quoted-message-preview' },
                quotedMessage.user && (React__default["default"].createElement(Avatar$1, { image: quotedMessage.user.image, name: quotedMessage.user.name || quotedMessage.user.id, size: 20, user: quotedMessage.user })),
                React__default["default"].createElement("div", { className: 'quoted-message-preview-content-inner str-chat__quoted-message-bubble' },
                    !!quotedMessageAttachment.length && React__default["default"].createElement(Attachment, { attachments: quotedMessageAttachment }),
                    React__default["default"].createElement("div", { className: 'str-chat__quoted-message-text', "data-testid": 'quoted-message-text' },
                        themeVersion === '2' && React__default["default"].createElement("p", null, quotedMessageText),
                        themeVersion === '1' && React__default["default"].createElement(React__default["default"].Fragment, null, quotedMessageText))))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};exports.LinkPreviewState = void 0;
    (function (LinkPreviewState) {
        /** Link preview has been dismissed using MessageInputContextValue.dismissLinkPreview **/
        LinkPreviewState["DISMISSED"] = "dismissed";
        /** Link preview could not be loaded, the enrichment request has failed. **/
        LinkPreviewState["FAILED"] = "failed";
        /** Link preview has been successfully loaded. **/
        LinkPreviewState["LOADED"] = "loaded";
        /** The enrichment query is in progress for a given link. **/
        LinkPreviewState["LOADING"] = "loading";
        /** The link is scheduled for enrichment. **/
        LinkPreviewState["QUEUED"] = "queued";
    })(exports.LinkPreviewState || (exports.LinkPreviewState = {}));
    exports.SetLinkPreviewMode = void 0;
    (function (SetLinkPreviewMode) {
        SetLinkPreviewMode[SetLinkPreviewMode["UPSERT"] = 0] = "UPSERT";
        SetLinkPreviewMode[SetLinkPreviewMode["SET"] = 1] = "SET";
        SetLinkPreviewMode[SetLinkPreviewMode["REMOVE"] = 2] = "REMOVE";
    })(exports.SetLinkPreviewMode || (exports.SetLinkPreviewMode = {}));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var LinkPreviewList = function (_a) {
        var linkPreviews = _a.linkPreviews;
        var quotedMessage = useChannelStateContext().quotedMessage;
        var showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;
        if (!showLinkPreviews)
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__link-preview-list' }, Array.from(linkPreviews.values()).map(function (linkPreview) {
            return linkPreview.state === exports.LinkPreviewState.LOADED ? (React__default["default"].createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview: linkPreview })) : null;
        })));
    };
    var LinkPreviewCard = function (_a) {
        var linkPreview = _a.linkPreview;
        var dismissLinkPreview = useMessageInputContext().dismissLinkPreview;
        var _b = useEnterLeaveHandlers(), handleEnter = _b.handleEnter, handleLeave = _b.handleLeave, tooltipVisible = _b.tooltipVisible;
        var _c = React$2.useState(null), referenceElement = _c[0], setReferenceElement = _c[1];
        return (React__default["default"].createElement("div", { className: clsx('str-chat__link-preview-card', {
                'str-chat__link-preview-card--loading': linkPreview.state === exports.LinkPreviewState.LOADING,
            }), "data-testid": 'link-preview-card' },
            React__default["default"].createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, linkPreview.og_scrape_url),
            React__default["default"].createElement("div", { className: 'str-chat__link-preview-card__icon-container', onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },
                React__default["default"].createElement(LinkIcon, null)),
            React__default["default"].createElement("div", { className: 'str-chat__link-preview-card__content' },
                React__default["default"].createElement("div", { className: 'str-chat__link-preview-card__content-title' }, linkPreview.title),
                React__default["default"].createElement("div", { className: 'str-chat__link-preview-card__content-description' }, linkPreview.text)),
            React__default["default"].createElement("button", { className: 'str-chat__link-preview-card__dismiss-button', "data-testid": 'link-preview-card-dismiss-btn', onClick: function () { return dismissLinkPreview(linkPreview); } },
                React__default["default"].createElement(CloseIcon$2, null))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputFlat = function () {
        var quotedMessage = useChannelStateContext('MessageInputFlat').quotedMessage;
        var setQuotedMessage = useChannelActionContext('MessageInputFlat').setQuotedMessage;
        var _a = useChatContext('MessageInputFlat'), channel = _a.channel, themeVersion = _a.themeVersion;
        React$2.useEffect(function () {
            var handleQuotedMessageUpdate = function (e) {
                var _a;
                if (((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) !== (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id))
                    return;
                if (e.type === 'message.deleted') {
                    setQuotedMessage(undefined);
                    return;
                }
                setQuotedMessage(e.message);
            };
            channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);
            channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);
            return function () {
                channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);
                channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [channel, quotedMessage]);
        return themeVersion === '2' ? (React__default["default"].createElement(MessageInputV2, null)) : (React__default["default"].createElement(MessageInputV1, null));
    };
    var MessageInputV1 = function () {
        var _a = useChannelStateContext('MessageInputFlat'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
        var t = useTranslationContext('MessageInputFlat').t;
        var _b = useMessageInputContext('MessageInputFlat'), cooldownRemaining = _b.cooldownRemaining, handleSubmit = _b.handleSubmit, hideSendButton = _b.hideSendButton, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('MessageInputFlat'), _d = _c.CooldownTimer, CooldownTimer$1 = _d === void 0 ? CooldownTimer : _d, _e = _c.FileUploadIcon, FileUploadIcon = _e === void 0 ? FileUploadIconFlat : _e, _f = _c.QuotedMessagePreview, QuotedMessagePreview$1 = _f === void 0 ? QuotedMessagePreview : _f, _g = _c.SendButton, SendButton$1 = _g === void 0 ? SendButton : _g, _h = _c.AttachmentPreviewList, AttachmentPreviewList = _h === void 0 ? UploadsPreview : _h, EmojiPicker = _c.EmojiPicker;
        return (React__default["default"].createElement("div", { className: clsx('str-chat__input-flat', 'str-chat__message-input', {
                'str-chat__input-flat--send-button-active': !!SendButton$1,
                'str-chat__input-flat-has-attachments': numberOfUploads,
                'str-chat__input-flat-quoted': quotedMessage && !quotedMessage.parent_id,
            }) },
            React__default["default"].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                quotedMessage && !quotedMessage.parent_id && (React__default["default"].createElement(QuotedMessagePreview$1, { quotedMessage: quotedMessage })),
                React__default["default"].createElement("div", { className: 'str-chat__input-flat-wrapper' },
                    isUploadEnabled && React__default["default"].createElement(AttachmentPreviewList, null),
                    React__default["default"].createElement("div", { className: 'str-chat__input-flat--textarea-wrapper' },
                        EmojiPicker && React__default["default"].createElement(EmojiPicker, null),
                        !!cooldownRemaining && (React__default["default"].createElement("div", { className: 'str-chat__input-flat-cooldown' },
                            React__default["default"].createElement(CooldownTimer$1, { cooldownInterval: cooldownRemaining, setCooldownRemaining: setCooldownRemaining }))),
                        React__default["default"].createElement(ChatAutoComplete, null),
                        isUploadEnabled && !cooldownRemaining && (React__default["default"].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                            React__default["default"].createElement(Tooltip, null, maxFilesLeft
                                ? t('Attach files')
                                : t("You've reached the maximum number of files")),
                            React__default["default"].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                React__default["default"].createElement("span", { className: 'str-chat__input-flat-fileupload' },
                                    React__default["default"].createElement(FileUploadIcon, null)))))),
                    !(cooldownRemaining || hideSendButton) && React__default["default"].createElement(SendButton$1, { sendMessage: handleSubmit })))));
    };
    var MessageInputV2 = function () {
        var _a = useChannelStateContext('MessageInputV2'), _b = _a.acceptedFiles, acceptedFiles = _b === void 0 ? [] : _b, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
        var t = useTranslationContext('MessageInputV2').t;
        var _c = useMessageInputContext('MessageInputV2'), cooldownRemaining = _c.cooldownRemaining, findAndEnqueueURLsToEnrich = _c.findAndEnqueueURLsToEnrich, handleSubmit = _c.handleSubmit, hideSendButton = _c.hideSendButton, isUploadEnabled = _c.isUploadEnabled, linkPreviews = _c.linkPreviews, maxFilesLeft = _c.maxFilesLeft, message = _c.message, numberOfUploads = _c.numberOfUploads, setCooldownRemaining = _c.setCooldownRemaining, text = _c.text, uploadNewFiles = _c.uploadNewFiles;
        var _d = useComponentContext('MessageInputV2'), _e = _d.AttachmentPreviewList, AttachmentPreviewList$1 = _e === void 0 ? AttachmentPreviewList : _e, _f = _d.CooldownTimer, CooldownTimer$1 = _f === void 0 ? CooldownTimer : _f, _g = _d.FileUploadIcon, FileUploadIcon = _g === void 0 ? UploadIcon : _g, _h = _d.LinkPreviewList, LinkPreviewList$1 = _h === void 0 ? LinkPreviewList : _h, _j = _d.QuotedMessagePreview, QuotedMessagePreview$1 = _j === void 0 ? QuotedMessagePreview : _j, _k = _d.SendButton, SendButton$1 = _k === void 0 ? SendButton : _k, EmojiPicker = _d.EmojiPicker;
        var id = React$2.useMemo(function () { return nanoid(); }, []);
        var accept = React$2.useMemo(function () {
            return acceptedFiles.reduce(function (mediaTypeMap, mediaType) {
                var _a;
                (_a = mediaTypeMap[mediaType]) !== null && _a !== void 0 ? _a : (mediaTypeMap[mediaType] = []);
                return mediaTypeMap;
            }, {});
        }, [acceptedFiles]);
        var _l = useDropzone({
            accept: accept,
            disabled: !isUploadEnabled || maxFilesLeft === 0,
            multiple: multipleUploads,
            noClick: true,
            onDrop: uploadNewFiles,
        }), getRootProps = _l.getRootProps, isDragActive = _l.isDragActive, isDragReject = _l.isDragReject;
        // TODO: "!message" condition is a temporary fix for shared
        // state when editing a message (fix shared state issue)
        var displayQuotedMessage = !message && quotedMessage && !quotedMessage.parent_id;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", __assign({}, getRootProps({ className: 'str-chat__message-input' })),
                findAndEnqueueURLsToEnrich && (React__default["default"].createElement(LinkPreviewList$1, { linkPreviews: Array.from(linkPreviews.values()) })),
                isDragActive && (React__default["default"].createElement("div", { className: clsx('str-chat__dropzone-container', {
                        'str-chat__dropzone-container--not-accepted': isDragReject,
                    }) },
                    !isDragReject && React__default["default"].createElement("p", null, t('Drag your files here')),
                    isDragReject && React__default["default"].createElement("p", null, t('Some of the files will not be accepted')))),
                displayQuotedMessage && React__default["default"].createElement(QuotedMessagePreviewHeader, null),
                React__default["default"].createElement("div", { className: 'str-chat__message-input-inner' },
                    React__default["default"].createElement("div", { className: 'str-chat__file-input-container', "data-testid": 'file-upload-button' },
                        React__default["default"].createElement(UploadButton, { accept: acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(','), "aria-label": t('aria/File upload'), className: 'str-chat__file-input', "data-testid": 'file-input', disabled: !isUploadEnabled || maxFilesLeft === 0, id: id, multiple: multipleUploads, onFileChange: uploadNewFiles }),
                        React__default["default"].createElement("label", { className: 'str-chat__file-input-label', htmlFor: id },
                            React__default["default"].createElement(FileUploadIcon, null))),
                    React__default["default"].createElement("div", { className: 'str-chat__message-textarea-container' },
                        displayQuotedMessage && React__default["default"].createElement(QuotedMessagePreview$1, { quotedMessage: quotedMessage }),
                        isUploadEnabled && !!numberOfUploads && React__default["default"].createElement(AttachmentPreviewList$1, null),
                        React__default["default"].createElement("div", { className: 'str-chat__message-textarea-with-emoji-picker' },
                            React__default["default"].createElement(ChatAutoComplete, null),
                            EmojiPicker && React__default["default"].createElement(EmojiPicker, null))),
                    !hideSendButton && (React__default["default"].createElement(React__default["default"].Fragment, null, cooldownRemaining ? (React__default["default"].createElement(CooldownTimer$1, { cooldownInterval: cooldownRemaining, setCooldownRemaining: setCooldownRemaining })) : (React__default["default"].createElement(SendButton$1, { disabled: !numberOfUploads && !text.length, sendMessage: handleSubmit }))))))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var EditMessageForm = function () {
        var _a = useChannelStateContext('EditMessageForm'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads;
        var t = useTranslationContext('EditMessageForm').t;
        var _b = useMessageInputContext('EditMessageForm'), clearEditingState = _b.clearEditingState, handleSubmit = _b.handleSubmit, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('EditMessageForm'), _d = _c.FileUploadIcon, FileUploadIcon$1 = _d === void 0 ? FileUploadIcon : _d, EmojiPicker = _c.EmojiPicker;
        var themeVersion = useChatContext('EditMessageForm').themeVersion;
        React$2.useEffect(function () {
            var onKeyDown = function (event) {
                if (event.key === 'Escape')
                    clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
            };
            document.addEventListener('keydown', onKeyDown);
            return function () { return document.removeEventListener('keydown', onKeyDown); };
        }, [clearEditingState]);
        if (themeVersion === '2')
            return (React__default["default"].createElement("form", { className: 'str-chat__edit-message-form', onSubmit: handleSubmit },
                React__default["default"].createElement(MessageInputFlat, null),
                React__default["default"].createElement("div", { className: 'str-chat__edit-message-form-options' },
                    React__default["default"].createElement("button", { className: 'str-chat__edit-message-cancel', "data-testid": 'cancel-button', onClick: clearEditingState }, t('Cancel')),
                    React__default["default"].createElement("button", { className: 'str-chat__edit-message-send', "data-testid": 'send-button', type: 'submit' }, t('Send')))));
        return (React__default["default"].createElement("div", { className: 'str-chat__edit-message-form' },
            React__default["default"].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                React__default["default"].createElement("form", { onSubmit: handleSubmit },
                    isUploadEnabled && React__default["default"].createElement(UploadsPreview, null),
                    React__default["default"].createElement(ChatAutoComplete, null),
                    React__default["default"].createElement("div", { className: 'str-chat__message-team-form-footer' },
                        React__default["default"].createElement("div", { className: 'str-chat__edit-message-form-options' },
                            EmojiPicker && React__default["default"].createElement(EmojiPicker, null),
                            isUploadEnabled && (React__default["default"].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                                React__default["default"].createElement(Tooltip, null, maxFilesLeft
                                    ? t('Attach files')
                                    : t("You've reached the maximum number of files")),
                                React__default["default"].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                    React__default["default"].createElement("span", { className: 'str-chat__input-fileupload' },
                                        React__default["default"].createElement(FileUploadIcon$1, null)))))),
                        React__default["default"].createElement("div", null,
                            React__default["default"].createElement("button", { className: 'str-chat__edit-message-cancel', onClick: clearEditingState }, t('Cancel')),
                            React__default["default"].createElement("button", { className: 'str-chat__edit-message-send', type: 'submit' }, t('Send'))))))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCooldownTimer = function () {
        var _a;
        var _b = useChatContext('useCooldownTimer'), client = _b.client, latestMessageDatesByChannels = _b.latestMessageDatesByChannels;
        var _c = useChannelStateContext('useCooldownTimer'), channel = _c.channel, _d = _c.messages, messages = _d === void 0 ? [] : _d;
        var _e = React$2.useState(), cooldownRemaining = _e[0], setCooldownRemaining = _e[1];
        var _f = (channel.data ||
            {}), _g = _f.cooldown, cooldownInterval = _g === void 0 ? 0 : _g, own_capabilities = _f.own_capabilities;
        var skipCooldown = own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes('skip-slow-mode');
        var ownLatestMessageDate = React$2.useMemo(function () {
            var _a, _b;
            return (_a = latestMessageDatesByChannels[channel.cid]) !== null && _a !== void 0 ? _a : (_b = __spreadArray([], messages, true).sort(function (a, b) { var _a, _b; return ((_a = b.created_at) === null || _a === void 0 ? void 0 : _a.getTime()) - ((_b = a.created_at) === null || _b === void 0 ? void 0 : _b.getTime()); })
                .find(function (v) { var _a, _b; return ((_a = v.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id); })) === null || _b === void 0 ? void 0 : _b.created_at;
        }, [messages, (_a = client.user) === null || _a === void 0 ? void 0 : _a.id, latestMessageDatesByChannels, channel.cid]);
        React$2.useEffect(function () {
            var timeSinceOwnLastMessage = ownLatestMessageDate
                ? // prevent negative values
                    Math.max(0, (new Date().getTime() - ownLatestMessageDate.getTime()) / 1000)
                : undefined;
            var remaining = !skipCooldown &&
                typeof timeSinceOwnLastMessage !== 'undefined' &&
                cooldownInterval > timeSinceOwnLastMessage
                ? Math.round(cooldownInterval - timeSinceOwnLastMessage)
                : 0;
            setCooldownRemaining(remaining);
            if (!remaining)
                return;
            var timeout = setTimeout(function () {
                setCooldownRemaining(0);
            }, remaining * 1000);
            return function () {
                clearTimeout(timeout);
            };
        }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);
        return {
            cooldownInterval: cooldownInterval,
            cooldownRemaining: cooldownRemaining,
            setCooldownRemaining: setCooldownRemaining,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useImageUploads = function (props, state, dispatch) {
        var doImageUploadRequest = props.doImageUploadRequest, errorHandler = props.errorHandler;
        var imageUploads = state.imageUploads;
        var channel = useChannelStateContext('useImageUploads').channel;
        var getAppSettings = useChatContext('useImageUploads').getAppSettings;
        var addNotification = useChannelActionContext('useImageUploads').addNotification;
        var t = useTranslationContext('useImageUploads').t;
        var removeImage = React$2.useCallback(function (id) {
            dispatch({ id: id, type: 'removeImageUpload' });
            // TODO: cancel upload if still uploading
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var uploadImage = React$2.useCallback(function (id) { return __awaiter(void 0, void 0, void 0, function () {
            var img, file, canUpload, response, error_1, errorMessage, alreadyRemoved;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        img = imageUploads[id];
                        if (!img)
                            return [2 /*return*/];
                        file = img.file;
                        if (img.state !== 'uploading') {
                            dispatch({ id: id, state: 'uploading', type: 'setImageUpload' });
                        }
                        return [4 /*yield*/, checkUploadPermissions({
                                addNotification: addNotification,
                                file: file,
                                getAppSettings: getAppSettings,
                                t: t,
                                uploadType: 'image',
                            })];
                    case 1:
                        canUpload = _b.sent();
                        if (!canUpload)
                            return [2 /*return*/, removeImage(id)];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, , 8]);
                        if (!doImageUploadRequest) return [3 /*break*/, 4];
                        return [4 /*yield*/, doImageUploadRequest(file, channel)];
                    case 3:
                        response = _b.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, channel.sendImage(file)];
                    case 5:
                        response = _b.sent();
                        _b.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _b.sent();
                        errorMessage = typeof error_1.message === 'string'
                            ? error_1.message
                            : t('Error uploading image');
                        addNotification(errorMessage, 'error');
                        alreadyRemoved = false;
                        if (!imageUploads[id]) {
                            alreadyRemoved = true;
                        }
                        else {
                            dispatch({ id: id, state: 'failed', type: 'setImageUpload' });
                        }
                        if (!alreadyRemoved && errorHandler) {
                            // TODO: verify if the parameters passed to the error handler actually make sense
                            errorHandler(error_1, 'upload-image', __assign(__assign({}, file), { id: id }));
                        }
                        return [2 /*return*/];
                    case 8:
                        // If doImageUploadRequest returns any falsy value, then don't create the upload preview.
                        // This is for the case if someone wants to handle failure on app level.
                        if (!response) {
                            removeImage(id);
                            return [2 /*return*/];
                        }
                        if (img.previewUri)
                            (_a = URL.revokeObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, img.previewUri);
                        dispatch({
                            id: id,
                            previewUri: undefined,
                            state: 'finished',
                            type: 'setImageUpload',
                            url: response.file,
                        });
                        return [2 /*return*/];
                }
            });
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [imageUploads, channel, doImageUploadRequest, errorHandler, removeImage]);
        React$2.useEffect(function () {
            var upload = Object.values(imageUploads).find(function (imageUpload) { return imageUpload.state === 'uploading' && imageUpload.file; });
            if (!upload)
                return;
            uploadImage(upload.id);
        }, [imageUploads, uploadImage]);
        return {
            removeImage: removeImage,
            uploadImage: uploadImage,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useFileUploads = function (props, state, dispatch) {
        var doFileUploadRequest = props.doFileUploadRequest, errorHandler = props.errorHandler;
        var fileUploads = state.fileUploads;
        var channel = useChannelStateContext('useFileUploads').channel;
        var addNotification = useChannelActionContext('useFileUploads').addNotification;
        var getAppSettings = useChatContext('useFileUploads').getAppSettings;
        var t = useTranslationContext('useFileUploads').t;
        var uploadFile = React$2.useCallback(function (id) {
            dispatch({ id: id, state: 'uploading', type: 'setFileUpload' });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var removeFile = React$2.useCallback(function (id) {
            // TODO: cancel upload if still uploading
            dispatch({ id: id, type: 'removeFileUpload' });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        React$2.useEffect(function () {
            (function () { return __awaiter(void 0, void 0, void 0, function () {
                var upload, file, id, canUpload, response, error_1, errorMessage, alreadyRemoved;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            upload = Object.values(fileUploads).find(function (fileUpload) { return fileUpload.state === 'uploading' && fileUpload.file; });
                            if (!upload)
                                return [2 /*return*/];
                            file = upload.file, id = upload.id;
                            return [4 /*yield*/, checkUploadPermissions({
                                    addNotification: addNotification,
                                    file: file,
                                    getAppSettings: getAppSettings,
                                    t: t,
                                    uploadType: 'file',
                                })];
                        case 1:
                            canUpload = _a.sent();
                            if (!canUpload)
                                return [2 /*return*/, removeFile(id)];
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 7, , 8]);
                            if (!doFileUploadRequest) return [3 /*break*/, 4];
                            return [4 /*yield*/, doFileUploadRequest(file, channel)];
                        case 3:
                            response = _a.sent();
                            return [3 /*break*/, 6];
                        case 4: return [4 /*yield*/, channel.sendFile(file)];
                        case 5:
                            response = _a.sent();
                            _a.label = 6;
                        case 6: return [3 /*break*/, 8];
                        case 7:
                            error_1 = _a.sent();
                            errorMessage = typeof error_1.message === 'string'
                                ? error_1.message
                                : t('Error uploading file');
                            addNotification(errorMessage, 'error');
                            alreadyRemoved = false;
                            if (!fileUploads[id]) {
                                alreadyRemoved = true;
                            }
                            else {
                                dispatch({ id: id, state: 'failed', type: 'setFileUpload' });
                            }
                            if (!alreadyRemoved && errorHandler) {
                                // TODO: verify if the parameters passed to the error handler actually make sense
                                errorHandler(error_1, 'upload-file', file);
                            }
                            return [2 /*return*/];
                        case 8:
                            // If doImageUploadRequest returns any falsy value, then don't create the upload preview.
                            // This is for the case if someone wants to handle failure on app level.
                            if (!response) {
                                removeFile(id);
                                return [2 /*return*/];
                            }
                            dispatch({
                                id: id,
                                state: 'finished',
                                thumb_url: response.thumb_url,
                                type: 'setFileUpload',
                                url: response.file,
                            });
                            return [2 /*return*/];
                    }
                });
            }); })();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [fileUploads, channel, doFileUploadRequest, errorHandler, removeFile]);
        return {
            removeFile: removeFile,
            uploadFile: uploadFile,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var apiMaxNumberOfFiles = 10;
    var useAttachments = function (props, state, dispatch, textareaRef) {
        var noFiles = props.noFiles;
        var fileUploads = state.fileUploads, imageUploads = state.imageUploads;
        var _a = useChannelStateContext('useAttachments'), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;
        var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;
        var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;
        // Number of files that the user can still add. Should never be more than the amount allowed by the API.
        // If multipleUploads is false, we only want to allow a single upload.
        var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;
        // OG attachments should not be counted towards "numberOfImages"
        var numberOfImages = Object.values(imageUploads).filter(function (_a) {
            var og_scrape_url = _a.og_scrape_url, state = _a.state;
            return state !== 'failed' && !og_scrape_url;
        }).length;
        var numberOfFiles = Object.values(fileUploads).filter(function (_a) {
            var state = _a.state;
            return state !== 'failed';
        }).length;
        var numberOfUploads = numberOfImages + numberOfFiles;
        var maxFilesLeft = maxFilesAllowed - numberOfUploads;
        var uploadNewFiles = React$2.useCallback(function (files) {
            var _a;
            Array.from(files)
                .slice(0, maxFilesLeft)
                .forEach(function (file) {
                var _a;
                var id = nanoid();
                if (file.type.startsWith('image/') &&
                    !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'
                ) {
                    dispatch({
                        file: file,
                        id: id,
                        previewUri: (_a = URL.createObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, file),
                        state: 'uploading',
                        type: 'setImageUpload',
                    });
                }
                else if (file instanceof File && !noFiles) {
                    dispatch({ file: file, id: id, state: 'uploading', type: 'setFileUpload' });
                }
            });
            (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [maxFilesLeft, noFiles]);
        return {
            maxFilesLeft: maxFilesLeft,
            numberOfUploads: numberOfUploads,
            removeFile: removeFile,
            removeImage: removeImage,
            uploadFile: uploadFile,
            uploadImage: uploadImage,
            uploadNewFiles: uploadNewFiles,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=streamChat.logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageInputText = function (props, state, dispatch, findAndEnqueueURLsToEnrich) {
        var channel = useChannelStateContext('useMessageInputText').channel;
        var additionalTextareaProps = props.additionalTextareaProps, focus = props.focus, parent = props.parent, _a = props.publishTypingEvent, publishTypingEvent = _a === void 0 ? true : _a;
        var text = state.text;
        var textareaRef = React$2.useRef();
        // Focus
        React$2.useEffect(function () {
            if (focus && textareaRef.current) {
                textareaRef.current.focus();
            }
        }, [focus]);
        // Text + cursor position
        var newCursorPosition = React$2.useRef();
        var insertText = React$2.useCallback(function (textToInsert) {
            var maxLength = (additionalTextareaProps || {}).maxLength;
            if (!textareaRef.current) {
                return dispatch({
                    getNewText: function (text) {
                        var updatedText = text + textToInsert;
                        if (maxLength && updatedText.length > maxLength) {
                            return updatedText.slice(0, maxLength);
                        }
                        return updatedText;
                    },
                    type: 'setText',
                });
            }
            var _a = textareaRef.current, selectionEnd = _a.selectionEnd, selectionStart = _a.selectionStart;
            newCursorPosition.current = selectionStart + textToInsert.length;
            dispatch({
                getNewText: function (prevText) {
                    var updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);
                    if (maxLength && updatedText.length > maxLength) {
                        return updatedText.slice(0, maxLength);
                    }
                    return updatedText;
                },
                type: 'setText',
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [additionalTextareaProps, newCursorPosition, textareaRef]);
        React$2.useEffect(function () {
            var textareaElement = textareaRef.current;
            if (textareaElement && newCursorPosition.current !== undefined) {
                textareaElement.selectionStart = newCursorPosition.current;
                textareaElement.selectionEnd = newCursorPosition.current;
                newCursorPosition.current = undefined;
            }
        }, [text, newCursorPosition]);
        var handleChange = React$2.useCallback(function (event) {
            event.preventDefault();
            if (!event || !event.target) {
                return;
            }
            var newText = event.target.value;
            dispatch({
                getNewText: function () { return newText; },
                type: 'setText',
            });
            findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich(newText);
            if (publishTypingEvent && newText && channel) {
                streamChat.logChatPromiseExecution(channel.keystroke(parent === null || parent === void 0 ? void 0 : parent.id), 'start typing event');
            }
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]);
        return {
            handleChange: handleChange,
            insertText: insertText,
            textareaRef: textareaRef,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getAttachmentTypeFromMime = function (mime) {
        if (mime.includes('video/'))
            return 'video';
        if (mime.includes('audio/'))
            return 'audio';
        return 'file';
    };
    var useSubmitHandler = function (props, state, dispatch, numberOfUploads, enrichURLsController) {
        var clearEditingState = props.clearEditingState, message = props.message, overrideSubmitHandler = props.overrideSubmitHandler, parent = props.parent, publishTypingEvent = props.publishTypingEvent;
        var attachments = state.attachments, fileOrder = state.fileOrder, fileUploads = state.fileUploads, imageOrder = state.imageOrder, imageUploads = state.imageUploads, linkPreviews = state.linkPreviews, mentioned_users = state.mentioned_users, text = state.text;
        var cancelURLEnrichment = enrichURLsController.cancelURLEnrichment, findAndEnqueueURLsToEnrich = enrichURLsController.findAndEnqueueURLsToEnrich;
        var channel = useChannelStateContext('useSubmitHandler').channel;
        var _a = useChannelActionContext('useSubmitHandler'), addNotification = _a.addNotification, editMessage = _a.editMessage, sendMessage = _a.sendMessage;
        var t = useTranslationContext('useSubmitHandler').t;
        var textReference = React$2.useRef({ hasChanged: false, initialText: text });
        React$2.useEffect(function () {
            if (!textReference.current.initialText.length) {
                textReference.current.initialText = text;
                return;
            }
            textReference.current.hasChanged = text !== textReference.current.initialText;
        }, [text]);
        var getAttachmentsFromUploads = function () {
            var imageAttachments = imageOrder
                .map(function (id) { return imageUploads[id]; })
                .filter(function (upload) { return upload.state !== 'failed'; })
                .filter(function (_a, _, self) {
                var id = _a.id, url = _a.url;
                return self.every(function (upload) { return upload.id === id || upload.url !== url; });
            })
                .filter(function (upload) {
                // keep the OG attachments in case the text has not changed as the BE
                // won't re-enrich the message when only attachments have changed
                if (!textReference.current.hasChanged)
                    return true;
                return !upload.og_scrape_url;
            })
                .map(function (_a) {
                var name = _a.file.name, url = _a.url, rest = __rest(_a, ["file", "url"]);
                return ({
                    author_name: rest.author_name,
                    fallback: name,
                    image_url: url,
                    og_scrape_url: rest.og_scrape_url,
                    text: rest.text,
                    title: rest.title,
                    title_link: rest.title_link,
                    type: 'image',
                });
            });
            var fileAttachments = fileOrder
                .map(function (id) { return fileUploads[id]; })
                .filter(function (upload) { return upload.state !== 'failed'; })
                .map(function (upload) { return ({
                asset_url: upload.url,
                file_size: upload.file.size,
                mime_type: upload.file.type,
                thumb_url: upload.thumb_url,
                title: upload.file.name,
                type: getAttachmentTypeFromMime(upload.file.type || ''),
            }); });
            return __spreadArray(__spreadArray(__spreadArray([], attachments, true), imageAttachments, true), fileAttachments, true);
        };
        var handleSubmit = function (event, customMessageData) { return __awaiter(void 0, void 0, void 0, function () {
            var trimmedMessage, isEmptyMessage, someAttachmentsUploading, attachmentsFromUploads, attachmentsFromLinkPreviews, someLinkPreviewsLoading, someLinkPreviewsDismissed, newAttachments, actualMentionedUsers, updatedMessage, linkPreviewsEnabled, skip_enrich_url, sendOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        trimmedMessage = text.trim();
                        isEmptyMessage = trimmedMessage === '' ||
                            trimmedMessage === '>' ||
                            trimmedMessage === '``````' ||
                            trimmedMessage === '``' ||
                            trimmedMessage === '**' ||
                            trimmedMessage === '____' ||
                            trimmedMessage === '__' ||
                            trimmedMessage === '****';
                        if (isEmptyMessage && numberOfUploads === 0)
                            return [2 /*return*/];
                        someAttachmentsUploading = Object.values(imageUploads).some(function (upload) { return upload.state === 'uploading'; }) ||
                            Object.values(fileUploads).some(function (upload) { return upload.state === 'uploading'; });
                        if (someAttachmentsUploading) {
                            return [2 /*return*/, addNotification(t('Wait until all attachments have uploaded'), 'error')];
                        }
                        attachmentsFromUploads = getAttachmentsFromUploads();
                        attachmentsFromLinkPreviews = [];
                        if (findAndEnqueueURLsToEnrich) {
                            // filter out all the attachments scraped before the message was edited - only if the scr
                            attachmentsFromUploads = attachmentsFromUploads.filter(function (attachment) { return !attachment.og_scrape_url; });
                            // prevent showing link preview in MessageInput after the message has been sent
                            cancelURLEnrichment();
                            someLinkPreviewsLoading = Array.from(linkPreviews.values()).some(function (linkPreview) {
                                return [exports.LinkPreviewState.QUEUED, exports.LinkPreviewState.LOADING].includes(linkPreview.state);
                            });
                            someLinkPreviewsDismissed = Array.from(linkPreviews.values()).some(function (linkPreview) { return linkPreview.state === exports.LinkPreviewState.DISMISSED; });
                            if (!someLinkPreviewsLoading) {
                                attachmentsFromLinkPreviews = Array.from(linkPreviews.values())
                                    .filter(function (linkPreview) {
                                    return linkPreview.state === exports.LinkPreviewState.LOADED &&
                                        !attachmentsFromUploads.find(function (attFromUpload) { return attFromUpload.og_scrape_url === linkPreview.og_scrape_url; });
                                })
                                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                                    .map(function (_a) {
                                    _a.state; var ogAttachment = __rest(_a, ["state"]);
                                    return ogAttachment;
                                });
                            }
                        }
                        newAttachments = __spreadArray(__spreadArray([], attachmentsFromUploads, true), attachmentsFromLinkPreviews, true);
                        actualMentionedUsers = Array.from(new Set(mentioned_users.filter(function (_a) {
                            var id = _a.id, name = _a.name;
                            return text.includes("@".concat(id)) || text.includes("@".concat(name));
                        })));
                        updatedMessage = {
                            attachments: newAttachments,
                            mentioned_users: actualMentionedUsers,
                            text: text,
                        };
                        linkPreviewsEnabled = !!findAndEnqueueURLsToEnrich;
                        skip_enrich_url = linkPreviewsEnabled &&
                            ((!someLinkPreviewsLoading && attachmentsFromLinkPreviews.length > 0) ||
                                someLinkPreviewsDismissed);
                        sendOptions = linkPreviewsEnabled ? { skip_enrich_url: skip_enrich_url } : undefined;
                        if (!(message && message.type !== 'error')) return [3 /*break*/, 5];
                        delete message.i18n;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, editMessage(__assign(__assign(__assign({}, message), updatedMessage), customMessageData), sendOptions)];
                    case 2:
                        _a.sent();
                        clearEditingState === null || clearEditingState === void 0 ? void 0 : clearEditingState();
                        dispatch({ type: 'clear' });
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        addNotification(t('Edit message request failed'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 13];
                    case 5:
                        _a.trys.push([5, 12, , 13]);
                        dispatch({ type: 'clear' });
                        if (!overrideSubmitHandler) return [3 /*break*/, 7];
                        return [4 /*yield*/, overrideSubmitHandler(__assign(__assign({}, updatedMessage), { parent: parent }), channel.cid, customMessageData, sendOptions)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, sendMessage(__assign(__assign({}, updatedMessage), { parent: parent }), customMessageData, sendOptions)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (!publishTypingEvent) return [3 /*break*/, 11];
                        return [4 /*yield*/, channel.stopTyping()];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        _a.sent();
                        dispatch({
                            getNewText: function () { return text; },
                            type: 'setText',
                        });
                        actualMentionedUsers === null || actualMentionedUsers === void 0 ? void 0 : actualMentionedUsers.forEach(function (user) {
                            dispatch({ type: 'addMentionedUser', user: user });
                        });
                        addNotification(t('Send message request failed'), 'error');
                        return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        }); };
        return { handleSubmit: handleSubmit };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var usePasteHandler = function (uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) {
        var onPaste = React$2.useCallback(function (clipboardEvent) {
            if (!isUploadEnabled)
                return;
            (function (event) { return __awaiter(void 0, void 0, void 0, function () {
                var items, plainTextPromise, _loop_1, i, state_1, fileLikes, pastedText;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            items = event.clipboardData.items;
                            if (!dataTransferItemsHaveFiles(Array.from(items)))
                                return [2 /*return*/];
                            event.preventDefault();
                            plainTextPromise = undefined;
                            _loop_1 = function (i) {
                                var item = items[i];
                                if (item.kind === 'string' && item.type === 'text/plain') {
                                    plainTextPromise = new Promise(function (resolve) {
                                        item.getAsString(function (string) {
                                            resolve(string);
                                        });
                                    });
                                    return "break";
                                }
                            };
                            for (i = 0; i < items.length; i++) {
                                state_1 = _loop_1(i);
                                if (state_1 === "break")
                                    break;
                            }
                            return [4 /*yield*/, dataTransferItemsToFiles(Array.from(items))];
                        case 1:
                            fileLikes = _a.sent();
                            if (fileLikes.length) {
                                uploadNewFiles(fileLikes);
                                return [2 /*return*/];
                            }
                            if (!plainTextPromise) return [3 /*break*/, 3];
                            return [4 /*yield*/, plainTextPromise];
                        case 2:
                            pastedText = _a.sent();
                            insertText(pastedText);
                            findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich(pastedText, exports.SetLinkPreviewMode.UPSERT);
                            findAndEnqueueURLsToEnrich === null || findAndEnqueueURLsToEnrich === void 0 ? void 0 : findAndEnqueueURLsToEnrich.flush();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); })(clipboardEvent);
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [insertText, uploadNewFiles]);
        return { onPaste: onPaste };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useLinkPreviews = function (_a) {
        var _b;
        var debounceURLEnrichmentMsInputContext = _a.debounceURLEnrichmentMs, dispatch = _a.dispatch, _c = _a.enrichURLForPreview, enrichURLForPreview = _c === void 0 ? false : _c, findURLFnInputContext = _a.findURLFn, linkPreviews = _a.linkPreviews, onLinkPreviewDismissedInputContext = _a.onLinkPreviewDismissed;
        var client = useChatContext().client;
        // FIXME: the value of channelConfig is stale due to omitting it from the memoization deps in useCreateChannelStateContext
        var _d = useChannelStateContext(), channelConfig = _d.channelConfig, debounceURLEnrichmentMsChannelContext = _d.debounceURLEnrichmentMs, findURLFnChannelContext = _d.findURLFn, onLinkPreviewDismissedChannelContext = _d.onLinkPreviewDismissed;
        var shouldDiscardEnrichQueries = React$2.useRef(false);
        var findURLFn = findURLFnInputContext !== null && findURLFnInputContext !== void 0 ? findURLFnInputContext : findURLFnChannelContext;
        var onLinkPreviewDismissed = onLinkPreviewDismissedInputContext !== null && onLinkPreviewDismissedInputContext !== void 0 ? onLinkPreviewDismissedInputContext : onLinkPreviewDismissedChannelContext;
        var debounceURLEnrichmentMs = (_b = debounceURLEnrichmentMsInputContext !== null && debounceURLEnrichmentMsInputContext !== void 0 ? debounceURLEnrichmentMsInputContext : debounceURLEnrichmentMsChannelContext) !== null && _b !== void 0 ? _b : 1500;
        var dismissLinkPreview = React$2.useCallback(function (linkPreview) {
            onLinkPreviewDismissed === null || onLinkPreviewDismissed === void 0 ? void 0 : onLinkPreviewDismissed(linkPreview);
            var previewToRemoveMap = new Map();
            linkPreview.state = exports.LinkPreviewState.DISMISSED;
            previewToRemoveMap.set(linkPreview.og_scrape_url, linkPreview);
            dispatch({
                linkPreviews: previewToRemoveMap,
                mode: exports.SetLinkPreviewMode.UPSERT,
                type: 'setLinkPreviews',
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [onLinkPreviewDismissed]);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var findAndEnqueueURLsToEnrich = React$2.useCallback(lodash_debounce(function (text, mode) {
            if (mode === void 0) { mode = exports.SetLinkPreviewMode.SET; }
            var urls = findURLFn
                ? findURLFn(text)
                : find$2(text, 'url').reduce(function (acc, link) {
                    if (link.isLink)
                        acc.push(link.href);
                    return acc;
                }, []);
            shouldDiscardEnrichQueries.current = urls.length === 0;
            dispatch({
                linkPreviews: urls.reduce(function (acc, url) {
                    acc.set(url, { og_scrape_url: url, state: exports.LinkPreviewState.QUEUED });
                    return acc;
                }, new Map()),
                mode: mode,
                type: 'setLinkPreviews',
            });
        }, debounceURLEnrichmentMs, { leading: false, trailing: true }), [debounceURLEnrichmentMs, shouldDiscardEnrichQueries, findURLFn]);
        var cancelURLEnrichment = React$2.useCallback(function () {
            findAndEnqueueURLsToEnrich.cancel();
            findAndEnqueueURLsToEnrich('');
            findAndEnqueueURLsToEnrich.flush();
        }, [findAndEnqueueURLsToEnrich]);
        React$2.useEffect(function () {
            var enqueuedLinks = Array.from(linkPreviews.values()).reduce(function (acc, linkPreview) {
                if (linkPreview.state === 'queued') {
                    var loadingLinkPreview = __assign(__assign({}, linkPreview), { state: exports.LinkPreviewState.LOADING });
                    acc.set(linkPreview.og_scrape_url, loadingLinkPreview);
                }
                return acc;
            }, new Map());
            if (!enqueuedLinks.size)
                return;
            dispatch({
                linkPreviews: enqueuedLinks,
                mode: exports.SetLinkPreviewMode.UPSERT,
                type: 'setLinkPreviews',
            });
            enqueuedLinks.forEach(function (linkPreview) {
                client
                    .enrichURL(linkPreview.og_scrape_url)
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    .then(function (_a) {
                    _a.duration; var ogAttachment = __rest(_a, ["duration"]);
                    if (shouldDiscardEnrichQueries.current)
                        return;
                    var linkPreviewsMap = new Map();
                    linkPreviewsMap.set(linkPreview.og_scrape_url, __assign(__assign({}, ogAttachment), { state: exports.LinkPreviewState.LOADED }));
                    dispatch({
                        linkPreviews: linkPreviewsMap,
                        mode: exports.SetLinkPreviewMode.UPSERT,
                        type: 'setLinkPreviews',
                    });
                })
                    .catch(function () {
                    var linkPreviewsMap = new Map();
                    linkPreviewsMap.set(linkPreview.og_scrape_url, __assign(__assign({}, linkPreview), { state: exports.LinkPreviewState.FAILED }));
                    dispatch({
                        linkPreviews: linkPreviewsMap,
                        mode: exports.SetLinkPreviewMode.UPSERT,
                        type: 'setLinkPreviews',
                    });
                });
            });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [shouldDiscardEnrichQueries, linkPreviews]);
        return {
            cancelURLEnrichment: cancelURLEnrichment,
            dismissLinkPreview: dismissLinkPreview,
            findAndEnqueueURLsToEnrich: (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.url_enrichment) && enrichURLForPreview ? findAndEnqueueURLsToEnrich : undefined,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var makeEmptyMessageInputState = function () { return ({
        attachments: [],
        fileOrder: [],
        fileUploads: {},
        imageOrder: [],
        imageUploads: {},
        linkPreviews: new Map(),
        mentioned_users: [],
        setText: function () { return null; },
        text: '',
    }); };
    /**
     * Initializes the state. Empty if the message prop is falsy.
     */
    var initState = function (message) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!message) {
            return makeEmptyMessageInputState();
        }
        // if message prop is defined, get image uploads, file uploads, text, etc.
        var imageUploads = (_b = (_a = message.attachments) === null || _a === void 0 ? void 0 : _a.filter(function (_a) {
            var type = _a.type;
            return type === 'image';
        }).reduce(function (acc, _a) {
            var author_name = _a.author_name, _b = _a.fallback, fallback = _b === void 0 ? '' : _b, image_url = _a.image_url, og_scrape_url = _a.og_scrape_url, text = _a.text, title = _a.title, title_link = _a.title_link;
            var id = nanoid();
            acc[id] = {
                author_name: author_name,
                file: {
                    name: fallback,
                },
                id: id,
                og_scrape_url: og_scrape_url,
                state: 'finished',
                text: text,
                title: title,
                title_link: title_link,
                url: image_url,
            };
            return acc;
        }, {})) !== null && _b !== void 0 ? _b : {};
        var fileUploads = (_d = (_c = message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {
            var type = _a.type;
            return type === 'file';
        }).reduce(function (acc, _a) {
            var asset_url = _a.asset_url, file_size = _a.file_size, mime_type = _a.mime_type, thumb_url = _a.thumb_url, _b = _a.title, title = _b === void 0 ? '' : _b;
            var id = nanoid();
            acc[id] = {
                file: {
                    name: title,
                    size: file_size,
                    type: mime_type,
                },
                id: id,
                state: 'finished',
                thumb_url: thumb_url,
                url: asset_url,
            };
            return acc;
        }, {})) !== null && _d !== void 0 ? _d : {};
        var linkPreviews = (_f = (_e = message.attachments) === null || _e === void 0 ? void 0 : _e.reduce(function (acc, attachment) {
            if (!attachment.og_scrape_url)
                return acc;
            acc.set(attachment.og_scrape_url, __assign(__assign({}, attachment), { state: exports.LinkPreviewState.LOADED }));
            return acc;
        }, new Map())) !== null && _f !== void 0 ? _f : new Map();
        var imageOrder = Object.keys(imageUploads);
        var fileOrder = Object.keys(fileUploads);
        var attachments = ((_g = message.attachments) === null || _g === void 0 ? void 0 : _g.filter(function (_a) {
            var type = _a.type;
            return type !== 'file' && type !== 'image';
        })) || [];
        var mentioned_users = message.mentioned_users || [];
        return {
            attachments: attachments,
            fileOrder: fileOrder,
            fileUploads: fileUploads,
            imageOrder: imageOrder,
            imageUploads: imageUploads,
            linkPreviews: linkPreviews,
            mentioned_users: mentioned_users,
            setText: function () { return null; },
            text: message.text || '',
        };
    };
    /**
     * MessageInput state reducer
     */
    var messageInputReducer = function (state, action) {
        var _a, _b;
        switch (action.type) {
            case 'setText':
                return __assign(__assign({}, state), { text: action.getNewText(state.text) });
            case 'clear':
                return makeEmptyMessageInputState();
            case 'setImageUpload': {
                var imageAlreadyExists = state.imageUploads[action.id];
                if (!imageAlreadyExists && !action.file)
                    return state;
                var imageOrder = imageAlreadyExists ? state.imageOrder : state.imageOrder.concat(action.id);
                var newUploadFields = __assign({}, action);
                delete newUploadFields.type;
                return __assign(__assign({}, state), { imageOrder: imageOrder, imageUploads: __assign(__assign({}, state.imageUploads), (_a = {}, _a[action.id] = __assign(__assign({}, state.imageUploads[action.id]), newUploadFields), _a)) });
            }
            case 'setFileUpload': {
                var fileAlreadyExists = state.fileUploads[action.id];
                if (!fileAlreadyExists && !action.file)
                    return state;
                var fileOrder = fileAlreadyExists ? state.fileOrder : state.fileOrder.concat(action.id);
                var newUploadFields = __assign({}, action);
                delete newUploadFields.type;
                return __assign(__assign({}, state), { fileOrder: fileOrder, fileUploads: __assign(__assign({}, state.fileUploads), (_b = {}, _b[action.id] = __assign(__assign({}, state.fileUploads[action.id]), newUploadFields), _b)) });
            }
            case 'setLinkPreviews': {
                var linkPreviews_1 = new Map(state.linkPreviews);
                if (action.mode === exports.SetLinkPreviewMode.REMOVE) {
                    Array.from(action.linkPreviews.keys()).forEach(function (key) {
                        linkPreviews_1.delete(key);
                    });
                }
                else {
                    Array.from(action.linkPreviews.values()).reduce(function (acc, linkPreview) {
                        var existingPreview = acc.get(linkPreview.og_scrape_url);
                        var alreadyEnqueued = linkPreview.state === exports.LinkPreviewState.QUEUED &&
                            (existingPreview === null || existingPreview === void 0 ? void 0 : existingPreview.state) !== exports.LinkPreviewState.FAILED;
                        if (existingPreview && alreadyEnqueued)
                            return acc;
                        acc.set(linkPreview.og_scrape_url, linkPreview);
                        return acc;
                    }, linkPreviews_1);
                    if (action.mode === exports.SetLinkPreviewMode.SET) {
                        Array.from(state.linkPreviews.keys()).forEach(function (key) {
                            if (!action.linkPreviews.get(key))
                                linkPreviews_1.delete(key);
                        });
                    }
                }
                return __assign(__assign({}, state), { linkPreviews: linkPreviews_1 });
            }
            case 'removeImageUpload': {
                if (!state.imageUploads[action.id])
                    return state; // cannot remove anything
                var newImageUploads = __assign({}, state.imageUploads);
                delete newImageUploads[action.id];
                return __assign(__assign({}, state), { imageOrder: state.imageOrder.filter(function (_id) { return _id !== action.id; }), imageUploads: newImageUploads });
            }
            case 'removeFileUpload': {
                if (!state.fileUploads[action.id])
                    return state; // cannot remove anything
                var newFileUploads = __assign({}, state.fileUploads);
                delete newFileUploads[action.id];
                return __assign(__assign({}, state), { fileOrder: state.fileOrder.filter(function (_id) { return _id !== action.id; }), fileUploads: newFileUploads });
            }
            case 'addMentionedUser':
                return __assign(__assign({}, state), { mentioned_users: state.mentioned_users.concat(action.user) });
            default:
                return state;
        }
    };
    /**
     * hook for MessageInput state
     */
    var useMessageInputState = function (props) {
        var _a;
        var additionalTextareaProps = props.additionalTextareaProps, getDefaultValue = props.getDefaultValue, message = props.message, urlEnrichmentConfig = props.urlEnrichmentConfig;
        var _b = useChannelStateContext('useMessageInputState'), _c = _b.channelCapabilities, channelCapabilities = _c === void 0 ? {} : _c, channelConfig = _b.channelConfig, enrichURLForPreviewChannelContext = _b.enrichURLForPreview;
        var defaultValue = (getDefaultValue === null || getDefaultValue === void 0 ? void 0 : getDefaultValue()) || (additionalTextareaProps === null || additionalTextareaProps === void 0 ? void 0 : additionalTextareaProps.defaultValue);
        var initialStateValue = message ||
            (Array.isArray(defaultValue)
                ? { text: defaultValue.join('') }
                : { text: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.toString() });
        var _d = React$2.useReducer(messageInputReducer, initialStateValue, initState), state = _d[0], dispatch = _d[1];
        var enrichURLsController = useLinkPreviews(__assign(__assign({ dispatch: dispatch, linkPreviews: state.linkPreviews }, urlEnrichmentConfig), { enrichURLForPreview: (_a = urlEnrichmentConfig === null || urlEnrichmentConfig === void 0 ? void 0 : urlEnrichmentConfig.enrichURLForPreview) !== null && _a !== void 0 ? _a : enrichURLForPreviewChannelContext }));
        var _e = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich), handleChange = _e.handleChange, insertText = _e.insertText, textareaRef = _e.textareaRef;
        var _f = React$2.useState(false), showCommandsList = _f[0], setShowCommandsList = _f[1];
        var _g = React$2.useState(false), showMentionsList = _g[0], setShowMentionsList = _g[1];
        var openCommandsList = function () {
            dispatch({
                getNewText: function () { return '/'; },
                type: 'setText',
            });
            setShowCommandsList(true);
        };
        var closeCommandsList = function () { return setShowCommandsList(false); };
        var openMentionsList = function () {
            dispatch({
                getNewText: function (currentText) { return currentText + '@'; },
                type: 'setText',
            });
            setShowMentionsList(true);
        };
        var closeMentionsList = function () { return setShowMentionsList(false); };
        var _h = useAttachments(props, state, dispatch, textareaRef), maxFilesLeft = _h.maxFilesLeft, numberOfUploads = _h.numberOfUploads, removeFile = _h.removeFile, removeImage = _h.removeImage, uploadFile = _h.uploadFile, uploadImage = _h.uploadImage, uploadNewFiles = _h.uploadNewFiles;
        var handleSubmit = useSubmitHandler(props, state, dispatch, numberOfUploads, enrichURLsController).handleSubmit;
        var isUploadEnabled = (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.uploads) !== false && channelCapabilities['upload-file'] !== false;
        var onPaste = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled, enrichURLsController.findAndEnqueueURLsToEnrich).onPaste;
        var onSelectUser = React$2.useCallback(function (item) {
            dispatch({ type: 'addMentionedUser', user: item });
        }, []);
        var setText = React$2.useCallback(function (text) {
            dispatch({ getNewText: function () { return text; }, type: 'setText' });
        }, []);
        return __assign(__assign(__assign({}, state), enrichURLsController), { closeCommandsList: closeCommandsList, closeMentionsList: closeMentionsList, handleChange: handleChange, handleSubmit: handleSubmit, insertText: insertText, isUploadEnabled: isUploadEnabled, maxFilesLeft: maxFilesLeft, numberOfUploads: numberOfUploads, onPaste: onPaste, onSelectUser: onSelectUser, openCommandsList: openCommandsList, openMentionsList: openMentionsList, removeFile: removeFile, removeImage: removeImage, setText: setText, showCommandsList: showCommandsList, showMentionsList: showMentionsList, textareaRef: textareaRef, uploadFile: uploadFile, uploadImage: uploadImage, uploadNewFiles: uploadNewFiles });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateMessageInputContext = function (value) {
        var additionalTextareaProps = value.additionalTextareaProps, attachments = value.attachments, autocompleteTriggers = value.autocompleteTriggers, cancelURLEnrichment = value.cancelURLEnrichment, clearEditingState = value.clearEditingState, closeCommandsList = value.closeCommandsList, closeMentionsList = value.closeMentionsList, cooldownInterval = value.cooldownInterval, cooldownRemaining = value.cooldownRemaining, disabled = value.disabled, disableMentions = value.disableMentions, dismissLinkPreview = value.dismissLinkPreview, doFileUploadRequest = value.doFileUploadRequest, doImageUploadRequest = value.doImageUploadRequest, emojiSearchIndex = value.emojiSearchIndex, errorHandler = value.errorHandler, fileOrder = value.fileOrder, fileUploads = value.fileUploads, findAndEnqueueURLsToEnrich = value.findAndEnqueueURLsToEnrich, focus = value.focus, grow = value.grow, handleChange = value.handleChange, handleSubmit = value.handleSubmit, hideSendButton = value.hideSendButton, imageOrder = value.imageOrder, imageUploads = value.imageUploads, insertText = value.insertText, isUploadEnabled = value.isUploadEnabled, linkPreviews = value.linkPreviews, maxFilesLeft = value.maxFilesLeft, maxRows = value.maxRows, mentionAllAppUsers = value.mentionAllAppUsers, mentioned_users = value.mentioned_users, mentionQueryParams = value.mentionQueryParams, message = value.message, noFiles = value.noFiles, numberOfUploads = value.numberOfUploads, onPaste = value.onPaste, onSelectUser = value.onSelectUser, openCommandsList = value.openCommandsList, openMentionsList = value.openMentionsList, overrideSubmitHandler = value.overrideSubmitHandler, parent = value.parent, publishTypingEvent = value.publishTypingEvent, removeFile = value.removeFile, removeImage = value.removeImage, setCooldownRemaining = value.setCooldownRemaining, setText = value.setText, shouldSubmit = value.shouldSubmit, showCommandsList = value.showCommandsList, showMentionsList = value.showMentionsList, text = value.text, textareaRef = value.textareaRef, uploadFile = value.uploadFile, uploadImage = value.uploadImage, uploadNewFiles = value.uploadNewFiles, useMentionsTransliteration = value.useMentionsTransliteration;
        var editing = message === null || message === void 0 ? void 0 : message.editing;
        var fileUploadsValue = Object.entries(fileUploads)
            // eslint-disable-next-line
            .map(function (_a) {
            _a[0]; var value = _a[1];
            return value.state;
        })
            .join();
        var imageUploadsValue = Object.entries(imageUploads)
            // eslint-disable-next-line
            .map(function (_a) {
            _a[0]; var value = _a[1];
            return value.state;
        })
            .join();
        var linkPreviewsValue = Array.from(linkPreviews.values()).join();
        var mentionedUsersLength = mentioned_users.length;
        var parentId = parent === null || parent === void 0 ? void 0 : parent.id;
        var messageInputContext = React$2.useMemo(function () { return ({
            additionalTextareaProps: additionalTextareaProps,
            attachments: attachments,
            autocompleteTriggers: autocompleteTriggers,
            cancelURLEnrichment: cancelURLEnrichment,
            clearEditingState: clearEditingState,
            closeCommandsList: closeCommandsList,
            closeMentionsList: closeMentionsList,
            cooldownInterval: cooldownInterval,
            cooldownRemaining: cooldownRemaining,
            disabled: disabled,
            disableMentions: disableMentions,
            dismissLinkPreview: dismissLinkPreview,
            doFileUploadRequest: doFileUploadRequest,
            doImageUploadRequest: doImageUploadRequest,
            emojiSearchIndex: emojiSearchIndex,
            errorHandler: errorHandler,
            fileOrder: fileOrder,
            fileUploads: fileUploads,
            findAndEnqueueURLsToEnrich: findAndEnqueueURLsToEnrich,
            focus: focus,
            grow: grow,
            handleChange: handleChange,
            handleSubmit: handleSubmit,
            hideSendButton: hideSendButton,
            imageOrder: imageOrder,
            imageUploads: imageUploads,
            insertText: insertText,
            isUploadEnabled: isUploadEnabled,
            linkPreviews: linkPreviews,
            maxFilesLeft: maxFilesLeft,
            maxRows: maxRows,
            mentionAllAppUsers: mentionAllAppUsers,
            mentioned_users: mentioned_users,
            mentionQueryParams: mentionQueryParams,
            message: message,
            noFiles: noFiles,
            numberOfUploads: numberOfUploads,
            onPaste: onPaste,
            onSelectUser: onSelectUser,
            openCommandsList: openCommandsList,
            openMentionsList: openMentionsList,
            overrideSubmitHandler: overrideSubmitHandler,
            parent: parent,
            publishTypingEvent: publishTypingEvent,
            removeFile: removeFile,
            removeImage: removeImage,
            setCooldownRemaining: setCooldownRemaining,
            setText: setText,
            shouldSubmit: shouldSubmit,
            showCommandsList: showCommandsList,
            showMentionsList: showMentionsList,
            text: text,
            textareaRef: textareaRef,
            uploadFile: uploadFile,
            uploadImage: uploadImage,
            uploadNewFiles: uploadNewFiles,
            useMentionsTransliteration: useMentionsTransliteration,
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
            cancelURLEnrichment,
            cooldownInterval,
            cooldownRemaining,
            dismissLinkPreview,
            editing,
            emojiSearchIndex,
            fileUploadsValue,
            findAndEnqueueURLsToEnrich,
            hideSendButton,
            imageUploadsValue,
            isUploadEnabled,
            linkPreviewsValue,
            mentionedUsersLength,
            parentId,
            publishTypingEvent,
            showCommandsList,
            showMentionsList,
            text,
            handleSubmit,
        ]);
        return messageInputContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageInputProvider = function (props) {
        var _a;
        var cooldownTimerState = useCooldownTimer();
        var messageInputState = useMessageInputState(props);
        var emojiSearchIndex = useComponentContext('MessageInput').emojiSearchIndex;
        var messageInputContextValue = useCreateMessageInputContext(__assign(__assign(__assign(__assign({}, cooldownTimerState), messageInputState), props), { emojiSearchIndex: (_a = props.emojiSearchIndex) !== null && _a !== void 0 ? _a : emojiSearchIndex }));
        return (React__default["default"].createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children));
    };
    var UnMemoizedMessageInput = function (props) {
        var PropInput = props.Input;
        var dragAndDropWindow = useChannelStateContext().dragAndDropWindow;
        var _a = useComponentContext('MessageInput'), ContextInput = _a.Input, _b = _a.TriggerProvider, TriggerProvider = _b === void 0 ? DefaultTriggerProvider : _b;
        var Input = PropInput || ContextInput || MessageInputFlat;
        if (dragAndDropWindow)
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                React__default["default"].createElement(TriggerProvider, null,
                    React__default["default"].createElement(Input, null))));
        return (React__default["default"].createElement(MessageInputProvider, __assign({}, props),
            React__default["default"].createElement(TriggerProvider, null,
                React__default["default"].createElement(Input, null))));
    };
    /**
     * A high level component that has provides all functionality to the Input it renders.
     */
    var MessageInput = React__default["default"].memo(UnMemoizedMessageInput);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @deprecated This component has beend deprecated in favor of [`MessageInputFlat`](./MessageInputFlat.tsx) from which
     * `MessageInputSmall` "inherited" most of the code with only slight modification to classNames
     * and markup.
     * In case you need to change styling in places where `MessageInputSmall` has been used previously ([`Thread`](../Thread/Thread.tsx))
     * please do so by updating the CSS or by overriding the component itself.
     *
     * **Will be removed with the complete transition to the theming V2 (next major release - `v11.0.0`).**
     */
    var MessageInputSmall = function () {
        var _a = useChannelStateContext('MessageInputSmall'), acceptedFiles = _a.acceptedFiles, multipleUploads = _a.multipleUploads, quotedMessage = _a.quotedMessage;
        var setQuotedMessage = useChannelActionContext('MessageInputSmall').setQuotedMessage;
        var t = useTranslationContext('MessageInputSmall').t;
        var channel = useChatContext('MessageInputSmall').channel;
        var _b = useMessageInputContext('MessageInputSmall'), cooldownRemaining = _b.cooldownRemaining, handleSubmit = _b.handleSubmit, hideSendButton = _b.hideSendButton, isUploadEnabled = _b.isUploadEnabled, maxFilesLeft = _b.maxFilesLeft, numberOfUploads = _b.numberOfUploads, setCooldownRemaining = _b.setCooldownRemaining, uploadNewFiles = _b.uploadNewFiles;
        var _c = useComponentContext('MessageInputSmall'), _d = _c.CooldownTimer, CooldownTimer$1 = _d === void 0 ? CooldownTimer : _d, _e = _c.FileUploadIcon, FileUploadIcon = _e === void 0 ? FileUploadIconFlat : _e, _f = _c.SendButton, SendButton$1 = _f === void 0 ? SendButton : _f, _g = _c.QuotedMessagePreview, QuotedMessagePreview$1 = _g === void 0 ? QuotedMessagePreview : _g, EmojiPicker = _c.EmojiPicker;
        React$2.useEffect(function () {
            var handleQuotedMessageUpdate = function (e) {
                var _a;
                if (!(quotedMessage && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) === quotedMessage.id))
                    return;
                if (e.type === 'message.deleted') {
                    setQuotedMessage(undefined);
                    return;
                }
                setQuotedMessage(e.message);
            };
            channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);
            channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);
            return function () {
                channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);
                channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [channel, quotedMessage]);
        return (React__default["default"].createElement("div", { className: 'str-chat__small-message-input__wrapper' },
            React__default["default"].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads },
                React__default["default"].createElement("div", { className: "str-chat__small-message-input ".concat(SendButton$1 ? 'str-chat__small-message-input--send-button-active' : '', " ").concat(quotedMessage && quotedMessage.parent_id ? 'str-chat__input-flat-quoted' : '', " ").concat(numberOfUploads ? 'str-chat__small-message-input-has-attachments' : '', " ") },
                    quotedMessage && quotedMessage.parent_id && (React__default["default"].createElement(QuotedMessagePreview$1, { quotedMessage: quotedMessage })),
                    isUploadEnabled && React__default["default"].createElement(UploadsPreview, null),
                    React__default["default"].createElement("div", { className: 'str-chat__small-message-input--textarea-wrapper' },
                        React__default["default"].createElement(ChatAutoComplete, null),
                        cooldownRemaining ? (React__default["default"].createElement("div", { className: 'str-chat__input-small-cooldown' },
                            React__default["default"].createElement(CooldownTimer$1, { cooldownInterval: cooldownRemaining, setCooldownRemaining: setCooldownRemaining }))) : (React__default["default"].createElement(React__default["default"].Fragment, null,
                            isUploadEnabled && (React__default["default"].createElement("div", { className: 'str-chat__fileupload-wrapper', "data-testid": 'fileinput' },
                                React__default["default"].createElement(Tooltip, null, maxFilesLeft
                                    ? t('Attach files')
                                    : t("You've reached the maximum number of files")),
                                React__default["default"].createElement(FileUploadButton, { accepts: acceptedFiles, disabled: maxFilesLeft === 0, handleFiles: uploadNewFiles, multiple: multipleUploads },
                                    React__default["default"].createElement("span", { className: 'str-chat__small-message-input-fileupload' },
                                        React__default["default"].createElement(FileUploadIcon, null))))),
                            EmojiPicker && (React__default["default"].createElement(EmojiPicker
                            // @ts-expect-error
                            , { 
                                // @ts-expect-error
                                buttonClassName: 'str-chat__small-message-input-emojiselect', ButtonIconComponent: EmojiIconSmall }))))),
                    !(cooldownRemaining || hideSendButton) && React__default["default"].createElement(SendButton$1, { sendMessage: handleSubmit })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MMLReact = React__default["default"].lazy(function () { return __awaiter(void 0, void 0, void 0, function () {
        var mml;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return mmlReact_esm; })];
                case 1:
                    mml = _a.sent();
                    return [2 /*return*/, { default: mml.MML }];
            }
        });
    }); });
    /**
     * A wrapper component around MML-React library
     */
    var MML$1 = function (props) {
        var actionHandler = props.actionHandler, _a = props.align, align = _a === void 0 ? 'right' : _a, source = props.source;
        var theme = useChatContext('MML').theme;
        return (React__default["default"].createElement(React$2.Suspense, { fallback: null },
            React__default["default"].createElement(MMLReact, { className: "mml-align-".concat(align), Loading: null, onSubmit: actionHandler, source: source, Success: null, theme: (theme || '').replace(' ', '-') })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isMutableRef = function (ref) {
        if (ref) {
            return ref.current !== undefined;
        }
        return false;
    };
    var getImageDimensions = function (source) {
        return new Promise(function (resolve, reject) {
            var image = new Image();
            image.addEventListener('load', function () {
                resolve([image.width, image.height]);
            }, { once: true });
            image.addEventListener('error', function () { return reject("Couldn't load image from ".concat(source)); }, {
                once: true,
            });
            image.src = source;
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedReactionSelector = React__default["default"].forwardRef(function (props, ref) {
        var _a;
        var propAvatar = props.Avatar, _b = props.detailedView, detailedView = _b === void 0 ? true : _b, propHandleReaction = props.handleReaction, propLatestReactions = props.latest_reactions, propOwnReactions = props.own_reactions, propReactionCounts = props.reaction_counts, propReactionOptions = props.reactionOptions, _c = props.reverse, reverse = _c === void 0 ? false : _c;
        var _d = useComponentContext('ReactionSelector'), contextAvatar = _d.Avatar, contextReactionOptions = _d.reactionOptions;
        var _e = useMessageContext('ReactionSelector'), contextHandleReaction = _e.handleReaction, message = _e.message;
        var reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;
        var Avatar$1 = propAvatar || contextAvatar || Avatar;
        var handleReaction = propHandleReaction || contextHandleReaction;
        var latestReactions = propLatestReactions || (message === null || message === void 0 ? void 0 : message.latest_reactions) || [];
        var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];
        var reactionCounts = propReactionCounts || (message === null || message === void 0 ? void 0 : message.reaction_counts) || {};
        var _f = React$2.useState(null), tooltipReactionType = _f[0], setTooltipReactionType = _f[1];
        var _g = React$2.useState(null), tooltipPositions = _g[0], setTooltipPositions = _g[1];
        var targetRef = React$2.useRef(null);
        var tooltipRef = React$2.useRef(null);
        var showTooltip = React$2.useCallback(function (event, reactionType) {
            targetRef.current = event.currentTarget;
            setTooltipReactionType(reactionType);
        }, []);
        var hideTooltip = React$2.useCallback(function () {
            setTooltipReactionType(null);
            setTooltipPositions(null);
        }, []);
        React$2.useEffect(function () {
            var _a, _b, _c;
            if (tooltipReactionType) {
                var tooltip = (_a = tooltipRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                var target = (_b = targetRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
                var container = isMutableRef(ref) ? (_c = ref.current) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect() : null;
                if (!tooltip || !target || !container)
                    return;
                var tooltipPosition = tooltip.width === container.width || tooltip.x < container.x
                    ? 0
                    : target.left + target.width / 2 - container.left - tooltip.width / 2;
                var arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
                setTooltipPositions({
                    arrow: arrowPosition,
                    tooltip: tooltipPosition,
                });
            }
        }, [tooltipReactionType, ref]);
        var getUsersPerReactionType = function (type) {
            return latestReactions
                .map(function (reaction) {
                var _a, _b;
                if (reaction.type === type) {
                    return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);
                }
                return null;
            })
                .filter(Boolean);
        };
        var iHaveReactedWithReaction = function (reactionType) {
            return ownReactions.find(function (reaction) { return reaction.type === reactionType; });
        };
        var getLatestUserForReactionType = function (type) {
            var _a;
            return ((_a = latestReactions.find(function (reaction) { return reaction.type === type && !!reaction.user; })) === null || _a === void 0 ? void 0 : _a.user) ||
                undefined;
        };
        return (React__default["default"].createElement("div", { className: clsx('str-chat__reaction-selector str-chat__message-reaction-selector', {
                'str-chat__reaction-selector--reverse': reverse,
            }), "data-testid": 'reaction-selector', ref: ref },
            !!tooltipReactionType && detailedView && (React__default["default"].createElement("div", { className: 'str-chat__reaction-selector-tooltip', ref: tooltipRef, style: {
                    left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.tooltip,
                    visibility: tooltipPositions ? 'visible' : 'hidden',
                } },
                React__default["default"].createElement("div", { className: 'arrow', style: { left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.arrow } }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 :
                _a.map(function (user, i, users) { return (React__default["default"].createElement("span", { className: 'latest-user-username', key: "key-".concat(i, "-").concat(user) }, "".concat(user).concat(i < users.length - 1 ? ', ' : ''))); }))),
            React__default["default"].createElement("ul", { className: 'str-chat__message-reactions-list str-chat__message-reactions-options' }, reactionOptions.map(function (_a) {
                var Component = _a.Component, reactionName = _a.name, reactionType = _a.type;
                var latestUser = getLatestUserForReactionType(reactionType);
                var count = reactionCounts && reactionCounts[reactionType];
                return (React__default["default"].createElement("li", { key: reactionType },
                    React__default["default"].createElement("button", { "aria-label": "Select Reaction: ".concat(reactionName || reactionType), className: clsx('str-chat__message-reactions-list-item str-chat__message-reactions-option', {
                            'str-chat__message-reactions-option-selected': iHaveReactedWithReaction(reactionType),
                        }), "data-text": reactionType, onClick: function (event) { return handleReaction(reactionType, event); } },
                        !!count && detailedView && (React__default["default"].createElement("div", { className: 'latest-user str-chat__message-reactions-last-user', onClick: hideTooltip, onMouseEnter: function (e) { return showTooltip(e, reactionType); }, onMouseLeave: hideTooltip }, latestUser ? (React__default["default"].createElement(Avatar$1, { image: latestUser.image, name: latestUser.name, size: 20, user: latestUser })) : (React__default["default"].createElement("div", { className: 'latest-user-not-found' })))),
                        React__default["default"].createElement("span", { className: 'str-chat__message-reaction-emoji' },
                            React__default["default"].createElement(Component, null)),
                        Boolean(count) && detailedView && (React__default["default"].createElement("span", { className: 'str-chat__message-reactions-list-item__count' }, count || '')))));
            }))));
    });
    /**
     * Component that allows a user to select a reaction.
     */
    var ReactionSelector = React__default["default"].memo(UnMemoizedReactionSelector);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultReactionsSort = function (a, b) {
        return a.reactionType.localeCompare(b.reactionType, 'en');
    };
    var useProcessReactions = function (params) {
        var _a;
        var propOwnReactions = params.own_reactions, propReactionCounts = params.reaction_counts, propReactionOptions = params.reactionOptions, propReactions = params.reactions, propSortReactions = params.sortReactions;
        var _b = useMessageContext('useProcessReactions'), message = _b.message, contextSortReactions = _b.sortReactions;
        var contextReactionOptions = useComponentContext('useProcessReactions').reactionOptions;
        var reactionOptions = propReactionOptions !== null && propReactionOptions !== void 0 ? propReactionOptions : contextReactionOptions;
        var sortReactions = (_a = propSortReactions !== null && propSortReactions !== void 0 ? propSortReactions : contextSortReactions) !== null && _a !== void 0 ? _a : defaultReactionsSort;
        var latestReactions = propReactions || message.latest_reactions;
        var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions);
        var reactionCounts = propReactionCounts || message.reaction_counts;
        var isOwnReaction = React$2.useCallback(function (reactionType) { var _a; return (_a = ownReactions === null || ownReactions === void 0 ? void 0 : ownReactions.some(function (reaction) { return reaction.type === reactionType; })) !== null && _a !== void 0 ? _a : false; }, [ownReactions]);
        var getEmojiByReactionType = React$2.useCallback(function (reactionType) { var _a, _b; return (_b = (_a = reactionOptions.find(function (_a) {
            var type = _a.type;
            return type === reactionType;
        })) === null || _a === void 0 ? void 0 : _a.Component) !== null && _b !== void 0 ? _b : null; }, [reactionOptions]);
        var isSupportedReaction = React$2.useCallback(function (reactionType) {
            return reactionOptions.some(function (reactionOption) { return reactionOption.type === reactionType; });
        }, [reactionOptions]);
        var getLatestReactedUserNames = React$2.useCallback(function (reactionType) {
            var _a;
            return (_a = latestReactions === null || latestReactions === void 0 ? void 0 : latestReactions.flatMap(function (reaction) {
                var _a, _b;
                if (reactionType && reactionType === reaction.type) {
                    var username = ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);
                    return username ? [username] : [];
                }
                return [];
            })) !== null && _a !== void 0 ? _a : [];
        }, [latestReactions]);
        var existingReactions = React$2.useMemo(function () {
            if (!reactionCounts) {
                return [];
            }
            var unsortedReactions = Object.entries(reactionCounts).flatMap(function (_a) {
                var reactionType = _a[0], reactionCount = _a[1];
                if (reactionCount === 0 || !isSupportedReaction(reactionType)) {
                    return [];
                }
                return [
                    {
                        EmojiComponent: getEmojiByReactionType(reactionType),
                        isOwnReaction: isOwnReaction(reactionType),
                        latestReactedUserNames: getLatestReactedUserNames(reactionType),
                        reactionCount: reactionCount,
                        reactionType: reactionType,
                    },
                ];
            });
            return unsortedReactions.sort(sortReactions);
        }, [
            getEmojiByReactionType,
            getLatestReactedUserNames,
            isOwnReaction,
            isSupportedReaction,
            reactionCounts,
            sortReactions,
        ]);
        var hasReactions = existingReactions.length > 0;
        var totalReactionCount = React$2.useMemo(function () { return existingReactions.reduce(function (total, _a) {
            var reactionCount = _a.reactionCount;
            return total + reactionCount;
        }, 0); }, [existingReactions]);
        return {
            existingReactions: existingReactions,
            hasReactions: hasReactions,
            totalReactionCount: totalReactionCount,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useFetchReactions(options) {
        var _this = this;
        var contextHandleFetchReactions = useMessageContext('useFetchReactions').handleFetchReactions;
        var _a = React$2.useState([]), reactions = _a[0], setReactions = _a[1];
        var propHandleFetchReactions = options.handleFetchReactions, shouldFetch = options.shouldFetch;
        var _b = React$2.useState(shouldFetch), isLoading = _b[0], setIsLoading = _b[1];
        var handleFetchReactions = propHandleFetchReactions !== null && propHandleFetchReactions !== void 0 ? propHandleFetchReactions : contextHandleFetchReactions;
        React$2.useEffect(function () {
            if (!shouldFetch) {
                return;
            }
            var cancel = false;
            (function () { return __awaiter(_this, void 0, void 0, function () {
                var reactions_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            setIsLoading(true);
                            return [4 /*yield*/, handleFetchReactions()];
                        case 1:
                            reactions_1 = _a.sent();
                            if (!cancel) {
                                setReactions(reactions_1);
                            }
                            return [3 /*break*/, 4];
                        case 2:
                            _a.sent();
                            if (!cancel) {
                                setReactions([]);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            if (!cancel) {
                                setIsLoading(false);
                            }
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            }); })();
            return function () {
                cancel = true;
            };
        }, [handleFetchReactions, shouldFetch]);
        return { isLoading: isLoading, reactions: reactions };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var defaultSortReactionDetails = function (a, b) {
        var _a, _b, _c, _d, _e, _f;
        var aName = (_b = (_a = a.user) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : (_c = a.user) === null || _c === void 0 ? void 0 : _c.id;
        var bName = (_e = (_d = b.user) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : (_f = b.user) === null || _f === void 0 ? void 0 : _f.id;
        return aName ? (bName ? aName.localeCompare(bName, 'en') : -1) : 1;
    };
    function ReactionsListModal(_a) {
        var _b, _c;
        var handleFetchReactions = _a.handleFetchReactions, onSelectedReactionTypeChange = _a.onSelectedReactionTypeChange, reactions = _a.reactions, selectedReactionType = _a.selectedReactionType, propSortReactionDetails = _a.sortReactionDetails, modalProps = __rest(_a, ["handleFetchReactions", "onSelectedReactionTypeChange", "reactions", "selectedReactionType", "sortReactionDetails"]);
        var selectedReaction = reactions.find(function (_a) {
            var reactionType = _a.reactionType;
            return reactionType === selectedReactionType;
        });
        var SelectedEmojiComponent = (_b = selectedReaction === null || selectedReaction === void 0 ? void 0 : selectedReaction.EmojiComponent) !== null && _b !== void 0 ? _b : null;
        var _d = useFetchReactions({
            handleFetchReactions: handleFetchReactions,
            shouldFetch: modalProps.open,
        }), areReactionsLoading = _d.isLoading, allReactions = _d.reactions;
        var contextSortReactionDetails = useMessageContext('ReactionsListModal').sortReactionDetails;
        var sortReactionDetails = (_c = propSortReactionDetails !== null && propSortReactionDetails !== void 0 ? propSortReactionDetails : contextSortReactionDetails) !== null && _c !== void 0 ? _c : defaultSortReactionDetails;
        var currentReactions = React$2.useMemo(function () {
            if (!selectedReactionType) {
                return [];
            }
            var unsortedCurrentReactions = allReactions.filter(function (reaction) { return reaction.type === selectedReactionType && reaction.user; });
            return unsortedCurrentReactions.sort(sortReactionDetails);
        }, [allReactions, selectedReactionType, sortReactionDetails]);
        return (React__default["default"].createElement(Modal, __assign({}, modalProps),
            React__default["default"].createElement("div", { className: 'str-chat__message-reactions-details', "data-testid": 'reactions-list-modal' },
                React__default["default"].createElement("div", { className: 'str-chat__message-reactions-details-reaction-types' }, reactions.map(function (_a) {
                    var EmojiComponent = _a.EmojiComponent, reactionCount = _a.reactionCount, reactionType = _a.reactionType;
                    return EmojiComponent && (React__default["default"].createElement("div", { className: clsx('str-chat__message-reactions-details-reaction-type', {
                            'str-chat__message-reactions-details-reaction-type--selected': selectedReactionType === reactionType,
                        }), "data-testid": "reaction-details-selector-".concat(reactionType), key: reactionType, onClick: function () { return onSelectedReactionTypeChange === null || onSelectedReactionTypeChange === void 0 ? void 0 : onSelectedReactionTypeChange(reactionType); } },
                        React__default["default"].createElement("span", { className: 'emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback' },
                            React__default["default"].createElement(EmojiComponent, null)),
                        "\u00A0",
                        React__default["default"].createElement("span", { className: 'str-chat__message-reaction-count' }, reactionCount)));
                })),
                SelectedEmojiComponent && (React__default["default"].createElement("div", { className: 'emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback str-chat__message-reaction-emoji-big' },
                    React__default["default"].createElement(SelectedEmojiComponent, null))),
                React__default["default"].createElement("div", { className: 'str-chat__message-reactions-details-reacting-users', "data-testid": 'all-reacting-users' }, areReactionsLoading ? (React__default["default"].createElement(LoadingIndicator, null)) : (currentReactions.map(function (_a) {
                    var user = _a.user;
                    return (React__default["default"].createElement("div", { className: 'str-chat__message-reactions-details-reacting-user', key: user === null || user === void 0 ? void 0 : user.id },
                        React__default["default"].createElement(Avatar, { "data-testid": 'avatar', image: user === null || user === void 0 ? void 0 : user.image, name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id) }),
                        React__default["default"].createElement("span", { className: 'str-chat__user-item--name', "data-testid": 'reaction-user-username' }, (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id))));
                }))))));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var handleActionWarning = "Action handler was called, but it is missing one of its required arguments. \nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
    function useActionHandler(message) {
        var _this = this;
        var _a = useChannelActionContext('useActionHandler'), removeMessage = _a.removeMessage, updateMessage = _a.updateMessage;
        var channel = useChannelStateContext('useActionHandler').channel;
        return function (dataOrName, value, event) { return __awaiter(_this, void 0, void 0, function () {
            var messageID, formData, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (event)
                            event.preventDefault();
                        if (!message || !updateMessage || !removeMessage || !channel) {
                            console.warn(handleActionWarning);
                            return [2 /*return*/];
                        }
                        messageID = message.id;
                        formData = {};
                        // deprecated: value&name should be removed in favor of data obj
                        if (typeof dataOrName === 'string') {
                            formData[dataOrName] = value;
                        }
                        else {
                            formData = __assign({}, dataOrName);
                        }
                        if (!messageID) return [3 /*break*/, 2];
                        return [4 /*yield*/, channel.sendAction(messageID, formData)];
                    case 1:
                        data = _a.sent();
                        if (data === null || data === void 0 ? void 0 : data.message) {
                            updateMessage(data.message);
                        }
                        else {
                            removeMessage(message);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useDeleteHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
        var _a = useChannelActionContext('useDeleteHandler'), deleteMessage = _a.deleteMessage, updateMessage = _a.updateMessage;
        var client = useChatContext('useDeleteHandler').client;
        var t = useTranslationContext('useDeleteHandler').t;
        return function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var deletedMessage, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        if (!(message === null || message === void 0 ? void 0 : message.id) || !client || !updateMessage) {
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, deleteMessage(message)];
                    case 2:
                        deletedMessage = _a.sent();
                        updateMessage(deletedMessage);
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error deleting message'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEditHandler = function (customInitialState, customSetEditing, customClearEditingHandler) {
        if (customInitialState === void 0) { customInitialState = false; }
        var _a = React$2.useState(customInitialState), editing = _a[0], setEditing = _a[1];
        var setEdit = customSetEditing ||
            (function (event) {
                if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                    event.preventDefault();
                }
                setEditing(true);
            });
        var clearEdit = customClearEditingHandler ||
            (function (event) {
                if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                    event.preventDefault();
                }
                setEditing(false);
            });
        return { clearEdit: clearEdit, editing: editing, setEdit: setEdit };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var missingUseFlagHandlerParameterWarning = 'useFlagHandler was called but it is missing one or more necessary parameters.';
    var useFlagHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var client = useChatContext('useFlagHandler').client;
        var t = useTranslationContext('useFlagHandler').t;
        return function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var getErrorNotification, getSuccessNotification, notify, successMessage, errorMessage;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        event.preventDefault();
                        getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
                        if (!client || !t || !notify || !(message === null || message === void 0 ? void 0 : message.id)) {
                            console.warn(missingUseFlagHandlerParameterWarning);
                            return [2 /*return*/];
                        }
                        if ((_a = client.user) === null || _a === void 0 ? void 0 : _a.banned) {
                            return [2 /*return*/, notify(t('Error adding flag'), 'error')];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.flagMessage(message.id)];
                    case 2:
                        _b.sent();
                        successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
                        notify(successMessage || t('Message has been successfully flagged'), 'success');
                        return [3 /*break*/, 4];
                    case 3:
                        _b.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        notify(errorMessage || t('Error adding flag'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function createEventHandler(fn, message) {
        return function (event) {
            var _a;
            if (typeof fn !== 'function' || !((_a = message === null || message === void 0 ? void 0 : message.mentioned_users) === null || _a === void 0 ? void 0 : _a.length)) {
                return;
            }
            fn(event, message.mentioned_users);
        };
    }
    var useMentionsHandler = function (message, customMentionHandler) {
        var _a = useChannelActionContext('useMentionsHandler'), contextOnMentionsClick = _a.onMentionsClick, contextOnMentionsHover = _a.onMentionsHover;
        var onMentionsClick = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsClick) || contextOnMentionsClick || (function () { return null; });
        var onMentionsHover = (customMentionHandler === null || customMentionHandler === void 0 ? void 0 : customMentionHandler.onMentionsHover) || contextOnMentionsHover || (function () { return null; });
        return {
            onMentionsClick: createEventHandler(onMentionsClick, message),
            onMentionsHover: createEventHandler(onMentionsHover, message),
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMarkUnreadHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
        var channel = useChannelStateContext('useMarkUnreadHandler').channel;
        var t = useTranslationContext('useMarkUnreadHandler').t;
        return function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var successMessage, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        if (!(message === null || message === void 0 ? void 0 : message.id)) {
                            console.warn('Mark unread handler does not have access to message id');
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, channel.markUnread({ message_id: message.id })];
                    case 2:
                        _a.sent();
                        if (!notify)
                            return [2 /*return*/];
                        successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
                        if (successMessage)
                            notify(successMessage, 'success');
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        if (!notify)
                            return [2 /*return*/];
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (getErrorNotification && !errorMessage)
                            return [2 /*return*/];
                        notify(errorMessage ||
                            t('Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var missingUseMuteHandlerParamsWarning = 'useMuteHandler was called but it is missing one or more necessary parameter.';
    var useMuteHandler = function (message, notifications) {
        if (notifications === void 0) { notifications = {}; }
        var mutes = useChannelStateContext('useMuteHandler').mutes;
        var client = useChatContext('useMuteHandler').client;
        var t = useTranslationContext('useMuteHandler').t;
        return function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var getErrorNotification, getSuccessNotification, notify, successMessage, errorMessage, fallbackMessage, successMessage, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;
                        if (!t || !(message === null || message === void 0 ? void 0 : message.user) || !notify || !client) {
                            console.warn(missingUseMuteHandlerParamsWarning);
                            return [2 /*return*/];
                        }
                        if (!!isUserMuted(message, mutes)) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.muteUser(message.user.id)];
                    case 2:
                        _a.sent();
                        successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
                        notify(successMessage ||
                            t("{{ user }} has been muted", {
                                user: message.user.name || message.user.id,
                            }), 'success');
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
                        notify(errorMessage || t('Error muting a user ...'), 'error');
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, client.unmuteUser(message.user.id)];
                    case 6:
                        _a.sent();
                        fallbackMessage = t("{{ user }} has been unmuted", {
                            user: message.user.name || message.user.id,
                        });
                        successMessage = (getSuccessNotification &&
                            validateAndGetMessage(getSuccessNotification, [message.user])) ||
                            fallbackMessage;
                        if (typeof successMessage === 'string') {
                            notify(successMessage, 'success');
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        _a.sent();
                        errorMessage = (getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user])) ||
                            t('Error unmuting a user ...');
                        if (typeof errorMessage === 'string') {
                            notify(errorMessage, 'error');
                        }
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useOpenThreadHandler = function (message, customOpenThread) {
        var channelOpenThread = useChannelActionContext('useOpenThreadHandler').openThread;
        var openThread = customOpenThread || channelOpenThread;
        return function (event) {
            if (!openThread || !message) {
                console.warn('Open thread handler was called but it is missing one of its parameters');
                return;
            }
            openThread(message, event);
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var usePinHandler = function (message, 
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    _permissions, // eslint-disable-line
    notifications) {
        if (notifications === void 0) { notifications = {}; }
        var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
        var updateMessage = useChannelActionContext('usePinHandler').updateMessage;
        var _a = useChannelStateContext('usePinHandler').channelCapabilities, channelCapabilities = _a === void 0 ? {} : _a;
        var client = useChatContext('usePinHandler').client;
        var t = useTranslationContext('usePinHandler').t;
        var canPin = !!channelCapabilities['pin-message'];
        var handlePin = function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var optimisticMessage, errorMessage, optimisticMessage, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.preventDefault();
                        if (!message)
                            return [2 /*return*/];
                        if (!!message.pinned) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        optimisticMessage = __assign(__assign({}, message), { pinned: true, pinned_at: new Date(), pinned_by: client.user });
                        updateMessage(optimisticMessage);
                        return [4 /*yield*/, client.pinMessage(message)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error pinning message'), 'error');
                        updateMessage(message);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 8];
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        optimisticMessage = __assign(__assign({}, message), { pin_expires: null, pinned: false, pinned_at: null, pinned_by: null });
                        updateMessage(optimisticMessage);
                        return [4 /*yield*/, client.unpinMessage(message)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _a.sent();
                        errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                        if (notify)
                            notify(errorMessage || t('Error removing message pin'), 'error');
                        updateMessage(message);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); };
        return { canPin: canPin, handlePin: handlePin };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var reactionHandlerWarning = "Reaction handler was called, but it is missing one of its required arguments.\nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.";
    var useReactionHandler = function (message) {
        var updateMessage = useChannelActionContext('useReactionHandler').updateMessage;
        var _a = useChannelStateContext('useReactionHandler'), channel = _a.channel, channelCapabilities = _a.channelCapabilities;
        var client = useChatContext('useReactionHandler').client;
        var createMessagePreview = React$2.useCallback(function (add, reaction, message) {
            var _a, _b;
            var newReactionCounts = (message === null || message === void 0 ? void 0 : message.reaction_counts) || {};
            var reactionType = reaction.type;
            var hasReaction = !!newReactionCounts[reactionType];
            if (add) {
                newReactionCounts[reactionType] = hasReaction ? newReactionCounts[reactionType] + 1 : 1;
            }
            else {
                if (hasReaction && newReactionCounts[reactionType] > 1) {
                    newReactionCounts[reactionType]--;
                }
                else {
                    delete newReactionCounts[reactionType];
                }
            }
            var newReactions = add
                ? __spreadArray([reaction], ((message === null || message === void 0 ? void 0 : message.latest_reactions) || []), true) : (_a = message.latest_reactions) === null || _a === void 0 ? void 0 : _a.filter(function (item) { return !(item.type === reaction.type && item.user_id === reaction.user_id); });
            var newOwnReactions = add
                ? __spreadArray([reaction], ((message === null || message === void 0 ? void 0 : message.own_reactions) || []), true) : (_b = message === null || message === void 0 ? void 0 : message.own_reactions) === null || _b === void 0 ? void 0 : _b.filter(function (item) { return item.type !== reaction.type; });
            return __assign(__assign({}, message), { latest_reactions: newReactions || message.latest_reactions, own_reactions: newOwnReactions, reaction_counts: newReactionCounts, reaction_scores: newReactionCounts });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [client.user, client.userID]);
        var createReactionPreview = function (type) {
            var _a;
            return ({
                message_id: message === null || message === void 0 ? void 0 : message.id,
                score: 1,
                type: type,
                user: client.user,
                user_id: (_a = client.user) === null || _a === void 0 ? void 0 : _a.id,
            });
        };
        var toggleReaction = lodash_throttle(function (id, type, add) { return __awaiter(void 0, void 0, void 0, function () {
            var newReaction, tempMessage, messageResponse, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!message || !channelCapabilities['send-reaction'])
                            return [2 /*return*/];
                        newReaction = createReactionPreview(type);
                        tempMessage = createMessagePreview(add, newReaction, message);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        updateMessage(tempMessage);
                        if (!add) return [3 /*break*/, 3];
                        return [4 /*yield*/, channel.sendReaction(id, { type: type })];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, channel.deleteReaction(id, type)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        messageResponse = _a;
                        updateMessage(messageResponse.message);
                        return [3 /*break*/, 7];
                    case 6:
                        _b.sent();
                        // revert to the original message if the API call fails
                        updateMessage(message);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); }, 1000);
        return function (reactionType, event) { return __awaiter(void 0, void 0, void 0, function () {
            var userExistingReaction, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (event === null || event === void 0 ? void 0 : event.preventDefault) {
                            event.preventDefault();
                        }
                        if (!message) {
                            return [2 /*return*/, console.warn(reactionHandlerWarning)];
                        }
                        userExistingReaction = null;
                        if (message.own_reactions) {
                            message.own_reactions.forEach(function (reaction) {
                                // own user should only ever contain the current user id
                                // just in case we check to prevent bugs with message updates from breaking reactions
                                if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
                                    userExistingReaction = reaction;
                                }
                                else if (reaction.user && client.userID !== reaction.user.id) {
                                    console.warn("message.own_reactions contained reactions from a different user, this indicates a bug");
                                }
                            });
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!userExistingReaction) return [3 /*break*/, 3];
                        return [4 /*yield*/, toggleReaction(message.id, userExistingReaction.type, false)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, toggleReaction(message.id, reactionType, true)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_2 = _a.sent();
                        console.log({ error: error_2 });
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
    };
    var useReactionClick = function (message, reactionSelectorRef, messageWrapperRef, closeReactionSelectorOnClick) {
        var _a = useChannelStateContext('useReactionClick').channelCapabilities, channelCapabilities = _a === void 0 ? {} : _a;
        var _b = React$2.useState(false), showDetailedReactions = _b[0], setShowDetailedReactions = _b[1];
        var hasListener = React$2.useRef(false);
        var isReactionEnabled = channelCapabilities['send-reaction'];
        var messageDeleted = !!(message === null || message === void 0 ? void 0 : message.deleted_at);
        var closeDetailedReactions = React$2.useCallback(function (event) {
            var _a;
            if (event.target instanceof HTMLElement &&
                ((_a = reactionSelectorRef === null || reactionSelectorRef === void 0 ? void 0 : reactionSelectorRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) &&
                !closeReactionSelectorOnClick) {
                return;
            }
            setShowDetailedReactions(false);
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [setShowDetailedReactions, reactionSelectorRef]);
        React$2.useEffect(function () {
            var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
            if (showDetailedReactions && !hasListener.current) {
                hasListener.current = true;
                document.addEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.addEventListener('mouseleave', closeDetailedReactions);
                }
            }
            if (!showDetailedReactions && hasListener.current) {
                document.removeEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                }
                hasListener.current = false;
            }
            return function () {
                if (hasListener.current) {
                    document.removeEventListener('click', closeDetailedReactions);
                    if (messageWrapper) {
                        messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                    }
                    hasListener.current = false;
                }
            };
        }, [showDetailedReactions, closeDetailedReactions, messageWrapperRef]);
        React$2.useEffect(function () {
            var messageWrapper = messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current;
            if (messageDeleted && hasListener.current) {
                document.removeEventListener('click', closeDetailedReactions);
                if (messageWrapper) {
                    messageWrapper.removeEventListener('mouseleave', closeDetailedReactions);
                }
                hasListener.current = false;
            }
        }, [messageDeleted, closeDetailedReactions, messageWrapperRef]);
        var onReactionListClick = function (event) {
            var _a;
            (_a = event === null || event === void 0 ? void 0 : event.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(event);
            setShowDetailedReactions(function (prev) { return !prev; });
        };
        return {
            isReactionEnabled: isReactionEnabled,
            onReactionListClick: onReactionListClick,
            showDetailedReactions: showDetailedReactions,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useRetryHandler = function (customRetrySendMessage) {
        var contextRetrySendMessage = useChannelActionContext('useRetryHandler').retrySendMessage;
        var retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
        return function (message) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message) return [3 /*break*/, 2];
                        return [4 /*yield*/, retrySendMessage(message)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserHandler = function (message, eventHandlers) { return ({
        onUserClick: function (event) {
            if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserClickHandler) !== 'function' || !(message === null || message === void 0 ? void 0 : message.user)) {
                return;
            }
            eventHandlers.onUserClickHandler(event, message.user);
        },
        onUserHover: function (event) {
            if (typeof (eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.onUserHoverHandler) !== 'function' || !(message === null || message === void 0 ? void 0 : message.user)) {
                return;
            }
            eventHandlers.onUserHoverHandler(event, message.user);
        },
    }); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MAX_MESSAGE_REACTIONS_TO_FETCH = 1200;
    function useReactionsFetcher(message, notifications) {
        var _this = this;
        if (notifications === void 0) { notifications = {}; }
        var channel = useChannelStateContext('useReactionFetcher').channel;
        var t = useTranslationContext('useReactionFetcher').t;
        var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
        return function () { return __awaiter(_this, void 0, void 0, function () {
            var e_1, errorMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fetchMessageReactions(channel, message.id)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        errorMessage = getErrorNotification === null || getErrorNotification === void 0 ? void 0 : getErrorNotification(message);
                        notify === null || notify === void 0 ? void 0 : notify(errorMessage || t('Error fetching reactions'), 'error');
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
    }
    function fetchMessageReactions(channel, messageId) {
        return __awaiter(this, void 0, void 0, function () {
            var reactions, limit, offset, reactionsLimit, lastPageSize, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reactions = [];
                        limit = 300;
                        offset = 0;
                        reactionsLimit = MAX_MESSAGE_REACTIONS_TO_FETCH;
                        lastPageSize = limit;
                        _a.label = 1;
                    case 1:
                        if (!(lastPageSize === limit && reactions.length < reactionsLimit)) return [3 /*break*/, 3];
                        return [4 /*yield*/, channel.getReactions(messageId, {
                                limit: limit,
                                offset: offset,
                            })];
                    case 2:
                        response = _a.sent();
                        lastPageSize = response.reactions.length;
                        if (lastPageSize > 0) {
                            reactions.push.apply(reactions, response.reactions);
                        }
                        offset += lastPageSize;
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, reactions];
                }
            });
        });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedReactionsList = function (props) {
        var handleFetchReactions = props.handleFetchReactions, _a = props.reverse, reverse = _a === void 0 ? false : _a, sortReactionDetails = props.sortReactionDetails, rest = __rest(props, ["handleFetchReactions", "reverse", "sortReactionDetails"]);
        var _b = useProcessReactions(rest), existingReactions = _b.existingReactions, hasReactions = _b.hasReactions, totalReactionCount = _b.totalReactionCount;
        var _c = React$2.useState(null), selectedReactionType = _c[0], setSelectedReactionType = _c[1];
        var t = useTranslationContext('ReactionsList').t;
        var handleReactionButtonClick = function (reactionType) {
            if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {
                return;
            }
            setSelectedReactionType(reactionType);
        };
        if (!hasReactions)
            return null;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("div", { "aria-label": t('aria/Reaction list'), className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {
                    'str-chat__reaction-list--reverse': reverse,
                }), "data-testid": 'reaction-list', role: 'figure' },
                React__default["default"].createElement("ul", { className: 'str-chat__message-reactions' },
                    existingReactions.map(function (_a) {
                        var EmojiComponent = _a.EmojiComponent, isOwnReaction = _a.isOwnReaction, reactionCount = _a.reactionCount, reactionType = _a.reactionType;
                        return EmojiComponent && (React__default["default"].createElement("li", { className: clsx('str-chat__message-reaction', {
                                'str-chat__message-reaction-own': isOwnReaction,
                            }), key: reactionType },
                            React__default["default"].createElement("button", { "aria-label": "Reactions: ".concat(reactionType), "data-testid": "reactions-list-button-".concat(reactionType), onClick: function () { return handleReactionButtonClick(reactionType); }, type: 'button' },
                                React__default["default"].createElement("span", { className: 'str-chat__message-reaction-emoji' },
                                    React__default["default"].createElement(EmojiComponent, null)),
                                "\u00A0",
                                React__default["default"].createElement("span", { className: 'str-chat__message-reaction-count', "data-testclass": 'reaction-list-reaction-count' }, reactionCount))));
                    }),
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("span", { className: 'str-chat__reaction-list--counter' }, totalReactionCount)))),
            React__default["default"].createElement(ReactionsListModal, { handleFetchReactions: handleFetchReactions, onClose: function () { return setSelectedReactionType(null); }, onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType: selectedReactionType, sortReactionDetails: sortReactionDetails })));
    };
    /**
     * Component that displays a list of reactions on a message.
     */
    var ReactionsList = React__default["default"].memo(UnMemoizedReactionsList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var WithTooltip = function (_a) {
        var children = _a.children, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, title = _a.title;
        var _b = React$2.useState(null), referenceElement = _b[0], setReferenceElement = _b[1];
        var _c = useEnterLeaveHandlers({
            onMouseEnter: onMouseEnter,
            onMouseLeave: onMouseLeave,
        }), handleEnter = _c.handleEnter, handleLeave = _c.handleLeave, tooltipVisible = _c.tooltipVisible;
        var themeVersion = useChatContext('WithTooltip').themeVersion;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            themeVersion === '2' && (React__default["default"].createElement(PopperTooltip, { referenceElement: referenceElement, visible: tooltipVisible }, title)),
            React__default["default"].createElement("span", { onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement }, children)));
    };
    var UnMemoizedSimpleReactionsList = function (props) {
        var propHandleReaction = props.handleReaction, rest = __rest(props, ["handleReaction"]);
        var contextHandleReaction = useMessageContext('SimpleReactionsList').handleReaction;
        var _a = useProcessReactions(rest), existingReactions = _a.existingReactions, hasReactions = _a.hasReactions, totalReactionCount = _a.totalReactionCount;
        var _b = React$2.useState(undefined), tooltipReactionType = _b[0], setTooltipReactionType = _b[1];
        var themeVersion = useChatContext('SimpleReactionsList').themeVersion;
        var handleReaction = propHandleReaction || contextHandleReaction;
        if (!hasReactions)
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__message-reactions-container' },
            React__default["default"].createElement("ul", { className: 'str-chat__simple-reactions-list str-chat__message-reactions', "data-testid": 'simple-reaction-list', onMouseLeave: function () { return setTooltipReactionType(undefined); } },
                existingReactions.map(function (_a) {
                    var EmojiComponent = _a.EmojiComponent, isOwnReaction = _a.isOwnReaction, latestReactedUserNames = _a.latestReactedUserNames, reactionType = _a.reactionType;
                    var tooltipVisible = tooltipReactionType === reactionType;
                    var tooltipContent = latestReactedUserNames.join(', ');
                    return (EmojiComponent && (React__default["default"].createElement("li", { className: clsx('str-chat__simple-reactions-list-item', {
                            'str-chat__message-reaction-own': isOwnReaction,
                        }), key: reactionType, onClick: function (event) { return handleReaction(reactionType, event); }, onKeyUp: function (event) { return handleReaction(reactionType, event); } },
                        React__default["default"].createElement(WithTooltip, { onMouseEnter: function () { return setTooltipReactionType(reactionType); }, onMouseLeave: function () { return setTooltipReactionType(undefined); }, title: tooltipContent },
                            React__default["default"].createElement(EmojiComponent, null),
                            "\u00A0",
                            tooltipVisible && themeVersion === '1' && (React__default["default"].createElement("div", { className: 'str-chat__simple-reactions-list-tooltip' },
                                React__default["default"].createElement("div", { className: 'arrow' }),
                                tooltipContent))))));
                }),
                React__default["default"].createElement("li", { className: 'str-chat__simple-reactions-list-item--last-number' }, totalReactionCount))));
    };
    var SimpleReactionsList = React__default["default"].memo(UnMemoizedSimpleReactionsList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SpriteImage = function (_a) {
        var columns = _a.columns, fallback = _a.fallback, height = _a.height, position = _a.position, rows = _a.rows, spriteUrl = _a.spriteUrl, style = _a.style, width = _a.width;
        var _b = React$2.useState([0, 0]), _c = _b[0], spriteWidth = _c[0], spriteHeight = _c[1], setSpriteDimensions = _b[1];
        React$2.useEffect(function () {
            getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
        }, [spriteUrl]);
        var x = position[0], y = position[1];
        if (!spriteHeight || !spriteWidth)
            return React__default["default"].createElement(React__default["default"].Fragment, null, fallback);
        return (React__default["default"].createElement("div", { "data-testid": 'sprite-image', style: __assign(__assign(__assign(__assign(__assign({}, style), { '--str-chat__sprite-image-resize-ratio': 'var(--str-chat__sprite-image-resize-ratio-x, var(--str-chat__sprite-image-resize-ratio-y, 1))', '--str-chat__sprite-image-resize-ratio-x': 'calc(var(--str-chat__sprite-image-width) / var(--str-chat__sprite-item-width))', '--str-chat__sprite-image-resize-ratio-y': 'calc(var(--str-chat__sprite-image-height) / var(--str-chat__sprite-item-height))', '--str-chat__sprite-item-height': "".concat(spriteHeight / rows), '--str-chat__sprite-item-width': "".concat(spriteWidth / columns) }), (Number.isFinite(height) ? { '--str-chat__sprite-image-height': "".concat(height, "px") } : {})), (Number.isFinite(width) ? { '--str-chat__sprite-image-width': "".concat(width, "px") } : {})), { backgroundImage: "url('".concat(spriteUrl, "')"), backgroundPosition: "".concat(x * (100 / (columns - 1)), "% ").concat(y * (100 / (rows - 1)), "%"), backgroundSize: "".concat(columns * 100, "% ").concat(rows * 100, "%"), height: 'var(--str-chat__sprite-image-height, calc(var(--str-chat__sprite-item-height) * var(--str-chat__sprite-image-resize-ratio)))', width: 'var(--str-chat__sprite-image-width, calc(var(--str-chat__sprite-item-width) * var(--str-chat__sprite-image-resize-ratio)))' }) }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var StreamSpriteEmojiPositions = {
        angry: [1, 1],
        haha: [1, 0],
        like: [0, 0],
        love: [1, 2],
        sad: [0, 1],
        wow: [0, 2],
    };
    var STREAM_SPRITE_URL = 'https://getstream.imgix.net/images/emoji-sprite.png';
    var StreamEmoji = function (_a) {
        var fallback = _a.fallback, type = _a.type;
        var position = StreamSpriteEmojiPositions[type];
        return (React__default["default"].createElement(SpriteImage, { columns: 2, fallback: fallback, position: position, rows: 3, spriteUrl: STREAM_SPRITE_URL, style: {
                '--str-chat__sprite-image-height': 'var(--str-chat__stream-emoji-size, 18px)',
            } }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* eslint-disable sort-keys */
    var defaultReactionOptions = [
        { type: 'haha', Component: function () { return React__default["default"].createElement(StreamEmoji, { fallback: '\uD83D\uDE02', type: 'haha' }); }, name: 'Joy' },
        { type: 'like', Component: function () { return React__default["default"].createElement(StreamEmoji, { fallback: '\uD83D\uDC4D', type: 'like' }); }, name: 'Thumbs up' },
        { type: 'love', Component: function () { return React__default["default"].createElement(StreamEmoji, { fallback: '\u2764\uFE0F', type: 'love' }); }, name: 'Heart' },
        { type: 'sad', Component: function () { return React__default["default"].createElement(StreamEmoji, { fallback: '\uD83D\uDE14', type: 'sad' }); }, name: 'Sad' },
        { type: 'wow', Component: function () { return React__default["default"].createElement(StreamEmoji, { fallback: '\uD83D\uDE32', type: 'wow' }); }, name: 'Astonished' },
    ];

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageSimpleWithContext = function (props) {
        var _a;
        var additionalMessageInputProps = props.additionalMessageInputProps, clearEditingState = props.clearEditingState, editing = props.editing, endOfGroup = props.endOfGroup, firstOfGroup = props.firstOfGroup, groupedByUser = props.groupedByUser, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, highlighted = props.highlighted, isMyMessage = props.isMyMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, renderText = props.renderText, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList;
        var _b = React$2.useState(false), isBounceDialogOpen = _b[0], setIsBounceDialogOpen = _b[1];
        var _c = useComponentContext('MessageSimple'), Attachment = _c.Attachment, _d = _c.Avatar, Avatar$1 = _d === void 0 ? Avatar : _d, _e = _c.EditMessageInput, EditMessageInput = _e === void 0 ? EditMessageForm : _e, _f = _c.MessageDeleted, MessageDeleted$1 = _f === void 0 ? MessageDeleted : _f, _g = _c.MessageBouncePrompt, MessageBouncePrompt$1 = _g === void 0 ? MessageBouncePrompt : _g, _h = _c.MessageOptions, MessageOptions$1 = _h === void 0 ? MessageOptions : _h, _j = _c.MessageRepliesCountButton, MessageRepliesCountButton$1 = _j === void 0 ? MessageRepliesCountButton : _j, _k = _c.MessageStatus, MessageStatus$1 = _k === void 0 ? MessageStatus : _k, _l = _c.MessageTimestamp, MessageTimestamp$1 = _l === void 0 ? MessageTimestamp : _l, _m = _c.ReactionSelector, ReactionSelector$1 = _m === void 0 ? ReactionSelector : _m, _o = _c.ReactionsList, ReactionsList$1 = _o === void 0 ? ReactionsList : _o;
        var themeVersion = useChatContext('MessageSimple').themeVersion;
        var hasAttachment = messageHasAttachments(message);
        var hasReactions = messageHasReactions(message);
        if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
            return null;
        }
        if (message.deleted_at || message.type === 'deleted') {
            return React__default["default"].createElement(MessageDeleted$1, { message: message });
        }
        /** FIXME: isReactionEnabled should be removed with next major version and a proper centralized permissions logic should be put in place
         * With the current permissions implementation it would be sth like:
         * const messageActions = getMessageActions();
         * const canReact = messageActions.includes(MESSAGE_ACTIONS.react);
         */
        var canReact = isReactionEnabled;
        var canShowReactions = hasReactions;
        var showMetadata = !groupedByUser || endOfGroup;
        var showReplyCountButton = !threadList && !!message.reply_count;
        var allowRetry = message.status === 'failed' && message.errorStatusCode !== 403;
        var isBounced = isMessageBounced(message);
        var handleClick = undefined;
        if (allowRetry) {
            handleClick = function () { return handleRetry(message); };
        }
        else if (isBounced) {
            handleClick = function () { return setIsBounceDialogOpen(true); };
        }
        var rootClassName = clsx('str-chat__message str-chat__message-simple', "str-chat__message--".concat(message.type), "str-chat__message--".concat(message.status), isMyMessage()
            ? 'str-chat__message--me str-chat__message-simple--me'
            : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {
            'pinned-message': message.pinned,
            'str-chat__message--has-attachment': hasAttachment,
            'str-chat__message--highlighted': highlighted,
            'str-chat__message--with-reactions str-chat__message-with-thread-link': canShowReactions,
            'str-chat__message-send-can-be-retried': (message === null || message === void 0 ? void 0 : message.status) === 'failed' && (message === null || message === void 0 ? void 0 : message.errorStatusCode) !== 403,
            'str-chat__virtual-message__wrapper--end': endOfGroup,
            'str-chat__virtual-message__wrapper--first': firstOfGroup,
            'str-chat__virtual-message__wrapper--group': groupedByUser,
        });
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            editing && (React__default["default"].createElement(Modal, { onClose: clearEditingState, open: editing },
                React__default["default"].createElement(MessageInput, __assign({ clearEditingState: clearEditingState, grow: true, hideSendButton: true, Input: EditMessageInput, message: message }, additionalMessageInputProps)))),
            isBounceDialogOpen && (React__default["default"].createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt$1, onClose: function () { return setIsBounceDialogOpen(false); }, open: isBounceDialogOpen })),
            React__default["default"].createElement("div", { className: rootClassName, key: message.id },
                themeVersion === '1' && React__default["default"].createElement(MessageStatus$1, null),
                message.user && (React__default["default"].createElement(Avatar$1, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user })),
                React__default["default"].createElement("div", { className: clsx('str-chat__message-inner', {
                        'str-chat__simple-message--error-failed': allowRetry || isBounced,
                    }), "data-testid": 'message-inner', onClick: handleClick, onKeyUp: handleClick },
                    React__default["default"].createElement(MessageOptions$1, null),
                    React__default["default"].createElement("div", { className: 'str-chat__message-reactions-host' },
                        canShowReactions && React__default["default"].createElement(ReactionsList$1, { reverse: true }),
                        showDetailedReactions && canReact && React__default["default"].createElement(ReactionSelector$1, { ref: reactionSelectorRef })),
                    React__default["default"].createElement("div", { className: 'str-chat__message-bubble' },
                        ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) && !message.quoted_message ? (React__default["default"].createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                        React__default["default"].createElement(MessageText, { message: message, renderText: renderText }),
                        message.mml && (React__default["default"].createElement(MML$1, { actionHandler: handleAction, align: isMyMessage() ? 'right' : 'left', source: message.mml })),
                        themeVersion === '2' && React__default["default"].createElement(MessageErrorIcon, null)),
                    showReplyCountButton && themeVersion === '1' && (React__default["default"].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count })),
                    showMetadata && themeVersion === '1' && (React__default["default"].createElement("div", { className: 'str-chat__message-data str-chat__message-simple-data' },
                        !isMyMessage() && message.user ? (React__default["default"].createElement("span", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)) : null,
                        React__default["default"].createElement(MessageTimestamp$1, { calendar: true, customClass: 'str-chat__message-simple-timestamp' })))),
                showReplyCountButton && themeVersion === '2' && (React__default["default"].createElement(MessageRepliesCountButton$1, { onClick: handleOpenThread, reply_count: message.reply_count })),
                showMetadata && themeVersion === '2' && (React__default["default"].createElement("div", { className: 'str-chat__message-data str-chat__message-simple-data str-chat__message-metadata' },
                    React__default["default"].createElement(MessageStatus$1, null),
                    !isMyMessage() && !!message.user && (React__default["default"].createElement("span", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)),
                    React__default["default"].createElement(MessageTimestamp$1, { calendar: true, customClass: 'str-chat__message-simple-timestamp' }))))));
    };
    var MemoizedMessageSimple = React__default["default"].memo(MessageSimpleWithContext, areMessageUIPropsEqual);
    /**
     * The default UI component that renders a message and receives functionality and logic from the MessageContext.
     */
    var MessageSimple = function (props) {
        var messageContext = useMessageContext('MessageSimple');
        return React__default["default"].createElement(MemoizedMessageSimple, __assign({}, messageContext, props));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DropzoneInner = function (_a) {
        var children = _a.children;
        var _b = useChannelStateContext('DropzoneProvider'), acceptedFiles = _b.acceptedFiles, multipleUploads = _b.multipleUploads;
        var _c = useMessageInputContext('DropzoneProvider'), cooldownRemaining = _c.cooldownRemaining, isUploadEnabled = _c.isUploadEnabled, maxFilesLeft = _c.maxFilesLeft, uploadNewFiles = _c.uploadNewFiles;
        return (React__default["default"].createElement(ImageDropzone, { accept: acceptedFiles, disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining, handleFiles: uploadNewFiles, maxNumberOfFiles: maxFilesLeft, multiple: multipleUploads }, children));
    };
    var DropzoneProvider = function (props) {
        var cooldownTimerState = useCooldownTimer();
        var messageInputState = useMessageInputState(props);
        var messageInputContextValue = useCreateMessageInputContext(__assign(__assign(__assign({}, cooldownTimerState), messageInputState), props));
        return (React__default["default"].createElement(MessageInputContextProvider, { value: messageInputContextValue },
            React__default["default"].createElement(DropzoneInner, null, props.children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_INITIAL_CHANNEL_PAGE_SIZE = 25;
    var DEFAULT_NEXT_CHANNEL_PAGE_SIZE = 100;
    var DEFAULT_THREAD_PAGE_SIZE = 50;
    var DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD = 250;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedCustomNotification = function (props) {
        var active = props.active, children = props.children, className = props.className, type = props.type;
        if (!active)
            return null;
        return (React__default["default"].createElement("div", { "aria-live": 'polite', className: clsx("str-chat__custom-notification notification-".concat(type), "str-chat__notification", "str-chat-react__notification", className), "data-testid": 'custom-notification' }, children));
    };
    var CustomNotification = React__default["default"].memo(UnMemoizedCustomNotification);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedConnectionStatus = function () {
        var client = useChatContext('ConnectionStatus').client;
        var t = useTranslationContext('ConnectionStatus').t;
        var _a = React$2.useState(true), online = _a[0], setOnline = _a[1];
        React$2.useEffect(function () {
            var connectionChanged = function (_a) {
                var _b = _a.online, onlineStatus = _b === void 0 ? false : _b;
                if (online !== onlineStatus) {
                    setOnline(onlineStatus);
                }
            };
            client.on('connection.changed', connectionChanged);
            return function () { return client.off('connection.changed', connectionChanged); };
        }, [client, online]);
        return (React__default["default"].createElement(CustomNotification, { active: !online, className: 'str-chat__connection-status-notification', type: 'error' }, t('Connection failure, reconnecting now...')));
    };
    var ConnectionStatus = React__default["default"].memo(UnMemoizedConnectionStatus);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageWithContext = function (props) {
        var canPin = props.canPin, groupedByUser = props.groupedByUser, propMessage = props.Message, message = props.message, _a = props.messageActions, messageActions = _a === void 0 ? Object.keys(MESSAGE_ACTIONS) : _a, propOnUserClick = props.onUserClick, propOnUserHover = props.onUserHover, userRoles = props.userRoles;
        var client = useChatContext('Message').client;
        var read = useChannelStateContext('Message').read;
        var contextMessage = useComponentContext('Message').Message;
        var actionsEnabled = message.type === 'regular' && message.status === 'received';
        var MessageUIComponent = propMessage || contextMessage;
        var _b = useEditHandler(), clearEdit = _b.clearEdit, editing = _b.editing, setEdit = _b.setEdit;
        var _c = useUserHandler(message, {
            onUserClickHandler: propOnUserClick,
            onUserHoverHandler: propOnUserHover,
        }), onUserClick = _c.onUserClick, onUserHover = _c.onUserHover;
        var canDelete = userRoles.canDelete, canEdit = userRoles.canEdit, canFlag = userRoles.canFlag, canMarkUnread = userRoles.canMarkUnread, canMute = userRoles.canMute, canQuote = userRoles.canQuote, canReact = userRoles.canReact, canReply = userRoles.canReply, isMyMessage = userRoles.isMyMessage;
        var messageIsUnread = React$2.useMemo(function () {
            var _a;
            return !!(!isMyMessage &&
                ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id) &&
                read &&
                (!read[client.user.id] ||
                    ((message === null || message === void 0 ? void 0 : message.created_at) &&
                        new Date(message.created_at).getTime() > read[client.user.id].last_read.getTime())));
        }, [client, isMyMessage, message.created_at, read]);
        var messageActionsHandler = React$2.useCallback(function () {
            return getMessageActions(messageActions, {
                canDelete: canDelete,
                canEdit: canEdit,
                canFlag: canFlag,
                canMarkUnread: canMarkUnread,
                canMute: canMute,
                canPin: canPin,
                canQuote: canQuote,
                canReact: canReact,
                canReply: canReply,
            });
        }, [
            messageActions,
            canDelete,
            canEdit,
            canFlag,
            canMarkUnread,
            canMute,
            canPin,
            canQuote,
            canReact,
            canReply,
        ]);
        props.canPin; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.messageActions; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onlySenderCanEdit; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onUserClick; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.onUserHover; // eslint-disable-line @typescript-eslint/no-unused-vars
        props.userRoles; // eslint-disable-line @typescript-eslint/no-unused-vars
        var rest = __rest(props, ["canPin", "messageActions", "onlySenderCanEdit", "onUserClick", "onUserHover", "userRoles"]);
        var messageContextValue = __assign(__assign({}, rest), { actionsEnabled: actionsEnabled, clearEditingState: clearEdit, editing: editing, getMessageActions: messageActionsHandler, handleEdit: setEdit, isMyMessage: function () { return isMyMessage; }, messageIsUnread: messageIsUnread, onUserClick: onUserClick, onUserHover: onUserHover, setEditingState: setEdit });
        return (React__default["default"].createElement(MessageProvider, { value: messageContextValue },
            React__default["default"].createElement(MessageUIComponent, { groupedByUser: groupedByUser })));
    };
    var MemoizedMessage = React__default["default"].memo(MessageWithContext, areMessagePropsEqual);
    /**
     * The Message component is a context provider which implements all the logic required for rendering
     * an individual message. The actual UI of the message is delegated via the Message prop on Channel.
     */
    var Message = function (props) {
        var closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, disableQuotedMessages = props.disableQuotedMessages, getDeleteMessageErrorNotification = props.getDeleteMessageErrorNotification, getFetchReactionsErrorNotification = props.getFetchReactionsErrorNotification, getFlagMessageErrorNotification = props.getFlagMessageErrorNotification, getFlagMessageSuccessNotification = props.getFlagMessageSuccessNotification, getMarkMessageUnreadErrorNotification = props.getMarkMessageUnreadErrorNotification, getMarkMessageUnreadSuccessNotification = props.getMarkMessageUnreadSuccessNotification, getMuteUserErrorNotification = props.getMuteUserErrorNotification, getMuteUserSuccessNotification = props.getMuteUserSuccessNotification, getPinMessageErrorNotification = props.getPinMessageErrorNotification, message = props.message, _a = props.onlySenderCanEdit, onlySenderCanEdit = _a === void 0 ? false : _a, propOnMentionsClick = props.onMentionsClick, propOnMentionsHover = props.onMentionsHover, propOpenThread = props.openThread, pinPermissions = props.pinPermissions, propRetrySendMessage = props.retrySendMessage, sortReactionDetails = props.sortReactionDetails, sortReactions = props.sortReactions;
        var addNotification = useChannelActionContext('Message').addNotification;
        var _b = useChannelStateContext('Message'), highlightedMessageId = _b.highlightedMessageId, mutes = _b.mutes;
        var reactionSelectorRef = React$2.useRef(null);
        var handleAction = useActionHandler(message);
        var handleOpenThread = useOpenThreadHandler(message, propOpenThread);
        var handleReaction = useReactionHandler(message);
        var handleRetry = useRetryHandler(propRetrySendMessage);
        var userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
        var handleFetchReactions = useReactionsFetcher(message, {
            getErrorNotification: getFetchReactionsErrorNotification,
            notify: addNotification,
        });
        var handleDelete = useDeleteHandler(message, {
            getErrorNotification: getDeleteMessageErrorNotification,
            notify: addNotification,
        });
        var handleFlag = useFlagHandler(message, {
            getErrorNotification: getFlagMessageErrorNotification,
            getSuccessNotification: getFlagMessageSuccessNotification,
            notify: addNotification,
        });
        var handleMarkUnread = useMarkUnreadHandler(message, {
            getErrorNotification: getMarkMessageUnreadErrorNotification,
            getSuccessNotification: getMarkMessageUnreadSuccessNotification,
            notify: addNotification,
        });
        var handleMute = useMuteHandler(message, {
            getErrorNotification: getMuteUserErrorNotification,
            getSuccessNotification: getMuteUserSuccessNotification,
            notify: addNotification,
        });
        var _c = useMentionsHandler(message, {
            onMentionsClick: propOnMentionsClick,
            onMentionsHover: propOnMentionsHover,
        }), onMentionsClick = _c.onMentionsClick, onMentionsHover = _c.onMentionsHover;
        var _d = usePinHandler(message, pinPermissions, {
            getErrorNotification: getPinMessageErrorNotification,
            notify: addNotification,
        }), canPin = _d.canPin, handlePin = _d.handlePin;
        var _e = useReactionClick(message, reactionSelectorRef, undefined, closeReactionSelectorOnClick), isReactionEnabled = _e.isReactionEnabled, onReactionListClick = _e.onReactionListClick, showDetailedReactions = _e.showDetailedReactions;
        var highlighted = highlightedMessageId === message.id;
        return (React__default["default"].createElement(MemoizedMessage, { additionalMessageInputProps: props.additionalMessageInputProps, autoscrollToBottom: props.autoscrollToBottom, canPin: canPin, customMessageActions: props.customMessageActions, disableQuotedMessages: props.disableQuotedMessages, endOfGroup: props.endOfGroup, firstOfGroup: props.firstOfGroup, formatDate: props.formatDate, groupedByUser: props.groupedByUser, groupStyles: props.groupStyles, handleAction: handleAction, handleDelete: handleDelete, handleFetchReactions: handleFetchReactions, handleFlag: handleFlag, handleMarkUnread: handleMarkUnread, handleMute: handleMute, handleOpenThread: handleOpenThread, handlePin: handlePin, handleReaction: handleReaction, handleRetry: handleRetry, highlighted: highlighted, initialMessage: props.initialMessage, isReactionEnabled: isReactionEnabled, lastReceivedId: props.lastReceivedId, message: message, Message: props.Message, messageActions: props.messageActions, messageListRect: props.messageListRect, mutes: mutes, onMentionsClickMessage: onMentionsClick, onMentionsHoverMessage: onMentionsHover, onReactionListClick: onReactionListClick, onUserClick: props.onUserClick, onUserHover: props.onUserHover, pinPermissions: props.pinPermissions, reactionSelectorRef: reactionSelectorRef, readBy: props.readBy, renderText: props.renderText, showDetailedReactions: showDetailedReactions, sortReactionDetails: sortReactionDetails, sortReactions: sortReactions, threadList: props.threadList, unsafeHTML: props.unsafeHTML, userRoles: userRoles }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var GiphyPreviewMessage = function (props) {
        var message = props.message;
        return (React__default["default"].createElement("div", { className: 'giphy-preview-message' },
            React__default["default"].createElement(Message, { message: message })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* eslint-disable no-continue */
    /**
     * processMessages - Transform the input message list according to config parameters
     *
     * Inserts date separators btw. messages created on different dates or before unread incoming messages. By default:
     * - enabled in main message list
     * - disabled in virtualized message list
     * - disabled in thread
     *
     * Allows to filter out deleted messages, contolled by hideDeletedMessages param. This is disabled by default.
     *
     * Sets Giphy preview message for VirtualizedMessageList
     *
     * The only required params are messages and userId, the rest are config params:
     *
     * @return {StreamMessage<StreamChatGenerics>[]} Transformed list of messages
     */
    var processMessages = function (params) {
        var _a, _b;
        var enableDateSeparator = params.enableDateSeparator, hideDeletedMessages = params.hideDeletedMessages, hideNewMessageSeparator = params.hideNewMessageSeparator, lastRead = params.lastRead, messages = params.messages, setGiphyPreviewMessage = params.setGiphyPreviewMessage, userId = params.userId;
        var unread = false;
        var ephemeralMessagePresent = false;
        var lastDateSeparator;
        var newMessages = [];
        for (var i = 0; i < messages.length; i += 1) {
            var message = messages[i];
            if (hideDeletedMessages && message.type === 'deleted') {
                continue;
            }
            if (setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {
                ephemeralMessagePresent = true;
                setGiphyPreviewMessage(message);
                continue;
            }
            var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';
            var previousMessage = messages[i - 1];
            var prevMessageDate = messageDate;
            if (enableDateSeparator && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {
                prevMessageDate = previousMessage.created_at.toDateString();
            }
            if (!unread && !hideNewMessageSeparator) {
                unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;
                // do not show date separator for current user's messages
                if (enableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {
                    newMessages.push({
                        customType: CUSTOM_MESSAGE_TYPE.date,
                        date: message.created_at,
                        id: makeDateMessageId(message.created_at),
                        unread: unread,
                    });
                }
            }
            if (enableDateSeparator &&
                (i === 0 || // always put date separator before the first message
                    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
                    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
                    (hideDeletedMessages &&
                        (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.type) === 'deleted' &&
                        lastDateSeparator !== messageDate)) &&
                ((_b = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date // do not show two date separators in a row)
            ) {
                lastDateSeparator = messageDate;
                newMessages.push({
                    customType: CUSTOM_MESSAGE_TYPE.date,
                    date: message.created_at,
                    id: makeDateMessageId(message.created_at),
                }, message);
            }
            else {
                newMessages.push(message);
            }
        }
        // clean up the giphy preview component state after a Cancel action
        if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
            setGiphyPreviewMessage(undefined);
        }
        return newMessages;
    };
    var makeDateMessageId = function (date) {
        var idSuffix;
        try {
            idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;
        }
        catch (e) {
            idSuffix = nanoid();
        }
        return "".concat(CUSTOM_MESSAGE_TYPE.date, "-").concat(idSuffix);
    };
    // fast since it usually iterates just the last few messages
    var getLastReceived = function (messages) {
        for (var i = messages.length - 1; i > 0; i -= 1) {
            if (messages[i].status === 'received') {
                return messages[i].id;
            }
        }
        return null;
    };
    var getReadStates = function (messages, read, returnAllReadData) {
        if (read === void 0) { read = {}; }
        // create object with empty array for each message id
        var readData = {};
        Object.values(read).forEach(function (readState) {
            if (!readState.last_read)
                return;
            var userLastReadMsgId;
            // loop messages sent by current user and add read data for other users in channel
            messages.forEach(function (msg) {
                if (msg.created_at && msg.created_at < readState.last_read) {
                    userLastReadMsgId = msg.id;
                    // if true, save other user's read data for all messages they've read
                    if (returnAllReadData) {
                        if (!readData[userLastReadMsgId]) {
                            readData[userLastReadMsgId] = [];
                        }
                        readData[userLastReadMsgId].push(readState.user);
                    }
                }
            });
            // if true, only save read data for other user's last read message
            if (userLastReadMsgId && !returnAllReadData) {
                if (!readData[userLastReadMsgId]) {
                    readData[userLastReadMsgId] = [];
                }
                readData[userLastReadMsgId].push(readState.user);
            }
        });
        return readData;
    };
    var insertIntro = function (messages, headerPosition) {
        var newMessages = messages;
        var intro = {
            customType: CUSTOM_MESSAGE_TYPE.intro,
        };
        // if no headerPosition is set, HeaderComponent will go at the top
        if (!headerPosition) {
            newMessages.unshift(intro);
            return newMessages;
        }
        // if no messages, intro gets inserted
        if (!newMessages.length) {
            newMessages.unshift(intro);
            return newMessages;
        }
        // else loop over the messages
        for (var i = 0; i < messages.length; i += 1) {
            var message = messages[i];
            var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;
            var nextMessage = messages[i + 1];
            var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)
                ? nextMessage.created_at.getTime()
                : null;
            // header position is smaller than message time so comes after;
            if (messageTime && messageTime < headerPosition) {
                // if header position is also smaller than message time continue;
                if (nextMessageTime && nextMessageTime < headerPosition) {
                    if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)
                        continue;
                    if (!nextMessageTime) {
                        newMessages.push(intro);
                        return newMessages;
                    }
                }
                else {
                    newMessages.splice(i + 1, 0, intro);
                    return newMessages;
                }
            }
        }
        return newMessages;
    };
    var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (message.customType === CUSTOM_MESSAGE_TYPE.date)
            return '';
        if (message.customType === CUSTOM_MESSAGE_TYPE.intro)
            return '';
        if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)
            return 'single';
        var isTopMessage = !previousMessage ||
            previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||
            previousMessage.customType === CUSTOM_MESSAGE_TYPE.date ||
            previousMessage.type === 'system' ||
            ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||
            ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||
            previousMessage.type === 'error' ||
            previousMessage.deleted_at ||
            (message.reaction_counts && Object.keys(message.reaction_counts).length > 0);
        var isBottomMessage = !nextMessage ||
            nextMessage.customType === CUSTOM_MESSAGE_TYPE.date ||
            nextMessage.type === 'system' ||
            nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||
            ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||
            ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||
            nextMessage.type === 'error' ||
            nextMessage.deleted_at ||
            (nextMessage.reaction_counts && Object.keys(nextMessage.reaction_counts).length > 0);
        if (!isTopMessage && !isBottomMessage) {
            if (message.deleted_at || message.type === 'error')
                return 'single';
            return 'middle';
        }
        if (isBottomMessage) {
            if (isTopMessage || message.deleted_at || message.type === 'error')
                return 'single';
            return 'bottom';
        }
        if (isTopMessage)
            return 'top';
        return '';
    };
    // "Probably" included, because it may happen that the last page was returned and it has exactly the size of the limit
    // but the back-end cannot provide us with information on whether it has still more messages in the DB
    // FIXME: once the pagination state is moved from Channel to MessageList, these should be moved as well.
    //  The MessageList should have configurable the limit for performing the requests.
    //  This parameter would then be used within these functions
    var hasMoreMessagesProbably = function (returnedCountMessages, limit) {
        return returnedCountMessages >= limit;
    };
    // @deprecated
    var hasNotMoreMessages = function (returnedCountMessages, limit) {
        return returnedCountMessages < limit;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useEnrichedMessages = function (args) {
        var channel = args.channel, disableDateSeparator = args.disableDateSeparator, groupStyles = args.groupStyles, headerPosition = args.headerPosition, hideDeletedMessages = args.hideDeletedMessages, hideNewMessageSeparator = args.hideNewMessageSeparator, messages = args.messages, noGroupByUser = args.noGroupByUser;
        var client = useChatContext('useEnrichedMessages').client;
        var HeaderComponent = useComponentContext('useEnrichedMessages').HeaderComponent;
        var lastRead = React$2.useMemo(function () { var _a; return (_a = channel.lastRead) === null || _a === void 0 ? void 0 : _a.call(channel); }, [channel]);
        var enableDateSeparator = !disableDateSeparator;
        var messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator
            ? messages
            : processMessages({
                enableDateSeparator: enableDateSeparator,
                hideDeletedMessages: hideDeletedMessages,
                hideNewMessageSeparator: hideNewMessageSeparator,
                lastRead: lastRead,
                messages: messages,
                userId: client.userID || '',
            });
        if (HeaderComponent) {
            messagesWithDates = insertIntro(messagesWithDates, headerPosition);
        }
        var groupStylesFn = groupStyles || getGroupStyles;
        var messageGroupStyles = React$2.useMemo(function () {
            return messagesWithDates.reduce(function (acc, message, i) {
                var style = groupStylesFn(message, messagesWithDates[i - 1], messagesWithDates[i + 1], noGroupByUser);
                if (style)
                    acc[message.id] = style;
                return acc;
            }, {});
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [messagesWithDates, noGroupByUser]);
        return { messageGroupStyles: messageGroupStyles, messages: messagesWithDates };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useLastReadData = function (props) {
        var messages = props.messages, read = props.read, returnAllReadData = props.returnAllReadData, userID = props.userID;
        return React$2.useMemo(function () {
            return getReadStates(messages.filter(function (_a) {
                var user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) === userID;
            }), read, returnAllReadData);
        }, [messages, read, returnAllReadData, userID]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageListElements = function (props) {
        var channelUnreadUiState = props.channelUnreadUiState, enrichedMessages = props.enrichedMessages, internalMessageProps = props.internalMessageProps, messageGroupStyles = props.messageGroupStyles, read = props.read, renderMessages = props.renderMessages, returnAllReadData = props.returnAllReadData, threadList = props.threadList;
        var _a = useChatContext('useMessageListElements'), client = _a.client, customClasses = _a.customClasses;
        var components = useComponentContext('useMessageListElements');
        // get the readData, but only for messages submitted by the user themselves
        var readData = useLastReadData({
            messages: enrichedMessages,
            read: read,
            returnAllReadData: returnAllReadData,
            userID: client.userID,
        });
        var lastReceivedMessageId = React$2.useMemo(function () { return getLastReceived(enrichedMessages); }, [
            enrichedMessages,
        ]);
        var elements = React$2.useMemo(function () {
            return renderMessages({
                channelUnreadUiState: channelUnreadUiState,
                components: components,
                customClasses: customClasses,
                lastReceivedMessageId: lastReceivedMessageId,
                messageGroupStyles: messageGroupStyles,
                messages: enrichedMessages,
                readData: readData,
                sharedMessageProps: __assign(__assign({}, internalMessageProps), { threadList: threadList }),
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
            enrichedMessages,
            internalMessageProps,
            lastReceivedMessageId,
            messageGroupStyles,
            channelUnreadUiState,
            readData,
            renderMessages,
            threadList,
        ]);
        return elements;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// FIXME: change this generic name to something like useAdjustScrollPositionToListSize
    function useMessageListScrollManager(params) {
        var loadMoreScrollThreshold = params.loadMoreScrollThreshold, onScrollBy = params.onScrollBy, scrollContainerMeasures = params.scrollContainerMeasures, scrolledUpThreshold = params.scrolledUpThreshold, scrollToBottom = params.scrollToBottom, showNewMessages = params.showNewMessages;
        var client = useChatContext('useMessageListScrollManager').client;
        var measures = React$2.useRef({
            offsetHeight: 0,
            scrollHeight: 0,
        });
        var messages = React$2.useRef();
        var scrollTop = React$2.useRef(0);
        React$2.useLayoutEffect(function () {
            var _a, _b, _c;
            var prevMeasures = measures.current;
            var prevMessages = messages.current;
            var newMessages = params.messages;
            var lastNewMessage = newMessages[newMessages.length - 1] || {};
            var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];
            var newMeasures = scrollContainerMeasures();
            var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <
                scrolledUpThreshold;
            if (typeof prevMessages !== 'undefined') {
                if (prevMessages.length < newMessages.length) {
                    // messages added to the top
                    if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {
                        if (scrollTop.current < loadMoreScrollThreshold) {
                            var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
                            onScrollBy(listHeightDelta);
                        }
                    }
                    // messages added to the bottom
                    else {
                        var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;
                        if (lastMessageIsFromCurrentUser || wasAtBottom) {
                            scrollToBottom();
                        }
                        else {
                            showNewMessages();
                        }
                    }
                }
                // message list length didn't change, but check if last message had reaction/reply update
                else {
                    var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);
                    var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;
                    if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
                        scrollToBottom();
                    }
                }
            }
            messages.current = newMessages;
            measures.current = newMeasures;
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [measures, messages, params.messages]);
        return function (scrollTopValue) {
            scrollTop.current = scrollTopValue;
        };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useScrollLocationLogic = function (params) {
        var loadMoreScrollThreshold = params.loadMoreScrollThreshold, _a = params.messages, messages = _a === void 0 ? [] : _a, _b = params.scrolledUpThreshold, scrolledUpThreshold = _b === void 0 ? 200 : _b, hasMoreNewer = params.hasMoreNewer, suppressAutoscroll = params.suppressAutoscroll, listElement = params.listElement;
        var _c = React$2.useState(false), hasNewMessages = _c[0], setHasNewMessages = _c[1];
        var _d = React$2.useState(), wrapperRect = _d[0], setWrapperRect = _d[1];
        var _e = React$2.useState(true), isMessageListScrolledToBottom = _e[0], setIsMessageListScrolledToBottom = _e[1];
        var closeToBottom = React$2.useRef(false);
        var closeToTop = React$2.useRef(false);
        var scrollToBottom = React$2.useCallback(function () {
            if (!(listElement === null || listElement === void 0 ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {
                return;
            }
            listElement.scrollTo({
                top: listElement.scrollHeight,
            });
            setHasNewMessages(false);
        }, [listElement, hasMoreNewer, suppressAutoscroll]);
        React$2.useLayoutEffect(function () {
            if (listElement) {
                setWrapperRect(listElement.getBoundingClientRect());
                scrollToBottom();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [listElement, hasMoreNewer]);
        var updateScrollTop = useMessageListScrollManager({
            loadMoreScrollThreshold: loadMoreScrollThreshold,
            messages: messages,
            onScrollBy: function (scrollBy) {
                listElement === null || listElement === void 0 ? void 0 : listElement.scrollBy({ top: scrollBy });
            },
            scrollContainerMeasures: function () { return ({
                offsetHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.offsetHeight) || 0,
                scrollHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.scrollHeight) || 0,
            }); },
            scrolledUpThreshold: scrolledUpThreshold,
            scrollToBottom: scrollToBottom,
            showNewMessages: function () { return setHasNewMessages(true); },
        });
        var onScroll = React$2.useCallback(function (event) {
            var element = event.target;
            var scrollTop = element.scrollTop;
            updateScrollTop(scrollTop);
            var offsetHeight = element.offsetHeight;
            var scrollHeight = element.scrollHeight;
            var prevCloseToBottom = closeToBottom.current;
            closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
            closeToTop.current = scrollTop < scrolledUpThreshold;
            if (closeToBottom.current) {
                setHasNewMessages(false);
            }
            if (prevCloseToBottom && !closeToBottom.current) {
                setIsMessageListScrolledToBottom(false);
            }
            else if (!prevCloseToBottom && closeToBottom.current) {
                setIsMessageListScrolledToBottom(true);
            }
        }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);
        return {
            hasNewMessages: hasNewMessages,
            isMessageListScrolledToBottom: isMessageListScrolledToBottom,
            onScroll: onScroll,
            scrollToBottom: scrollToBottom,
            wrapperRect: wrapperRect,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MESSAGE_LIST_MAIN_PANEL_CLASS = 'str-chat__main-panel-inner';
    var MessageListMainPanel = function (_a) {
        var children = _a.children;
        var themeVersion = useChatContext('MessageListMainPanel').themeVersion;
        if (themeVersion === '2')
            return React__default["default"].createElement("div", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children);
        return React__default["default"].createElement(React__default["default"].Fragment, null, children);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UNREAD_MESSAGE_SEPARATOR_CLASS = 'str-chat__unread-messages-separator';
    var UnreadMessagesSeparator = function (_a) {
        var showCount = _a.showCount, unreadCount = _a.unreadCount;
        var t = useTranslationContext('UnreadMessagesSeparator').t;
        return (React__default["default"].createElement("div", { className: UNREAD_MESSAGE_SEPARATOR_CLASS, "data-testid": 'unread-messages-separator' }, unreadCount && showCount
            ? t('unreadMessagesSeparatorText', { count: unreadCount })
            : t('Unread messages')));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var targetScrolledAboveVisibleContainerArea = function (element) {
        var targetBottom = element.getBoundingClientRect().bottom;
        return targetBottom < 0;
    };
    var targetScrolledBelowVisibleContainerArea = function (element, container) {
        var targetTop = element.getBoundingClientRect().top;
        var containerBottom = container.getBoundingClientRect().top;
        return targetTop > containerBottom;
    };
    var useUnreadMessagesNotification = function (_a) {
        var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, showAlways = _a.showAlways, unreadCount = _a.unreadCount;
        var messages = useChannelStateContext('UnreadMessagesNotification').messages;
        var _b = React$2.useState(false), show = _b[0], setShow = _b[1];
        var isScrolledAboveTargetTop = React$2.useRef(false);
        var intersectionObserverIsSupported = typeof IntersectionObserver !== 'undefined';
        React$2.useEffect(function () {
            if (!(unreadCount && intersectionObserverIsSupported)) {
                setShow(false);
                return;
            }
            var msgListPanel = document.querySelector(".".concat(MESSAGE_LIST_MAIN_PANEL_CLASS));
            if (!msgListPanel)
                return;
            var observedTarget = document.querySelector(".".concat(UNREAD_MESSAGE_SEPARATOR_CLASS));
            if (!observedTarget) {
                setShow(true);
                return;
            }
            var scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);
            var scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(observedTarget, msgListPanel);
            setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
            var observer = new IntersectionObserver(function (elements) {
                if (!elements.length)
                    return;
                var _a = elements[0], boundingClientRect = _a.boundingClientRect, isIntersecting = _a.isIntersecting;
                if (isIntersecting) {
                    setShow(false);
                    return;
                }
                var separatorIsAboveContainerTop = boundingClientRect.bottom < 0;
                setShow(showAlways || separatorIsAboveContainerTop);
                isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;
            }, { root: msgListPanel });
            observer.observe(observedTarget);
            return function () {
                observer.disconnect();
            };
        }, [
            intersectionObserverIsSupported,
            isMessageListScrolledToBottom,
            messages,
            showAlways,
            unreadCount,
        ]);
        React$2.useEffect(function () {
            /**
             * Handle situation when scrollToBottom is called from another component when the msg list is scrolled above the observed target (unread separator).
             * The intersection observer is not triggered when Element.scrollTo() is called. So we end up in a situation when we are scrolled to the bottom
             * and at the same time scrolled above the observed target.
             */
            if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
                setShow(true);
                isScrolledAboveTargetTop.current = false;
            }
        }, [isMessageListScrolledToBottom, unreadCount]);
        return { show: show && intersectionObserverIsSupported };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Takes care of marking a channel read. The channel is read only if all the following applies:
     * 1. the message list is not rendered in a thread
     * 2. the message list is scrolled to the bottom
     * 3. the channel was not marked unread by the user
     * @param isMessageListScrolledToBottom
     * @param messageListIsThread
     * @param unreadCount
     * @param wasChannelMarkedUnread
     */
    var useMarkRead = function (_a) {
        var isMessageListScrolledToBottom = _a.isMessageListScrolledToBottom, messageListIsThread = _a.messageListIsThread, unreadCount = _a.unreadCount, wasMarkedUnread = _a.wasMarkedUnread;
        var client = useChatContext('useMarkRead').client;
        var _b = useChannelActionContext('useMarkRead'), markRead = _b.markRead, setChannelUnreadUiState = _b.setChannelUnreadUiState;
        var channel = useChannelStateContext('useMarkRead').channel;
        var previousRenderMessageListScrolledToBottom = React$2.useRef(isMessageListScrolledToBottom);
        React$2.useEffect(function () {
            var shouldMarkRead = function (unreadMessages) {
                return !document.hidden &&
                    !wasMarkedUnread &&
                    !messageListIsThread &&
                    isMessageListScrolledToBottom &&
                    unreadMessages > 0;
            };
            var onVisibilityChange = function () {
                if (shouldMarkRead(unreadCount))
                    markRead();
            };
            var handleMessageNew = function (event) {
                var _a, _b, _c, _d;
                var newMessageToCurrentChannel = event.cid === channel.cid;
                var isOwnMessage = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) && event.user.id === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);
                var mainChannelUpdated = !((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id) || ((_d = event.message) === null || _d === void 0 ? void 0 : _d.show_in_channel);
                if (isOwnMessage)
                    return;
                if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {
                    setChannelUnreadUiState(function (prev) {
                        var _a, _b;
                        var previousUnreadCount = (_a = prev === null || prev === void 0 ? void 0 : prev.unread_messages) !== null && _a !== void 0 ? _a : 0;
                        var previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);
                        return __assign(__assign({}, (prev || {})), { last_read: (_b = prev === null || prev === void 0 ? void 0 : prev.last_read) !== null && _b !== void 0 ? _b : (previousUnreadCount === 0 && (previousLastMessage === null || previousLastMessage === void 0 ? void 0 : previousLastMessage.created_at)
                                ? new Date(previousLastMessage.created_at)
                                : new Date(0)), unread_messages: previousUnreadCount + 1 });
                    });
                }
                else if (newMessageToCurrentChannel &&
                    mainChannelUpdated &&
                    !isOwnMessage &&
                    shouldMarkRead(channel.countUnread())) {
                    markRead();
                }
            };
            client.on('message.new', handleMessageNew);
            document.addEventListener('visibilitychange', onVisibilityChange);
            var hasScrolledToBottom = previousRenderMessageListScrolledToBottom.current !== isMessageListScrolledToBottom &&
                isMessageListScrolledToBottom;
            if (shouldMarkRead(hasScrolledToBottom ? channel.countUnread() : unreadCount))
                markRead();
            previousRenderMessageListScrolledToBottom.current = isMessageListScrolledToBottom;
            return function () {
                client.off('message.new', handleMessageNew);
                document.removeEventListener('visibilitychange', onVisibilityChange);
            };
        }, [
            channel,
            client,
            isMessageListScrolledToBottom,
            markRead,
            messageListIsThread,
            setChannelUnreadUiState,
            unreadCount,
            wasMarkedUnread,
        ]);
    };
    function getPreviousLastMessage(messages, newMessage) {
        if (!newMessage)
            return;
        var previousLastMessage;
        for (var i = messages.length - 1; i >= 0; i--) {
            var msg = messages[i];
            if (!(msg === null || msg === void 0 ? void 0 : msg.id))
                break;
            if (msg.id !== newMessage.id) {
                previousLastMessage = msg;
                break;
            }
        }
        return previousLastMessage;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedMessageNotification = function (props) {
        var children = props.children, onClick = props.onClick, _a = props.showNotification, showNotification = _a === void 0 ? true : _a;
        if (!showNotification)
            return null;
        return (React__default["default"].createElement("button", { "aria-live": 'polite', className: "str-chat__message-notification", "data-testid": 'message-notification', onClick: onClick }, children));
    };
    var MessageNotification = React__default["default"].memo(UnMemoizedMessageNotification);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageListNotifications = function (props) {
        var hasNewMessages = props.hasNewMessages, isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, isNotAtLatestMessageSet = props.isNotAtLatestMessageSet, MessageNotification = props.MessageNotification, notifications = props.notifications, scrollToBottom = props.scrollToBottom, threadList = props.threadList, unreadCount = props.unreadCount;
        var t = useTranslationContext('MessageListNotifications').t;
        return (React__default["default"].createElement("div", { className: 'str-chat__list-notifications' },
            notifications.map(function (notification) { return (React__default["default"].createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text)); }),
            React__default["default"].createElement(ConnectionStatus, null),
            React__default["default"].createElement(MessageNotification, { isMessageListScrolledToBottom: isMessageListScrolledToBottom, onClick: scrollToBottom, showNotification: hasNewMessages || isNotAtLatestMessageSet, threadList: threadList, unreadCount: unreadCount }, isNotAtLatestMessageSet ? t('Latest Messages') : t('New Messages!'))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ArrowDown = function (_a) {
        var className = _a.className, color = _a.color;
        return (React__default["default"].createElement("svg", { className: className, "data-testid": 'arrow-down', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z', fill: color || 'var(--primary-color)' })));
    };
    var CloseIcon$1 = function () { return (React__default["default"].createElement("svg", { fill: 'currentColor', viewBox: '0 0 14 13', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnreadMessagesNotification = function (_a) {
        var queryMessageLimit = _a.queryMessageLimit, showCount = _a.showCount, unreadCount = _a.unreadCount;
        var _b = useChannelActionContext('UnreadMessagesNotification'), jumpToFirstUnreadMessage = _b.jumpToFirstUnreadMessage, markRead = _b.markRead;
        var t = useTranslationContext('UnreadMessagesNotification').t;
        return (React__default["default"].createElement("div", { className: 'str-chat__unread-messages-notification', "data-testid": 'unread-messages-notification' },
            React__default["default"].createElement("button", { onClick: function () { return jumpToFirstUnreadMessage(queryMessageLimit); } }, unreadCount && showCount
                ? t('{{count}} unread', { count: unreadCount !== null && unreadCount !== void 0 ? unreadCount : 0 })
                : t('Unread messages')),
            React__default["default"].createElement("button", { onClick: function () { return markRead(); } },
                React__default["default"].createElement(CloseIcon$1, null))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChatBubble = function () { return (React__default["default"].createElement("svg", { "data-testid": 'chat-bubble', fill: 'none', height: '96', viewBox: '0 0 136 136', width: '96', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z', fill: '#B4B7BB' }))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedEmptyStateIndicator = function (props) {
        var listType = props.listType;
        var t = useTranslationContext('EmptyStateIndicator').t;
        if (listType === 'thread')
            return null;
        if (listType === 'channel') {
            var text = t('You have no channels currently');
            return (React__default["default"].createElement(React__default["default"].Fragment, null,
                React__default["default"].createElement("div", { className: 'str-chat__channel-list-empty' },
                    React__default["default"].createElement(ChatBubble, null),
                    React__default["default"].createElement("p", { role: 'listitem' }, text)),
                React__default["default"].createElement("p", { className: 'str-chat__channel-list-empty-v1', role: 'listitem' }, text)));
        }
        if (listType === 'message') {
            var text = t('No chats here yet…');
            return (React__default["default"].createElement("div", { className: 'str-chat__empty-channel' },
                React__default["default"].createElement(ChatBubble, null),
                React__default["default"].createElement("p", { className: 'str-chat__empty-channel-text', role: 'listitem' }, text)));
        }
        return React__default["default"].createElement("p", null, "No items exist");
    };
    var EmptyStateIndicator = React__default["default"].memo(UnMemoizedEmptyStateIndicator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var deprecationAndReplacementWarning = function (pairs, component) {
        pairs.forEach(function (data) {
            var _a = [
                Object.entries(data[0])[0],
                Object.entries(data[1])[0],
            ], _b = _a[0], oldName = _b[0], oldValue = _b[1], _c = _a[1], newName = _c[0], newValue = _c[1];
            if ((typeof oldValue !== 'undefined' && typeof newValue === 'undefined') ||
                (typeof oldValue !== 'undefined' && typeof newValue !== 'undefined')) {
                console.warn("[Deprecation notice (".concat(component, ")]: prefer using prop ").concat(newName, " instead of ").concat(oldName));
            }
        });
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Prevents Chrome hangups
     * See: https://stackoverflow.com/questions/47524205/random-high-content-download-time-in-chrome/47684257#47684257
     */
    var mousewheelListener = function (event) {
        if (event instanceof WheelEvent && event.deltaY === 1) {
            event.preventDefault();
        }
    };
    var InfiniteScroll = function (props) {
        var children = props.children, _a = props.element, element = _a === void 0 ? 'div' : _a, hasMore = props.hasMore, hasMoreNewer = props.hasMoreNewer, hasNextPage = props.hasNextPage, hasPreviousPage = props.hasPreviousPage, head = props.head, _b = props.initialLoad, initialLoad = _b === void 0 ? true : _b, isLoading = props.isLoading, listenToScroll = props.listenToScroll, loader = props.loader, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, loadNextPage = props.loadNextPage, loadPreviousPage = props.loadPreviousPage, _c = props.threshold, threshold = _c === void 0 ? DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD : _c, _d = props.useCapture, useCapture = _d === void 0 ? false : _d, elementProps = __rest(props, ["children", "element", "hasMore", "hasMoreNewer", "hasNextPage", "hasPreviousPage", "head", "initialLoad", "isLoading", "listenToScroll", "loader", "loadMore", "loadMoreNewer", "loadNextPage", "loadPreviousPage", "threshold", "useCapture"]);
        var loadNextPageFn = loadNextPage || loadMoreNewer;
        var loadPreviousPageFn = loadPreviousPage || loadMore;
        var hasNextPageFlag = hasNextPage || hasMoreNewer;
        var hasPreviousPageFlag = hasPreviousPage || hasMore;
        var scrollComponent = React$2.useRef();
        var scrollListenerRef = React$2.useRef();
        scrollListenerRef.current = function () {
            var element = scrollComponent.current;
            if (!element || element.offsetParent === null) {
                return;
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            var parentElement = element.parentElement;
            var offset = element.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
            var reverseOffset = parentElement.scrollTop;
            if (listenToScroll) {
                listenToScroll(offset, reverseOffset, threshold);
            }
            if (isLoading)
                return;
            // FIXME: this triggers loadMore call when a user types messages in thread and the scroll container container expands
            if (reverseOffset < Number(threshold) &&
                typeof loadPreviousPageFn === 'function' &&
                hasPreviousPageFlag) {
                loadPreviousPageFn();
            }
            if (offset < Number(threshold) && typeof loadNextPageFn === 'function' && hasNextPageFlag) {
                loadNextPageFn();
            }
        };
        React$2.useEffect(function () {
            deprecationAndReplacementWarning([
                [{ hasMoreNewer: hasMoreNewer }, { hasNextPage: hasNextPage }],
                [{ loadMoreNewer: loadMoreNewer }, { loadNextPage: loadNextPage }],
                [{ hasMore: hasMore }, { hasPreviousPage: hasPreviousPage }],
                [{ loadMore: loadMore }, { loadPreviousPage: loadPreviousPage }],
            ], 'InfiniteScroll');
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        React$2.useLayoutEffect(function () {
            var _a;
            var scrollElement = (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;
            if (!scrollElement)
                return;
            var scrollListener = function () { var _a; return (_a = scrollListenerRef.current) === null || _a === void 0 ? void 0 : _a.call(scrollListenerRef); };
            scrollElement.addEventListener('scroll', scrollListener, useCapture);
            scrollElement.addEventListener('resize', scrollListener, useCapture);
            scrollListener();
            return function () {
                scrollElement.removeEventListener('scroll', scrollListener, useCapture);
                scrollElement.removeEventListener('resize', scrollListener, useCapture);
            };
        }, [initialLoad, useCapture]);
        React$2.useEffect(function () {
            var _a;
            var scrollElement = (_a = scrollComponent.current) === null || _a === void 0 ? void 0 : _a.parentNode;
            if (scrollElement) {
                scrollElement.addEventListener('wheel', mousewheelListener, { passive: false });
            }
            return function () {
                if (scrollElement) {
                    scrollElement.removeEventListener('wheel', mousewheelListener, useCapture);
                }
            };
        }, [useCapture]);
        var attributes = __assign(__assign({}, elementProps), { ref: function (element) {
                scrollComponent.current = element;
            } });
        var childrenArray = [loader, children];
        if (head) {
            childrenArray.unshift(head);
        }
        return React__default["default"].createElement(element, attributes, childrenArray);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useJoinTypingUsers = function (names) {
        var t = useTranslationContext().t;
        if (!names.length)
            return null;
        var name = names[0], rest = names.slice(1);
        if (names.length === 1)
            return t('{{ user }} is typing...', {
                user: name,
            });
        var MAX_JOINED_USERS = 3;
        var isLargeArray = names.length > MAX_JOINED_USERS;
        var joinedUsers = (isLargeArray ? names.slice(0, MAX_JOINED_USERS) : rest).join(', ').trim();
        if (isLargeArray)
            return t('{{ users }} and more are typing...', {
                users: joinedUsers,
            });
        return t('{{ users }} and {{ user }} are typing...', {
            user: name,
            users: joinedUsers,
        });
    };
    /**
     * TypingIndicator lists users currently typing, it needs to be a child of Channel component
     */
    var UnMemoizedTypingIndicator = function (props) {
        var PropAvatar = props.Avatar, _a = props.avatarSize, avatarSize = _a === void 0 ? 32 : _a, threadList = props.threadList;
        var _b = useChannelStateContext('TypingIndicator'), channelConfig = _b.channelConfig, thread = _b.thread;
        var _c = useChatContext('TypingIndicator'), client = _c.client, themeVersion = _c.themeVersion;
        var ContextAvatar = useComponentContext('TypingIndicator').Avatar;
        var _d = useTypingContext('TypingIndicator').typing, typing = _d === void 0 ? {} : _d;
        var Avatar$1 = PropAvatar || ContextAvatar || Avatar;
        var typingInChannel = !threadList
            ? Object.values(typing).filter(function (_a) {
                var _b;
                var parent_id = _a.parent_id, user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && !parent_id;
            })
            : [];
        var typingInThread = threadList
            ? Object.values(typing).filter(function (_a) {
                var _b;
                var parent_id = _a.parent_id, user = _a.user;
                return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);
            })
            : [];
        var typingUserList = (threadList ? typingInThread : typingInChannel)
            .map(function (_a) {
            var user = _a.user;
            return (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id);
        })
            .filter(Boolean);
        var joinedTypingUsers = useJoinTypingUsers(typingUserList);
        var isTypingActive = (threadList && typingInThread.length) || (!threadList && typingInChannel.length);
        if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {
            return null;
        }
        if (themeVersion === '2') {
            if (!isTypingActive)
                return null;
            return (React__default["default"].createElement("div", { className: clsx('str-chat__typing-indicator', {
                    'str-chat__typing-indicator--typing': isTypingActive,
                }), "data-testid": 'typing-indicator' },
                React__default["default"].createElement("div", { className: 'str-chat__typing-indicator__dots' },
                    React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                    React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                    React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' })),
                React__default["default"].createElement("div", { className: 'str-chat__typing-indicator__users', "data-testid": 'typing-users' }, joinedTypingUsers)));
        }
        return (React__default["default"].createElement("div", { className: clsx('str-chat__typing-indicator', {
                'str-chat__typing-indicator--typing': isTypingActive,
            }) },
            React__default["default"].createElement("div", { className: 'str-chat__typing-indicator__avatars' }, (threadList ? typingInThread : typingInChannel).map(function (_a, i) {
                var user = _a.user;
                return (React__default["default"].createElement(Avatar$1, { image: user === null || user === void 0 ? void 0 : user.image, key: "".concat(user === null || user === void 0 ? void 0 : user.id, "-").concat(i), name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id), size: avatarSize, user: user }));
            })),
            React__default["default"].createElement("div", { className: 'str-chat__typing-indicator__dots' },
                React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' }),
                React__default["default"].createElement("span", { className: 'str-chat__typing-indicator__dot' }))));
    };
    var TypingIndicator = React__default["default"].memo(UnMemoizedTypingIndicator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function defaultRenderMessages(_a) {
        var channelUnreadUiState = _a.channelUnreadUiState, components = _a.components, customClasses = _a.customClasses, lastReceivedId = _a.lastReceivedMessageId, messageGroupStyles = _a.messageGroupStyles, messages = _a.messages, readData = _a.readData, messageProps = _a.sharedMessageProps;
        var DateSeparator = components.DateSeparator, HeaderComponent = components.HeaderComponent, MessageSystem = components.MessageSystem, UnreadMessagesSeparator = components.UnreadMessagesSeparator;
        return messages.map(function (message, index) {
            if (message.customType === CUSTOM_MESSAGE_TYPE.date && message.date && isDate(message.date)) {
                return (React__default["default"].createElement("li", { key: "".concat(message.date.toISOString(), "-i") },
                    React__default["default"].createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));
            }
            if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
                return (React__default["default"].createElement("li", { key: 'intro' },
                    React__default["default"].createElement(HeaderComponent, null)));
            }
            if (message.type === 'system') {
                return (React__default["default"].createElement("li", { key: message.id || message.created_at },
                    React__default["default"].createElement(MessageSystem, { message: message })));
            }
            var groupStyles = messageGroupStyles[message.id] || '';
            var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || "str-chat__li str-chat__li--".concat(groupStyles);
            var isNewestMessage = index === messages.length - 1;
            var isLastReadMessage = (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id) === message.id;
            var showUnreadSeparator = isLastReadMessage &&
                !isNewestMessage &&
                ((channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id) || (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) > 0); // unread count can be 0 if the user marks unread only own messages
            return (React__default["default"].createElement(React$2.Fragment, { key: message.id || message.created_at },
                React__default["default"].createElement("li", { className: messageClass, "data-message-id": message.id, "data-testid": messageClass },
                    React__default["default"].createElement(Message, __assign({ groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [] }, messageProps))),
                showUnreadSeparator && UnreadMessagesSeparator && (React__default["default"].createElement("li", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },
                    React__default["default"].createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState.unread_messages })))));
        });
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MessageListWithContext = function (props) {
        var _a;
        var channel = props.channel, channelUnreadUiState = props.channelUnreadUiState, _b = props.disableDateSeparator, disableDateSeparator = _b === void 0 ? false : _b, groupStyles = props.groupStyles, _c = props.hideDeletedMessages, hideDeletedMessages = _c === void 0 ? false : _c, _d = props.hideNewMessageSeparator, hideNewMessageSeparator = _d === void 0 ? false : _d, _e = props.internalInfiniteScrollProps, _f = _e === void 0 ? {} : _e, _g = _f.threshold, loadMoreScrollThreshold = _g === void 0 ? DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD : _g, restInternalInfiniteScrollProps = __rest(_f, ["threshold"]), _h = props.messageActions, messageActions = _h === void 0 ? Object.keys(MESSAGE_ACTIONS) : _h, _j = props.messages, messages = _j === void 0 ? [] : _j, notifications = props.notifications, _k = props.noGroupByUser, noGroupByUser = _k === void 0 ? false : _k, _l = props.pinPermissions, pinPermissions = _l === void 0 ? defaultPinPermissions : _l, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
        _m = props.returnAllReadData, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
        returnAllReadData = _m === void 0 ? false : _m, _o = props.threadList, threadList = _o === void 0 ? false : _o, _p = props.unsafeHTML, unsafeHTML = _p === void 0 ? false : _p, headerPosition = props.headerPosition, read = props.read, _q = props.renderMessages, renderMessages = _q === void 0 ? defaultRenderMessages : _q, _r = props.messageLimit, messageLimit = _r === void 0 ? DEFAULT_NEXT_CHANNEL_PAGE_SIZE : _r, loadMoreCallback = props.loadMore, loadMoreNewerCallback = props.loadMoreNewer, _s = props.hasMoreNewer, hasMoreNewer = _s === void 0 ? false : _s, showUnreadNotificationAlways = props.showUnreadNotificationAlways, suppressAutoscroll = props.suppressAutoscroll, highlightedMessageId = props.highlightedMessageId, _t = props.jumpToLatestMessage, jumpToLatestMessage = _t === void 0 ? function () { return Promise.resolve(); } : _t;
        var _u = React__default["default"].useState(null), listElement = _u[0], setListElement = _u[1];
        var _v = React__default["default"].useState(null), ulElement = _v[0], setUlElement = _v[1];
        var customClasses = useChatContext('MessageList').customClasses;
        var _w = useComponentContext('MessageList'), _x = _w.EmptyStateIndicator, EmptyStateIndicator$1 = _x === void 0 ? EmptyStateIndicator : _x, _y = _w.LoadingIndicator, LoadingIndicator$1 = _y === void 0 ? LoadingIndicator : _y, _z = _w.MessageListNotifications, MessageListNotifications$1 = _z === void 0 ? MessageListNotifications : _z, _0 = _w.MessageNotification, MessageNotification$1 = _0 === void 0 ? MessageNotification : _0, _1 = _w.TypingIndicator, TypingIndicator$1 = _1 === void 0 ? TypingIndicator : _1, _2 = _w.UnreadMessagesNotification, UnreadMessagesNotification$1 = _2 === void 0 ? UnreadMessagesNotification : _2;
        var _3 = useScrollLocationLogic({
            hasMoreNewer: hasMoreNewer,
            listElement: listElement,
            loadMoreScrollThreshold: loadMoreScrollThreshold,
            messages: messages,
            scrolledUpThreshold: props.scrolledUpThreshold,
            suppressAutoscroll: suppressAutoscroll,
        }), hasNewMessages = _3.hasNewMessages, isMessageListScrolledToBottom = _3.isMessageListScrolledToBottom, onScroll = _3.onScroll, scrollToBottom = _3.scrollToBottom, wrapperRect = _3.wrapperRect;
        var showUnreadMessagesNotification = useUnreadMessagesNotification({
            isMessageListScrolledToBottom: isMessageListScrolledToBottom,
            showAlways: !!showUnreadNotificationAlways,
            unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages,
        }).show;
        useMarkRead({
            isMessageListScrolledToBottom: isMessageListScrolledToBottom,
            messageListIsThread: threadList,
            unreadCount: (_a = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _a !== void 0 ? _a : 0,
            wasMarkedUnread: !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id),
        });
        var _4 = useEnrichedMessages({
            channel: channel,
            disableDateSeparator: disableDateSeparator,
            groupStyles: groupStyles,
            headerPosition: headerPosition,
            hideDeletedMessages: hideDeletedMessages,
            hideNewMessageSeparator: hideNewMessageSeparator,
            messages: messages,
            noGroupByUser: noGroupByUser,
        }), messageGroupStyles = _4.messageGroupStyles, enrichedMessages = _4.messages;
        var elements = useMessageListElements({
            channelUnreadUiState: channelUnreadUiState,
            enrichedMessages: enrichedMessages,
            internalMessageProps: {
                additionalMessageInputProps: props.additionalMessageInputProps,
                closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
                customMessageActions: props.customMessageActions,
                disableQuotedMessages: props.disableQuotedMessages,
                formatDate: props.formatDate,
                getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
                getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
                getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
                getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,
                getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,
                getMuteUserErrorNotification: props.getMuteUserErrorNotification,
                getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
                getPinMessageErrorNotification: props.getPinMessageErrorNotification,
                Message: props.Message,
                messageActions: messageActions,
                messageListRect: wrapperRect,
                onlySenderCanEdit: props.onlySenderCanEdit,
                onMentionsClick: props.onMentionsClick,
                onMentionsHover: props.onMentionsHover,
                onUserClick: props.onUserClick,
                onUserHover: props.onUserHover,
                openThread: props.openThread,
                pinPermissions: pinPermissions,
                renderText: props.renderText,
                retrySendMessage: props.retrySendMessage,
                unsafeHTML: unsafeHTML,
            },
            messageGroupStyles: messageGroupStyles,
            read: read,
            renderMessages: renderMessages,
            returnAllReadData: returnAllReadData,
            threadList: threadList,
        });
        var messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || 'str-chat__list';
        var threadListClass = threadList
            ? (customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList) || 'str-chat__list--thread str-chat__thread-list'
            : '';
        var loadMore = React__default["default"].useCallback(function () {
            if (loadMoreCallback) {
                loadMoreCallback(messageLimit);
            }
        }, [loadMoreCallback, messageLimit]);
        var loadMoreNewer = React__default["default"].useCallback(function () {
            if (loadMoreNewerCallback) {
                loadMoreNewerCallback(messageLimit);
            }
        }, [loadMoreNewerCallback, messageLimit]);
        var scrollToBottomFromNotification = React__default["default"].useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasMoreNewer) return [3 /*break*/, 2];
                        return [4 /*yield*/, jumpToLatestMessage()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        scrollToBottom();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); }, [scrollToBottom, hasMoreNewer]);
        React__default["default"].useLayoutEffect(function () {
            if (highlightedMessageId) {
                var element = ulElement === null || ulElement === void 0 ? void 0 : ulElement.querySelector("[data-message-id='".concat(highlightedMessageId, "']"));
                element === null || element === void 0 ? void 0 : element.scrollIntoView({ block: 'center' });
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [highlightedMessageId]);
        var showEmptyStateIndicator = elements.length === 0 && !threadList;
        return (React__default["default"].createElement(MessageListContextProvider, { value: { listElement: listElement, scrollToBottom: scrollToBottom } },
            React__default["default"].createElement(MessageListMainPanel, null,
                !threadList && showUnreadMessagesNotification && (React__default["default"].createElement(UnreadMessagesNotification$1, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })),
                React__default["default"].createElement("div", { className: "".concat(messageListClass, " ").concat(threadListClass), onScroll: onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? (React__default["default"].createElement(EmptyStateIndicator$1, { key: 'empty-state-indicator', listType: threadList ? 'thread' : 'message' })) : (React__default["default"].createElement(InfiniteScroll, __assign({ className: 'str-chat__reverse-infinite-scroll  str-chat__message-list-scroll', "data-testid": 'reverse-infinite-scroll', hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: React__default["default"].createElement("div", { className: 'str-chat__list__loading', key: 'loading-indicator' }, props.loadingMore && React__default["default"].createElement(LoadingIndicator$1, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold }, restInternalInfiniteScrollProps),
                    React__default["default"].createElement("ul", { className: 'str-chat__ul', ref: setUlElement }, elements),
                    React__default["default"].createElement(TypingIndicator$1, { threadList: threadList }),
                    React__default["default"].createElement("div", { key: 'bottom' }))))),
            React__default["default"].createElement(MessageListNotifications$1, { hasNewMessages: hasNewMessages, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification$1, notifications: notifications, scrollToBottom: scrollToBottomFromNotification, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })));
    };
    /**
     * The MessageList component renders a list of Messages.
     * It is a consumer of the following contexts:
     * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)
     * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)
     * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)
     * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)
     */
    var MessageList = function (props) {
        var _a = useChannelActionContext('MessageList'), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
        var _b = useChannelStateContext('MessageList'); _b.members; // eslint-disable-line @typescript-eslint/no-unused-vars
        _b.mutes; // eslint-disable-line @typescript-eslint/no-unused-vars
        _b.watchers; // eslint-disable-line @typescript-eslint/no-unused-vars
        var restChannelStateContext = __rest(_b, ["members", "mutes", "watchers"]);
        return (React__default["default"].createElement(MessageListWithContext, __assign({ jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer }, restChannelStateContext, props)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedScrollToBottomButton = function (props) {
        var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, onClick = props.onClick, threadList = props.threadList;
        var _a = useChatContext(), activeChannel = _a.channel, client = _a.client;
        var thread = useChannelStateContext().thread;
        var _b = React$2.useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0), countUnread = _b[0], setCountUnread = _b[1];
        var _c = React$2.useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0), replyCount = _c[0], setReplyCount = _c[1];
        var observedEvent = threadList ? 'message.updated' : 'message.new';
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                var _a, _b, _c, _d, _e;
                var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);
                var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);
                var isThreadOpen = !!thread;
                var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);
                var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;
                if (isMessageListScrolledToBottom ||
                    newMessageInAnotherChannel ||
                    newMessageIsMine ||
                    dontIncreaseMainListCounterOnNewReply) {
                    return;
                }
                if (event.type === 'message.new') {
                    // cannot rely on channel.countUnread because active channel is automatically marked read
                    setCountUnread(function (prev) { return prev + 1; });
                }
                else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {
                    var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;
                    setCountUnread(function () { return newReplyCount_1 - replyCount; });
                }
            };
            client.on(observedEvent, handleEvent);
            return function () {
                client.off(observedEvent, handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);
        React$2.useEffect(function () {
            if (isMessageListScrolledToBottom) {
                setCountUnread(0);
                setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);
            }
        }, [isMessageListScrolledToBottom, thread]);
        if (isMessageListScrolledToBottom)
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__jump-to-latest-message' },
            React__default["default"].createElement("button", { "aria-live": 'polite', className: "\n        str-chat__message-notification-right\n        str-chat__message-notification-scroll-to-latest\n        str-chat__circle-fab\n      ", "data-testid": 'message-notification', onClick: onClick },
                React__default["default"].createElement(ArrowDown, null),
                countUnread > 0 && (React__default["default"].createElement("div", { className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'), "data-testid": 'unread-message-notification-counter' }, countUnread)))));
    };
    var ScrollToBottomButton = React__default["default"].memo(UnMemoizedScrollToBottomButton);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var PUBLISH = 0;
    var SUBSCRIBE = 1;
    var RESET = 2;
    var VALUE = 4;

    /**
     * Utils includes
     * - a handful of functional utilities inspired by or taken from the [Ramda library](https://ramdajs.com/);
     * - TypeScript crutches - the [[tup]] function.
     *
     * Use these for your convenience - they are here so that urx is zero-dependency package.
     *
     * @packageDocumentation
     */

    /**
     * Performs left to right composition of two functions.
     */
    function compose(a, b) {
      return function (arg) {
        return a(b(arg));
      };
    }
    /**
     * Takes a value and applies a function to it.
     */

    function thrush(arg, proc) {
      return proc(arg);
    }
    /**
     * Takes a 2 argument function and partially applies the first argument.
     */

    function curry2to1(proc, arg1) {
      return function (arg2) {
        return proc(arg1, arg2);
      };
    }
    /**
     * Takes a 1 argument function and returns a function which when called, executes it with the provided argument.
     */

    function curry1to0(proc, arg) {
      return function () {
        return proc(arg);
      };
    }
    /**
     * Calls callback with the first argument, and returns it.
     */

    function tap(arg, proc) {
      proc(arg);
      return arg;
    }
    /**
     *  Utility function to help typescript figure out that what we pass is a tuple and not a generic array.
     *  Taken from (this StackOverflow tread)[https://stackoverflow.com/questions/49729550/implicitly-create-a-tuple-in-typescript/52445008#52445008]
     */

    function tup() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args;
    }
    /**
     * Calls the passed function.
     */

    function call(proc) {
      proc();
    }
    /**
     * returns a function which when called always returns the passed value
     */

    function always(value) {
      return function () {
        return value;
      };
    }
    /**
     * returns a function which calls all passed functions in the passed order.
     * joinProc does not pass arguments or collect return values.
     */

    function joinProc() {
      for (var _len2 = arguments.length, procs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        procs[_key2] = arguments[_key2];
      }

      return function () {
        procs.map(call);
      };
    }
    function noop$2() {}

    /**
     * urx Actions operate on streams - `publish` publishes data in a stream, and `subscribe` attaches a subscription to a stream.
     * @packageDocumentation
     */
    /**
     * Subscribes the specified [[Subscription]] to the updates from the Emitter.
     * The emitter calls the subscription with the new data each time new data is published into it.
     *
     * ```ts
     * const foo = stream<number>();
     * subscribe(foo, (value) => console.log(value));
     * ```
     *
     * @returns an [[Unsubscribe]] handle  - calling it will unbind the subscription from the emitter.
     *```ts
     * const foo = stream<number>();
     * const unsub = subscribe(foo, (value) => console.log(value));
     * unsub();
     *```
     */

    function subscribe(emitter, subscription) {
      return emitter(SUBSCRIBE, subscription);
    }
    /**
     * Publishes the value into the passed [[Publisher]].
     *
     * ```ts
     * const foo = stream<number>();
     * publish(foo, 42);
     * ```
     */

    function publish(publisher, value) {
      publisher(PUBLISH, value);
    }
    /**
     * Clears all subscriptions from the [[Emitter]].
     * ```ts
     * const foo = stream<number>();
     * subscribe(foo, (value) => console.log(value));
     * reset(foo);
     * publish(foo, 42);
     * ```
     */

    function reset(emitter) {
      emitter(RESET);
    }
    /**
     * Extracts the current value from a stateful stream. Use it only as an escape hatch, as it violates the concept of reactive programming.
     * ```ts
     * const foo = statefulStream(42);
     * console.log(getValue(foo));
     * ```
     */

    function getValue(depot) {
      return depot(VALUE);
    }
    /**
     * Connects two streams - any value emitted from the emitter will be published in the publisher.
     * ```ts
     * const foo = stream<number>();
     * const bar = stream<number>();
     * subscribe(bar, (value) => console.log(`Bar emitted ${value}`));
     *
     * connect(foo, bar);
     * publish(foo);
     * ```
     * @returns an [[Unsubscribe]] handle which will disconnect the two streams.
     */

    function connect(emitter, publisher) {
      return subscribe(emitter, curry2to1(publisher, PUBLISH));
    }
    /**
     * Executes the passed subscription at most once, for the next emit from the emitter.
     * ```ts
     * const foo = stream<number>()
     * handleNext(foo, value => console.log(value)) // called once, with 42
     * publish(foo, 42)
     * publish(foo, 43)
     * ```
     * @returns an [[Unsubscribe]] handle to unbind the subscription if necessary.
     */

    function handleNext(emitter, subscription) {
      var unsub = emitter(SUBSCRIBE, function (value) {
        unsub();
        subscription(value);
      });
      return unsub;
    }

    /**
     * Streams are the basic building blocks of a reactive system. Think of them as the system permanent "data tubes".
     *
     * A stream acts as both an [[Emitter]] and [[Publisher]]. Each stream can have multiple {@link Subscription | Subscriptions}.
     *
     * urx streams are either **stateless** or **stateful**.
     * Stateless streams emit data to existing subscriptions when published, without keeping track of it.
     * Stateful streams remember the last published value and immediately publish it to new subscriptions.
     *
     * ```ts
     * import { stream, statefulStream, publish, subscribe } from "@virtuoso.dev/urx";
     *
     * // foo is a stateless stream
     * const foo = stream<number>();
     *
     * publish(foo, 42);
     * // this subsription will not be called...
     * subscribe(foo, (value) => console.log(value));
     * // it will only catch published values after it
     * publish(foo, 43);
     *
     * // stateful streams always start with an initial value
     * const bar = statefulStream(42);
     *
     * // subscribing to a stateful stream
     * // immediately calls the subscription with the current value
     * subscribe(bar, (value) => console.log(value));
     *
     * // subsequent publishing works just like stateless streams
     * publish(bar, 43);
     * ```
     * @packageDocumentation
     */
    /**
     * Constructs a new stateless stream.
     * ```ts
     * const foo = stream<number>();
     * ```
     * @typeParam T the type of values to publish in the stream.
     * @returns a [[Stream]]
     */

    function stream() {
      var subscriptions = [];
      return function (action, arg) {
        switch (action) {
          case RESET:
            subscriptions.splice(0, subscriptions.length);
            return;

          case SUBSCRIBE:
            subscriptions.push(arg);
            return function () {
              var indexOf = subscriptions.indexOf(arg);

              if (indexOf > -1) {
                subscriptions.splice(indexOf, 1);
              }
            };

          case PUBLISH:
            subscriptions.slice().forEach(function (subscription) {
              subscription(arg);
            });
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * Constructs a new stateful stream.
     * ```ts
     * const foo = statefulStream(42);
     * ```
     * @param initial the initial value in the stream.
     * @typeParam T the type of values to publish in the stream. If omitted, the function infers it from the initial value.
     * @returns a [[StatefulStream]]
     */

    function statefulStream(initial) {
      var value = initial;
      var innerSubject = stream();
      return function (action, arg) {
        switch (action) {
          case SUBSCRIBE:
            var subscription = arg;
            subscription(value);
            break;

          case PUBLISH:
            value = arg;
            break;

          case VALUE:
            return value;
        }

        return innerSubject(action, arg);
      };
    }
    /**
     * Event handlers are special emitters which can have **at most one active subscription**.
     * Subscribing to an event handler unsubscribes the previous subscription, if present.
     * ```ts
     * const foo = stream<number>();
     * const fooEvent = eventHandler(foo);
     *
     * // will be called once with 42
     * subscribe(fooEvent, (value) => console.log(`Sub 1 ${value}`));
     * publish(foo, 42);
     *
     * // unsubscribes sub 1
     * subscribe(fooEvent, (value) => console.log(`Sub 2 ${value}`));
     * publish(foo, 43);
     * ```
     * @param emitter the source emitter.
     * @returns the single-subscription emitter.
     */

    function eventHandler(emitter) {
      var unsub;
      var currentSubscription;

      var cleanup = function cleanup() {
        return unsub && unsub();
      };

      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            if (subscription) {
              if (currentSubscription === subscription) {
                return;
              }

              cleanup();
              currentSubscription = subscription;
              unsub = subscribe(emitter, subscription);
              return unsub;
            } else {
              cleanup();
              return noop$2;
            }

          case RESET:
            cleanup();
            currentSubscription = null;
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * Creates and connects a "junction" stream to the specified emitter. Often used with [[pipe]], to avoid the multiple evaluation of operator sets.
     *
     * ```ts
     * const foo = stream<number>();
     *
     * const fooX2 = pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`multiplying ${value}`);
     *     return value * 2;
     *   })
     * );
     *
     * subscribe(fooX2, (value) => console.log(value));
     * subscribe(fooX2, (value) => console.log(value));
     *
     * publish(foo, 42); // executes the map operator twice for each subscription.
     *
     * const sharedFooX2 = streamFromEmitter(pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`shared multiplying ${value}`);
     *     return value * 2;
     *   })
     * ));
     *
     * subscribe(sharedFooX2, (value) => console.log(value));
     * subscribe(sharedFooX2, (value) => console.log(value));
     *
     * publish(foo, 42);
     *```
     * @returns the resulting stream.
     */

    function streamFromEmitter(emitter) {
      return tap(stream(), function (stream) {
        return connect(emitter, stream);
      });
    }
    /**
     * Creates and connects a "junction" stateful stream to the specified emitter. Often used with [[pipe]], to avoid the multiple evaluation of operator sets.
     *
     * ```ts
     * const foo = stream<number>();
     *
     * const fooX2 = pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`multiplying ${value}`);
     *     return value * 2;
     *   })
     * );
     *
     * subscribe(fooX2, (value) => console.log(value));
     * subscribe(fooX2, (value) => console.log(value));
     *
     * publish(foo, 42); // executes the map operator twice for each subscription.
     *
     * const sharedFooX2 = statefulStreamFromEmitter(pipe(
     *   foo,
     *   map((value) => {
     *     console.log(`shared multiplying ${value}`);
     *     return value * 2;
     *   })
     * ), 42);
     *
     * subscribe(sharedFooX2, (value) => console.log(value));
     * subscribe(sharedFooX2, (value) => console.log(value));
     *
     * publish(foo, 42);
     *```
     * @param initial the initial value in the stream.
     * @returns the resulting stateful stream.
     */

    function statefulStreamFromEmitter(emitter, initial) {
      return tap(statefulStream(initial), function (stream) {
        return connect(emitter, stream);
      });
    }

    /**
     *
     * Stream values can be transformed and controlled by {@link pipe | **piping**} through **operators**.
     * urx includes several operators like [[map]], [[filter]], [[scan]], and [[throttleTime]].
     * The [[withLatestFrom]] operator allows the combination of values from other streams.
     *
     * ```ts
     * const foo = stream<number>()
     *
     * // create an emitter that first adds 2 to the passed value, then multiplies it by * 2
     * const bar = pipe(foo, map(value => value + 2), map(value => value * 2))
     * subscribe(bar, value => console.log(value))
     * publish(foo, 2) // outputs 8
     * ```
     *
     * ### Implementing Custom Operators
     * To implement your own operators, implement the [[Operator]] interface.
     * @packageDocumentation
     */
    /** @internal */

    function combineOperators() {
      for (var _len = arguments.length, operators = new Array(_len), _key = 0; _key < _len; _key++) {
        operators[_key] = arguments[_key];
      }

      return function (subscriber) {
        return operators.reduceRight(thrush, subscriber);
      };
    }

    function pipe(source) {
      for (var _len2 = arguments.length, operators = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        operators[_key2 - 1] = arguments[_key2];
      }

      // prettier-ignore
      var project = combineOperators.apply(void 0, operators);
      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            return subscribe(source, project(subscription));

          case RESET:
            reset(source);
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * The default [[Comparator]] for [[distinctUntilChanged]] and [[duc]].
     */

    function defaultComparator(previous, next) {
      return previous === next;
    }
    /**
     * Filters out identical values. Pass an optional [[Comparator]] if you need to filter non-primitive values.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, distinctUntilChanged()),
     *  console.log
     * ) // will be called only once
     *
     * publish(foo, 42)
     * publish(foo, 42)
     * ```
     */

    function distinctUntilChanged(comparator) {
      if (comparator === void 0) {
        comparator = defaultComparator;
      }

      var current;
      return function (done) {
        return function (next) {
          if (!comparator(current, next)) {
            current = next;
            done(next);
          }
        };
      };
    }
    /**
     * Filters out values for which the predicator does not return `true`-ish.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, filter(value => value % 2 === 0)),
     *  console.log
     * ) // will be called only with even values
     *
     * publish(foo, 2)
     * publish(foo, 3)
     * publish(foo, 4)
     * publish(foo, 5)
     * ```
     */

    function filter$1(predicate) {
      return function (done) {
        return function (value) {
          predicate(value) && done(value);
        };
      };
    }
    /**
     * Maps values using the provided project function.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, map(value => value * 2)),
     *  console.log
     * ) // 4, 6
     *
     * publish(foo, 2)
     * publish(foo, 3)
     * ```
     */

    function map$1(project) {
      return function (done) {
        return compose(done, project);
      };
    }
    /**
     * Maps values to the hard-coded value.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, mapTo(3)),
     *  console.log
     * ) // 3, 3
     *
     * publish(foo, 1)
     * publish(foo, 2)
     * ```
     */

    function mapTo(value) {
      return function (done) {
        return function () {
          return done(value);
        };
      };
    }
    /**
     * Works like Array#reduce.
     * Applies an accumulator function on the emitter, and outputs intermediate result. Starts with the initial value.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, scan((acc, value) => acc + value, 2),
     *  console.log
     * ) // 3, 5
     *
     * publish(foo, 1)
     * publish(foo, 2)
     * ```
     */

    function scan(scanner, initial) {
      return function (done) {
        return function (value) {
          return done(initial = scanner(initial, value));
        };
      };
    }
    /**
     * Skips the specified amount of values from the emitter.
     * ```ts
     * const foo = stream<number>()
     *
     * subscribe(
     *  pipe(foo, skip(2)),
     *  console.log
     * ) // 3, 4
     *
     * publish(foo, 1) // skipped
     * publish(foo, 2) // skipped
     * publish(foo, 3)
     * publish(foo, 4)
     * ```
     */

    function skip(times) {
      return function (done) {
        return function (value) {
          times > 0 ? times-- : done(value);
        };
      };
    }
    /**
     * Throttles flowing values at the provided interval in milliseconds.
     * [Throttle VS Debounce in SO](https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function).
     *
     * ```ts
     *  const foo = stream<number>()
     *  publish(foo, 1)
     *
     *  setTimeout(() => publish(foo, 2), 20)
     *  setTimeout(() => publish(foo, 3), 20)
     *
     *  subscribe(pipe(foo, throttleTime(50)), val => {
     *    console.log(value); // 3
     *  })
     * ```
     */

    function throttleTime(interval) {
      var currentValue;
      var timeout;
      return function (done) {
        return function (value) {
          currentValue = value;

          if (timeout) {
            return;
          }

          timeout = setTimeout(function () {
            timeout = undefined;
            done(currentValue);
          }, interval);
        };
      };
    }
    /**
     * Debounces flowing values at the provided interval in milliseconds.
     * [Throttle VS Debounce in SO](https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function).
     *
     * ```ts
     *  const foo = stream<number>()
     *  publish(foo, 1)
     *
     *  setTimeout(() => publish(foo, 2), 20)
     *  setTimeout(() => publish(foo, 3), 20)
     *
     *  subscribe(pipe(foo, debounceTime(50)), val => {
     *    console.log(value); // 3
     *  })
     * ```
     */

    function debounceTime(interval) {
      var currentValue;
      var timeout;
      return function (done) {
        return function (value) {
          currentValue = value;

          if (timeout) {
            clearTimeout(timeout);
          }

          timeout = setTimeout(function () {
            done(currentValue);
          }, interval);
        };
      };
    }
    function withLatestFrom() {
      for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        sources[_key3] = arguments[_key3];
      }

      var values = new Array(sources.length);
      var called = 0;
      var pendingCall = null;
      var allCalled = Math.pow(2, sources.length) - 1;
      sources.forEach(function (source, index) {
        var bit = Math.pow(2, index);
        subscribe(source, function (value) {
          var prevCalled = called;
          called = called | bit;
          values[index] = value;

          if (prevCalled !== allCalled && called === allCalled && pendingCall) {
            pendingCall();
            pendingCall = null;
          }
        });
      });
      return function (done) {
        return function (value) {
          var call = function call() {
            return done([value].concat(values));
          };

          if (called === allCalled) {
            call();
          } else {
            pendingCall = call;
          }
        };
      };
    }

    /**
     * Transformers change and combine streams, similar to operators.
     * urx comes with two combinators - [[combineLatest]] and [[merge]], and one convenience filter - [[duc]].
     *
     * @packageDocumentation
     */
    /**
     * Merges one or more emitters from the same type into a new Emitter which emits values from any of the source emitters.
     * ```ts
     * const foo = stream<number>()
     * const bar = stream<number>()
     *
     * subscribe(merge(foo, bar), (value) => console.log(value)) // 42, 43
     *
     * publish(foo, 42)
     * publish(bar, 43)
     * ```
     */

    function merge() {
      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }

      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            return joinProc.apply(void 0, sources.map(function (source) {
              return subscribe(source, subscription);
            }));

          case RESET:
            // do nothing, we are stateless
            return;

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }
    /**
     * A convenience wrapper that emits only the distinct values from the passed Emitter. Wraps [[pipe]] and [[distinctUntilChanged]].
     *
     * ```ts
     * const foo = stream<number>()
     *
     * // this line...
     * const a = duc(foo)
     *
     * // is equivalent to this
     * const b = pipe(distinctUntilChanged(foo))
     * ```
     *
     * @param source The source emitter.
     * @param comparator optional custom comparison function for the two values.
     *
     * @typeParam T the type of the value emitted by the source.
     *
     * @returns the resulting emitter.
     */

    function duc(source, comparator) {
      if (comparator === void 0) {
        comparator = defaultComparator;
      }

      return pipe(source, distinctUntilChanged(comparator));
    }
    function combineLatest() {
      var innerSubject = stream();

      for (var _len2 = arguments.length, emitters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        emitters[_key2] = arguments[_key2];
      }

      var values = new Array(emitters.length);
      var called = 0;
      var allCalled = Math.pow(2, emitters.length) - 1;
      emitters.forEach(function (source, index) {
        var bit = Math.pow(2, index);
        subscribe(source, function (value) {
          values[index] = value;
          called = called | bit;

          if (called === allCalled) {
            publish(innerSubject, values);
          }
        });
      });
      return function (action, subscription) {
        switch (action) {
          case SUBSCRIBE:
            if (called === allCalled) {
              subscription(values);
            }

            return subscribe(innerSubject, subscription);

          case RESET:
            return reset(innerSubject);

          default:
            throw new Error("unrecognized action " + action);
        }
      };
    }

    /**
     * `system` defines a specification of a system - its constructor, dependencies and if it should act as a singleton in a system dependency tree.
     * When called, system returns a [[SystemSpec]], which is then initialized along with its dependencies by passing it to [[init]].
     *
     * ```ts
     * @import { subscribe, publish, system, init, tup, connect, map, pipe } from 'urx'
     *
     * // a simple system with two streams
     * const sys1 = system(() => {
     *  const a = stream<number>()
     *  const b = stream<number>()
     *
     *  connect(pipe(a, map(value => value * 2)), b)
     *  return { a, b }
     * })
     *
     * // a second system which depends on the streams from the first one
     * const sys2 = system(([ {a, b} ]) => {
     *  const c = stream<number>()
     *  connect(pipe(b, map(value => value * 2)), c)
     *  // re-export the `a` stream, keep `b` internal
     *  return { a, c }
     * }, tup(sys1))
     *
     * // init will recursively initialize sys2 dependencies, in this case sys1
     * const { a, c } = init(sys2)
     * subscribe(c, c => console.log(`Value multiplied by 4`, c))
     * publish(a, 2)
     * ```
     *
     * #### Singletons in Dependency Tree
     *
     * By default, systems will be initialized only once if encountered multiple times in the dependency tree.
     * In the below dependency system tree, systems `b` and `c` will receive the same stream instances from system `a` when system `d` is initialized.
     * ```txt
     *   a
     *  / \
     * b   c
     *  \ /
     *   d
     * ```
     * If `a` gets `{singleton: false}` as a last argument, `init` creates two separate instances - one for `b` and one for `c`.
     *
     * @param constructor the system constructor function. Initialize and connect the streams in its body.
     *
     * @param dependencies the system dependencies, which the constructor will receive as arguments.
     * Use the [[tup]] utility **For TypeScript type inference to work correctly**.
     * ```ts
     * const sys3 = system(() => { ... }, tup(sys2, sys1))
     * ```
     * @param __namedParameters Options
     * @param singleton determines if the system will act as a singleton in a system dependency tree. `true` by default.
     */
    function system(constructor, dependencies, _temp) {
      if (dependencies === void 0) {
        dependencies = [];
      }

      var _ref = _temp === void 0 ? {
        singleton: true
      } : _temp,
          singleton = _ref.singleton;

      return {
        id: id(),
        constructor: constructor,
        dependencies: dependencies,
        singleton: singleton
      };
    }
    /** @internal */

    var id = function id() {
      return Symbol();
    };
    /**
     * Initializes a [[SystemSpec]] by recursively initializing its dependencies.
     *
     * ```ts
     * // a simple system with two streams
     * const sys1 = system(() => {
     *  const a = stream<number>()
     *  const b = stream<number>()
     *
     *  connect(pipe(a, map(value => value * 2)), b)
     *  return { a, b }
     * })
     *
     * const { a, b } = init(sys1)
     * subscribe(b, b => console.log(b))
     * publish(a, 2)
     * ```
     *
     * @returns the [[System]] constructed by the spec constructor.
     * @param systemSpec the system spec to initialize.
     */


    function init(systemSpec) {
      var singletons = new Map();

      var _init = function _init(_ref2) {
        var id = _ref2.id,
            constructor = _ref2.constructor,
            dependencies = _ref2.dependencies,
            singleton = _ref2.singleton;

        if (singleton && singletons.has(id)) {
          return singletons.get(id);
        }

        var system = constructor(dependencies.map(function (e) {
          return _init(e);
        }));

        if (singleton) {
          singletons.set(id, system);
        }

        return system;
      };

      return _init(systemSpec);
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);

      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var _excluded = ["children"];
    /** @internal */

    function omit(keys, obj) {
      var result = {};
      var index = {};
      var idx = 0;
      var len = keys.length;

      while (idx < len) {
        index[keys[idx]] = 1;
        idx += 1;
      }

      for (var prop in obj) {
        if (!index.hasOwnProperty(prop)) {
          result[prop] = obj[prop];
        }
      }

      return result;
    }

    var useIsomorphicLayoutEffect = typeof document !== 'undefined' ? React$2.useLayoutEffect : React$2.useEffect;
    /**
     * Converts a system spec to React component by mapping the system streams to component properties, events and methods. Returns hooks for querying and modifying
     * the system streams from the component's child components.
     * @param systemSpec The return value from a [[system]] call.
     * @param map The streams to props / events / methods mapping Check [[SystemPropsMap]] for more details.
     * @param Root The optional React component to render. By default, the resulting component renders nothing, acting as a logical wrapper for its children.
     * @returns an object containing the following:
     *  - `Component`: the React component.
     *  - `useEmitterValue`: a hook that lets child components use values emitted from the specified output stream.
     *  - `useEmitter`: a hook that calls the provided callback whenever the specified stream emits a value.
     *  - `usePublisher`: a hook which lets child components publish values to the specified stream.
     *  <hr />
     */

    function systemToComponent(systemSpec, map, Root) {
      var requiredPropNames = Object.keys(map.required || {});
      var optionalPropNames = Object.keys(map.optional || {});
      var methodNames = Object.keys(map.methods || {});
      var eventNames = Object.keys(map.events || {});
      var Context = React$2.createContext({});

      function applyPropsToSystem(system, props) {
        if (system['propsReady']) {
          publish(system['propsReady'], false);
        }

        for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done;) {
          var requiredPropName = _step.value;
          var stream = system[map.required[requiredPropName]];
          publish(stream, props[requiredPropName]);
        }

        for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done;) {
          var optionalPropName = _step2.value;

          if (optionalPropName in props) {
            var _stream = system[map.optional[optionalPropName]];
            publish(_stream, props[optionalPropName]);
          }
        }

        if (system['propsReady']) {
          publish(system['propsReady'], true);
        }
      }

      function buildMethods(system) {
        return methodNames.reduce(function (acc, methodName) {

          acc[methodName] = function (value) {
            var stream = system[map.methods[methodName]];
            publish(stream, value);
          };

          return acc;
        }, {});
      }

      function buildEventHandlers(system) {
        return eventNames.reduce(function (handlers, eventName) {
          handlers[eventName] = eventHandler(system[map.events[eventName]]);
          return handlers;
        }, {});
      }
      /**
       * A React component generated from an urx system
       */


      var Component = React$2.forwardRef(function (propsWithChildren, ref) {
        var children = propsWithChildren.children,
            props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);

        var _useState = React$2.useState(function () {
          return tap(init(systemSpec), function (system) {
            return applyPropsToSystem(system, props);
          });
        }),
            system = _useState[0];

        var _useState2 = React$2.useState(curry1to0(buildEventHandlers, system)),
            handlers = _useState2[0];

        useIsomorphicLayoutEffect(function () {
          for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done;) {
            var eventName = _step3.value;

            if (eventName in props) {
              subscribe(handlers[eventName], props[eventName]);
            }
          }

          return function () {
            Object.values(handlers).map(reset);
          };
        }, [props, handlers, system]);
        useIsomorphicLayoutEffect(function () {
          applyPropsToSystem(system, props);
        });
        React$2.useImperativeHandle(ref, always(buildMethods(system)));
        return React$2.createElement(Context.Provider, {
          value: system
        }, Root ? React$2.createElement(Root, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children) : children);
      });

      var usePublisher = function usePublisher(key) {
        return React$2.useCallback(curry2to1(publish, React$2.useContext(Context)[key]), [key]);
      };
      /**
       * Returns the value emitted from the stream.
       */


      var useEmitterValue = function useEmitterValue(key) {
        var context = React$2.useContext(Context);
        var source = context[key];

        var _useState3 = React$2.useState(curry1to0(getValue, source)),
            value = _useState3[0],
            setValue = _useState3[1];

        useIsomorphicLayoutEffect(function () {
          return subscribe(source, function (next) {
            if (next !== value) {
              setValue(always(next));
            }
          });
        }, [source, value]);
        return value;
      };

      var useEmitter = function useEmitter(key, callback) {
        var context = React$2.useContext(Context);
        var source = context[key];
        useIsomorphicLayoutEffect(function () {
          return subscribe(source, callback);
        }, [callback, source]);
      };

      return {
        Component: Component,
        usePublisher: usePublisher,
        useEmitterValue: useEmitterValue,
        useEmitter: useEmitter
      };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function u(){return u=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r]);}return t},u.apply(this,arguments)}function c$1(t,e){if(null==t)return {};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)e.indexOf(n=i[r])>=0||(o[n]=t[n]);return o}function m$1(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function d$1(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(n)return (n=n.call(t)).next.bind(n);if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return m$1(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m$1(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var f$1,p$2,h$2="undefined"!=typeof document?React$2.useLayoutEffect:React$2.useEffect;!function(t){t[t.DEBUG=0]="DEBUG",t[t.INFO=1]="INFO",t[t.WARN=2]="WARN",t[t.ERROR=3]="ERROR";}(p$2||(p$2={}));var g$2=((f$1={})[p$2.DEBUG]="debug",f$1[p$2.INFO]="log",f$1[p$2.WARN]="warn",f$1[p$2.ERROR]="error",f$1),v$1=system(function(){var t=statefulStream(p$2.ERROR);return {log:statefulStream(function(n,r,o){var i;void 0===o&&(o=p$2.INFO),o>=(null!=(i=("undefined"==typeof globalThis?window:globalThis).VIRTUOSO_LOG_LEVEL)?i:getValue(t))&&console[g$2[o]]("%creact-virtuoso: %c%s %o","color: #0253b3; font-weight: bold","color: initial",n,r);}),logLevel:t}},[],{singleton:!0});function S(t,e){void 0===e&&(e=!0);var n=React$2.useRef(null),r=function(t){};if("undefined"!=typeof ResizeObserver){var o=new ResizeObserver(function(e){var n=e[0].target;null!==n.offsetParent&&t(n);});r=function(t){t&&e?(o.observe(t),n.current=t):(n.current&&o.unobserve(n.current),n.current=null);};}return {ref:n,callbackRef:r}}function I(t,e){return void 0===e&&(e=!0),S(t,e).callbackRef}function C(t,e,n,r,o,i,a){return S(function(n){for(var l=function(t,e,n,r){var o=t.length;if(0===o)return null;for(var i=[],a=0;a<o;a++){var l=t.item(a);if(l&&void 0!==l.dataset.index){var s=parseInt(l.dataset.index),u=parseFloat(l.dataset.knownSize),c=e(l,"offsetHeight");if(0===c&&r("Zero-sized element, this should not happen",{child:l},p$2.ERROR),c!==u){var m=i[i.length-1];0===i.length||m.size!==c||m.endIndex!==s-1?i.push({startIndex:s,endIndex:s,size:c}):i[i.length-1].endIndex++;}}}return i}(n.children,e,0,o),s=n.parentElement;!s.dataset.virtuosoScroller;)s=s.parentElement;var u=a?a.scrollTop:"window"===s.firstElementChild.dataset.viewportType?window.pageYOffset||document.documentElement.scrollTop:s.scrollTop;r({scrollTop:Math.max(u,0),scrollHeight:(null!=a?a:s).scrollHeight,viewportHeight:(null!=a?a:s).offsetHeight}),null==i||i(function(t,e,n){return "normal"===e||e.endsWith("px")||n("row-gap was not resolved to pixel value correctly",e,p$2.WARN),"normal"===e?0:parseInt(e,10)}(0,getComputedStyle(n).rowGap,o)),null!==l&&t(l);},n)}function T(t,e){return Math.round(t.getBoundingClientRect()[e])}function w$1(t,e){return Math.abs(t-e)<1.01}function x$1(t,n,r,l,u){void 0===l&&(l=noop$2);var c=React$2.useRef(null),m=React$2.useRef(null),d=React$2.useRef(null),f=React$2.useRef(!1),p=React$2.useCallback(function(e){var r=e.target,o=r===window||r===document,i=o?window.pageYOffset||document.documentElement.scrollTop:r.scrollTop,a=o?document.documentElement.scrollHeight:r.scrollHeight,l=o?window.innerHeight:r.offsetHeight,u=function(){t({scrollTop:Math.max(i,0),scrollHeight:a,viewportHeight:l});};f.current?ReactDOM.flushSync(u):u(),f.current=!1,null!==m.current&&(i===m.current||i<=0||i===a-l)&&(m.current=null,n(!0),d.current&&(clearTimeout(d.current),d.current=null));},[t,n]);return React$2.useEffect(function(){var t=u||c.current;return l(u||c.current),p({target:t}),t.addEventListener("scroll",p,{passive:!0}),function(){l(null),t.removeEventListener("scroll",p);}},[c,p,r,l,u]),{scrollerRef:c,scrollByCallback:function(t){f.current=!0,c.current.scrollBy(t);},scrollToCallback:function(e){var r=c.current;if(r&&(!("offsetHeight"in r)||0!==r.offsetHeight)){var o,i,a,l="smooth"===e.behavior;if(r===window?(i=Math.max(T(document.documentElement,"height"),document.documentElement.scrollHeight),o=window.innerHeight,a=document.documentElement.scrollTop):(i=r.scrollHeight,o=T(r,"height"),a=r.scrollTop),e.top=Math.ceil(Math.max(Math.min(i-o,e.top),0)),w$1(o,i)||e.top===a)return t({scrollTop:a,scrollHeight:i,viewportHeight:o}),void(l&&n(!0));l?(m.current=e.top,d.current&&clearTimeout(d.current),d.current=setTimeout(function(){d.current=null,m.current=null,n(!0);},1e3)):m.current=null,r.scrollTo(e);}}}}var b$1=system(function(){var t=stream(),n=stream(),r=statefulStream(0),o=stream(),i=statefulStream(0),a=stream(),l=stream(),s=statefulStream(0),u=statefulStream(0),c=statefulStream(0),m=stream(),d=stream(),f=statefulStream(!1),p=statefulStream(!1);return connect(pipe(t,map$1(function(t){return t.scrollTop})),n),connect(pipe(t,map$1(function(t){return t.scrollHeight})),l),connect(n,i),{scrollContainerState:t,scrollTop:n,viewportHeight:a,headerHeight:s,fixedHeaderHeight:u,footerHeight:c,scrollHeight:l,smoothScrollTargetReached:o,react18ConcurrentRendering:p,scrollTo:m,scrollBy:d,statefulScrollTop:i,deviation:r,scrollingInProgress:f}},[],{singleton:!0}),y$1={lvl:0};function E(t,e,n,r,o){return void 0===r&&(r=y$1),void 0===o&&(o=y$1),{k:t,v:e,lvl:n,l:r,r:o}}function H(t){return t===y$1}function R(){return y$1}function L$1(t,e){if(H(t))return y$1;var n=t.k,r=t.l,o=t.r;if(e===n){if(H(r))return o;if(H(o))return r;var i=P(r);return U(M(t,{k:i[0],v:i[1],l:O(r)}))}return U(M(t,e<n?{l:L$1(r,e)}:{r:L$1(o,e)}))}function k$1(t,e,n){if(void 0===n&&(n="k"),H(t))return [-Infinity,void 0];if(t[n]===e)return [t.k,t.v];if(t[n]<e){var r=k$1(t.r,e,n);return -Infinity===r[0]?[t.k,t.v]:r}return k$1(t.l,e,n)}function z$1(t,e,n){return H(t)?E(e,n,1):e===t.k?M(t,{k:e,v:n}):function(t){return N(D(t))}(M(t,e<t.k?{l:z$1(t.l,e,n)}:{r:z$1(t.r,e,n)}))}function B(t,e,n){if(H(t))return [];var r=t.k,o=t.v,i=t.r,a=[];return r>e&&(a=a.concat(B(t.l,e,n))),r>=e&&r<=n&&a.push({k:r,v:o}),r<=n&&(a=a.concat(B(i,e,n))),a}function F(t){return H(t)?[]:[].concat(F(t.l),[{k:t.k,v:t.v}],F(t.r))}function P(t){return H(t.r)?[t.k,t.v]:P(t.r)}function O(t){return H(t.r)?t.l:U(M(t,{r:O(t.r)}))}function M(t,e){return E(void 0!==e.k?e.k:t.k,void 0!==e.v?e.v:t.v,void 0!==e.lvl?e.lvl:t.lvl,void 0!==e.l?e.l:t.l,void 0!==e.r?e.r:t.r)}function V(t){return H(t)||t.lvl>t.r.lvl}function U(t){var e=t.l,n=t.r,r=t.lvl;if(n.lvl>=r-1&&e.lvl>=r-1)return t;if(r>n.lvl+1){if(V(e))return D(M(t,{lvl:r-1}));if(H(e)||H(e.r))throw new Error("Unexpected empty nodes");return M(e.r,{l:M(e,{r:e.r.l}),r:M(t,{l:e.r.r,lvl:r-1}),lvl:r})}if(V(t))return N(M(t,{lvl:r-1}));if(H(n)||H(n.l))throw new Error("Unexpected empty nodes");var o=n.l,i=V(o)?n.lvl-1:n.lvl;return M(o,{l:M(t,{r:o.l,lvl:r-1}),r:N(M(n,{l:o.r,lvl:i})),lvl:o.lvl+1})}function A$1(t,e,n){return H(t)?[]:W(B(t,k$1(t,e)[0],n),function(t){return {index:t.k,value:t.v}})}function W(t,e){var n=t.length;if(0===n)return [];for(var r=e(t[0]),o=r.index,i=r.value,a=[],l=1;l<n;l++){var s=e(t[l]),u=s.index,c=s.value;a.push({start:o,end:u-1,value:i}),o=u,i=c;}return a.push({start:o,end:Infinity,value:i}),a}function N(t){var e=t.r,n=t.lvl;return H(e)||H(e.r)||e.lvl!==n||e.r.lvl!==n?t:M(e,{l:M(t,{r:e.l}),lvl:n+1})}function D(t){var e=t.l;return H(e)||e.lvl!==t.lvl?t:M(e,{r:M(t,{l:e.r})})}function G$1(t,e,n,r){void 0===r&&(r=0);for(var o=t.length-1;r<=o;){var i=Math.floor((r+o)/2),a=n(t[i],e);if(0===a)return i;if(-1===a){if(o-r<2)return i-1;o=i-1;}else {if(o===r)return i;r=i+1;}}throw new Error("Failed binary finding record in array - "+t.join(",")+", searched for "+e)}function _(t,e,n){return t[G$1(t,e,n)]}var j=system(function(){return {recalcInProgress:statefulStream(!1)}},[],{singleton:!0});function K(t){var e=t.size,n=t.startIndex,r=t.endIndex;return function(t){return t.start===n&&(t.end===r||Infinity===t.end)&&t.value===e}}function Y(t,e){var n=t.index;return e===n?0:e<n?-1:1}function q$1(t,e){var n=t.offset;return e===n?0:e<n?-1:1}function Z(t){return {index:t.index,value:t}}function J(t,e,n,r){var o=t,i=0,a=0,l=0,s=0;if(0!==e){l=o[s=G$1(o,e-1,Y)].offset;var u=k$1(n,e-1);i=u[0],a=u[1],o.length&&o[s].size===k$1(n,e)[1]&&(s-=1),o=o.slice(0,s+1);}else o=[];for(var c,m=d$1(A$1(n,e,Infinity));!(c=m()).done;){var f=c.value,p=f.start,h=f.value,g=p-i,v=g*a+l+g*r;o.push({offset:v,size:h,index:p}),i=p,l=v,a=h;}return {offsetTree:o,lastIndex:i,lastOffset:l,lastSize:a}}function $(t,e){var n=e[0],r=e[1],o=e[3];n.length>0&&(0, e[2])("received item sizes",n,p$2.DEBUG);var i=t.sizeTree,a=i,l=0;if(r.length>0&&H(i)&&2===n.length){var s=n[0].size,u=n[1].size;a=r.reduce(function(t,e){return z$1(z$1(t,e,s),e+1,u)},a);}else {var c=function(t,e){for(var n,r=H(t)?0:Infinity,o=d$1(e);!(n=o()).done;){var i=n.value,a=i.size,l=i.startIndex,s=i.endIndex;if(r=Math.min(r,l),H(t))t=z$1(t,0,a);else {var u=A$1(t,l-1,s+1);if(!u.some(K(i))){for(var c,m=!1,f=!1,p=d$1(u);!(c=p()).done;){var h=c.value,g=h.start,v=h.end,S=h.value;m?(s>=g||a===S)&&(t=L$1(t,g)):(f=S!==a,m=!0),v>s&&s>=g&&S!==a&&(t=z$1(t,s+1,S));}f&&(t=z$1(t,l,a));}}}return [t,r]}(a,n);a=c[0],l=c[1];}if(a===i)return t;var m=J(t.offsetTree,l,a,o),f=m.offsetTree;return {sizeTree:a,offsetTree:f,lastIndex:m.lastIndex,lastOffset:m.lastOffset,lastSize:m.lastSize,groupOffsetTree:r.reduce(function(t,e){return z$1(t,e,Q(e,f,o))},R()),groupIndices:r}}function Q(t,e,n){if(0===e.length)return 0;var r=_(e,t,Y),o=t-r.index,i=r.size*o+(o-1)*n+r.offset;return i>0?i+n:i}function X(t,e,n){if(function(t){return void 0!==t.groupIndex}(t))return e.groupIndices[t.groupIndex]+1;var r=tt("LAST"===t.index?n:t.index,e);return Math.max(0,r,Math.min(n,r))}function tt(t,e){if(!et$1(e))return t;for(var n=0;e.groupIndices[n]<=t+n;)n++;return t+n}function et$1(t){return !H(t.groupOffsetTree)}var nt={offsetHeight:"height",offsetWidth:"width"},rt=system(function(t){var n=t[0].log,r=t[1].recalcInProgress,o=stream(),i=stream(),a=statefulStreamFromEmitter(i,0),l=stream(),s=stream(),c=statefulStream(0),m=statefulStream([]),d=statefulStream(void 0),f=statefulStream(void 0),h=statefulStream(function(t,e){return T(t,nt[e])}),g=statefulStream(void 0),v=statefulStream(0),S={offsetTree:[],sizeTree:R(),groupOffsetTree:R(),lastIndex:0,lastOffset:0,lastSize:0,groupIndices:[]},I=statefulStreamFromEmitter(pipe(o,withLatestFrom(m,n,v),scan($,S),distinctUntilChanged()),S);connect(pipe(m,filter$1(function(t){return t.length>0}),withLatestFrom(I,v),map$1(function(t){var e=t[0],n=t[1],r=t[2],o=e.reduce(function(t,e,o){return z$1(t,e,Q(e,n.offsetTree,r)||o)},R());return u({},n,{groupIndices:e,groupOffsetTree:o})})),I),connect(pipe(i,withLatestFrom(I),filter$1(function(t){return t[0]<t[1].lastIndex}),map$1(function(t){var e=t[1];return [{startIndex:t[0],endIndex:e.lastIndex,size:e.lastSize}]})),o),connect(d,f);var C=statefulStreamFromEmitter(pipe(d,map$1(function(t){return void 0===t})),!0);connect(pipe(f,filter$1(function(t){return void 0!==t&&H(getValue(I).sizeTree)}),map$1(function(t){return [{startIndex:0,endIndex:0,size:t}]})),o);var w=streamFromEmitter(pipe(o,withLatestFrom(I),scan(function(t,e){var n=e[1];return {changed:n!==t.sizes,sizes:n}},{changed:!1,sizes:S}),map$1(function(t){return t.changed})));subscribe(pipe(c,scan(function(t,e){return {diff:t.prev-e,prev:e}},{diff:0,prev:0}),map$1(function(t){return t.diff})),function(t){t>0?(publish(r,!0),publish(l,t)):t<0&&publish(s,t);}),subscribe(pipe(c,withLatestFrom(n)),function(t){t[0]<0&&(0, t[1])("`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value",{firstItemIndex:c},p$2.ERROR);});var x=streamFromEmitter(l);connect(pipe(l,withLatestFrom(I),map$1(function(t){var e=t[0],n=t[1];if(n.groupIndices.length>0)throw new Error("Virtuoso: prepending items does not work with groups");return F(n.sizeTree).reduce(function(t,n){var r=n.k,o=n.v;return {ranges:[].concat(t.ranges,[{startIndex:t.prevIndex,endIndex:r+e-1,size:t.prevSize}]),prevIndex:r+e,prevSize:o}},{ranges:[],prevIndex:0,prevSize:n.lastSize}).ranges})),o);var b=streamFromEmitter(pipe(s,withLatestFrom(I,v),map$1(function(t){return Q(-t[0],t[1].offsetTree,t[2])})));return connect(pipe(s,withLatestFrom(I,v),map$1(function(t){var e=t[0],n=t[1],r=t[2];if(n.groupIndices.length>0)throw new Error("Virtuoso: shifting items does not work with groups");var o=F(n.sizeTree).reduce(function(t,n){var r=n.v;return z$1(t,Math.max(0,n.k+e),r)},R());return u({},n,{sizeTree:o},J(n.offsetTree,0,o,r))})),I),{data:g,totalCount:i,sizeRanges:o,groupIndices:m,defaultItemSize:f,fixedItemSize:d,unshiftWith:l,shiftWith:s,shiftWithOffset:b,beforeUnshiftWith:x,firstItemIndex:c,gap:v,sizes:I,listRefresh:w,statefulTotalCount:a,trackItemSizes:C,itemSize:h}},tup(v$1,j),{singleton:!0}),ot="undefined"!=typeof document&&"scrollBehavior"in document.documentElement.style;function it$1(t){var e="number"==typeof t?{index:t}:t;return e.align||(e.align="start"),e.behavior&&ot||(e.behavior="auto"),e.offset||(e.offset=0),e}var at=system(function(t){var n=t[0],r=n.sizes,o=n.totalCount,i=n.listRefresh,a=n.gap,l=t[1],s=l.scrollingInProgress,u=l.viewportHeight,c=l.scrollTo,m=l.smoothScrollTargetReached,d=l.headerHeight,f=l.footerHeight,h=t[2].log,g=stream(),v=statefulStream(0),S=null,I=null,C=null;function T(){S&&(S(),S=null),C&&(C(),C=null),I&&(clearTimeout(I),I=null),publish(s,!1);}return connect(pipe(g,withLatestFrom(r,u,o,v,d,f,h),withLatestFrom(a),map$1(function(t){var n=t[0],r=n[0],o=n[1],a=n[2],l=n[3],u=n[4],c=n[5],d=n[6],f=n[7],h=t[1],v=it$1(r),w=v.align,x=v.behavior,b=v.offset,y=l-1,E=X(v,o,y),H=Q(E,o.offsetTree,h)+c;"end"===w?(H=H-a+k$1(o.sizeTree,E)[1],E===y&&(H+=d)):"center"===w?H=H-a/2+k$1(o.sizeTree,E)[1]/2:H-=u,b&&(H+=b);var R=function(t){T(),t?(f("retrying to scroll to",{location:r},p$2.DEBUG),publish(g,r)):f("list did not change, scroll successful",{},p$2.DEBUG);};if(T(),"smooth"===x){var L=!1;C=subscribe(i,function(t){L=L||t;}),S=handleNext(m,function(){R(L);});}else S=handleNext(pipe(i,function(t){var e=setTimeout(function(){t(!1);},150);return function(n){n&&(t(!0),clearTimeout(e));}}),R);return I=setTimeout(function(){T();},1200),publish(s,!0),f("scrolling from index to",{index:E,top:H,behavior:x},p$2.DEBUG),{top:H,behavior:x}})),c),{scrollToIndex:g,topListHeight:v}},tup(rt,b$1,v$1),{singleton:!0}),lt$1="up",st={atBottom:!1,notAtBottomBecause:"NOT_SHOWING_LAST_ITEM",state:{offsetBottom:0,scrollTop:0,viewportHeight:0,scrollHeight:0}},ut=system(function(t){var n=t[0],r=n.scrollContainerState,o=n.scrollTop,i=n.viewportHeight,a=n.headerHeight,l=n.footerHeight,s=n.scrollBy,u=statefulStream(!1),c=statefulStream(!0),m=stream(),d=stream(),f=statefulStream(4),p=statefulStream(0),h=statefulStreamFromEmitter(pipe(merge(pipe(duc(o),skip(1),mapTo(!0)),pipe(duc(o),skip(1),mapTo(!1),debounceTime(100))),distinctUntilChanged()),!1),g=statefulStreamFromEmitter(pipe(merge(pipe(s,mapTo(!0)),pipe(s,mapTo(!1),debounceTime(200))),distinctUntilChanged()),!1);connect(pipe(combineLatest(duc(o),duc(p)),map$1(function(t){return t[0]<=t[1]}),distinctUntilChanged()),c),connect(pipe(c,throttleTime(50)),d);var v=streamFromEmitter(pipe(combineLatest(r,duc(i),duc(a),duc(l),duc(f)),scan(function(t,e){var n,r,o=e[0],i=o.scrollTop,a=o.scrollHeight,l=e[1],s={viewportHeight:l,scrollTop:i,scrollHeight:a};return i+l-a>-e[4]?(i>t.state.scrollTop?(n="SCROLLED_DOWN",r=t.state.scrollTop-i):(n="SIZE_DECREASED",r=t.state.scrollTop-i||t.scrollTopDelta),{atBottom:!0,state:s,atBottomBecause:n,scrollTopDelta:r}):{atBottom:!1,notAtBottomBecause:s.scrollHeight>t.state.scrollHeight?"SIZE_INCREASED":l<t.state.viewportHeight?"VIEWPORT_HEIGHT_DECREASING":i<t.state.scrollTop?"SCROLLING_UPWARDS":"NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM",state:s}},st),distinctUntilChanged(function(t,e){return t&&t.atBottom===e.atBottom}))),S=statefulStreamFromEmitter(pipe(r,scan(function(t,e){var n=e.scrollTop,r=e.scrollHeight,o=e.viewportHeight;return w$1(t.scrollHeight,r)?{scrollTop:n,scrollHeight:r,jump:0,changed:!1}:t.scrollTop!==n&&r-(n+o)<1?{scrollHeight:r,scrollTop:n,jump:t.scrollTop-n,changed:!0}:{scrollHeight:r,scrollTop:n,jump:0,changed:!0}},{scrollHeight:0,jump:0,scrollTop:0,changed:!1}),filter$1(function(t){return t.changed}),map$1(function(t){return t.jump})),0);connect(pipe(v,map$1(function(t){return t.atBottom})),u),connect(pipe(u,throttleTime(50)),m);var I=statefulStream("down");connect(pipe(r,map$1(function(t){return t.scrollTop}),distinctUntilChanged(),scan(function(t,n){return getValue(g)?{direction:t.direction,prevScrollTop:n}:{direction:n<t.prevScrollTop?lt$1:"down",prevScrollTop:n}},{direction:"down",prevScrollTop:0}),map$1(function(t){return t.direction})),I),connect(pipe(r,throttleTime(50),mapTo("none")),I);var C=statefulStream(0);return connect(pipe(h,filter$1(function(t){return !t}),mapTo(0)),C),connect(pipe(o,throttleTime(100),withLatestFrom(h),filter$1(function(t){return !!t[1]}),scan(function(t,e){return [t[1],e[0]]},[0,0]),map$1(function(t){return t[1]-t[0]})),C),{isScrolling:h,isAtTop:c,isAtBottom:u,atBottomState:v,atTopStateChange:d,atBottomStateChange:m,scrollDirection:I,atBottomThreshold:f,atTopThreshold:p,scrollVelocity:C,lastJumpDueToItemResize:S}},tup(b$1)),ct=system(function(t){var n=t[0].log,r=statefulStream(!1),o=streamFromEmitter(pipe(r,filter$1(function(t){return t}),distinctUntilChanged()));return subscribe(r,function(t){t&&getValue(n)("props updated",{},p$2.DEBUG);}),{propsReady:r,didMount:o}},tup(v$1),{singleton:!0}),mt=system(function(t){var n=t[0],r=n.sizes,o=n.listRefresh,i=n.defaultItemSize,a=t[1].scrollTop,l=t[2].scrollToIndex,s=t[3].didMount,u=statefulStream(!0),c=statefulStream(0);return connect(pipe(s,withLatestFrom(c),filter$1(function(t){return !!t[1]}),mapTo(!1)),u),subscribe(pipe(combineLatest(o,s),withLatestFrom(u,r,i),filter$1(function(t){var e=t[1],n=t[3];return t[0][1]&&(!H(t[2].sizeTree)||void 0!==n)&&!e}),withLatestFrom(c)),function(t){var n=t[1];setTimeout(function(){handleNext(a,function(){publish(u,!0);}),publish(l,n);});}),{scrolledToInitialItem:u,initialTopMostItemIndex:c}},tup(rt,b$1,at,ct),{singleton:!0});function dt(t){return !!t&&("smooth"===t?"smooth":"auto")}var ft=system(function(t){var n=t[0],r=n.totalCount,o=n.listRefresh,i=t[1],a=i.isAtBottom,l=i.atBottomState,s=t[2].scrollToIndex,u=t[3].scrolledToInitialItem,c=t[4],m=c.propsReady,d=c.didMount,f=t[5].log,h=t[6].scrollingInProgress,g=statefulStream(!1),v=stream(),S=null;function I(t){publish(s,{index:"LAST",align:"end",behavior:t});}function C(t){var n=handleNext(l,function(n){!t||n.atBottom||"SIZE_INCREASED"!==n.notAtBottomBecause||S||(getValue(f)("scrolling to bottom due to increased size",{},p$2.DEBUG),I("auto"));});setTimeout(n,100);}return subscribe(pipe(combineLatest(pipe(duc(r),skip(1)),d),withLatestFrom(duc(g),a,u,h),map$1(function(t){var e=t[0],n=e[0],r=e[1]&&t[3],o="auto";return r&&(o=function(t,e){return "function"==typeof t?dt(t(e)):e&&dt(t)}(t[1],t[2]||t[4]),r=r&&!!o),{totalCount:n,shouldFollow:r,followOutputBehavior:o}}),filter$1(function(t){return t.shouldFollow})),function(t){var n=t.totalCount,r=t.followOutputBehavior;S&&(S(),S=null),S=handleNext(o,function(){getValue(f)("following output to ",{totalCount:n},p$2.DEBUG),I(r),S=null;});}),subscribe(pipe(combineLatest(duc(g),r,m),filter$1(function(t){return t[0]&&t[2]}),scan(function(t,e){var n=e[1];return {refreshed:t.value===n,value:n}},{refreshed:!1,value:0}),filter$1(function(t){return t.refreshed}),withLatestFrom(g,r)),function(t){C(!1!==t[1]);}),subscribe(v,function(){C(!1!==getValue(g));}),subscribe(combineLatest(duc(g),l),function(t){var e=t[1];t[0]&&!e.atBottom&&"VIEWPORT_HEIGHT_DECREASING"===e.notAtBottomBecause&&I("auto");}),{followOutput:g,autoscrollToBottom:v}},tup(rt,ut,at,mt,ct,v$1,b$1));function pt(t){return t.reduce(function(t,e){return t.groupIndices.push(t.totalCount),t.totalCount+=e+1,t},{totalCount:0,groupIndices:[]})}var ht=system(function(t){var n=t[0],r=n.totalCount,o=n.groupIndices,i=n.sizes,a=t[1],l=a.scrollTop,s=a.headerHeight,u=stream(),c=stream(),m=streamFromEmitter(pipe(u,map$1(pt)));return connect(pipe(m,map$1(function(t){return t.totalCount})),r),connect(pipe(m,map$1(function(t){return t.groupIndices})),o),connect(pipe(combineLatest(l,i,s),filter$1(function(t){return et$1(t[1])}),map$1(function(t){return k$1(t[1].groupOffsetTree,Math.max(t[0]-t[2],0),"v")[0]}),distinctUntilChanged(),map$1(function(t){return [t]})),c),{groupCounts:u,topItemsIndexes:c}},tup(rt,b$1));function gt$1(t,e){return !(!t||t[0]!==e[0]||t[1]!==e[1])}function vt(t,e){return !(!t||t.startIndex!==e.startIndex||t.endIndex!==e.endIndex)}function St(t,e,n){return "number"==typeof t?n===lt$1&&"top"===e||"down"===n&&"bottom"===e?t:0:n===lt$1?"top"===e?t.main:t.reverse:"bottom"===e?t.main:t.reverse}function It(t,e){return "number"==typeof t?t:t[e]||0}var Ct=system(function(t){var n=t[0],r=n.scrollTop,o=n.viewportHeight,i=n.deviation,a=n.headerHeight,l=n.fixedHeaderHeight,s=stream(),u=statefulStream(0),c=statefulStream(0),m=statefulStream(0),d=statefulStreamFromEmitter(pipe(combineLatest(duc(r),duc(o),duc(a),duc(s,gt$1),duc(m),duc(u),duc(l),duc(i),duc(c)),map$1(function(t){var e=t[0],n=t[1],r=t[2],o=t[3],i=o[0],a=o[1],l=t[4],s=t[6],u=t[7],c=t[8],m=e-u,d=t[5]+s,f=Math.max(r-m,0),p="none",h=It(c,"top"),g=It(c,"bottom");return i-=u,a+=r+s,(i+=r+s)>e+d-h&&(p=lt$1),(a-=u)<e-f+n+g&&(p="down"),"none"!==p?[Math.max(m-r-St(l,"top",p)-h,0),m-f-s+n+St(l,"bottom",p)+g]:null}),filter$1(function(t){return null!=t}),distinctUntilChanged(gt$1)),[0,0]);return {listBoundary:s,overscan:m,topListHeight:u,increaseViewportBy:c,visibleRange:d}},tup(b$1),{singleton:!0}),Tt={items:[],topItems:[],offsetTop:0,offsetBottom:0,top:0,bottom:0,topListHeight:0,totalCount:0,firstItemIndex:0};function wt(t,e,n){if(0===t.length)return [];if(!et$1(e))return t.map(function(t){return u({},t,{index:t.index+n,originalIndex:t.index})});for(var r,o=[],i=A$1(e.groupOffsetTree,t[0].index,t[t.length-1].index),a=void 0,l=0,s=d$1(t);!(r=s()).done;){var c=r.value;(!a||a.end<c.index)&&(a=i.shift(),l=e.groupIndices.indexOf(a.start)),o.push(u({},c.index===a.start?{type:"group",index:l}:{index:c.index-(l+1)+n,groupIndex:l},{size:c.size,offset:c.offset,originalIndex:c.index,data:c.data}));}return o}function xt(t,e,n,r,o,i){var a=0,l=0;if(t.length>0){a=t[0].offset;var s=t[t.length-1];l=s.offset+s.size;}var u=n-o.lastIndex,c=a,m=o.lastOffset+u*o.lastSize+(u-1)*r-l;return {items:wt(t,o,i),topItems:wt(e,o,i),topListHeight:e.reduce(function(t,e){return e.size+t},0),offsetTop:a,offsetBottom:m,top:c,bottom:l,totalCount:n,firstItemIndex:i}}var bt=system(function(t){var n=t[0],r=n.sizes,o=n.totalCount,i=n.data,a=n.firstItemIndex,l=n.gap,s=t[1],c=t[2],m=c.visibleRange,f=c.listBoundary,p=c.topListHeight,h=t[3],g=h.scrolledToInitialItem,v=h.initialTopMostItemIndex,S=t[4].topListHeight,I=t[5],C=t[6].didMount,T=t[7].recalcInProgress,w=statefulStream([]),x=stream();connect(s.topItemsIndexes,w);var b=statefulStreamFromEmitter(pipe(combineLatest(C,T,duc(m,gt$1),duc(o),duc(r),duc(v),g,duc(w),duc(a),duc(l),i),filter$1(function(t){return t[0]&&!t[1]}),map$1(function(t){var n=t[2],r=n[0],o=n[1],i=t[3],a=t[5],l=t[6],s=t[7],u=t[8],c=t[9],m=t[10],f=t[4],p=f.sizeTree,h=f.offsetTree;if(0===i||0===r&&0===o)return Tt;if(H(p))return xt(function(t,e,n){if(et$1(e)){var r=tt(t,e);return [{index:k$1(e.groupOffsetTree,r)[0],size:0,offset:0},{index:r,size:0,offset:0,data:n&&n[0]}]}return [{index:t,size:0,offset:0,data:n&&n[0]}]}(function(t,e){return "number"==typeof t?t:"LAST"===t.index?e-1:t.index}(a,i),f,m),[],i,c,f,u);var g=[];if(s.length>0)for(var v,S=s[0],I=s[s.length-1],C=0,T=d$1(A$1(p,S,I));!(v=T()).done;)for(var w=v.value,x=w.value,b=Math.max(w.start,S),y=Math.min(w.end,I),E=b;E<=y;E++)g.push({index:E,size:x,offset:C,data:m&&m[E]}),C+=x;if(!l)return xt([],g,i,c,f,u);var R=s.length>0?s[s.length-1]+1:0,L=function(t,e,n,r){return void 0===r&&(r=0),r>0&&(e=Math.max(e,_(t,r,Y).offset)),W((i=n,l=G$1(o=t,e,a=q$1),s=G$1(o,i,a,l),o.slice(l,s+1)),Z);var o,i,a,l,s;}(h,r,o,R);if(0===L.length)return null;var z=i-1;return xt(tap([],function(t){for(var e,n=d$1(L);!(e=n()).done;){var i=e.value,a=i.value,l=a.offset,s=i.start,u=a.size;if(a.offset<r){var f=(s+=Math.floor((r-a.offset+c)/(u+c)))-i.start;l+=f*u+f*c;}s<R&&(l+=(R-s)*u,s=R);for(var p=Math.min(i.end,z),h=s;h<=p&&!(l>=o);h++)t.push({index:h,size:u,offset:l,data:m&&m[h]}),l+=u+c;}}),g,i,c,f,u)}),filter$1(function(t){return null!==t}),distinctUntilChanged()),Tt);return connect(pipe(i,filter$1(function(t){return void 0!==t}),map$1(function(t){return t.length})),o),connect(pipe(b,map$1(function(t){return t.topListHeight})),S),connect(S,p),connect(pipe(b,map$1(function(t){return [t.top,t.bottom]})),f),connect(pipe(b,map$1(function(t){return t.items})),x),u({listState:b,topItemsIndexes:w,endReached:streamFromEmitter(pipe(b,filter$1(function(t){return t.items.length>0}),withLatestFrom(o,i),filter$1(function(t){var e=t[0].items;return e[e.length-1].originalIndex===t[1]-1}),map$1(function(t){return [t[1]-1,t[2]]}),distinctUntilChanged(gt$1),map$1(function(t){return t[0]}))),startReached:streamFromEmitter(pipe(b,throttleTime(200),filter$1(function(t){var e=t.items;return e.length>0&&e[0].originalIndex===t.topItems.length}),map$1(function(t){return t.items[0].index}),distinctUntilChanged())),rangeChanged:streamFromEmitter(pipe(b,filter$1(function(t){return t.items.length>0}),map$1(function(t){for(var e=t.items,n=0,r=e.length-1;"group"===e[n].type&&n<r;)n++;for(;"group"===e[r].type&&r>n;)r--;return {startIndex:e[n].index,endIndex:e[r].index}}),distinctUntilChanged(vt))),itemsRendered:x},I)},tup(rt,ht,Ct,mt,at,ut,ct,j),{singleton:!0}),yt=system(function(t){var n=t[0],r=n.sizes,o=n.firstItemIndex,i=n.data,a=n.gap,l=t[1].listState,s=t[2].didMount,u=statefulStream(0);return connect(pipe(s,withLatestFrom(u),filter$1(function(t){return 0!==t[1]}),withLatestFrom(r,o,a,i),map$1(function(t){var e=t[0][1],n=t[1],r=t[2],o=t[3],i=t[4],a=void 0===i?[]:i,l=0;if(n.groupIndices.length>0)for(var s,u=d$1(n.groupIndices);!((s=u()).done||s.value-l>=e);)l++;var c=e+l;return xt(Array.from({length:c}).map(function(t,e){return {index:e,size:0,offset:0,data:a[e]}}),[],c,o,n,r)})),l),{initialItemCount:u}},tup(rt,bt,ct),{singleton:!0}),Et=system(function(t){var n=t[0].scrollVelocity,r=statefulStream(!1),o=stream(),i=statefulStream(!1);return connect(pipe(n,withLatestFrom(i,r,o),filter$1(function(t){return !!t[1]}),map$1(function(t){var e=t[0],n=t[1],r=t[2],o=t[3],i=n.enter;if(r){if((0, n.exit)(e,o))return !1}else if(i(e,o))return !0;return r}),distinctUntilChanged()),r),subscribe(pipe(combineLatest(r,n,o),withLatestFrom(i)),function(t){var e=t[0],n=t[1];return e[0]&&n&&n.change&&n.change(e[1],e[2])}),{isSeeking:r,scrollSeekConfiguration:i,scrollVelocity:n,scrollSeekRangeChanged:o}},tup(ut),{singleton:!0}),Ht=system(function(t){var n=t[0].topItemsIndexes,r=statefulStream(0);return connect(pipe(r,filter$1(function(t){return t>0}),map$1(function(t){return Array.from({length:t}).map(function(t,e){return e})})),n),{topItemCount:r}},tup(bt)),Rt=system(function(t){var n=t[0],r=n.footerHeight,o=n.headerHeight,i=n.fixedHeaderHeight,a=t[1].listState,l=stream(),s=statefulStreamFromEmitter(pipe(combineLatest(r,o,i,a),map$1(function(t){var e=t[3];return t[0]+t[1]+t[2]+e.offsetBottom+e.bottom})),0);return connect(duc(s),l),{totalListHeight:s,totalListHeightChanged:l}},tup(b$1,bt),{singleton:!0});function Lt$1(t){var e,n=!1;return function(){return n||(n=!0,e=t()),e}}var kt=Lt$1(function(){return /iP(ad|hone|od).+Version\/[\d.]+.*Safari/i.test(navigator.userAgent)}),zt=system(function(t){var n=t[0],r=n.scrollBy,o=n.scrollTop,i=n.deviation,a=n.scrollingInProgress,l=t[1],s=l.isScrolling,u=l.isAtBottom,c=l.scrollDirection,m=t[3],d=m.beforeUnshiftWith,f=m.shiftWithOffset,h=m.sizes,g=m.gap,v=t[4].log,S=t[5].recalcInProgress,I=streamFromEmitter(pipe(t[2].listState,withLatestFrom(l.lastJumpDueToItemResize),scan(function(t,e){var n=t[1],r=e[0],o=r.items,i=r.totalCount,a=r.bottom+r.offsetBottom,l=0;return t[2]===i&&n.length>0&&o.length>0&&(0===o[0].originalIndex&&0===n[0].originalIndex||0!=(l=a-t[3])&&(l+=e[1])),[l,o,i,a]},[0,[],0,0]),filter$1(function(t){return 0!==t[0]}),withLatestFrom(o,c,a,u,v),filter$1(function(t){return !t[3]&&0!==t[1]&&t[2]===lt$1}),map$1(function(t){var e=t[0][0];return (0, t[5])("Upward scrolling compensation",{amount:e},p$2.DEBUG),e})));function C(t){t>0?(publish(r,{top:-t,behavior:"auto"}),publish(i,0)):(publish(i,0),publish(r,{top:-t,behavior:"auto"}));}return subscribe(pipe(I,withLatestFrom(i,s)),function(t){var n=t[0],r=t[1];t[2]&&kt()?publish(i,r-n):C(-n);}),subscribe(pipe(combineLatest(statefulStreamFromEmitter(s,!1),i,S),filter$1(function(t){return !t[0]&&!t[2]&&0!==t[1]}),map$1(function(t){return t[1]}),throttleTime(1)),C),connect(pipe(f,map$1(function(t){return {top:-t}})),r),subscribe(pipe(d,withLatestFrom(h,g),map$1(function(t){var e=t[0];return e*t[1].lastSize+e*t[2]})),function(t){publish(i,t),requestAnimationFrame(function(){publish(r,{top:t}),requestAnimationFrame(function(){publish(i,0),publish(S,!1);});});}),{deviation:i}},tup(b$1,ut,bt,rt,v$1,j)),Bt=system(function(t){var n=t[0].totalListHeight,r=t[1].didMount,o=t[2].scrollTo,i=statefulStream(0);return subscribe(pipe(r,withLatestFrom(i),filter$1(function(t){return 0!==t[1]}),map$1(function(t){return {top:t[1]}})),function(t){handleNext(pipe(n,filter$1(function(t){return 0!==t})),function(){setTimeout(function(){publish(o,t);});});}),{initialScrollTop:i}},tup(Rt,ct,b$1),{singleton:!0}),Ft=system(function(t){var n=t[0].viewportHeight,r=t[1].totalListHeight,o=statefulStream(!1);return {alignToBottom:o,paddingTopAddition:statefulStreamFromEmitter(pipe(combineLatest(o,n,r),filter$1(function(t){return t[0]}),map$1(function(t){return Math.max(0,t[1]-t[2])}),distinctUntilChanged()),0)}},tup(b$1,Rt),{singleton:!0}),Pt=system(function(t){var n=t[0],r=n.scrollTo,o=n.scrollContainerState,i=stream(),a=stream(),l=stream(),s=statefulStream(!1),c=statefulStream(void 0);return connect(pipe(combineLatest(i,a),map$1(function(t){var e=t[0],n=e.viewportHeight,r=e.scrollHeight;return {scrollTop:Math.max(0,e.scrollTop-t[1].offsetTop),scrollHeight:r,viewportHeight:n}})),o),connect(pipe(r,withLatestFrom(a),map$1(function(t){var e=t[0];return u({},e,{top:e.top+t[1].offsetTop})})),l),{useWindowScroll:s,customScrollParent:c,windowScrollContainerState:i,windowViewportRect:a,windowScrollTo:l}},tup(b$1)),Ot=["done","behavior"],Mt=system(function(t){var n=t[0],r=n.sizes,o=n.totalCount,i=n.gap,a=t[1],l=a.scrollTop,s=a.viewportHeight,m=a.headerHeight,d=a.scrollingInProgress,f=t[2].scrollToIndex,p=stream();return connect(pipe(p,withLatestFrom(r,s,o,m,l,i),map$1(function(t){var n=t[0],r=t[1],o=t[2],i=t[3],a=t[4],l=t[5],s=t[6],m=n.done,f=n.behavior,p=c$1(n,Ot),h=null,g=X(n,r,i-1),v=Q(g,r.offsetTree,s)+a;return v<l?h=u({},p,{behavior:f,align:"start"}):v+k$1(r.sizeTree,g)[1]>l+o&&(h=u({},p,{behavior:f,align:"end"})),h?m&&handleNext(pipe(d,skip(1),filter$1(function(t){return !1===t})),m):m&&m(),h}),filter$1(function(t){return null!==t})),f),{scrollIntoView:p}},tup(rt,b$1,at,bt,v$1),{singleton:!0}),Vt=["listState","topItemsIndexes"],Ut=system(function(t){return u({},t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},tup(Ct,yt,ct,Et,Rt,Bt,Ft,Pt,Mt)),At=system(function(t){var n=t[0],r=n.totalCount,o=n.sizeRanges,i=n.fixedItemSize,a=n.defaultItemSize,l=n.trackItemSizes,s=n.itemSize,m=n.data,d=n.firstItemIndex,f=n.groupIndices,p=n.statefulTotalCount,h=n.gap,g=t[1],v=g.initialTopMostItemIndex,S=g.scrolledToInitialItem,I=t[2],C=t[3],T=t[4],w=T.listState,x=T.topItemsIndexes,b=c$1(T,Vt),y=t[5].scrollToIndex,E=t[7].topItemCount,H=t[8].groupCounts,R=t[9],L=t[10];return connect(b.rangeChanged,R.scrollSeekRangeChanged),connect(pipe(R.windowViewportRect,map$1(function(t){return t.visibleHeight})),I.viewportHeight),u({totalCount:r,data:m,firstItemIndex:d,sizeRanges:o,initialTopMostItemIndex:v,scrolledToInitialItem:S,topItemsIndexes:x,topItemCount:E,groupCounts:H,fixedItemHeight:i,defaultItemHeight:a,gap:h},C,{statefulTotalCount:p,listState:w,scrollToIndex:y,trackItemSizes:l,itemSize:s,groupIndices:f},b,R,I,L)},tup(rt,mt,b$1,ft,bt,at,zt,Ht,ht,Ut,v$1)),Wt=Lt$1(function(){if("undefined"==typeof document)return "sticky";var t=document.createElement("div");return t.style.position="-webkit-sticky","-webkit-sticky"===t.style.position?"-webkit-sticky":"sticky"});function Nt(t,e){var n=React$2.useRef(null),r=React$2.useCallback(function(r){if(null!==r&&r.offsetParent){var o,i,a=r.getBoundingClientRect(),l=a.width;if(e){var s=e.getBoundingClientRect(),u=a.top-s.top;o=s.height-Math.max(0,u),i=u+e.scrollTop;}else o=window.innerHeight-Math.max(0,a.top),i=a.top+window.pageYOffset;n.current={offsetTop:i,visibleHeight:o,visibleWidth:l},t(n.current);}},[t,e]),l=S(r),s=l.callbackRef,u=l.ref,c=React$2.useCallback(function(){r(u.current);},[r,u]);return React$2.useEffect(function(){if(e){e.addEventListener("scroll",c);var t=new ResizeObserver(c);return t.observe(e),function(){e.removeEventListener("scroll",c),t.unobserve(e);}}return window.addEventListener("scroll",c),window.addEventListener("resize",c),function(){window.removeEventListener("scroll",c),window.removeEventListener("resize",c);}},[c,e]),s}var Dt=["placeholder"],Gt$1=["style","children"],_t=["style","children"];function jt(t){return t}var Kt=system(function(){var t=statefulStream(function(t){return "Item "+t}),n=statefulStream(null),r=statefulStream(function(t){return "Group "+t}),o=statefulStream({}),i=statefulStream(jt),a=statefulStream("div"),l=statefulStream(noop$2),s=function(t,n){return void 0===n&&(n=null),statefulStreamFromEmitter(pipe(o,map$1(function(e){return e[t]}),distinctUntilChanged()),n)};return {context:n,itemContent:t,groupContent:r,components:o,computeItemKey:i,headerFooterTag:a,scrollerRef:l,FooterComponent:s("Footer"),HeaderComponent:s("Header"),TopItemListComponent:s("TopItemList"),ListComponent:s("List","div"),ItemComponent:s("Item","div"),GroupComponent:s("Group","div"),ScrollerComponent:s("Scroller","div"),EmptyPlaceholder:s("EmptyPlaceholder"),ScrollSeekPlaceholder:s("ScrollSeekPlaceholder")}});function Yt(t,n){var r=stream();return subscribe(r,function(){return console.warn("react-virtuoso: You are using a deprecated property. "+n,"color: red;","color: inherit;","color: blue;")}),connect(r,t),r}var qt=system(function(t){var n=t[0],r=t[1],o={item:Yt(r.itemContent,"Rename the %citem%c prop to %citemContent."),group:Yt(r.groupContent,"Rename the %cgroup%c prop to %cgroupContent."),topItems:Yt(n.topItemCount,"Rename the %ctopItems%c prop to %ctopItemCount."),itemHeight:Yt(n.fixedItemHeight,"Rename the %citemHeight%c prop to %cfixedItemHeight."),scrollingStateChange:Yt(n.isScrolling,"Rename the %cscrollingStateChange%c prop to %cisScrolling."),adjustForPrependedItems:stream(),maxHeightCacheSize:stream(),footer:stream(),header:stream(),HeaderContainer:stream(),FooterContainer:stream(),ItemContainer:stream(),ScrollContainer:stream(),GroupContainer:stream(),ListContainer:stream(),emptyComponent:stream(),scrollSeek:stream()};function i(t,n,o){connect(pipe(t,withLatestFrom(r.components),map$1(function(t){var e,r=t[0],i=t[1];return console.warn("react-virtuoso: "+o+" property is deprecated. Pass components."+n+" instead."),u({},i,((e={})[n]=r,e))})),r.components);}return subscribe(o.adjustForPrependedItems,function(){console.warn("react-virtuoso: adjustForPrependedItems is no longer supported. Use the firstItemIndex property instead - https://virtuoso.dev/prepend-items.","color: red;","color: inherit;","color: blue;");}),subscribe(o.maxHeightCacheSize,function(){console.warn("react-virtuoso: maxHeightCacheSize is no longer necessary. Setting it has no effect - remove it from your code.");}),subscribe(o.HeaderContainer,function(){console.warn("react-virtuoso: HeaderContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the header component and pass components.Header to change its contents.");}),subscribe(o.FooterContainer,function(){console.warn("react-virtuoso: FooterContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the footer component and pass components.Footer to change its contents.");}),subscribe(o.scrollSeek,function(t){var o=t.placeholder,i=c$1(t,Dt);console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."),publish(r.components,u({},getValue(r.components),{ScrollSeekPlaceholder:o})),publish(n.scrollSeekConfiguration,i);}),i(o.footer,"Footer","footer"),i(o.header,"Header","header"),i(o.ItemContainer,"Item","ItemContainer"),i(o.ListContainer,"List","ListContainer"),i(o.ScrollContainer,"Scroller","ScrollContainer"),i(o.emptyComponent,"EmptyPlaceholder","emptyComponent"),i(o.GroupContainer,"Group","GroupContainer"),u({},n,r,o)},tup(At,Kt)),Zt=function(t){return React__namespace.createElement("div",{style:{height:t.height}})},Jt={position:Wt(),zIndex:1,overflowAnchor:"none"},$t={overflowAnchor:"none"},Qt=React__namespace.memo(function(t){var r=t.showTopList,o=void 0!==r&&r,i=fe("listState"),a=de$1("sizeRanges"),s=fe("useWindowScroll"),c=fe("customScrollParent"),m=de$1("windowScrollContainerState"),d=de$1("scrollContainerState"),f=c||s?m:d,p=fe("itemContent"),h=fe("context"),g=fe("groupContent"),v=fe("trackItemSizes"),S=fe("itemSize"),I=fe("log"),T=de$1("gap"),w=C(a,S,v,o?noop$2:f,I,T,c).callbackRef,x=React__namespace.useState(0),b=x[0],y=x[1];pe("deviation",function(t){b!==t&&y(t);});var E=fe("EmptyPlaceholder"),H=fe("ScrollSeekPlaceholder")||Zt,R=fe("ListComponent"),L=fe("ItemComponent"),k=fe("GroupComponent"),z=fe("computeItemKey"),B=fe("isSeeking"),F=fe("groupIndices").length>0,P=fe("paddingTopAddition"),O=o?{}:{boxSizing:"border-box",paddingTop:i.offsetTop+P,paddingBottom:i.offsetBottom,marginTop:b};return !o&&0===i.totalCount&&E?React$2.createElement(E,ne$1(E,h)):React$2.createElement(R,u({},ne$1(R,h),{ref:w,style:O,"data-test-id":o?"virtuoso-top-item-list":"virtuoso-item-list"}),(o?i.topItems:i.items).map(function(t){var e=t.originalIndex,n=z(e+i.firstItemIndex,t.data,h);return B?React$2.createElement(H,u({},ne$1(H,h),{key:n,index:t.index,height:t.size,type:t.type||"item"},"group"===t.type?{}:{groupIndex:t.groupIndex})):"group"===t.type?React$2.createElement(k,u({},ne$1(k,h),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,style:Jt}),g(t.index)):React$2.createElement(L,u({},ne$1(L,h),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,"data-item-group-index":t.groupIndex,style:$t}),F?p(t.index,t.groupIndex,t.data,h):p(t.index,t.data,h))}))}),Xt={height:"100%",outline:"none",overflowY:"auto",position:"relative",WebkitOverflowScrolling:"touch"},te={width:"100%",height:"100%",position:"absolute",top:0},ee$1={width:"100%",position:Wt(),top:0};function ne$1(t,e){if("string"!=typeof t)return {context:e}}var re$1=React__namespace.memo(function(){var t=fe("HeaderComponent"),e=de$1("headerHeight"),n=fe("headerFooterTag"),r=I(function(t){return e(T(t,"height"))}),o=fe("context");return t?React$2.createElement(n,{ref:r},React$2.createElement(t,ne$1(t,o))):null}),oe=React__namespace.memo(function(){var t=fe("FooterComponent"),e=de$1("footerHeight"),n=fe("headerFooterTag"),r=I(function(t){return e(T(t,"height"))}),o=fe("context");return t?React$2.createElement(n,{ref:r},React$2.createElement(t,ne$1(t,o))):null});function ie(t){var e=t.usePublisher,r=t.useEmitter,o=t.useEmitterValue;return React__namespace.memo(function(t){var n=t.style,i=t.children,a=c$1(t,Gt$1),s=e("scrollContainerState"),m=o("ScrollerComponent"),d=e("smoothScrollTargetReached"),f=o("scrollerRef"),p=o("context"),h=x$1(s,d,m,f),g=h.scrollerRef,v=h.scrollByCallback;return r("scrollTo",h.scrollToCallback),r("scrollBy",v),React$2.createElement(m,u({ref:g,style:u({},Xt,n),"data-test-id":"virtuoso-scroller","data-virtuoso-scroller":!0,tabIndex:0},a,ne$1(m,p)),i)})}function ae(t){var r=t.usePublisher,o=t.useEmitter,i=t.useEmitterValue;return React__namespace.memo(function(t){var n=t.style,a=t.children,s=c$1(t,_t),m=r("windowScrollContainerState"),d=i("ScrollerComponent"),f=r("smoothScrollTargetReached"),p=i("totalListHeight"),g=i("deviation"),v=i("customScrollParent"),S=i("context"),I=x$1(m,f,d,noop$2,v),C=I.scrollerRef,T=I.scrollByCallback,w=I.scrollToCallback;return h$2(function(){return C.current=v||window,function(){C.current=null;}},[C,v]),o("windowScrollTo",w),o("scrollBy",T),React$2.createElement(d,u({style:u({position:"relative"},n,0!==p?{height:p+g}:{}),"data-virtuoso-scroller":!0},s,ne$1(d,S)),a)})}var le$1=function(t){var r=t.children,o=de$1("viewportHeight"),i=I(compose(o,function(t){return T(t,"height")}));return React__namespace.createElement("div",{style:te,ref:i,"data-viewport-type":"element"},r)},se=function(t){var e=t.children,r=Nt(de$1("windowViewportRect"),fe("customScrollParent"));return React__namespace.createElement("div",{ref:r,style:te,"data-viewport-type":"window"},e)},ue=function(t){var e=t.children,n=fe("TopItemListComponent"),r=fe("headerHeight"),o=u({},ee$1,{marginTop:r+"px"}),i=fe("context");return React$2.createElement(n||"div",{style:o,context:i},e)},ce=systemToComponent(qt,{required:{},optional:{context:"context",followOutput:"followOutput",firstItemIndex:"firstItemIndex",itemContent:"itemContent",groupContent:"groupContent",overscan:"overscan",increaseViewportBy:"increaseViewportBy",totalCount:"totalCount",topItemCount:"topItemCount",initialTopMostItemIndex:"initialTopMostItemIndex",components:"components",groupCounts:"groupCounts",atBottomThreshold:"atBottomThreshold",atTopThreshold:"atTopThreshold",computeItemKey:"computeItemKey",defaultItemHeight:"defaultItemHeight",fixedItemHeight:"fixedItemHeight",itemSize:"itemSize",scrollSeekConfiguration:"scrollSeekConfiguration",headerFooterTag:"headerFooterTag",data:"data",initialItemCount:"initialItemCount",initialScrollTop:"initialScrollTop",alignToBottom:"alignToBottom",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",logLevel:"logLevel",react18ConcurrentRendering:"react18ConcurrentRendering",item:"item",group:"group",topItems:"topItems",itemHeight:"itemHeight",scrollingStateChange:"scrollingStateChange",maxHeightCacheSize:"maxHeightCacheSize",footer:"footer",header:"header",ItemContainer:"ItemContainer",ScrollContainer:"ScrollContainer",ListContainer:"ListContainer",GroupContainer:"GroupContainer",emptyComponent:"emptyComponent",HeaderContainer:"HeaderContainer",FooterContainer:"FooterContainer",scrollSeek:"scrollSeek"},methods:{scrollToIndex:"scrollToIndex",scrollIntoView:"scrollIntoView",scrollTo:"scrollTo",scrollBy:"scrollBy",adjustForPrependedItems:"adjustForPrependedItems",autoscrollToBottom:"autoscrollToBottom"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange",totalListHeightChanged:"totalListHeightChanged",itemsRendered:"itemsRendered",groupIndices:"groupIndices"}},React__namespace.memo(function(t){var e=fe("useWindowScroll"),r=fe("topItemsIndexes").length>0,o=fe("customScrollParent"),i=o||e?se:le$1;return React__namespace.createElement(o||e?ge$1:he,u({},t),React__namespace.createElement(i,null,React__namespace.createElement(re$1,null),React__namespace.createElement(Qt,null),React__namespace.createElement(oe,null)),r&&React__namespace.createElement(ue,null,React__namespace.createElement(Qt,{showTopList:!0})))})),me=ce.Component,de$1=ce.usePublisher,fe=ce.useEmitterValue,pe=ce.useEmitter,he=ie({usePublisher:de$1,useEmitterValue:fe,useEmitter:pe}),ge$1=ae({usePublisher:de$1,useEmitterValue:fe,useEmitter:pe}),ve={items:[],offsetBottom:0,offsetTop:0,top:0,bottom:0,itemHeight:0,itemWidth:0},Se={items:[{index:0}],offsetBottom:0,offsetTop:0,top:0,bottom:0,itemHeight:0,itemWidth:0},Ie=Math.round,Ce=Math.ceil,Te=Math.floor,we=Math.min,xe=Math.max;function be(t,e){return Array.from({length:e-t+1}).map(function(e,n){return {index:n+t}})}function ye$1(t,e){return t&&t.column===e.column&&t.row===e.row}var Ee=system(function(t){var n=t[0],r=n.overscan,o=n.visibleRange,i=n.listBoundary,a=t[1],l=a.scrollTop,s=a.viewportHeight,c=a.scrollBy,m=a.scrollTo,d=a.smoothScrollTargetReached,f=a.scrollContainerState,p=t[2],h=t[3],g=t[4],v=g.propsReady,S=g.didMount,I=t[5],C=I.windowViewportRect,T=I.windowScrollTo,w=I.useWindowScroll,x=I.customScrollParent,b=I.windowScrollContainerState,y=t[6],E=statefulStream(0),H=statefulStream(0),R=statefulStream(ve),L=statefulStream({height:0,width:0}),k=statefulStream({height:0,width:0}),z=stream(),B=stream(),F=statefulStream(0),P=statefulStream({row:0,column:0});connect(pipe(S,withLatestFrom(H),filter$1(function(t){return 0!==t[1]}),map$1(function(t){return {items:be(0,t[1]-1),top:0,bottom:0,offsetBottom:0,offsetTop:0,itemHeight:0,itemWidth:0}})),R),connect(pipe(combineLatest(duc(E),o,duc(P,ye$1),duc(k,function(t,e){return t&&t.width===e.width&&t.height===e.height})),withLatestFrom(L),map$1(function(t){var e=t[0],n=e[0],r=e[1],o=r[0],i=r[1],a=e[2],l=e[3],s=t[1],u=a.row,c=l.height,m=l.width,d=s.width;if(0===n||0===d)return ve;if(0===m)return Se;var f=Le(d,m,a.column),p=f*Te((o+u)/(c+u)),h=f*Ce((i+u)/(c+u))-1;h=xe(0,we(n-1,h));var g=be(p=we(h,xe(0,p)),h),v=He(s,a,l,g),S=v.top,I=v.bottom,C=Ce(n/f);return {items:g,offsetTop:S,offsetBottom:C*c+(C-1)*u-I,top:S,bottom:I,itemHeight:c,itemWidth:m}})),R),connect(pipe(L,map$1(function(t){return t.height})),s),connect(pipe(combineLatest(L,k,R,P),map$1(function(t){var e=He(t[0],t[3],t[1],t[2].items);return [e.top,e.bottom]}),distinctUntilChanged(gt$1)),i);var O=streamFromEmitter(pipe(duc(R),filter$1(function(t){return t.items.length>0}),withLatestFrom(E),filter$1(function(t){var e=t[0].items;return e[e.length-1].index===t[1]-1}),map$1(function(t){return t[1]-1}),distinctUntilChanged())),M=streamFromEmitter(pipe(duc(R),filter$1(function(t){var e=t.items;return e.length>0&&0===e[0].index}),mapTo(0),distinctUntilChanged())),V=streamFromEmitter(pipe(duc(R),filter$1(function(t){return t.items.length>0}),map$1(function(t){var e=t.items;return {startIndex:e[0].index,endIndex:e[e.length-1].index}}),distinctUntilChanged(vt)));connect(V,h.scrollSeekRangeChanged),connect(pipe(z,withLatestFrom(L,k,E,P),map$1(function(t){var e=t[1],n=t[2],r=t[3],o=t[4],i=it$1(t[0]),a=i.align,l=i.behavior,s=i.offset,u=i.index;"LAST"===u&&(u=r-1);var c=Re$1(e,o,n,u=xe(0,u,we(r-1,u)));return "end"===a?c=Ie(c-e.height+n.height):"center"===a&&(c=Ie(c-e.height/2+n.height/2)),s&&(c+=s),{top:c,behavior:l}})),m);var U=statefulStreamFromEmitter(pipe(R,map$1(function(t){return t.offsetBottom+t.bottom})),0);return connect(pipe(C,map$1(function(t){return {width:t.visibleWidth,height:t.visibleHeight}})),L),u({totalCount:E,viewportDimensions:L,itemDimensions:k,scrollTop:l,scrollHeight:B,overscan:r,scrollBy:c,scrollTo:m,scrollToIndex:z,smoothScrollTargetReached:d,windowViewportRect:C,windowScrollTo:T,useWindowScroll:w,customScrollParent:x,windowScrollContainerState:b,deviation:F,scrollContainerState:f,initialItemCount:H,gap:P},h,{gridState:R,totalListHeight:U},p,{startReached:M,endReached:O,rangeChanged:V,propsReady:v},y)},tup(Ct,b$1,ut,Et,ct,Pt,v$1));function He(t,e,n,r){var o=n.height;return void 0===o||0===r.length?{top:0,bottom:0}:{top:Re$1(t,e,n,r[0].index),bottom:Re$1(t,e,n,r[r.length-1].index)+o}}function Re$1(t,e,n,r){var o=Le(t.width,n.width,e.column),i=Te(r/o),a=i*n.height+xe(0,i-1)*e.row;return a>0?a+e.row:a}function Le(t,e,n){return xe(1,Te((t+n)/(e+n)))}var ke=["placeholder"],ze=system(function(){var t=statefulStream(function(t){return "Item "+t}),n=statefulStream({}),r=statefulStream(null),o=statefulStream("virtuoso-grid-item"),i=statefulStream("virtuoso-grid-list"),a=statefulStream(jt),l=statefulStream(noop$2),s=function(t,r){return void 0===r&&(r=null),statefulStreamFromEmitter(pipe(n,map$1(function(e){return e[t]}),distinctUntilChanged()),r)};return {context:r,itemContent:t,components:n,computeItemKey:a,itemClassName:o,listClassName:i,scrollerRef:l,ListComponent:s("List","div"),ItemComponent:s("Item","div"),ScrollerComponent:s("Scroller","div"),ScrollSeekPlaceholder:s("ScrollSeekPlaceholder","div")}}),Be=system(function(t){var n=t[0],r=t[1],o={item:Yt(r.itemContent,"Rename the %citem%c prop to %citemContent."),ItemContainer:stream(),ScrollContainer:stream(),ListContainer:stream(),emptyComponent:stream(),scrollSeek:stream()};function i(t,n,o){connect(pipe(t,withLatestFrom(r.components),map$1(function(t){var e,r=t[0],i=t[1];return console.warn("react-virtuoso: "+o+" property is deprecated. Pass components."+n+" instead."),u({},i,((e={})[n]=r,e))})),r.components);}return subscribe(o.scrollSeek,function(t){var o=t.placeholder,i=c$1(t,ke);console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."),publish(r.components,u({},getValue(r.components),{ScrollSeekPlaceholder:o})),publish(n.scrollSeekConfiguration,i);}),i(o.ItemContainer,"Item","ItemContainer"),i(o.ListContainer,"List","ListContainer"),i(o.ScrollContainer,"Scroller","ScrollContainer"),u({},n,r,o)},tup(Ee,ze)),Fe=React__namespace.memo(function(){var t=Ae("gridState"),e=Ae("listClassName"),n=Ae("itemClassName"),r=Ae("itemContent"),o=Ae("computeItemKey"),i=Ae("isSeeking"),a=Ue("scrollHeight"),s=Ae("ItemComponent"),c=Ae("ListComponent"),m=Ae("ScrollSeekPlaceholder"),d=Ae("context"),f=Ue("itemDimensions"),p=Ue("gap"),h=Ae("log"),g=I(function(t){a(t.parentElement.parentElement.scrollHeight);var e=t.firstChild;e&&f(e.getBoundingClientRect()),p({row:Ge("row-gap",getComputedStyle(t).rowGap,h),column:Ge("column-gap",getComputedStyle(t).columnGap,h)});});return React$2.createElement(c,u({ref:g,className:e},ne$1(c,d),{style:{paddingTop:t.offsetTop,paddingBottom:t.offsetBottom}}),t.items.map(function(e){var a=o(e.index);return i?React$2.createElement(m,u({key:a},ne$1(m,d),{index:e.index,height:t.itemHeight,width:t.itemWidth})):React$2.createElement(s,u({},ne$1(s,d),{className:n,"data-index":e.index,key:a}),r(e.index,d))}))}),Pe=function(t){var e=t.children,r=Ue("viewportDimensions"),o=I(function(t){r(t.getBoundingClientRect());});return React__namespace.createElement("div",{style:te,ref:o},e)},Oe=function(t){var e=t.children,r=Nt(Ue("windowViewportRect"),Ae("customScrollParent"));return React__namespace.createElement("div",{ref:r,style:te},e)},Me=systemToComponent(Be,{optional:{totalCount:"totalCount",overscan:"overscan",itemContent:"itemContent",components:"components",computeItemKey:"computeItemKey",initialItemCount:"initialItemCount",scrollSeekConfiguration:"scrollSeekConfiguration",listClassName:"listClassName",itemClassName:"itemClassName",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",item:"item",ItemContainer:"ItemContainer",ScrollContainer:"ScrollContainer",ListContainer:"ListContainer",scrollSeek:"scrollSeek"},methods:{scrollTo:"scrollTo",scrollBy:"scrollBy",scrollToIndex:"scrollToIndex"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange"}},React__namespace.memo(function(t){var e=u({},t),r=Ae("useWindowScroll"),o=Ae("customScrollParent"),i=o||r?Oe:Pe;return React__namespace.createElement(o||r?De:Ne,u({},e),React__namespace.createElement(i,null,React__namespace.createElement(Fe,null)))})),Ue=Me.usePublisher,Ae=Me.useEmitterValue,We=Me.useEmitter,Ne=ie({usePublisher:Ue,useEmitterValue:Ae,useEmitter:We}),De=ae({usePublisher:Ue,useEmitterValue:Ae,useEmitter:We});function Ge(t,e,n){return "normal"===e||null!=e&&e.endsWith("px")||n(t+" was not resolved to pixel value correctly",e,p$2.WARN),"normal"===e?0:parseInt(null!=e?e:"0",10)}var _e=system(function(){var t=statefulStream(function(t){return React__namespace.createElement("td",null,"Item $",t)}),r=statefulStream(null),o=statefulStream(null),i=statefulStream({}),a=statefulStream(jt),l=statefulStream(noop$2),s=function(t,n){return void 0===n&&(n=null),statefulStreamFromEmitter(pipe(i,map$1(function(e){return e[t]}),distinctUntilChanged()),n)};return {context:r,itemContent:t,fixedHeaderContent:o,components:i,computeItemKey:a,scrollerRef:l,TableComponent:s("Table","table"),TableHeadComponent:s("TableHead","thead"),TableBodyComponent:s("TableBody","tbody"),TableRowComponent:s("TableRow","tr"),ScrollerComponent:s("Scroller","div"),EmptyPlaceholder:s("EmptyPlaceholder"),ScrollSeekPlaceholder:s("ScrollSeekPlaceholder"),FillerRow:s("FillerRow")}}),je=system(function(t){return u({},t[0],t[1])},tup(At,_e)),Ke=function(t){return React__namespace.createElement("tr",null,React__namespace.createElement("td",{style:{height:t.height}}))},Ye=function(t){return React__namespace.createElement("tr",null,React__namespace.createElement("td",{style:{height:t.height,padding:0,border:0}}))},qe=React__namespace.memo(function(){var t=tn("listState"),e=Xe("sizeRanges"),r=tn("useWindowScroll"),o=tn("customScrollParent"),i=Xe("windowScrollContainerState"),a=Xe("scrollContainerState"),s=o||r?i:a,c=tn("itemContent"),m=tn("trackItemSizes"),d=C(e,tn("itemSize"),m,s,tn("log"),void 0,o),f=d.callbackRef,p=d.ref,h=React__namespace.useState(0),g=h[0],v=h[1];en("deviation",function(t){g!==t&&(p.current.style.marginTop=t+"px",v(t));});var S=tn("EmptyPlaceholder"),I=tn("ScrollSeekPlaceholder")||Ke,T=tn("FillerRow")||Ye,w=tn("TableBodyComponent"),x=tn("TableRowComponent"),b=tn("computeItemKey"),y=tn("isSeeking"),E=tn("paddingTopAddition"),H=tn("firstItemIndex"),R=tn("statefulTotalCount"),L=tn("context");if(0===R&&S)return React$2.createElement(S,ne$1(S,L));var k=t.offsetTop+E+g,z=t.offsetBottom,B=k>0?React__namespace.createElement(T,{height:k,key:"padding-top"}):null,F=z>0?React__namespace.createElement(T,{height:z,key:"padding-bottom"}):null,P=t.items.map(function(t){var e=t.originalIndex,n=b(e+H,t.data,L);return y?React$2.createElement(I,u({},ne$1(I,L),{key:n,index:t.index,height:t.size,type:t.type||"item"})):React$2.createElement(x,u({},ne$1(x,L),{key:n,"data-index":e,"data-known-size":t.size,"data-item-index":t.index,style:{overflowAnchor:"none"}}),c(t.index,t.data,L))});return React$2.createElement(w,u({ref:f,"data-test-id":"virtuoso-item-list"},ne$1(w,L)),[B].concat(P,[F]))}),Ze=function(t){var r=t.children,o=Xe("viewportHeight"),i=I(compose(o,function(t){return T(t,"height")}));return React__namespace.createElement("div",{style:te,ref:i,"data-viewport-type":"element"},r)},Je=function(t){var e=t.children,r=Nt(Xe("windowViewportRect"),tn("customScrollParent"));return React__namespace.createElement("div",{ref:r,style:te,"data-viewport-type":"window"},e)},$e=systemToComponent(je,{required:{},optional:{context:"context",followOutput:"followOutput",firstItemIndex:"firstItemIndex",itemContent:"itemContent",fixedHeaderContent:"fixedHeaderContent",overscan:"overscan",increaseViewportBy:"increaseViewportBy",totalCount:"totalCount",topItemCount:"topItemCount",initialTopMostItemIndex:"initialTopMostItemIndex",components:"components",groupCounts:"groupCounts",atBottomThreshold:"atBottomThreshold",atTopThreshold:"atTopThreshold",computeItemKey:"computeItemKey",defaultItemHeight:"defaultItemHeight",fixedItemHeight:"fixedItemHeight",itemSize:"itemSize",scrollSeekConfiguration:"scrollSeekConfiguration",data:"data",initialItemCount:"initialItemCount",initialScrollTop:"initialScrollTop",alignToBottom:"alignToBottom",useWindowScroll:"useWindowScroll",customScrollParent:"customScrollParent",scrollerRef:"scrollerRef",logLevel:"logLevel",react18ConcurrentRendering:"react18ConcurrentRendering"},methods:{scrollToIndex:"scrollToIndex",scrollIntoView:"scrollIntoView",scrollTo:"scrollTo",scrollBy:"scrollBy"},events:{isScrolling:"isScrolling",endReached:"endReached",startReached:"startReached",rangeChanged:"rangeChanged",atBottomStateChange:"atBottomStateChange",atTopStateChange:"atTopStateChange",totalListHeightChanged:"totalListHeightChanged",itemsRendered:"itemsRendered",groupIndices:"groupIndices"}},React__namespace.memo(function(t){var r=tn("useWindowScroll"),o=tn("customScrollParent"),i=Xe("fixedHeaderHeight"),a=tn("fixedHeaderContent"),l=tn("context"),s=I(compose(i,function(t){return T(t,"height")})),c=o||r?rn:nn,m=o||r?Je:Ze,d=tn("TableComponent"),f=tn("TableHeadComponent"),p=a?React__namespace.createElement(f,u({key:"TableHead",style:{zIndex:1,position:"sticky",top:0},ref:s},ne$1(f,l)),a()):null;return React__namespace.createElement(c,u({},t),React__namespace.createElement(m,null,React__namespace.createElement(d,u({style:{borderSpacing:0}},ne$1(d,l)),[p,React__namespace.createElement(qe,{key:"TableBody"})])))})),Xe=$e.usePublisher,tn=$e.useEmitterValue,en=$e.useEmitter,nn=ie({usePublisher:Xe,useEmitterValue:tn,useEmitter:en}),rn=ae({usePublisher:Xe,useEmitterValue:tn,useEmitter:en}),on$1=me;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
        var _a = React$2.useState(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];
        var _b = React$2.useState(true), isMessageListScrolledToBottom = _b[0], setIsMessageListScrolledToBottom = _b[1];
        /**
         * use the flag to avoid the initial "new messages" quick blink
         */
        var didMount = React$2.useRef(false);
        var lastMessageId = React$2.useRef('');
        var atBottom = React$2.useRef(false);
        React$2.useEffect(function () {
            var _a;
            if (hasMoreNewer) {
                setNewMessagesNotification(true);
                return;
            }
            /* handle scrolling behavior for new messages */
            if (!(messages === null || messages === void 0 ? void 0 : messages.length))
                return;
            var lastMessage = messages[messages.length - 1];
            var prevMessageId = lastMessageId.current;
            lastMessageId.current = lastMessage.id || ''; // update last message id
            /* do nothing if new messages are loaded from top(loadMore)  */
            if (lastMessage.id === prevMessageId)
                return;
            /* if list is already at the bottom return, followOutput will do the job */
            if (atBottom.current)
                return;
            /* if the new message belongs to current user scroll to bottom */
            if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {
                /* otherwise just show newMessage notification  */
                setNewMessagesNotification(true);
            }
            didMount.current = true;
        }, [currentUserId, messages, hasMoreNewer]);
        return {
            atBottom: atBottom,
            isMessageListScrolledToBottom: isMessageListScrolledToBottom,
            newMessagesNotification: newMessagesNotification,
            setIsMessageListScrolledToBottom: setIsMessageListScrolledToBottom,
            setNewMessagesNotification: setNewMessagesNotification,
        };
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var STATUSES_EXCLUDED_FROM_PREPEND = {
        failed: true,
        sending: true,
    };
    function usePrependedMessagesCount(messages, hasDateSeparator) {
        var firstRealMessageIndex = hasDateSeparator ? 1 : 0;
        var firstMessageOnFirstLoadedPage = React$2.useRef();
        var previousFirstMessageOnFirstLoadedPage = React$2.useRef();
        var previousNumItemsPrepended = React$2.useRef(0);
        var numItemsPrepended = React$2.useMemo(function () {
            var _a, _b;
            if (!messages || !messages.length) {
                previousNumItemsPrepended.current = 0;
                return 0;
            }
            var currentFirstMessage = messages === null || messages === void 0 ? void 0 : messages[firstRealMessageIndex];
            var noNewMessages = (currentFirstMessage === null || currentFirstMessage === void 0 ? void 0 : currentFirstMessage.id) === ((_a = previousFirstMessageOnFirstLoadedPage.current) === null || _a === void 0 ? void 0 : _a.id);
            // This is possible only, when sending messages very quickly (basically single char messages submitted like a crazy) in empty channel (first page)
            // Optimistic UI update, when sending messages, can lead to a situation, when
            // the order of the messages changes for a moment. This can happen, when a user
            // sends multiple messages withing few milliseconds. E.g. we send a message A
            // then message B. At first we have message array with both messages of status "sending"
            // then response for message A is received with a new - later - created_at timestamp
            // this leads to rearrangement of 1.B ("sending"), 2.A ("received"). Still firstMessageOnFirstLoadedPage.current
            // points to message A, but now this message has index 1 => previousNumItemsPrepended.current === 1
            // That in turn leads to incorrect index calculation in VirtualizedMessageList trying to access a message
            // at non-existent index. Therefore, we ignore messages of status "sending" / "failed" in order they are
            // not considered as prepended messages.
            var firstMsgMovedAfterMessagesInExcludedStatus = !!((currentFirstMessage === null || currentFirstMessage === void 0 ? void 0 : currentFirstMessage.status) && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessage.status]);
            if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {
                return previousNumItemsPrepended.current;
            }
            if (!firstMessageOnFirstLoadedPage.current) {
                firstMessageOnFirstLoadedPage.current = currentFirstMessage;
            }
            previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;
            // if new messages were prepended, find out how many
            // start with this number because there cannot be fewer prepended items than before
            for (var prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {
                var messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === ((_b = firstMessageOnFirstLoadedPage.current) === null || _b === void 0 ? void 0 : _b.id);
                if (messageIsFirstOnFirstLoadedPage) {
                    previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;
                    return previousNumItemsPrepended.current;
                }
            }
            // if no match has found, we have jumped - reset the prepended item count.
            firstMessageOnFirstLoadedPage.current = currentFirstMessage;
            previousNumItemsPrepended.current = 0;
            return 0;
            // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)
            // that's why the second dependency is necessary
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [firstRealMessageIndex, messages, messages === null || messages === void 0 ? void 0 : messages.length]);
        return numItemsPrepended;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function useShouldForceScrollToBottom(messages, currentUserId) {
        var lastFocusedOwnMessage = React$2.useRef('');
        var initialFocusRegistered = React$2.useRef(false);
        function recheckForNewOwnMessage() {
            var _a;
            if (messages && messages.length > 0) {
                var lastMessage = messages[messages.length - 1];
                if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) === currentUserId &&
                    lastFocusedOwnMessage.current !== lastMessage.id) {
                    lastFocusedOwnMessage.current = lastMessage.id;
                    return true;
                }
            }
            return false;
        }
        React$2.useEffect(function () {
            if (messages && messages.length && !initialFocusRegistered.current) {
                initialFocusRegistered.current = true;
                recheckForNewOwnMessage();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);
        return recheckForNewOwnMessage;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useGiphyPreview = function (separateGiphyPreview) {
        var _a = React$2.useState(), giphyPreviewMessage = _a[0], setGiphyPreviewMessage = _a[1];
        var client = useChatContext('useGiphyPreview').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                var message = event.message, user = event.user;
                if ((message === null || message === void 0 ? void 0 : message.command) === 'giphy' && (user === null || user === void 0 ? void 0 : user.id) === client.userID) {
                    setGiphyPreviewMessage(undefined);
                }
            };
            if (separateGiphyPreview)
                client.on('message.new', handleEvent);
            return function () { return client.off('message.new', handleEvent); };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [separateGiphyPreview]);
        return { giphyPreviewMessage: giphyPreviewMessage, setGiphyPreviewMessage: setGiphyPreviewMessage };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageSetKey = function (_a) {
        var messages = _a.messages;
        /**
         * Logic to update the key of the virtuoso component when the list jumps to a new location.
         */
        var _b = React$2.useState(+new Date()), messageSetKey = _b[0], setMessageSetKey = _b[1];
        var firstMessageId = React$2.useRef();
        React$2.useEffect(function () {
            var _a;
            var continuousSet = messages === null || messages === void 0 ? void 0 : messages.find(function (message) { return message.id === firstMessageId.current; });
            if (!continuousSet) {
                setMessageSetKey(+new Date());
            }
            firstMessageId.current = (_a = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a === void 0 ? void 0 : _a.id;
        }, [messages]);
        return {
            messageSetKey: messageSetKey,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useScrollToBottomOnNewMessage = function (_a) {
        var messages = _a.messages, scrollToBottom = _a.scrollToBottom, scrollToLatestMessageOnFocus = _a.scrollToLatestMessageOnFocus;
        var _b = React__default["default"].useState(false), newMessagesReceivedInBackground = _b[0], setNewMessagesReceivedInBackground = _b[1];
        var resetNewMessagesReceivedInBackground = React$2.useCallback(function () {
            setNewMessagesReceivedInBackground(false);
        }, []);
        React$2.useEffect(function () {
            setNewMessagesReceivedInBackground(true);
        }, [messages]);
        var scrollToBottomIfConfigured = React$2.useCallback(function (event) {
            if (!scrollToLatestMessageOnFocus ||
                !newMessagesReceivedInBackground ||
                event.target !== window)
                return;
            setTimeout(scrollToBottom, 100);
        }, [scrollToLatestMessageOnFocus, scrollToBottom, newMessagesReceivedInBackground]);
        React$2.useEffect(function () {
            if (typeof window !== 'undefined') {
                window.addEventListener('focus', scrollToBottomIfConfigured);
                window.addEventListener('blur', resetNewMessagesReceivedInBackground);
            }
            return function () {
                window.removeEventListener('focus', scrollToBottomIfConfigured);
                window.removeEventListener('blur', resetNewMessagesReceivedInBackground);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [scrollToBottomIfConfigured]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Controls the logic when an `UnreadMessagesNotification` component should be shown.
     * In virtualized message list there is no notion of being scrolled below or above `UnreadMessagesSeparator`.
     * Therefore, the `UnreadMessagesNotification` component is rendered based on timestamps.
     * If the there are unread messages in the channel and the `VirtualizedMessageList` renders
     * messages created later than the last read message in the channel, then the
     * `UnreadMessagesNotification` component is rendered. This is an approximate equivalent to being
     * scrolled below the `UnreadMessagesNotification` component.
     * @param lastRead
     * @param showAlways
     * @param unreadCount
     */
    var useUnreadMessagesNotificationVirtualized = function (_a) {
        var lastRead = _a.lastRead, showAlways = _a.showAlways, unreadCount = _a.unreadCount;
        var _b = React$2.useState(false), show = _b[0], setShow = _b[1];
        var toggleShowUnreadMessagesNotification = React$2.useCallback(function (renderedMessages) {
            if (!unreadCount)
                return;
            var firstRenderedMessage = renderedMessages[0];
            var lastRenderedMessage = renderedMessages.slice(-1)[0];
            if (!(firstRenderedMessage && lastRenderedMessage))
                return;
            var scrolledBelowSeparator = !!lastRead &&
                new Date(firstRenderedMessage.created_at).getTime() > lastRead.getTime();
            var scrolledAboveSeparator = !!lastRead &&
                new Date(lastRenderedMessage.created_at).getTime() < lastRead.getTime();
            setShow(showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator);
        }, [lastRead, showAlways, unreadCount]);
        React$2.useEffect(function () {
            if (!unreadCount)
                setShow(false);
        }, [unreadCount]);
        return { show: show, toggleShowUnreadMessagesNotification: toggleShowUnreadMessagesNotification };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var selectColor = function (number, dark) {
        var hue = number * 137.508; // use golden angle approximation
        return "hsl(".concat(hue, ",").concat(dark ? '50%' : '85%', ", ").concat(dark ? '75%' : '55%', ")");
    };
    var hashUserId = function (userId) {
        var hash = userId.split('').reduce(function (acc, c) {
            acc = (acc << 5) - acc + c.charCodeAt(0); // eslint-disable-line
            return acc & acc; // eslint-disable-line no-bitwise
        }, 0);
        return Math.abs(hash) / Math.pow(10, Math.ceil(Math.log10(Math.abs(hash) + 1)));
    };
    var getUserColor = function (theme, userId) {
        return selectColor(hashUserId(userId), theme.includes('dark'));
    };
    var UnMemoizedFixedHeightMessage = function (props) {
        var _a, _b, _c, _d;
        var propGroupedByUser = props.groupedByUser, propMessage = props.message;
        var theme = useChatContext('FixedHeightMessage').theme;
        var _e = useMessageContext('FixedHeightMessage'), contextGroupedByUser = _e.groupedByUser, contextMessage = _e.message;
        var _f = useComponentContext('FixedHeightMessage').MessageDeleted, MessageDeleted$1 = _f === void 0 ? MessageDeleted : _f;
        var userLanguage = useTranslationContext('FixedHeightMessage').userLanguage;
        var groupedByUser = propGroupedByUser !== undefined ? propGroupedByUser : contextGroupedByUser;
        var message = propMessage || contextMessage;
        var handleAction = useActionHandler(message);
        var handleDelete = useDeleteHandler(message);
        var role = useUserRole(message);
        var messageTextToRender = ((_a = message === null || message === void 0 ? void 0 : message.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) || (message === null || message === void 0 ? void 0 : message.text);
        var renderedText = React$2.useMemo(function () { return renderText(messageTextToRender, message.mentioned_users); }, [
            message.mentioned_users,
            messageTextToRender,
        ]);
        var userId = ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) || '';
        var userColor = React$2.useMemo(function () { return getUserColor(theme, userId); }, [userId, theme]);
        var messageActionsHandler = React$2.useCallback(function () { return getMessageActions(['delete'], { canDelete: role.canDelete }); }, [role]);
        var images = (_c = message === null || message === void 0 ? void 0 : message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {
            var type = _a.type;
            return type === 'image';
        });
        return (React__default["default"].createElement("div", { className: "str-chat__virtual-message__wrapper ".concat(role.isMyMessage ? 'str-chat__virtual-message__wrapper--me' : '', " ").concat(groupedByUser ? 'str-chat__virtual-message__wrapper--group' : ''), key: message.id },
            message.user && (React__default["default"].createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, shape: 'rounded', size: 38, user: message.user })),
            React__default["default"].createElement("div", { className: 'str-chat__virtual-message__content' },
                React__default["default"].createElement("div", { className: 'str-chat__virtual-message__meta' },
                    React__default["default"].createElement("div", { className: 'str-chat__virtual-message__author', style: { color: userColor } },
                        React__default["default"].createElement("strong", null, ((_d = message.user) === null || _d === void 0 ? void 0 : _d.name) || 'unknown'))),
                message.deleted_at || message.type === 'deleted' ? (React__default["default"].createElement(MessageDeleted$1, { message: message })) : (React__default["default"].createElement(React__default["default"].Fragment, null,
                    images && React__default["default"].createElement(Gallery, { images: images }),
                    React__default["default"].createElement("div", { className: 'str-chat__virtual-message__text', "data-testid": 'msg-text' },
                        renderedText,
                        message.mml && (React__default["default"].createElement(MML$1, { actionHandler: handleAction, align: 'left', source: message.mml })),
                        React__default["default"].createElement("div", { className: 'str-chat__virtual-message__data' },
                            React__default["default"].createElement(MessageActions, { customWrapperClass: 'str-chat__virtual-message__actions', getMessageActions: messageActionsHandler, handleDelete: handleDelete, message: message, mine: function () { return role.isMyMessage; } }),
                            React__default["default"].createElement("span", { className: 'str-chat__virtual-message__date' },
                                React__default["default"].createElement(MessageTimestamp, { customClass: 'str-chat__message-simple-timestamp', message: message })))))))));
    };
    /**
     * @deprecated - This UI component will be removed in the next major release.
     *
     * FixedHeightMessage - This component renders a single message.
     * It uses fixed height elements to make sure it works well in VirtualizedMessageList
     */
    var FixedHeightMessage = React__default["default"].memo(UnMemoizedFixedHeightMessage);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var PREPEND_OFFSET = Math.pow(10, 7);
    function calculateItemIndex(virtuosoIndex, numItemsPrepended) {
        return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
    }
    function calculateFirstItemIndex(numItemsPrepended) {
        return PREPEND_OFFSET - numItemsPrepended;
    }
    var makeItemsRenderedHandler = function (renderedItemsActions, processedMessages) {
        return lodash_throttle(function (items) {
            var renderedMessages = items
                .map(function (item) {
                if (!item.originalIndex)
                    return undefined;
                return processedMessages[calculateItemIndex(item.originalIndex, PREPEND_OFFSET)];
            })
                .filter(function (msg) { return !!msg; });
            renderedItemsActions.forEach(function (action) {
                return action(renderedMessages);
            });
        }, 200);
    };
    // using 'display: inline-block'
    // traps CSS margins of the item elements, preventing incorrect item measurements
    var Item$1 = function (_a) {
        var _b;
        var _c;
        var context = _a.context, props = __rest(_a, ["context"]);
        if (!context)
            return React__default["default"].createElement(React__default["default"].Fragment, null);
        var message = context.processedMessages[calculateItemIndex(props['data-item-index'], context.numItemsPrepended)];
        var groupStyles = context.messageGroupStyles[message.id];
        return (React__default["default"].createElement("div", __assign({}, props, { className: ((_c = context === null || context === void 0 ? void 0 : context.customClasses) === null || _c === void 0 ? void 0 : _c.virtualMessage) ||
                clsx('str-chat__virtual-list-message-wrapper str-chat__li', (_b = {},
                    _b["str-chat__li--".concat(groupStyles)] = groupStyles,
                    _b)) })));
    };
    var Header = function (_a) {
        var context = _a.context;
        var _b = useComponentContext('VirtualizedMessageListHeader').LoadingIndicator, LoadingIndicator$1 = _b === void 0 ? LoadingIndicator : _b;
        if (!(context === null || context === void 0 ? void 0 : context.loadingMore))
            return null;
        return LoadingIndicator$1 ? (React__default["default"].createElement("div", { className: 'str-chat__virtual-list__loading' },
            React__default["default"].createElement(LoadingIndicator$1, { size: 20 }))) : ((context === null || context === void 0 ? void 0 : context.head) || null);
    };
    var EmptyPlaceholder = function (_a) {
        var context = _a.context;
        var _b = useComponentContext('VirtualizedMessageList').EmptyStateIndicator, EmptyStateIndicator$1 = _b === void 0 ? EmptyStateIndicator : _b;
        return (React__default["default"].createElement(React__default["default"].Fragment, null, EmptyStateIndicator$1 && (React__default["default"].createElement(EmptyStateIndicator$1, { listType: (context === null || context === void 0 ? void 0 : context.threadList) ? 'thread' : 'message' }))));
    };
    var Footer = function () {
        var TypingIndicator = useComponentContext('VirtualizedMessageList').TypingIndicator;
        return TypingIndicator ? React__default["default"].createElement(TypingIndicator, { avatarSize: 24 }) : null;
    };
    var messageRenderer = function (virtuosoIndex, _data, virtuosoContext) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var additionalMessageInputProps = virtuosoContext.additionalMessageInputProps, closeReactionSelectorOnClick = virtuosoContext.closeReactionSelectorOnClick, customMessageActions = virtuosoContext.customMessageActions, customMessageRenderer = virtuosoContext.customMessageRenderer, DateSeparator = virtuosoContext.DateSeparator, firstUnreadMessageId = virtuosoContext.firstUnreadMessageId, lastReadMessageId = virtuosoContext.lastReadMessageId, lastReceivedMessageId = virtuosoContext.lastReceivedMessageId, MessageUIComponent = virtuosoContext.Message, messageActions = virtuosoContext.messageActions, MessageSystem = virtuosoContext.MessageSystem, numItemsPrepended = virtuosoContext.numItemsPrepended, ownMessagesReadByOthers = virtuosoContext.ownMessagesReadByOthers, messageList = virtuosoContext.processedMessages, shouldGroupByUser = virtuosoContext.shouldGroupByUser, sortReactionDetails = virtuosoContext.sortReactionDetails, sortReactions = virtuosoContext.sortReactions, _k = virtuosoContext.unreadMessageCount, unreadMessageCount = _k === void 0 ? 0 : _k, UnreadMessagesSeparator = virtuosoContext.UnreadMessagesSeparator, virtuosoRef = virtuosoContext.virtuosoRef;
        var streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);
        if (customMessageRenderer) {
            return customMessageRenderer(messageList, streamMessageIndex);
        }
        var message = messageList[streamMessageIndex];
        if (!message)
            return React__default["default"].createElement("div", { style: { height: '1px' } }); // returning null or zero height breaks the virtuoso
        if (message.customType === CUSTOM_MESSAGE_TYPE.date && message.date && isDate(message.date)) {
            return DateSeparator ? React__default["default"].createElement(DateSeparator, { date: message.date, unread: message.unread }) : null;
        }
        if (message.type === 'system') {
            return MessageSystem ? React__default["default"].createElement(MessageSystem, { message: message }) : null;
        }
        var groupedByUser = shouldGroupByUser &&
            streamMessageIndex > 0 &&
            ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = messageList[streamMessageIndex - 1].user) === null || _b === void 0 ? void 0 : _b.id);
        var firstOfGroup = shouldGroupByUser && ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_e = (_d = messageList[streamMessageIndex - 1]) === null || _d === void 0 ? void 0 : _d.user) === null || _e === void 0 ? void 0 : _e.id);
        var endOfGroup = shouldGroupByUser && ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_h = (_g = messageList[streamMessageIndex + 1]) === null || _g === void 0 ? void 0 : _g.user) === null || _h === void 0 ? void 0 : _h.id);
        var isNewestMessage = lastReadMessageId === lastReceivedMessageId;
        var isLastReadMessage = message.id === lastReadMessageId;
        var showUnreadSeparator = isLastReadMessage && !isNewestMessage && (firstUnreadMessageId || unreadMessageCount > 0); // unread count can be 0 if the user marks unread only own messages
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(Message, { additionalMessageInputProps: additionalMessageInputProps, autoscrollToBottom: (_j = virtuosoRef.current) === null || _j === void 0 ? void 0 : _j.autoscrollToBottom, closeReactionSelectorOnClick: closeReactionSelectorOnClick, customMessageActions: customMessageActions, endOfGroup: endOfGroup, firstOfGroup: firstOfGroup, groupedByUser: groupedByUser, lastReceivedId: lastReceivedMessageId, message: message, Message: MessageUIComponent, messageActions: messageActions, readBy: ownMessagesReadByOthers[message.id] || [], sortReactionDetails: sortReactionDetails, sortReactions: sortReactions }),
            showUnreadSeparator && (React__default["default"].createElement("div", { className: 'str-chat__unread-messages-separator-wrapper' },
                React__default["default"].createElement(UnreadMessagesSeparator, { unreadCount: unreadMessageCount })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function captureResizeObserverExceededError(e) {
        if (e.message === 'ResizeObserver loop completed with undelivered notifications.' ||
            e.message === 'ResizeObserver loop limit exceeded') {
            e.stopImmediatePropagation();
        }
    }
    function useCaptureResizeObserverExceededError() {
        React$2.useEffect(function () {
            window.addEventListener('error', captureResizeObserverExceededError);
            return function () {
                window.removeEventListener('error', captureResizeObserverExceededError);
            };
        }, []);
    }
    function fractionalItemSize(element) {
        return element.getBoundingClientRect().height;
    }
    function findMessageIndex(messages, id) {
        return messages.findIndex(function (message) { return message.id === id; });
    }
    function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
        if (highlightedMessageId) {
            var index = findMessageIndex(messages, highlightedMessageId);
            if (index !== -1) {
                return { align: 'center', index: index };
            }
        }
        return messages.length - 1;
    }
    var VirtualizedMessageListWithContext = function (props) {
        var _a, _b;
        var additionalMessageInputProps = props.additionalMessageInputProps, _c = props.additionalVirtuosoProps, additionalVirtuosoProps = _c === void 0 ? {} : _c, channel = props.channel, channelUnreadUiState = props.channelUnreadUiState, closeReactionSelectorOnClick = props.closeReactionSelectorOnClick, customMessageActions = props.customMessageActions, customMessageRenderer = props.customMessageRenderer, defaultItemHeight = props.defaultItemHeight, _d = props.disableDateSeparator, disableDateSeparator = _d === void 0 ? true : _d, groupStyles = props.groupStyles, hasMoreNewer = props.hasMoreNewer, head = props.head, _e = props.hideDeletedMessages, hideDeletedMessages = _e === void 0 ? false : _e, _f = props.hideNewMessageSeparator, hideNewMessageSeparator = _f === void 0 ? false : _f, highlightedMessageId = props.highlightedMessageId, jumpToLatestMessage = props.jumpToLatestMessage, loadingMore = props.loadingMore, loadMore = props.loadMore, loadMoreNewer = props.loadMoreNewer, MessageUIComponentFromProps = props.Message, messageActions = props.messageActions, _g = props.messageLimit, messageLimit = _g === void 0 ? DEFAULT_NEXT_CHANNEL_PAGE_SIZE : _g, messages = props.messages, notifications = props.notifications, 
        // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
        _h = props.overscan, 
        // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
        overscan = _h === void 0 ? 0 : _h, read = props.read, _j = props.returnAllReadData, returnAllReadData = _j === void 0 ? false : _j, scrollSeekPlaceHolder = props.scrollSeekPlaceHolder, _k = props.scrollToLatestMessageOnFocus, scrollToLatestMessageOnFocus = _k === void 0 ? false : _k, _l = props.separateGiphyPreview, separateGiphyPreview = _l === void 0 ? false : _l, _m = props.shouldGroupByUser, shouldGroupByUser = _m === void 0 ? false : _m, showUnreadNotificationAlways = props.showUnreadNotificationAlways, sortReactionDetails = props.sortReactionDetails, sortReactions = props.sortReactions, _o = props.stickToBottomScrollBehavior, stickToBottomScrollBehavior = _o === void 0 ? 'smooth' : _o, suppressAutoscroll = props.suppressAutoscroll, threadList = props.threadList;
        var virtuosoComponentsFromProps = additionalVirtuosoProps.components, overridingVirtuosoProps = __rest(additionalVirtuosoProps, ["components"]);
        // Stops errors generated from react-virtuoso to bubble up
        // to Sentry or other tracking tools.
        useCaptureResizeObserverExceededError();
        var _p = useComponentContext('VirtualizedMessageList'), DateSeparator = _p.DateSeparator, _q = _p.GiphyPreviewMessage, GiphyPreviewMessage$1 = _q === void 0 ? GiphyPreviewMessage : _q, _r = _p.MessageListNotifications, MessageListNotifications$1 = _r === void 0 ? MessageListNotifications : _r, _s = _p.MessageNotification, MessageNotification$1 = _s === void 0 ? MessageNotification : _s, MessageSystem = _p.MessageSystem, _t = _p.UnreadMessagesNotification, UnreadMessagesNotification$1 = _t === void 0 ? UnreadMessagesNotification : _t, UnreadMessagesSeparator = _p.UnreadMessagesSeparator, _u = _p.VirtualMessage, MessageUIComponentFromContext = _u === void 0 ? MessageSimple : _u;
        var MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;
        var _v = useChatContext('VirtualizedMessageList'), client = _v.client, customClasses = _v.customClasses;
        var virtuoso = React$2.useRef(null);
        var lastRead = React$2.useMemo(function () { var _a; return (_a = channel.lastRead) === null || _a === void 0 ? void 0 : _a.call(channel); }, [channel]);
        var _w = useUnreadMessagesNotificationVirtualized({
            lastRead: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read,
            showAlways: !!showUnreadNotificationAlways,
            unreadCount: (_a = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _a !== void 0 ? _a : 0,
        }), showUnreadMessagesNotification = _w.show, toggleShowUnreadMessagesNotification = _w.toggleShowUnreadMessagesNotification;
        var _x = useGiphyPreview(separateGiphyPreview), giphyPreviewMessage = _x.giphyPreviewMessage, setGiphyPreviewMessage = _x.setGiphyPreviewMessage;
        var processedMessages = React$2.useMemo(function () {
            if (typeof messages === 'undefined') {
                return [];
            }
            if (disableDateSeparator &&
                !hideDeletedMessages &&
                hideNewMessageSeparator &&
                !separateGiphyPreview) {
                return messages;
            }
            return processMessages({
                enableDateSeparator: !disableDateSeparator,
                hideDeletedMessages: hideDeletedMessages,
                hideNewMessageSeparator: hideNewMessageSeparator,
                lastRead: lastRead,
                messages: messages,
                setGiphyPreviewMessage: setGiphyPreviewMessage,
                userId: client.userID || '',
            });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            disableDateSeparator,
            hideDeletedMessages,
            hideNewMessageSeparator,
            lastRead,
            messages,
            messages === null || messages === void 0 ? void 0 : messages.length,
            client.userID,
        ]);
        // get the mapping of own messages to array of users who read them
        var ownMessagesReadByOthers = useLastReadData({
            messages: processedMessages,
            read: read,
            returnAllReadData: returnAllReadData,
            userID: client.userID,
        });
        var lastReceivedMessageId = React$2.useMemo(function () { return getLastReceived(processedMessages); }, [
            processedMessages,
        ]);
        var groupStylesFn = groupStyles || getGroupStyles;
        var messageGroupStyles = React$2.useMemo(function () {
            return processedMessages.reduce(function (acc, message, i) {
                var style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser);
                if (style)
                    acc[message.id] = style;
                return acc;
            }, {});
        }, 
        // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [processedMessages.length, shouldGroupByUser, groupStylesFn]);
        var _y = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer), atBottom = _y.atBottom, isMessageListScrolledToBottom = _y.isMessageListScrolledToBottom, newMessagesNotification = _y.newMessagesNotification, setIsMessageListScrolledToBottom = _y.setIsMessageListScrolledToBottom, setNewMessagesNotification = _y.setNewMessagesNotification;
        useMarkRead({
            isMessageListScrolledToBottom: isMessageListScrolledToBottom,
            messageListIsThread: !!threadList,
            unreadCount: (_b = channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages) !== null && _b !== void 0 ? _b : 0,
            wasMarkedUnread: !!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id),
        });
        var scrollToBottom = React$2.useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!hasMoreNewer) return [3 /*break*/, 2];
                        return [4 /*yield*/, jumpToLatestMessage()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        if (virtuoso.current) {
                            virtuoso.current.scrollToIndex(processedMessages.length - 1);
                        }
                        setNewMessagesNotification(false);
                        return [2 /*return*/];
                }
            });
        }); }, [
            virtuoso,
            processedMessages,
            setNewMessagesNotification,
            // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
            processedMessages.length,
            hasMoreNewer,
            jumpToLatestMessage,
        ]);
        useScrollToBottomOnNewMessage({ messages: messages, scrollToBottom: scrollToBottom, scrollToLatestMessageOnFocus: scrollToLatestMessageOnFocus });
        var numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);
        var messageSetKey = useMessageSetKey({ messages: messages }).messageSetKey;
        var shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);
        var handleItemsRendered = React$2.useMemo(function () { return makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages); }, [processedMessages, toggleShowUnreadMessagesNotification]);
        var followOutput = function (isAtBottom) {
            if (hasMoreNewer || suppressAutoscroll) {
                return false;
            }
            if (shouldForceScrollToBottom()) {
                return isAtBottom ? stickToBottomScrollBehavior : 'auto';
            }
            // a message from another user has been received - don't scroll to bottom unless already there
            return isAtBottom ? stickToBottomScrollBehavior : false;
        };
        var computeItemKey = React$2.useCallback(function (index, _, _a) {
            var numItemsPrepended = _a.numItemsPrepended, processedMessages = _a.processedMessages;
            return processedMessages[calculateItemIndex(index, numItemsPrepended)].id;
        }, []);
        var atBottomStateChange = function (isAtBottom) {
            atBottom.current = isAtBottom;
            setIsMessageListScrolledToBottom(isAtBottom);
            if (isAtBottom) {
                loadMoreNewer === null || loadMoreNewer === void 0 ? void 0 : loadMoreNewer(messageLimit);
                setNewMessagesNotification === null || setNewMessagesNotification === void 0 ? void 0 : setNewMessagesNotification(false);
            }
        };
        var atTopStateChange = function (isAtTop) {
            if (isAtTop) {
                loadMore === null || loadMore === void 0 ? void 0 : loadMore(messageLimit);
            }
        };
        React$2.useEffect(function () {
            var scrollTimeout;
            if (highlightedMessageId) {
                var index_1 = findMessageIndex(processedMessages, highlightedMessageId);
                if (index_1 !== -1) {
                    scrollTimeout = setTimeout(function () {
                        var _a;
                        (_a = virtuoso.current) === null || _a === void 0 ? void 0 : _a.scrollToIndex({ align: 'center', index: index_1 });
                    }, 0);
                }
            }
            return function () {
                clearTimeout(scrollTimeout);
            };
        }, [highlightedMessageId, processedMessages]);
        if (!processedMessages)
            return null;
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(MessageListMainPanel, null,
                !threadList && showUnreadMessagesNotification && (React__default["default"].createElement(UnreadMessagesNotification$1, { unreadCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages })),
                React__default["default"].createElement("div", { className: (customClasses === null || customClasses === void 0 ? void 0 : customClasses.virtualizedMessageList) || 'str-chat__virtual-list' },
                    React__default["default"].createElement(on$1, __assign({ atBottomStateChange: atBottomStateChange, atBottomThreshold: 100, atTopStateChange: atTopStateChange, atTopThreshold: 100, className: 'str-chat__message-list-scroll', components: __assign({ EmptyPlaceholder: EmptyPlaceholder, Footer: Footer, Header: Header, Item: Item$1 }, virtuosoComponentsFromProps), computeItemKey: computeItemKey, context: {
                            additionalMessageInputProps: additionalMessageInputProps,
                            closeReactionSelectorOnClick: closeReactionSelectorOnClick,
                            customClasses: customClasses,
                            customMessageActions: customMessageActions,
                            customMessageRenderer: customMessageRenderer,
                            DateSeparator: DateSeparator,
                            firstUnreadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.first_unread_message_id,
                            head: head,
                            lastReadMessageId: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id,
                            lastReceivedMessageId: lastReceivedMessageId,
                            loadingMore: loadingMore,
                            Message: MessageUIComponent,
                            messageActions: messageActions,
                            messageGroupStyles: messageGroupStyles,
                            MessageSystem: MessageSystem,
                            numItemsPrepended: numItemsPrepended,
                            ownMessagesReadByOthers: ownMessagesReadByOthers,
                            processedMessages: processedMessages,
                            shouldGroupByUser: shouldGroupByUser,
                            sortReactionDetails: sortReactionDetails,
                            sortReactions: sortReactions,
                            threadList: threadList,
                            unreadMessageCount: channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages,
                            UnreadMessagesSeparator: UnreadMessagesSeparator,
                            virtuosoRef: virtuoso,
                        }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput: followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan: overscan, ref: virtuoso, style: { overflowX: 'hidden' }, totalCount: processedMessages.length }, overridingVirtuosoProps, (scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}), (defaultItemHeight ? { defaultItemHeight: defaultItemHeight } : {}))))),
            React__default["default"].createElement(MessageListNotifications$1, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification$1, notifications: notifications, scrollToBottom: scrollToBottom, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages }),
            giphyPreviewMessage && React__default["default"].createElement(GiphyPreviewMessage$1, { message: giphyPreviewMessage })));
    };
    /**
     * The VirtualizedMessageList component renders a list of messages in a virtualized list.
     * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).
     */
    function VirtualizedMessageList(props) {
        var _a = useChannelActionContext('VirtualizedMessageList'), jumpToLatestMessage = _a.jumpToLatestMessage, loadMore = _a.loadMore, loadMoreNewer = _a.loadMoreNewer;
        var _b = useChannelStateContext('VirtualizedMessageList'), channel = _b.channel, channelUnreadUiState = _b.channelUnreadUiState, hasMore = _b.hasMore, hasMoreNewer = _b.hasMoreNewer, highlightedMessageId = _b.highlightedMessageId, loadingMore = _b.loadingMore, loadingMoreNewer = _b.loadingMoreNewer, contextMessages = _b.messages, notifications = _b.notifications, read = _b.read, suppressAutoscroll = _b.suppressAutoscroll;
        var messages = props.messages || contextMessages;
        return (React__default["default"].createElement(VirtualizedMessageListWithContext, __assign({ channel: channel, channelUnreadUiState: channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId: highlightedMessageId, jumpToLatestMessage: jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore: loadMore, loadMoreNewer: loadMoreNewer, messages: messages, notifications: notifications, read: read, suppressAutoscroll: suppressAutoscroll }, props)));
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelContainerClasses = function (_a) {
        var _b, _c, _d;
        var customClasses = _a.customClasses;
        var useImageFlagEmojisOnWindows = useChatContext('Channel').useImageFlagEmojisOnWindows;
        return {
            channelClass: (_b = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channel) !== null && _b !== void 0 ? _b : 'str-chat-channel str-chat__channel',
            chatClass: (_c = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _c !== void 0 ? _c : 'str-chat',
            chatContainerClass: (_d = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chatContainer) !== null && _d !== void 0 ? _d : 'str-chat__container',
            windowsEmojiClass: useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/)
                ? 'str-chat--windows-flags'
                : '',
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var makeAddNotifications = function (setNotifications, notificationTimeouts) { return function (text, type) {
        if (typeof text !== 'string' || (type !== 'success' && type !== 'error')) {
            return;
        }
        var id = nanoid();
        setNotifications(function (prevNotifications) { return __spreadArray(__spreadArray([], prevNotifications, true), [{ id: id, text: text, type: type }], false); });
        var timeout = setTimeout(function () {
            return setNotifications(function (prevNotifications) {
                return prevNotifications.filter(function (notification) { return notification.id !== id; });
            });
        }, 5000);
        notificationTimeouts.push(timeout);
    }; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * @deprecated will be removed in the next major release
     */
    var generateRandomId = nanoid;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * prevent from duplicate invocation of channel.watch()
     * when events 'notification.message_new' and 'notification.added_to_channel' arrive at the same time
     */
    var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};
    /**
     * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.
     * @param client
     * @param members
     * @param options
     * @param type
     * @param id
     * @param channel
     */
    var getChannel = function (_a) {
        var channel = _a.channel, client = _a.client, id = _a.id, members = _a.members, options = _a.options, type = _a.type;
        return __awaiter(void 0, void 0, void 0, function () {
            var theChannel, originalCid, queryPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!channel && !type) {
                            throw new Error('Channel or channel type have to be provided to query a channel.');
                        }
                        theChannel = channel || client.channel(type, id, { members: members });
                        originalCid = (theChannel === null || theChannel === void 0 ? void 0 : theChannel.id)
                            ? theChannel.cid
                            : members && members.length
                                ? generateChannelTempCid(theChannel.type, members)
                                : undefined;
                        if (!originalCid) {
                            throw new Error('Channel ID or channel members array have to be provided to query a channel.');
                        }
                        queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
                        if (!queryPromise) return [3 /*break*/, 2];
                        return [4 /*yield*/, queryPromise];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = theChannel.watch(options);
                        return [4 /*yield*/, WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid]];
                    case 3:
                        _b.sent();
                        delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
                        _b.label = 4;
                    case 4: return [2 /*return*/, theChannel];
                }
            });
        });
    };
    // Channels created without ID need to be referenced by an identifier until the back-end generates the final ID.
    var generateChannelTempCid = function (channelType, members) {
        if (!members)
            return;
        var membersStr = __spreadArray([], members, true).sort().join(',');
        return "".concat(channelType, ":!members-").concat(membersStr);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var getImageAttachmentConfiguration = function (attachment, element) {
        var newUrl = undefined;
        var urlToTest = attachment.image_url || attachment.thumb_url || '';
        if (test$1(urlToTest, 'url')) {
            var url = new URL(urlToTest);
            var resizeDimensions = getSizingRestrictions(url, element);
            if (resizeDimensions) {
                // Apply 2x for retina displays
                resizeDimensions.height *= 2;
                resizeDimensions.width *= 2;
                addResizingParamsToUrl(resizeDimensions, url);
            }
            newUrl = url.href;
        }
        return {
            url: newUrl || '',
        };
    };
    var getVideoAttachmentConfiguration = function (attachment, element, shouldGenerateVideoThumbnail) {
        var thumbUrl = undefined;
        if (attachment.thumb_url &&
            shouldGenerateVideoThumbnail &&
            test$1(attachment.thumb_url, 'url')) {
            var url = new URL(attachment.thumb_url);
            var resizeDimensions = getSizingRestrictions(url, element);
            if (resizeDimensions) {
                // Apply 2x for retina displays
                resizeDimensions.height *= 2;
                resizeDimensions.width *= 2;
                addResizingParamsToUrl(resizeDimensions, url);
            }
            thumbUrl = url.href;
        }
        return {
            thumbUrl: thumbUrl,
            url: attachment.asset_url || '',
        };
    };
    var getSizingRestrictions = function (url, htmlElement) {
        var urlParams = url.searchParams;
        var originalHeight = Number(urlParams.get('oh')) || 1;
        var originalWidth = Number(urlParams.get('ow')) || 1;
        var cssSizeRestriction = getCSSSizeRestrictions(htmlElement);
        var resizeDimensions;
        if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
            resizeDimensions = getResizeDimensions(originalHeight, originalWidth, 
            /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
            cssSizeRestriction.maxHeight || cssSizeRestriction.height, cssSizeRestriction.maxWidth);
        }
        else {
            resizeDimensions = undefined;
        }
        return resizeDimensions;
    };
    var getResizeDimensions = function (originalHeight, originalWidth, maxHeight, maxWidth) { return ({
        height: Math.round(Math.max(maxHeight, (maxWidth / originalWidth) * originalHeight)),
        width: Math.round(Math.max(maxHeight, (maxWidth / originalHeight) * originalWidth)),
    }); };
    var getCSSSizeRestrictions = function (htmlElement) {
        var computedStylesheet = getComputedStyle(htmlElement);
        var height = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('height'));
        var maxHeight = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-height'));
        var maxWidth = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-width'));
        if (!((height || maxHeight) && maxWidth)) {
            console.warn("Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing");
        }
        return { height: height, maxHeight: maxHeight, maxWidth: maxWidth };
    };
    var getValueRepresentationOfCSSProperty = function (property) {
        if (!property.endsWith('px')) {
            return undefined;
        }
        var number = parseFloat(property);
        return isNaN(number) ? undefined : number;
    };
    var addResizingParamsToUrl = function (resizeDimensions, url) {
        url.searchParams.set('h', resizeDimensions.height.toString());
        url.searchParams.set('w', resizeDimensions.width.toString());
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Component to display system and channel event messages
     */
    var UnMemoizedEventComponent = function (props) {
        var _a, _b, _c;
        var _d = props.Avatar, Avatar$1 = _d === void 0 ? Avatar : _d, message = props.message;
        var tDateTimeParser = useTranslationContext('EventComponent').tDateTimeParser;
        var _e = message.created_at, created_at = _e === void 0 ? '' : _e, event = message.event, text = message.text, type = message.type;
        var getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser: tDateTimeParser };
        if (type === 'system')
            return (React__default["default"].createElement("div", { className: 'str-chat__message--system', "data-testid": 'message-system' },
                React__default["default"].createElement("div", { className: 'str-chat__message--system__text' },
                    React__default["default"].createElement("div", { className: 'str-chat__message--system__line' }),
                    React__default["default"].createElement("p", null, text),
                    React__default["default"].createElement("div", { className: 'str-chat__message--system__line' })),
                React__default["default"].createElement("div", { className: 'str-chat__message--system__date' },
                    React__default["default"].createElement("strong", null,
                        getDateString(__assign(__assign({}, getDateOptions), { format: 'dddd' })),
                        " "),
                    "at ",
                    getDateString(__assign(__assign({}, getDateOptions), { format: 'hh:mm A' })))));
        if ((event === null || event === void 0 ? void 0 : event.type) === 'member.removed' || (event === null || event === void 0 ? void 0 : event.type) === 'member.added') {
            var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);
            var sentence = "".concat(name_1, " ").concat(event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat');
            return (React__default["default"].createElement("div", { className: 'str-chat__event-component__channel-event' },
                React__default["default"].createElement(Avatar$1, { image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image, name: name_1, user: event.user }),
                React__default["default"].createElement("div", { className: 'str-chat__event-component__channel-event__content' },
                    React__default["default"].createElement("em", { className: 'str-chat__event-component__channel-event__sentence' }, sentence),
                    React__default["default"].createElement("div", { className: 'str-chat__event-component__channel-event__date' }, getDateString(__assign(__assign({}, getDateOptions), { format: 'LT' }))))));
        }
        return null;
    };
    var EventComponent = React__default["default"].memo(UnMemoizedEventComponent);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedDateSeparator = function (props) {
        var messageCreatedAt = props.date, formatDate = props.formatDate, _a = props.position, position = _a === void 0 ? 'right' : _a, unread = props.unread;
        var _b = useTranslationContext('DateSeparator'), t = _b.t, tDateTimeParser = _b.tDateTimeParser;
        var formattedDate = getDateString({
            calendar: true,
            formatDate: formatDate,
            messageCreatedAt: messageCreatedAt,
            tDateTimeParser: tDateTimeParser,
        });
        return (React__default["default"].createElement("div", { className: 'str-chat__date-separator', "data-testid": 'date-separator' },
            (position === 'right' || position === 'center') && (React__default["default"].createElement("hr", { className: 'str-chat__date-separator-line' })),
            React__default["default"].createElement("div", { className: 'str-chat__date-separator-date' }, unread ? "".concat(t('New'), " - ").concat(formattedDate) : formattedDate),
            (position === 'left' || position === 'center') && (React__default["default"].createElement("hr", { className: 'str-chat__date-separator-line' }))));
    };
    /**
     * A simple date separator between messages.
     */
    var DateSeparator = React__default["default"].memo(UnMemoizedDateSeparator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel$1;window.ICAL=window.ICAL||{};var isUserResponseArray = function (output) { var _a; return ((_a = output[0]) === null || _a === void 0 ? void 0 : _a.id) != null; };
    var UnMemoizedChannel = function (props) {
        var propsChannel = props.channel, _a = props.EmptyPlaceholder, EmptyPlaceholder = _a === void 0 ? null : _a, LoadingErrorIndicator = props.LoadingErrorIndicator, _b = props.LoadingIndicator, LoadingIndicator = _b === void 0 ? LoadingChannel : _b;
        var _c = useChatContext('Channel'), contextChannel = _c.channel, channelsQueryState = _c.channelsQueryState, customClasses = _c.customClasses, theme = _c.theme;
        var _d = useChannelContainerClasses({
            customClasses: customClasses,
        }), channelClass = _d.channelClass, chatClass = _d.chatClass;
        var channel = propsChannel || contextChannel;
        var className = clsx(chatClass, theme, channelClass);
        if (channelsQueryState.queryInProgress === 'reload' && LoadingIndicator) {
            return (React__default["default"].createElement("div", { className: className },
                React__default["default"].createElement(LoadingIndicator, null)));
        }
        if (channelsQueryState.error && LoadingErrorIndicator) {
            return (React__default["default"].createElement("div", { className: className },
                React__default["default"].createElement(LoadingErrorIndicator, { error: channelsQueryState.error })));
        }
        if (!(channel === null || channel === void 0 ? void 0 : channel.cid)) {
            return React__default["default"].createElement("div", { className: className }, EmptyPlaceholder);
        }
        return React__default["default"].createElement(ChannelInner, __assign({}, props, { channel: channel, key: channel.cid }));
    };
    var ChannelInner = function (props) {
        var _a;
        var acceptedFiles = props.acceptedFiles, activeUnreadHandler = props.activeUnreadHandler, channel = props.channel, propChannelQueryOptions = props.channelQueryOptions, children = props.children, doDeleteMessageRequest = props.doDeleteMessageRequest, doMarkReadRequest = props.doMarkReadRequest, doSendMessageRequest = props.doSendMessageRequest, doUpdateMessageRequest = props.doUpdateMessageRequest, _b = props.dragAndDropWindow, dragAndDropWindow = _b === void 0 ? false : _b, enrichURLForPreviewConfig = props.enrichURLForPreviewConfig, _c = props.initializeOnMount, initializeOnMount = _c === void 0 ? true : _c, _d = props.LoadingErrorIndicator, LoadingErrorIndicator$1 = _d === void 0 ? LoadingErrorIndicator : _d, _e = props.LoadingIndicator, LoadingIndicator = _e === void 0 ? LoadingChannel : _e, _f = props.markReadOnMount, markReadOnMount = _f === void 0 ? true : _f, maxNumberOfFiles = props.maxNumberOfFiles, _g = props.multipleUploads, multipleUploads = _g === void 0 ? true : _g, onMentionsClick = props.onMentionsClick, onMentionsHover = props.onMentionsHover, _h = props.optionalMessageInputProps, optionalMessageInputProps = _h === void 0 ? {} : _h, skipMessageDataMemoization = props.skipMessageDataMemoization;
        var channelQueryOptions = React$2.useMemo(function () {
            return defaultsDeep(propChannelQueryOptions, {
                messages: { limit: DEFAULT_INITIAL_CHANNEL_PAGE_SIZE },
            });
        }, [propChannelQueryOptions]);
        var _j = useChatContext('Channel'), client = _j.client, customClasses = _j.customClasses, latestMessageDatesByChannels = _j.latestMessageDatesByChannels, mutes = _j.mutes, theme = _j.theme;
        var t = useTranslationContext('Channel').t;
        var _k = useChannelContainerClasses({ customClasses: customClasses }), channelClass = _k.channelClass, chatClass = _k.chatClass, chatContainerClass = _k.chatContainerClass, windowsEmojiClass = _k.windowsEmojiClass;
        var _l = React$2.useState(channel.getConfig()), channelConfig = _l[0], setChannelConfig = _l[1];
        var _m = React$2.useState([]), notifications = _m[0], setNotifications = _m[1];
        var _o = React$2.useState(), quotedMessage = _o[0], setQuotedMessage = _o[1];
        var _p = React$2.useState(), channelUnreadUiState = _p[0], _setChannelUnreadUiState = _p[1];
        var notificationTimeouts = [];
        var _q = React$2.useReducer(channelReducer, __assign(__assign({}, initialState), { loading: !channel.initialized })), state = _q[0], dispatch = _q[1];
        var isMounted = useIsMounted();
        var originalTitle = React$2.useRef('');
        var lastRead = React$2.useRef();
        var online = React$2.useRef(true);
        var channelCapabilitiesArray = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.own_capabilities;
        var throttledCopyStateFromChannel = lodash_throttle(function () { return dispatch({ channel: channel, type: 'copyStateFromChannelOnEvent' }); }, 500, {
            leading: true,
            trailing: true,
        });
        var setChannelUnreadUiState = React$2.useMemo(function () {
            return lodash_throttle(_setChannelUnreadUiState, 200, {
                leading: true,
                trailing: false,
            });
        }, []);
        var markRead = React$2.useMemo(function () {
            return lodash_throttle(function (options) { return __awaiter(void 0, void 0, void 0, function () {
                var _a, updateChannelUiUnreadState, markReadResponse;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = (options !== null && options !== void 0 ? options : {}).updateChannelUiUnreadState, updateChannelUiUnreadState = _a === void 0 ? true : _a;
                            if (channel.disconnected || !(channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events)) {
                                return [2 /*return*/];
                            }
                            lastRead.current = new Date();
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            if (!doMarkReadRequest) return [3 /*break*/, 2];
                            doMarkReadRequest(channel, updateChannelUiUnreadState ? setChannelUnreadUiState : undefined);
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, channel.markRead()];
                        case 3:
                            markReadResponse = _b.sent();
                            if (updateChannelUiUnreadState && markReadResponse) {
                                _setChannelUnreadUiState({
                                    last_read: lastRead.current,
                                    last_read_message_id: markReadResponse.event.last_read_message_id,
                                    unread_messages: 0,
                                });
                            }
                            _b.label = 4;
                        case 4:
                            if (activeUnreadHandler) {
                                activeUnreadHandler(0, originalTitle.current);
                            }
                            else if (originalTitle.current) {
                                document.title = originalTitle.current;
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            _b.sent();
                            console.error(t('Failed to mark channel as read'));
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            }); }, 500, { leading: true, trailing: false });
        }, [activeUnreadHandler, channel, channelConfig, doMarkReadRequest, setChannelUnreadUiState, t]);
        var handleEvent = function (event) { return __awaiter(void 0, void 0, void 0, function () {
            var mainChannelUpdated, unread, messageDate, cid, oldestID;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        if (event.message) {
                            dispatch({
                                channel: channel,
                                message: event.message,
                                type: 'updateThreadOnEvent',
                            });
                        }
                        if (event.type === 'user.watching.start' || event.type === 'user.watching.stop')
                            return [2 /*return*/];
                        if (event.type === 'typing.start' || event.type === 'typing.stop') {
                            return [2 /*return*/, dispatch({ channel: channel, type: 'setTyping' })];
                        }
                        if (event.type === 'connection.changed' && typeof event.online === 'boolean') {
                            online.current = event.online;
                        }
                        if (event.type === 'message.new') {
                            mainChannelUpdated = !((_a = event.message) === null || _a === void 0 ? void 0 : _a.parent_id) || ((_b = event.message) === null || _b === void 0 ? void 0 : _b.show_in_channel);
                            if (mainChannelUpdated) {
                                if (document.hidden && (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events) && !channel.muteStatus().muted) {
                                    unread = channel.countUnread(lastRead.current);
                                    if (activeUnreadHandler) {
                                        activeUnreadHandler(unread, originalTitle.current);
                                    }
                                    else {
                                        document.title = "(".concat(unread, ") ").concat(originalTitle.current);
                                    }
                                }
                            }
                            if (((_d = (_c = event.message) === null || _c === void 0 ? void 0 : _c.user) === null || _d === void 0 ? void 0 : _d.id) === client.userID &&
                                ((_e = event === null || event === void 0 ? void 0 : event.message) === null || _e === void 0 ? void 0 : _e.created_at) &&
                                ((_f = event === null || event === void 0 ? void 0 : event.message) === null || _f === void 0 ? void 0 : _f.cid)) {
                                messageDate = new Date(event.message.created_at);
                                cid = event.message.cid;
                                if (!latestMessageDatesByChannels[cid] ||
                                    latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
                                    latestMessageDatesByChannels[cid] = messageDate;
                                }
                            }
                        }
                        if (!(event.type === 'user.deleted')) return [3 /*break*/, 2];
                        oldestID = (_j = (_h = (_g = channel.state) === null || _g === void 0 ? void 0 : _g.messages) === null || _h === void 0 ? void 0 : _h[0]) === null || _j === void 0 ? void 0 : _j.id;
                        /**
                         * As the channel state is not normalized we re-fetch the channel data. Thus, we avoid having to search for user references in the channel state.
                         */
                        // FIXME: we should use channelQueryOptions if they are available
                        return [4 /*yield*/, channel.query({
                                messages: { id_lt: oldestID, limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
                                watchers: { limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
                            })];
                    case 1:
                        /**
                         * As the channel state is not normalized we re-fetch the channel data. Thus, we avoid having to search for user references in the channel state.
                         */
                        // FIXME: we should use channelQueryOptions if they are available
                        _k.sent();
                        _k.label = 2;
                    case 2:
                        if (event.type === 'notification.mark_unread')
                            _setChannelUnreadUiState(function (prev) {
                                var _a;
                                if (!(event.last_read_at && event.user))
                                    return prev;
                                return {
                                    first_unread_message_id: event.first_unread_message_id,
                                    last_read: new Date(event.last_read_at),
                                    last_read_message_id: event.last_read_message_id,
                                    unread_messages: (_a = event.unread_messages) !== null && _a !== void 0 ? _a : 0,
                                };
                            });
                        throttledCopyStateFromChannel();
                        return [2 /*return*/];
                }
            });
        }); };
        // useLayoutEffect here to prevent spinner. Use Suspense when it is available in stable release
        React$2.useLayoutEffect(function () {
            var errored = false;
            var done = false;
            var channelInitializedExternally = true;
            (function () { return __awaiter(void 0, void 0, void 0, function () {
                var members, _i, _a, member, userId, _b, user, user_id, config, e_2, _c, user, ownReadState;
                var _d, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            if (!(!channel.initialized && initializeOnMount)) return [3 /*break*/, 4];
                            _f.label = 1;
                        case 1:
                            _f.trys.push([1, 3, , 4]);
                            members = [];
                            if (!channel.id && ((_d = channel.data) === null || _d === void 0 ? void 0 : _d.members)) {
                                for (_i = 0, _a = channel.data.members; _i < _a.length; _i++) {
                                    member = _a[_i];
                                    userId = void 0;
                                    if (typeof member === 'string') {
                                        userId = member;
                                    }
                                    else if (typeof member === 'object') {
                                        _b = member, user = _b.user, user_id = _b.user_id;
                                        userId = user_id || (user === null || user === void 0 ? void 0 : user.id);
                                    }
                                    if (userId) {
                                        members.push(userId);
                                    }
                                }
                            }
                            return [4 /*yield*/, getChannel({ channel: channel, client: client, members: members, options: channelQueryOptions })];
                        case 2:
                            _f.sent();
                            config = channel.getConfig();
                            setChannelConfig(config);
                            channelInitializedExternally = false;
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _f.sent();
                            dispatch({ error: e_2, type: 'setError' });
                            errored = true;
                            return [3 /*break*/, 4];
                        case 4:
                            done = true;
                            originalTitle.current = document.title;
                            if (!errored) {
                                dispatch({
                                    channel: channel,
                                    hasMore: channelInitializedExternally ||
                                        hasMoreMessagesProbably(channel.state.messages.length, channelQueryOptions.messages.limit),
                                    type: 'initStateFromChannel',
                                });
                                if (((_e = client.user) === null || _e === void 0 ? void 0 : _e.id) && channel.state.read[client.user.id]) {
                                    _c = channel.state.read[client.user.id], user = _c.user, ownReadState = __rest(_c, ["user"]);
                                    _setChannelUnreadUiState(ownReadState);
                                }
                                /**
                                 * TODO: maybe pass last_read to the countUnread method to get proper value
                                 * combined with channel.countUnread adjustment (_countMessageAsUnread)
                                 * to allow counting own messages too
                                 *
                                 * const lastRead = channel.state.read[client.userID as string].last_read;
                                 */
                                if (channel.countUnread() > 0 && markReadOnMount)
                                    markRead({ updateChannelUiUnreadState: false });
                                // The more complex sync logic is done in Chat
                                client.on('connection.changed', handleEvent);
                                client.on('connection.recovered', handleEvent);
                                client.on('user.updated', handleEvent);
                                client.on('user.deleted', handleEvent);
                                channel.on(handleEvent);
                            }
                            return [2 /*return*/];
                    }
                });
            }); })();
            return function () {
                if (errored || !done)
                    return;
                channel === null || channel === void 0 ? void 0 : channel.off(handleEvent);
                client.off('connection.changed', handleEvent);
                client.off('connection.recovered', handleEvent);
                client.off('user.updated', handleEvent);
                client.off('user.deleted', handleEvent);
                notificationTimeouts.forEach(clearTimeout);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            channel.cid,
            channelQueryOptions,
            doMarkReadRequest,
            channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.read_events,
            initializeOnMount,
        ]);
        React$2.useEffect(function () {
            var _a;
            if (!state.thread)
                return;
            var message = (_a = state.messages) === null || _a === void 0 ? void 0 : _a.find(function (m) { var _a; return m.id === ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id); });
            if (message)
                dispatch({ message: message, type: 'setThread' });
        }, [state.messages, state.thread]);
        /** MESSAGE */
        // Adds a temporary notification to message list, will be removed after 5 seconds
        var addNotification = makeAddNotifications(setNotifications, notificationTimeouts);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var loadMoreFinished = React$2.useCallback(lodash_debounce(function (hasMore, messages) {
            if (!isMounted.current)
                return;
            dispatch({ hasMore: hasMore, messages: messages, type: 'loadMoreFinished' });
        }, 2000, { leading: true, trailing: true }), []);
        var loadMore = function (limit) {
            if (limit === void 0) { limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE; }
            return __awaiter(void 0, void 0, void 0, function () {
                var oldestMessage, oldestID, perPage, queryResponse, e_3, hasMoreMessages;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!online.current || !window.navigator.onLine || !state.hasMore)
                                return [2 /*return*/, 0];
                            oldestMessage = (_a = state === null || state === void 0 ? void 0 : state.messages) === null || _a === void 0 ? void 0 : _a[0];
                            if (state.loadingMore || state.loadingMoreNewer || (oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.status) !== 'received') {
                                return [2 /*return*/, 0];
                            }
                            dispatch({ loadingMore: true, type: 'setLoadingMore' });
                            oldestID = oldestMessage === null || oldestMessage === void 0 ? void 0 : oldestMessage.id;
                            perPage = limit;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.query({
                                    messages: { id_lt: oldestID, limit: perPage },
                                    watchers: { limit: perPage },
                                })];
                        case 2:
                            queryResponse = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _b.sent();
                            console.warn('message pagination request failed with error', e_3);
                            dispatch({ loadingMore: false, type: 'setLoadingMore' });
                            return [2 /*return*/, 0];
                        case 4:
                            hasMoreMessages = queryResponse.messages.length === perPage;
                            loadMoreFinished(hasMoreMessages, channel.state.messages);
                            return [2 /*return*/, queryResponse.messages.length];
                    }
                });
            });
        };
        var loadMoreNewer = function (limit) {
            if (limit === void 0) { limit = 100; }
            return __awaiter(void 0, void 0, void 0, function () {
                var newestMessage, newestId, perPage, queryResponse, e_4, hasMoreNewerMessages;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!online.current || !window.navigator.onLine || !state.hasMoreNewer)
                                return [2 /*return*/, 0];
                            newestMessage = (_a = state === null || state === void 0 ? void 0 : state.messages) === null || _a === void 0 ? void 0 : _a[((_b = state === null || state === void 0 ? void 0 : state.messages) === null || _b === void 0 ? void 0 : _b.length) - 1];
                            if (state.loadingMore || state.loadingMoreNewer)
                                return [2 /*return*/, 0];
                            dispatch({ loadingMoreNewer: true, type: 'setLoadingMoreNewer' });
                            newestId = newestMessage === null || newestMessage === void 0 ? void 0 : newestMessage.id;
                            perPage = limit;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.query({
                                    messages: { id_gt: newestId, limit: perPage },
                                    watchers: { limit: perPage },
                                })];
                        case 2:
                            queryResponse = _c.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_4 = _c.sent();
                            console.warn('message pagination request failed with error', e_4);
                            dispatch({ loadingMoreNewer: false, type: 'setLoadingMoreNewer' });
                            return [2 /*return*/, 0];
                        case 4:
                            hasMoreNewerMessages = channel.state.messages !== channel.state.latestMessages;
                            dispatch({
                                hasMoreNewer: hasMoreNewerMessages,
                                messages: channel.state.messages,
                                type: 'loadMoreNewerFinished',
                            });
                            return [2 /*return*/, queryResponse.messages.length];
                    }
                });
            });
        };
        var clearHighlightedMessageTimeoutId = React$2.useRef(null);
        var jumpToMessage = function (messageId, messageLimit) {
            if (messageLimit === void 0) { messageLimit = 100; }
            return __awaiter(void 0, void 0, void 0, function () {
                var indexOfMessage, hasMoreMessages;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dispatch({ loadingMore: true, type: 'setLoadingMore' });
                            return [4 /*yield*/, channel.state.loadMessageIntoState(messageId, undefined, messageLimit)];
                        case 1:
                            _a.sent();
                            indexOfMessage = channel.state.messages.findIndex(function (message) { return message.id === messageId; });
                            hasMoreMessages = indexOfMessage >= Math.floor(messageLimit / 2);
                            loadMoreFinished(hasMoreMessages, channel.state.messages);
                            dispatch({
                                hasMoreNewer: channel.state.messages !== channel.state.latestMessages,
                                highlightedMessageId: messageId,
                                type: 'jumpToMessageFinished',
                            });
                            if (clearHighlightedMessageTimeoutId.current) {
                                clearTimeout(clearHighlightedMessageTimeoutId.current);
                            }
                            clearHighlightedMessageTimeoutId.current = setTimeout(function () {
                                clearHighlightedMessageTimeoutId.current = null;
                                dispatch({ type: 'clearHighlightedMessage' });
                            }, 500);
                            return [2 /*return*/];
                    }
                });
            });
        };
        var jumpToLatestMessage = function () { return __awaiter(void 0, void 0, void 0, function () {
            var hasMoreOlder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, channel.state.loadMessageIntoState('latest')];
                    case 1:
                        _a.sent();
                        hasMoreOlder = channel.state.messages.length >= 25;
                        loadMoreFinished(hasMoreOlder, channel.state.messages);
                        dispatch({
                            type: 'jumpToLatestMessage',
                        });
                        return [2 /*return*/];
                }
            });
        }); };
        var jumpToFirstUnreadMessage = React$2.useCallback(function (queryMessageLimit) {
            if (queryMessageLimit === void 0) { queryMessageLimit = 100; }
            return __awaiter(void 0, void 0, void 0, function () {
                var indexOfLastReadMessage, currentMessageSet, i, id, hasMoreMessages, firstUnreadMessage, jumpToMessageId;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(client.user && (channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.unread_messages)))
                                return [2 /*return*/];
                            if (!(channelUnreadUiState === null || channelUnreadUiState === void 0 ? void 0 : channelUnreadUiState.last_read_message_id)) {
                                addNotification(t('Failed to jump to the first unread message'), 'error');
                                return [2 /*return*/];
                            }
                            currentMessageSet = channel.state.messages;
                            for (i = currentMessageSet.length - 1; i >= 0; i--) {
                                id = currentMessageSet[i].id;
                                if (id === channelUnreadUiState.last_read_message_id) {
                                    indexOfLastReadMessage = i;
                                    break;
                                }
                            }
                            if (!(typeof indexOfLastReadMessage === 'undefined')) return [3 /*break*/, 5];
                            dispatch({ loadingMore: true, type: 'setLoadingMore' });
                            hasMoreMessages = true;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.state.loadMessageIntoState(channelUnreadUiState.last_read_message_id, undefined, queryMessageLimit)];
                        case 2:
                            _b.sent();
                            /**
                             * if the index of the last read message on the page is beyond the half of the page,
                             * we have arrived to the oldest page of the channel
                             */
                            indexOfLastReadMessage = channel.state.messages.findIndex(function (message) { return message.id === channelUnreadUiState.last_read_message_id; });
                            hasMoreMessages = indexOfLastReadMessage >= Math.floor(queryMessageLimit / 2);
                            return [3 /*break*/, 4];
                        case 3:
                            _b.sent();
                            addNotification(t('Failed to jump to the first unread message'), 'error');
                            loadMoreFinished(hasMoreMessages, channel.state.messages);
                            return [2 /*return*/];
                        case 4:
                            loadMoreFinished(hasMoreMessages, channel.state.messages);
                            _b.label = 5;
                        case 5:
                            firstUnreadMessage = channel.state.messages[indexOfLastReadMessage + 1];
                            jumpToMessageId = (_a = firstUnreadMessage === null || firstUnreadMessage === void 0 ? void 0 : firstUnreadMessage.id) !== null && _a !== void 0 ? _a : channelUnreadUiState.last_read_message_id;
                            dispatch({
                                hasMoreNewer: channel.state.messages !== channel.state.latestMessages,
                                highlightedMessageId: jumpToMessageId,
                                type: 'jumpToMessageFinished',
                            });
                            if (clearHighlightedMessageTimeoutId.current) {
                                clearTimeout(clearHighlightedMessageTimeoutId.current);
                            }
                            clearHighlightedMessageTimeoutId.current = setTimeout(function () {
                                clearHighlightedMessageTimeoutId.current = null;
                                dispatch({ type: 'clearHighlightedMessage' });
                            }, 500);
                            return [2 /*return*/];
                    }
                });
            });
        }, [addNotification, channel, client, loadMoreFinished, t, channelUnreadUiState]);
        var deleteMessage = React$2.useCallback(function (message) { return __awaiter(void 0, void 0, void 0, function () {
            var deletedMessage, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(message === null || message === void 0 ? void 0 : message.id)) {
                            throw new Error('Cannot delete a message - missing message ID.');
                        }
                        if (!doDeleteMessageRequest) return [3 /*break*/, 2];
                        return [4 /*yield*/, doDeleteMessageRequest(message)];
                    case 1:
                        deletedMessage = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, client.deleteMessage(message.id)];
                    case 3:
                        result = _a.sent();
                        deletedMessage = result.message;
                        _a.label = 4;
                    case 4: return [2 /*return*/, deletedMessage];
                }
            });
        }); }, [client, doDeleteMessageRequest]);
        var updateMessage = function (updatedMessage) {
            // add the message to the local channel state
            channel.state.addMessageSorted(updatedMessage, true);
            dispatch({
                channel: channel,
                parentId: state.thread && updatedMessage.parent_id,
                type: 'copyMessagesFromChannel',
            });
        };
        var doSendMessage = function (message, customMessageData, options) { return __awaiter(void 0, void 0, void 0, function () {
            var attachments, id, _a, mentioned_users, parent_id, text, mentions, messageData, messageResponse, existingMessage, i, msg, responseTimestamp, existingMessageTimestamp, responseIsTheNewest, error_1, stringError, parsedError;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        attachments = message.attachments, id = message.id, _a = message.mentioned_users, mentioned_users = _a === void 0 ? [] : _a, parent_id = message.parent_id, text = message.text;
                        mentions = isUserResponseArray(mentioned_users)
                            ? mentioned_users.map(function (_a) {
                                var id = _a.id;
                                return id;
                            })
                            : mentioned_users;
                        messageData = __assign({ attachments: attachments, id: id, mentioned_users: mentions, parent_id: parent_id, quoted_message_id: parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id) ? quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id : undefined, text: text }, customMessageData);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, , 7]);
                        messageResponse = void 0;
                        if (!doSendMessageRequest) return [3 /*break*/, 3];
                        return [4 /*yield*/, doSendMessageRequest(channel, messageData, options)];
                    case 2:
                        messageResponse = _d.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, channel.sendMessage(messageData, options)];
                    case 4:
                        messageResponse = _d.sent();
                        _d.label = 5;
                    case 5:
                        existingMessage = void 0;
                        for (i = channel.state.messages.length - 1; i >= 0; i--) {
                            msg = channel.state.messages[i];
                            if (msg.id && msg.id === messageData.id) {
                                existingMessage = msg;
                                break;
                            }
                        }
                        responseTimestamp = new Date(((_b = messageResponse === null || messageResponse === void 0 ? void 0 : messageResponse.message) === null || _b === void 0 ? void 0 : _b.updated_at) || 0).getTime();
                        existingMessageTimestamp = ((_c = existingMessage === null || existingMessage === void 0 ? void 0 : existingMessage.updated_at) === null || _c === void 0 ? void 0 : _c.getTime()) || 0;
                        responseIsTheNewest = responseTimestamp > existingMessageTimestamp;
                        // Replace the message payload after send is completed
                        // We need to check for the newest message payload, because on slow network, the response can arrive later than WS events message.new, message.updated.
                        // Always override existing message in status "sending"
                        if ((messageResponse === null || messageResponse === void 0 ? void 0 : messageResponse.message) &&
                            (responseIsTheNewest || (existingMessage === null || existingMessage === void 0 ? void 0 : existingMessage.status) === 'sending')) {
                            updateMessage(__assign(__assign({}, messageResponse.message), { status: 'received' }));
                        }
                        if (quotedMessage && parent_id === (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.parent_id))
                            setQuotedMessage(undefined);
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _d.sent();
                        stringError = JSON.stringify(error_1);
                        parsedError = stringError ? JSON.parse(stringError) : {};
                        updateMessage(__assign(__assign({}, message), { error: parsedError, errorStatusCode: parsedError.status || undefined, status: 'failed' }));
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        var sendMessage = function (_a, customMessageData, options) {
            var _b = _a.attachments, attachments = _b === void 0 ? [] : _b, _c = _a.mentioned_users, mentioned_users = _c === void 0 ? [] : _c, parent = _a.parent, _d = _a.text, text = _d === void 0 ? '' : _d;
            return __awaiter(void 0, void 0, void 0, function () {
                var messagePreview;
                var _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            channel.state.filterErrorMessages();
                            messagePreview = __assign({ __html: text, attachments: attachments, created_at: new Date(), html: text, id: (_e = customMessageData === null || customMessageData === void 0 ? void 0 : customMessageData.id) !== null && _e !== void 0 ? _e : "".concat(client.userID, "-").concat(nanoid()), mentioned_users: mentioned_users, reactions: [], status: 'sending', text: text, type: 'regular', user: client.user }, ((parent === null || parent === void 0 ? void 0 : parent.id) ? { parent_id: parent.id } : null));
                            updateMessage(messagePreview);
                            return [4 /*yield*/, doSendMessage(messagePreview, customMessageData, options)];
                        case 1:
                            _f.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        var retrySendMessage = function (message) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateMessage(__assign(__assign({}, message), { errorStatusCode: undefined, status: 'sending' }));
                        if (message.attachments) {
                            // remove scraped attachments added during the message composition in MessageInput to prevent sync issues
                            message.attachments = message.attachments.filter(function (attachment) { return !attachment.og_scrape_url; });
                        }
                        return [4 /*yield*/, doSendMessage(message)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        var removeMessage = function (message) {
            channel.state.removeMessage(message);
            dispatch({
                channel: channel,
                parentId: state.thread && message.parent_id,
                type: 'copyMessagesFromChannel',
            });
        };
        /** THREAD */
        var openThread = function (message, event) {
            event === null || event === void 0 ? void 0 : event.preventDefault();
            setQuotedMessage(function (current) {
                if ((current === null || current === void 0 ? void 0 : current.parent_id) !== (message === null || message === void 0 ? void 0 : message.parent_id)) {
                    return undefined;
                }
                else {
                    return current;
                }
            });
            dispatch({ channel: channel, message: message, type: 'openThread' });
        };
        var closeThread = function (event) {
            event === null || event === void 0 ? void 0 : event.preventDefault();
            dispatch({ type: 'closeThread' });
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var loadMoreThreadFinished = React$2.useCallback(lodash_debounce(function (threadHasMore, threadMessages) {
            dispatch({
                threadHasMore: threadHasMore,
                threadMessages: threadMessages,
                type: 'loadMoreThreadFinished',
            });
        }, 2000, { leading: true, trailing: true }), []);
        var loadMoreThread = function (limit) {
            if (limit === void 0) { limit = DEFAULT_THREAD_PAGE_SIZE; }
            return __awaiter(void 0, void 0, void 0, function () {
                var parentId, oldMessages, oldestMessageId, queryResponse, threadHasMoreMessages, newThreadMessages;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // FIXME: should prevent loading more, if state.thread.reply_count === channel.state.threads[parentID].length
                            if (state.threadLoadingMore || !state.thread)
                                return [2 /*return*/];
                            dispatch({ type: 'startLoadingThread' });
                            parentId = state.thread.id;
                            if (!parentId) {
                                return [2 /*return*/, dispatch({ type: 'closeThread' })];
                            }
                            oldMessages = channel.state.threads[parentId] || [];
                            oldestMessageId = (_a = oldMessages[0]) === null || _a === void 0 ? void 0 : _a.id;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, channel.getReplies(parentId, {
                                    id_lt: oldestMessageId,
                                    limit: limit,
                                })];
                        case 2:
                            queryResponse = _b.sent();
                            threadHasMoreMessages = hasMoreMessagesProbably(queryResponse.messages.length, limit);
                            newThreadMessages = channel.state.threads[parentId] || [];
                            // next set loadingMore to false so we can start asking for more data
                            loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
                            return [3 /*break*/, 4];
                        case 3:
                            _b.sent();
                            loadMoreThreadFinished(false, oldMessages);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        var onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
        var editMessage = useEditMessageHandler(doUpdateMessageRequest);
        var typing = state.typing, restState = __rest(state, ["typing"]);
        var channelStateContextValue = useCreateChannelStateContext(__assign(__assign({}, restState), { acceptedFiles: acceptedFiles, channel: channel, channelCapabilitiesArray: channelCapabilitiesArray, channelConfig: channelConfig, channelUnreadUiState: channelUnreadUiState, debounceURLEnrichmentMs: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.debounceURLEnrichmentMs, dragAndDropWindow: dragAndDropWindow, enrichURLForPreview: props.enrichURLForPreview, findURLFn: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.findURLFn, giphyVersion: props.giphyVersion || 'fixed_height', imageAttachmentSizeHandler: props.imageAttachmentSizeHandler || getImageAttachmentConfiguration, maxNumberOfFiles: maxNumberOfFiles, multipleUploads: multipleUploads, mutes: mutes, notifications: notifications, onLinkPreviewDismissed: enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed, quotedMessage: quotedMessage, shouldGenerateVideoThumbnail: props.shouldGenerateVideoThumbnail || true, videoAttachmentSizeHandler: props.videoAttachmentSizeHandler || getVideoAttachmentConfiguration, watcher_count: state.watcherCount }));
        var channelActionContextValue = React$2.useMemo(function () { return ({
            addNotification: addNotification,
            closeThread: closeThread,
            deleteMessage: deleteMessage,
            dispatch: dispatch,
            editMessage: editMessage,
            jumpToFirstUnreadMessage: jumpToFirstUnreadMessage,
            jumpToLatestMessage: jumpToLatestMessage,
            jumpToMessage: jumpToMessage,
            loadMore: loadMore,
            loadMoreNewer: loadMoreNewer,
            loadMoreThread: loadMoreThread,
            markRead: markRead,
            onMentionsClick: onMentionsHoverOrClick,
            onMentionsHover: onMentionsHoverOrClick,
            openThread: openThread,
            removeMessage: removeMessage,
            retrySendMessage: retrySendMessage,
            sendMessage: sendMessage,
            setChannelUnreadUiState: setChannelUnreadUiState,
            setQuotedMessage: setQuotedMessage,
            skipMessageDataMemoization: skipMessageDataMemoization,
            updateMessage: updateMessage,
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
            channel.cid,
            deleteMessage,
            enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.findURLFn,
            enrichURLForPreviewConfig === null || enrichURLForPreviewConfig === void 0 ? void 0 : enrichURLForPreviewConfig.onLinkPreviewDismissed,
            loadMore,
            loadMoreNewer,
            markRead,
            quotedMessage,
            jumpToFirstUnreadMessage,
            jumpToMessage,
            jumpToLatestMessage,
            setChannelUnreadUiState,
        ]);
        var componentContextValue = React$2.useMemo(function () {
            var _a;
            return ({
                Attachment: props.Attachment || Attachment,
                AttachmentPreviewList: props.AttachmentPreviewList,
                AutocompleteSuggestionHeader: props.AutocompleteSuggestionHeader,
                AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
                AutocompleteSuggestionList: props.AutocompleteSuggestionList,
                Avatar: props.Avatar,
                BaseImage: props.BaseImage,
                CooldownTimer: props.CooldownTimer,
                CustomMessageActionsList: props.CustomMessageActionsList,
                DateSeparator: props.DateSeparator || DateSeparator,
                EditMessageInput: props.EditMessageInput,
                EmojiPicker: props.EmojiPicker,
                emojiSearchIndex: props.emojiSearchIndex,
                EmptyStateIndicator: props.EmptyStateIndicator,
                FileUploadIcon: props.FileUploadIcon,
                GiphyPreviewMessage: props.GiphyPreviewMessage,
                HeaderComponent: props.HeaderComponent,
                Input: props.Input,
                LinkPreviewList: props.LinkPreviewList,
                LoadingIndicator: props.LoadingIndicator,
                Message: props.Message || MessageSimple,
                MessageBouncePrompt: props.MessageBouncePrompt,
                MessageDeleted: props.MessageDeleted,
                MessageListNotifications: props.MessageListNotifications,
                MessageNotification: props.MessageNotification,
                MessageOptions: props.MessageOptions,
                MessageRepliesCountButton: props.MessageRepliesCountButton,
                MessageStatus: props.MessageStatus,
                MessageSystem: props.MessageSystem || EventComponent,
                MessageTimestamp: props.MessageTimestamp,
                ModalGallery: props.ModalGallery,
                PinIndicator: props.PinIndicator,
                QuotedMessage: props.QuotedMessage,
                QuotedMessagePreview: props.QuotedMessagePreview,
                reactionOptions: (_a = props.reactionOptions) !== null && _a !== void 0 ? _a : defaultReactionOptions,
                ReactionSelector: props.ReactionSelector,
                ReactionsList: props.ReactionsList,
                SendButton: props.SendButton,
                ThreadHead: props.ThreadHead,
                ThreadHeader: props.ThreadHeader,
                ThreadStart: props.ThreadStart,
                TriggerProvider: props.TriggerProvider,
                TypingIndicator: props.TypingIndicator,
                UnreadMessagesNotification: props.UnreadMessagesNotification,
                UnreadMessagesSeparator: props.UnreadMessagesSeparator || UnreadMessagesSeparator,
                VirtualMessage: props.VirtualMessage,
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [props.reactionOptions]);
        var typingContextValue = useCreateTypingContext({
            typing: typing,
        });
        var className = clsx(chatClass, theme, channelClass);
        if (state.error) {
            return (React__default["default"].createElement("div", { className: className },
                React__default["default"].createElement(LoadingErrorIndicator$1, { error: state.error })));
        }
        if (state.loading) {
            return (React__default["default"].createElement("div", { className: className },
                React__default["default"].createElement(LoadingIndicator, null)));
        }
        if (!channel.watch) {
            return (React__default["default"].createElement("div", { className: className },
                React__default["default"].createElement("div", null, t('Channel Missing'))));
        }
        return (React__default["default"].createElement("div", { className: clsx(className, windowsEmojiClass) },
            React__default["default"].createElement(ChannelStateProvider, { value: channelStateContextValue },
                React__default["default"].createElement(ChannelActionProvider, { value: channelActionContextValue },
                    React__default["default"].createElement(ComponentProvider, { value: componentContextValue },
                        React__default["default"].createElement(TypingProvider, { value: typingContextValue },
                            React__default["default"].createElement("div", { className: "".concat(chatContainerClass) },
                                dragAndDropWindow && (React__default["default"].createElement(DropzoneProvider, __assign({}, optionalMessageInputProps), children)),
                                !dragAndDropWindow && React__default["default"].createElement(React__default["default"].Fragment, null, children))))))));
    };
    /**
     * A wrapper component that provides channel data and renders children.
     * The Channel component provides the following contexts:
     * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)
     * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)
     * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)
     * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)
     */
    var Channel$1 = React__default["default"].memo(UnMemoizedChannel);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MenuIcon$1 = function (_a) {
        var title = _a.title;
        var t = useTranslationContext('MenuIcon').t;
        return (React__default["default"].createElement("svg", { "data-testid": 'menu-icon', viewBox: '0 0 448 512', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, title !== null && title !== void 0 ? title : t('Menu')),
            React__default["default"].createElement("path", { d: 'M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z', fill: 'currentColor' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var renderPreviewText = function (text) { return React__default["default"].createElement(Markdown, { skipHtml: true }, text); };
    var getLatestMessagePreview = function (channel, t, userLanguage) {
        var _a, _b;
        if (userLanguage === void 0) { userLanguage = 'en'; }
        var latestMessage = channel.state.messages[channel.state.messages.length - 1];
        var previewTextToRender = ((_a = latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.i18n) === null || _a === void 0 ? void 0 : _a["".concat(userLanguage, "_text")]) ||
            (latestMessage === null || latestMessage === void 0 ? void 0 : latestMessage.text);
        if (!latestMessage) {
            return t('Nothing yet...');
        }
        if (latestMessage.deleted_at) {
            return t('Message deleted');
        }
        if (previewTextToRender) {
            var renderedText = renderPreviewText(previewTextToRender);
            return renderedText;
        }
        if (latestMessage.command) {
            return "/".concat(latestMessage.command);
        }
        if ((_b = latestMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) {
            return t('🏙 Attachment...');
        }
        return t('Empty message...');
    };
    var getDisplayTitle = function (channel, currentUser) {
        var _a, _b;
        var title = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.name;
        var members = Object.values(channel.state.members);
        if (!title && members.length === 2) {
            var otherMember = members.find(function (member) { var _a; return ((_a = member.user) === null || _a === void 0 ? void 0 : _a.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id); });
            if ((_b = otherMember === null || otherMember === void 0 ? void 0 : otherMember.user) === null || _b === void 0 ? void 0 : _b.name) {
                title = otherMember.user.name;
            }
        }
        return title;
    };
    var getDisplayImage = function (channel, currentUser) {
        var _a, _b;
        var image = (_a = channel.data) === null || _a === void 0 ? void 0 : _a.image;
        var members = Object.values(channel.state.members);
        if (!image && members.length === 2) {
            var otherMember = members.find(function (member) { var _a; return ((_a = member.user) === null || _a === void 0 ? void 0 : _a.id) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id); });
            if ((_b = otherMember === null || otherMember === void 0 ? void 0 : otherMember.user) === null || _b === void 0 ? void 0 : _b.image) {
                image = otherMember.user.image;
            }
        }
        return image;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelPreviewInfo = function (props) {
        var channel = props.channel, overrideImage = props.overrideImage, overrideTitle = props.overrideTitle;
        var client = useChatContext('ChannelPreview').client;
        var _a = React$2.useState(getDisplayTitle(channel, client.user)), displayTitle = _a[0], setDisplayTitle = _a[1];
        var _b = React$2.useState(getDisplayImage(channel, client.user)), displayImage = _b[0], setDisplayImage = _b[1];
        React$2.useEffect(function () {
            var handleEvent = function () {
                setDisplayTitle(function (displayTitle) {
                    var newDisplayTitle = getDisplayTitle(channel, client.user);
                    return displayTitle !== newDisplayTitle ? newDisplayTitle : displayTitle;
                });
                setDisplayImage(function (displayImage) {
                    var newDisplayImage = getDisplayImage(channel, client.user);
                    return displayImage !== newDisplayImage ? newDisplayImage : displayImage;
                });
            };
            client.on('user.updated', handleEvent);
            return function () {
                client.off('user.updated', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return {
            displayImage: overrideImage || displayImage,
            displayTitle: overrideTitle || displayTitle,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelHeader = function (props) {
        var _a = props.Avatar, Avatar$1 = _a === void 0 ? Avatar : _a, _b = props.MenuIcon, MenuIcon = _b === void 0 ? MenuIcon$1 : _b, overrideImage = props.image, live = props.live, overrideTitle = props.title;
        var _c = useChannelStateContext('ChannelHeader'), channel = _c.channel, watcher_count = _c.watcher_count;
        var openMobileNav = useChatContext('ChannelHeader').openMobileNav;
        var t = useTranslationContext('ChannelHeader').t;
        var _d = useChannelPreviewInfo({
            channel: channel,
            overrideImage: overrideImage,
            overrideTitle: overrideTitle,
        }), displayImage = _d.displayImage, displayTitle = _d.displayTitle;
        var _e = (channel === null || channel === void 0 ? void 0 : channel.data) || {}, member_count = _e.member_count, subtitle = _e.subtitle;
        return (React__default["default"].createElement("div", { className: 'str-chat__header-livestream str-chat__channel-header' },
            React__default["default"].createElement("button", { "aria-label": t('aria/Menu'), className: 'str-chat__header-hamburger', onClick: openMobileNav },
                React__default["default"].createElement(MenuIcon, null)),
            React__default["default"].createElement(Avatar$1, { image: displayImage, name: displayTitle, shape: 'rounded', size: (channel === null || channel === void 0 ? void 0 : channel.type) === 'commerce' ? 60 : 40 }),
            React__default["default"].createElement("div", { className: 'str-chat__header-livestream-left str-chat__channel-header-end' },
                React__default["default"].createElement("p", { className: 'str-chat__header-livestream-left--title str-chat__channel-header-title' },
                    displayTitle,
                    ' ',
                    live && (React__default["default"].createElement("span", { className: 'str-chat__header-livestream-left--livelabel' }, t('live')))),
                subtitle && React__default["default"].createElement("p", { className: 'str-chat__header-livestream-left--subtitle' }, subtitle),
                React__default["default"].createElement("p", { className: 'str-chat__header-livestream-left--members str-chat__channel-header-info' },
                    !live && !!member_count && member_count > 0 && (React__default["default"].createElement(React__default["default"].Fragment, null,
                        t('{{ memberCount }} members', {
                            memberCount: member_count,
                        }),
                        ",",
                        ' ')),
                    t('{{ watcherCount }} online', { watcherCount: watcher_count })))));
    };
    /**
     * The ChannelHeader component renders some basic information about a Channel.
     */
    var ChannelHeader = React__default["default"].memo(UnMemoizedChannelHeader);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ConnectionErrorIcon = function () { return (React__default["default"].createElement("svg", { height: '78px', version: '1.1', viewBox: '0 0 78 78', width: '78px', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("title", null, "Connection Error"),
        React__default["default"].createElement("g", { fill: 'none', fillRule: 'evenodd', id: 'Interactions', stroke: 'none', strokeWidth: '1' },
            React__default["default"].createElement("g", { fill: '#CF1F25', id: 'Connection-Error-_-Connectivity', transform: 'translate(-270.000000, -30.000000)' },
                React__default["default"].createElement("g", { id: '109-network-connection', transform: 'translate(270.000000, 30.000000)' },
                    React__default["default"].createElement("path", { d: 'M66.4609744,11.414231 C81.6225232,26.5757798 81.6225232,51.157545 66.4609744,66.3188467 C51.2994256,81.4803954 26.7176604,81.4803954 11.5563587,66.3188467 C-3.60519004,51.1572979 -3.60519004,26.5755327 11.5563587,11.414231 C26.7179075,-3.74731776 51.2996727,-3.74731776 66.4609744,11.414231 Z M54.7853215,45.8823776 L54.7853215,40.5882574 C54.7853215,39.613638 53.9952341,38.8235506 53.0206147,38.8235506 L44.9576695,38.8235506 L41.428256,42.3529641 L51.255555,42.3529641 L51.255555,45.8823776 L54.7853215,45.8823776 Z M40.6659027,43.1153174 L37.8988425,45.8823776 L40.6659027,45.8823776 L40.6659027,43.1153174 Z M51.1764962,56.4702653 L58.2353232,56.4702653 C59.2099355,56.4702653 60.00003,55.6801708 60.00003,54.7055585 L60.00003,51.176145 C60.00003,50.2015327 59.2099355,49.4114382 58.2353232,49.4114382 L51.1764962,49.4114382 C50.2018839,49.4114382 49.4117894,50.2015327 49.4117894,51.176145 L49.4117894,54.7055585 C49.4117894,55.6801708 50.2018839,56.4702653 51.1764962,56.4702653 Z M35.2941353,56.4702653 L42.3529624,56.4702653 C43.3275746,56.4702653 44.1176691,55.6801708 44.1176691,54.7055585 L44.1176691,51.176145 C44.1176691,50.2015327 43.3275746,49.4114382 42.3529624,49.4114382 L35.2941353,49.4114382 C34.319523,49.4114382 33.5294285,50.2015327 33.5294285,51.176145 L33.5294285,54.7055585 C33.5294285,55.6801708 34.319523,56.4702653 35.2941353,56.4702653 Z M56.6964989,19.0874231 C56.007381,18.3985134 54.8903216,18.3985134 54.2012036,19.087423 L45.882376,27.4062507 L45.882376,19.4117761 C45.882376,18.4371568 45.0922885,17.6470693 44.1176692,17.6470693 L33.5294286,17.6470693 C32.5548092,17.6470694 31.7647218,18.4371568 31.7647218,19.4117761 L31.7647218,30.0000167 C31.7647219,30.9746363 32.5548092,31.7647237 33.5294285,31.7647237 L41.5239031,31.7647237 L34.4650761,38.8235508 L24.7058947,38.8235508 C23.7312753,38.8235508 22.9411879,39.6136382 22.9411879,40.5882575 L22.9411879,45.8823778 L26.4706014,45.8823778 L26.4706014,42.3529643 L30.9356624,42.3529643 L23.8768354,49.4117914 L19.4117743,49.4117914 C18.4371549,49.4117914 17.6470675,50.2018788 17.6470675,51.1764981 L17.6470675,54.7059117 C17.6504049,54.9674302 17.7129076,55.2248042 17.8298886,55.4587302 L16.4456526,56.8429662 C15.7446193,57.5200453 15.7252005,58.6372282 16.4022825,59.3382615 C17.0793616,60.0392948 18.1965445,60.0587136 18.8975778,59.3816316 C18.9122847,59.3674273 18.9267436,59.3529684 18.940948,59.3382615 L56.6964963,21.5830662 C57.3856425,20.8939094 57.3856425,19.7765747 56.6964963,19.0874179 Z', id: 'Combined-Shape' })))))); };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChatDown = function (_a) {
        var _b = _a.image, image = _b === void 0 ? React__default["default"].createElement(ConnectionErrorIcon, null) : _b, text = _a.text, _c = _a.type, type = _c === void 0 ? 'Error' : _c;
        var t = useTranslationContext('ChatDown').t;
        return (React__default["default"].createElement("div", { className: 'str-chat__down' },
            React__default["default"].createElement("div", { className: 'str-chat__down-main' },
                typeof image === 'string' ? (React__default["default"].createElement("img", { alt: 'Connection error', "data-testid": 'chatdown-img', src: image })) : (image),
                React__default["default"].createElement("h1", null, type),
                React__default["default"].createElement("h3", { "aria-live": 'assertive' }, text || t('Error connecting to chat, refresh the page to try again.')))));
    };
    /**
     * A simple indicator that chat functionality isn't available, triggered when the Chat API is unavailable or your network isn't working.
     */
    var ChatDown = React__default["default"].memo(UnMemoizedChatDown);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * A preview list of channels, allowing you to select the channel you want to open
     */
    var ChannelListMessenger = function (props) {
        var children = props.children, _a = props.error, error = _a === void 0 ? null : _a, loading = props.loading, _b = props.LoadingErrorIndicator, LoadingErrorIndicator = _b === void 0 ? ChatDown : _b, _c = props.LoadingIndicator, LoadingIndicator = _c === void 0 ? LoadingChannels : _c;
        var t = useTranslationContext('ChannelListMessenger').t;
        if (error) {
            return React__default["default"].createElement(LoadingErrorIndicator, { type: 'Connection Error' });
        }
        if (loading) {
            return React__default["default"].createElement(LoadingIndicator, null);
        }
        return (React__default["default"].createElement("div", { className: 'str-chat__channel-list-messenger str-chat__channel-list-messenger-react' },
            React__default["default"].createElement("div", { "aria-label": t('aria/Channel list'), className: 'str-chat__channel-list-messenger__main str-chat__channel-list-messenger-react__main', role: 'listbox' }, children)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelDeletedListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelDeletedListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) {
                        var channelIndex = channels.findIndex(function (channel) { return channel.cid === event.cid; });
                        if (channelIndex < 0)
                            return __spreadArray([], channels, true);
                        // Remove the deleted channel from the list.s
                        channels.splice(channelIndex, 1);
                        return __spreadArray([], channels, true);
                    });
                }
            };
            client.on('channel.deleted', handleEvent);
            return function () {
                client.off('channel.deleted', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelHiddenListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelHiddenListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) {
                        var channelIndex = channels.findIndex(function (channel) { return channel.cid === event.cid; });
                        if (channelIndex < 0)
                            return __spreadArray([], channels, true);
                        // Remove the hidden channel from the list.s
                        channels.splice(channelIndex, 1);
                        return __spreadArray([], channels, true);
                    });
                }
            };
            client.on('channel.hidden', handleEvent);
            return function () {
                client.off('channel.hidden', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelTruncatedListener = function (setChannels, customHandler, forceUpdate) {
        var client = useChatContext('useChannelTruncatedListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) { return __spreadArray([], channels, true); });
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                if (forceUpdate) {
                    forceUpdate();
                }
            };
            client.on('channel.truncated', handleEvent);
            return function () {
                client.off('channel.truncated', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelUpdatedListener = function (setChannels, customHandler, forceUpdate) {
        var client = useChatContext('useChannelUpdatedListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) {
                    var _a, _b, _c, _d, _e, _f;
                    var channelIndex = channels.findIndex(function (channel) { var _a; return channel.cid === ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid); });
                    if (channelIndex > -1 && event.channel) {
                        var newChannels = channels;
                        newChannels[channelIndex].data = __assign(__assign({}, event.channel), { hidden: (_b = (_a = event.channel) === null || _a === void 0 ? void 0 : _a.hidden) !== null && _b !== void 0 ? _b : (_c = newChannels[channelIndex].data) === null || _c === void 0 ? void 0 : _c.hidden, own_capabilities: (_e = (_d = event.channel) === null || _d === void 0 ? void 0 : _d.own_capabilities) !== null && _e !== void 0 ? _e : (_f = newChannels[channelIndex].data) === null || _f === void 0 ? void 0 : _f.own_capabilities });
                        return __spreadArray([], newChannels, true);
                    }
                    return channels;
                });
                if (forceUpdate) {
                    forceUpdate();
                }
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
            };
            client.on('channel.updated', handleEvent);
            return function () {
                client.off('channel.updated', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelVisibleListener = function (setChannels, customHandler) {
        var client = useChatContext('useChannelVisibleListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) { return __awaiter(void 0, void 0, void 0, function () {
                var channel_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(event.type && event.channel_type && event.channel_id)) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel({
                                    client: client,
                                    id: event.channel_id,
                                    type: event.channel_type,
                                })];
                        case 2:
                            channel_1 = _a.sent();
                            setChannels(function (channels) { return uniqBy(__spreadArray([channel_1], channels, true), 'cid'); });
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('channel.visible', handleEvent);
            return function () {
                client.off('channel.visible', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useConnectionRecoveredListener = function (forceUpdate) {
        var client = useChatContext('useConnectionRecoveredListener').client;
        React$2.useEffect(function () {
            var handleEvent = function () {
                if (forceUpdate) {
                    forceUpdate();
                }
            };
            client.on('connection.recovered', handleEvent);
            return function () {
                client.off('connection.recovered', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MAX_QUERY_CHANNELS_LIMIT = 30;
    var moveChannelUp = function (_a) {
        var activeChannel = _a.activeChannel, channels = _a.channels, cid = _a.cid;
        // get index of channel to move up
        var channelIndex = channels.findIndex(function (channel) { return channel.cid === cid; });
        if (!activeChannel && channelIndex <= 0)
            return channels;
        // get channel to move up
        var channel = activeChannel || channels[channelIndex];
        return uniqBy(__spreadArray([channel], channels, true), 'cid');
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMessageNewListener = function (setChannels, customHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {
        if (lockChannelOrder === void 0) { lockChannelOrder = false; }
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useMessageNewListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) {
                        var channelInList = channels.filter(function (channel) { return channel.cid === event.cid; }).length > 0;
                        if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
                            var channel = client.channel(event.channel_type, event.channel_id);
                            return uniqBy(__spreadArray([channel], channels, true), 'cid');
                        }
                        if (!lockChannelOrder)
                            return moveChannelUp({ channels: channels, cid: event.cid || '' });
                        return channels;
                    });
                }
            };
            client.on('message.new', handleEvent);
            return function () {
                client.off('message.new', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [lockChannelOrder]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useMobileNavigation = function (channelListRef, navOpen, closeMobileNav) {
        React$2.useEffect(function () {
            var handleClickOutside = function (event) {
                if (closeMobileNav &&
                    channelListRef.current &&
                    !channelListRef.current.contains(event.target) &&
                    navOpen) {
                    closeMobileNav();
                }
            };
            document.addEventListener('click', handleClickOutside);
            return function () {
                document.removeEventListener('click', handleClickOutside);
            };
        }, [channelListRef, closeMobileNav, navOpen]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationAddedToChannelListener = function (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useNotificationAddedToChannelListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) { return __awaiter(void 0, void 0, void 0, function () {
                var channel_1;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel({
                                    client: client,
                                    id: event.channel.id,
                                    members: (_b = event.channel.members) === null || _b === void 0 ? void 0 : _b.reduce(function (acc, _a) {
                                        var user = _a.user, user_id = _a.user_id;
                                        var userId = user_id || (user === null || user === void 0 ? void 0 : user.id);
                                        if (userId) {
                                            acc.push(userId);
                                        }
                                        return acc;
                                    }, []),
                                    type: event.channel.type,
                                })];
                        case 2:
                            channel_1 = _c.sent();
                            setChannels(function (channels) { return uniqBy(__spreadArray([channel_1], channels, true), 'cid'); });
                            _c.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('notification.added_to_channel', handleEvent);
            return function () {
                client.off('notification.added_to_channel', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationMessageNewListener = function (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels) {
        if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }
        var client = useChatContext('useNotificationMessageNewListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) { return __awaiter(void 0, void 0, void 0, function () {
                var channel_1;
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(customHandler && typeof customHandler === 'function')) return [3 /*break*/, 1];
                            customHandler(setChannels, event);
                            return [3 /*break*/, 3];
                        case 1:
                            if (!(allowNewMessagesFromUnfilteredChannels && ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.type))) return [3 /*break*/, 3];
                            return [4 /*yield*/, getChannel({
                                    client: client,
                                    id: event.channel.id,
                                    type: event.channel.type,
                                })];
                        case 2:
                            channel_1 = _b.sent();
                            setChannels(function (channels) { return uniqBy(__spreadArray([channel_1], channels, true), 'cid'); });
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            client.on('notification.message_new', handleEvent);
            return function () {
                client.off('notification.message_new', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useNotificationRemovedFromChannelListener = function (setChannels, customHandler) {
        var client = useChatContext('useNotificationRemovedFromChannelListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (customHandler && typeof customHandler === 'function') {
                    customHandler(setChannels, event);
                }
                else {
                    setChannels(function (channels) { return channels.filter(function (channel) { var _a; return channel.cid !== ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid); }); });
                }
            };
            client.on('notification.removed_from_channel', handleEvent);
            return function () {
                client.off('notification.removed_from_channel', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [customHandler]);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 5000;
    var MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 2000;
    var usePaginatedChannels = function (client, filters, sort, options, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels) {
        if (recoveryThrottleIntervalMs === void 0) { recoveryThrottleIntervalMs = RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS; }
        var _a = useChatContext('usePaginatedChannels').channelsQueryState, error = _a.error, setError = _a.setError, setQueryInProgress = _a.setQueryInProgress;
        var _b = React$2.useState([]), channels = _b[0], setChannels = _b[1];
        var _c = React$2.useState(true), hasNextPage = _c[0], setHasNextPage = _c[1];
        var lastRecoveryTimestamp = React$2.useRef();
        var recoveryThrottleInterval = recoveryThrottleIntervalMs < MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS
            ? MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS
            : recoveryThrottleIntervalMs !== null && recoveryThrottleIntervalMs !== void 0 ? recoveryThrottleIntervalMs : RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
        // memoize props
        var filterString = React$2.useMemo(function () { return JSON.stringify(filters); }, [filters]);
        var sortString = React$2.useMemo(function () { return JSON.stringify(sort); }, [sort]);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var queryChannels = function (queryType) {
            if (queryType === void 0) { queryType = 'load-more'; }
            return __awaiter(void 0, void 0, void 0, function () {
                var offset, newOptions, channelQueryResponse, newChannels, err_1;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            setError(null);
                            if (queryType === 'reload') {
                                setChannels([]);
                            }
                            setQueryInProgress(queryType);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 6, , 7]);
                            if (!customQueryChannels) return [3 /*break*/, 3];
                            return [4 /*yield*/, customQueryChannels({
                                    currentChannels: channels,
                                    queryType: queryType,
                                    setChannels: setChannels,
                                    setHasNextPage: setHasNextPage,
                                })];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            offset = queryType === 'reload' ? 0 : channels.length;
                            newOptions = __assign({ limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT, message_limit: (_b = options === null || options === void 0 ? void 0 : options.message_limit) !== null && _b !== void 0 ? _b : DEFAULT_INITIAL_CHANNEL_PAGE_SIZE, offset: offset }, options);
                            return [4 /*yield*/, client.queryChannels(filters, sort || {}, newOptions)];
                        case 4:
                            channelQueryResponse = _c.sent();
                            newChannels = queryType === 'reload'
                                ? channelQueryResponse
                                : uniqBy(__spreadArray(__spreadArray([], channels, true), channelQueryResponse, true), 'cid');
                            setChannels(newChannels);
                            setHasNextPage(channelQueryResponse.length >= newOptions.limit);
                            // Set active channel only on load of first page
                            if (!offset && activeChannelHandler) {
                                activeChannelHandler(newChannels, setChannels);
                            }
                            _c.label = 5;
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            err_1 = _c.sent();
                            console.warn(err_1);
                            setError(err_1);
                            return [3 /*break*/, 7];
                        case 7:
                            setQueryInProgress(null);
                            return [2 /*return*/];
                    }
                });
            });
        };
        var throttleRecover = React$2.useCallback(function () {
            var now = Date.now();
            var isFirstRecovery = !lastRecoveryTimestamp.current;
            var timeElapsedSinceLastRecoveryMs = lastRecoveryTimestamp.current
                ? now - lastRecoveryTimestamp.current
                : 0;
            if (!isFirstRecovery && timeElapsedSinceLastRecoveryMs < recoveryThrottleInterval && !error) {
                return;
            }
            lastRecoveryTimestamp.current = now;
            queryChannels('reload');
        }, [error, queryChannels, recoveryThrottleInterval]);
        var loadNextPage = function () {
            queryChannels();
        };
        React$2.useEffect(function () {
            if (client.recoverStateOnReconnect)
                return;
            var unsubscribe = client.on('connection.recovered', throttleRecover).unsubscribe;
            return function () {
                unsubscribe();
            };
        }, [client, throttleRecover]);
        React$2.useEffect(function () {
            queryChannels('reload');
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [filterString, sortString]);
        return {
            channels: channels,
            hasNextPage: hasNextPage,
            loadNextPage: loadNextPage,
            setChannels: setChannels,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useUserPresenceChangedListener = function (setChannels) {
        var client = useChatContext('useUserPresenceChangedListener').client;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                setChannels(function (channels) {
                    var newChannels = channels.map(function (channel) {
                        var _a;
                        if (!((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) || !channel.state.members[event.user.id]) {
                            return channel;
                        }
                        var newChannel = channel; // dumb workaround for linter
                        newChannel.state.members[event.user.id].user = event.user;
                        return newChannel;
                    });
                    return __spreadArray([], newChannels, true);
                });
            };
            client.on('user.presence.changed', handleEvent);
            return function () {
                client.off('user.presence.changed', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelPreviewMessenger = function (props) {
        var _a, _b;
        var active = props.active, _c = props.Avatar, Avatar$1 = _c === void 0 ? Avatar : _c, channel = props.channel, _d = props.className, customClassName = _d === void 0 ? '' : _d, displayImage = props.displayImage, displayTitle = props.displayTitle, latestMessage = props.latestMessage, customOnSelectChannel = props.onSelect, setActiveChannel = props.setActiveChannel, unread = props.unread, watchers = props.watchers;
        var channelPreviewButton = React$2.useRef(null);
        var avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id);
        var onSelectChannel = function (e) {
            if (customOnSelectChannel) {
                customOnSelectChannel(e);
            }
            else if (setActiveChannel) {
                setActiveChannel(channel, watchers);
            }
            if (channelPreviewButton === null || channelPreviewButton === void 0 ? void 0 : channelPreviewButton.current) {
                channelPreviewButton.current.blur();
            }
        };
        return (React__default["default"].createElement("button", { "aria-label": "Select Channel: ".concat(displayTitle || ''), "aria-selected": active, className: clsx("str-chat__channel-preview-messenger str-chat__channel-preview", active && 'str-chat__channel-preview-messenger--active', unread && unread >= 1 && 'str-chat__channel-preview-messenger--unread', customClassName), "data-testid": 'channel-preview-button', onClick: onSelectChannel, ref: channelPreviewButton, role: 'option' },
            React__default["default"].createElement("div", { className: 'str-chat__channel-preview-messenger--left' },
                React__default["default"].createElement(Avatar$1, { image: displayImage, name: avatarName, size: 40 })),
            React__default["default"].createElement("div", { className: 'str-chat__channel-preview-messenger--right str-chat__channel-preview-end' },
                React__default["default"].createElement("div", { className: 'str-chat__channel-preview-end-first-row' },
                    React__default["default"].createElement("div", { className: 'str-chat__channel-preview-messenger--name' },
                        React__default["default"].createElement("span", null, displayTitle)),
                    !!unread && (React__default["default"].createElement("div", { className: 'str-chat__channel-preview-unread-badge', "data-testid": 'unread-badge' }, unread))),
                React__default["default"].createElement("div", { className: 'str-chat__channel-preview-messenger--last-message' }, latestMessage))));
    };
    /**
     * Used as preview component for channel item in [ChannelList](#channellist) component.
     * Its best suited for messenger type chat.
     */
    var ChannelPreviewMessenger = React__default["default"].memo(UnMemoizedChannelPreviewMessenger);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useIsChannelMuted = function (channel) {
        var client = useChatContext('useIsChannelMuted').client;
        var _a = React$2.useState(channel.muteStatus()), muted = _a[0], setMuted = _a[1];
        React$2.useEffect(function () {
            var handleEvent = function () { return setMuted(channel.muteStatus()); };
            client.on('notification.channel_mutes_updated', handleEvent);
            return function () { return client.off('notification.channel_mutes_updated', handleEvent); };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [muted]);
        return muted;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};exports.MessageDeliveryStatus = void 0;
    (function (MessageDeliveryStatus) {
        MessageDeliveryStatus["DELIVERED"] = "delivered";
        MessageDeliveryStatus["READ"] = "read";
    })(exports.MessageDeliveryStatus || (exports.MessageDeliveryStatus = {}));
    var useMessageDeliveryStatus = function (_a) {
        var channel = _a.channel, lastMessage = _a.lastMessage;
        var client = useChatContext().client;
        var _b = React$2.useState(), messageDeliveryStatus = _b[0], setMessageDeliveryStatus = _b[1];
        var isOwnMessage = React$2.useCallback(function (message) { var _a; return client.user && ((_a = message === null || message === void 0 ? void 0 : message.user) === null || _a === void 0 ? void 0 : _a.id) === client.user.id; }, [client]);
        React$2.useEffect(function () {
            var lastMessageIsOwn = isOwnMessage(lastMessage);
            if (!(lastMessage === null || lastMessage === void 0 ? void 0 : lastMessage.created_at) || !lastMessageIsOwn)
                return;
            var lastMessageCreatedAtDate = typeof lastMessage.created_at === 'string'
                ? new Date(lastMessage.created_at)
                : lastMessage.created_at;
            var channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(function (_a) {
                var channelLastMarkedReadDate = _a.last_read, user = _a.user;
                var ignoreOwnReadStatus = client.user && user.id !== client.user.id;
                return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;
            });
            setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate
                ? exports.MessageDeliveryStatus.READ
                : exports.MessageDeliveryStatus.DELIVERED);
        }, [channel.state.read, client, isOwnMessage, lastMessage]);
        React$2.useEffect(function () {
            var handleMessageNew = function (event) {
                // the last message is not mine, so do not show the delivery status
                if (!isOwnMessage(event.message)) {
                    return setMessageDeliveryStatus(undefined);
                }
                return setMessageDeliveryStatus(exports.MessageDeliveryStatus.DELIVERED);
            };
            channel.on('message.new', handleMessageNew);
            return function () {
                channel.off('message.new', handleMessageNew);
            };
        }, [channel, client, isOwnMessage]);
        React$2.useEffect(function () {
            if (!isOwnMessage(lastMessage))
                return;
            var handleMarkRead = function (event) {
                var _a, _b;
                if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id))
                    setMessageDeliveryStatus(exports.MessageDeliveryStatus.READ);
            };
            channel.on('message.read', handleMarkRead);
            return function () {
                channel.off('message.read', handleMarkRead);
            };
        }, [channel, client, lastMessage, isOwnMessage]);
        return {
            messageDeliveryStatus: messageDeliveryStatus,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ChannelPreview = function (props) {
        var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a, channelUpdateCount = props.channelUpdateCount;
        var _b = useChatContext('ChannelPreview'), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;
        var _c = useTranslationContext('ChannelPreview'), t = _c.t, userLanguage = _c.userLanguage;
        var _d = useChannelPreviewInfo({ channel: channel }), displayImage = _d.displayImage, displayTitle = _d.displayTitle;
        var _e = React$2.useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _e[0], setLastMessage = _e[1];
        var _f = React$2.useState(0), unread = _f[0], setUnread = _f[1];
        var messageDeliveryStatus = useMessageDeliveryStatus({
            channel: channel,
            lastMessage: lastMessage,
        }).messageDeliveryStatus;
        var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;
        var muted = useIsChannelMuted(channel).muted;
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (!event.cid)
                    return setUnread(0);
                if (channel.cid === event.cid)
                    setUnread(0);
            };
            client.on('notification.mark_read', handleEvent);
            return function () { return client.off('notification.mark_read', handleEvent); };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                var _a, _b;
                if (channel.cid !== event.cid)
                    return;
                if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id))
                    return;
                setUnread(channel.countUnread());
            };
            channel.on('notification.mark_unread', handleEvent);
            return function () {
                channel.off('notification.mark_unread', handleEvent);
            };
        }, [channel, client]);
        var refreshUnreadCount = React$2.useMemo(function () {
            return lodash_throttle(function () {
                if (muted) {
                    setUnread(0);
                }
                else {
                    setUnread(channel.countUnread());
                }
            }, 400);
        }, [channel, muted]);
        React$2.useEffect(function () {
            refreshUnreadCount();
            var handleEvent = function (event) {
                if (event.message)
                    setLastMessage(event.message);
                refreshUnreadCount();
            };
            channel.on('message.new', handleEvent);
            channel.on('message.updated', handleEvent);
            channel.on('message.deleted', handleEvent);
            return function () {
                channel.off('message.new', handleEvent);
                channel.off('message.updated', handleEvent);
                channel.off('message.deleted', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [refreshUnreadCount, channelUpdateCount]);
        if (!Preview)
            return null;
        var latestMessage = getLatestMessagePreview(channel, t, userLanguage);
        return (React__default["default"].createElement(Preview, __assign({}, props, { active: isActive, displayImage: displayImage, displayTitle: displayTitle, lastMessage: lastMessage, latestMessage: latestMessage, messageDeliveryStatus: messageDeliveryStatus, setActiveChannel: setActiveChannel, unread: unread })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var isChannel = function (output) { return output.cid != null; };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelSearch = function (_a) {
        var _b = _a.channelType, channelType = _b === void 0 ? 'messaging' : _b, _c = _a.clearSearchOnClickOutside, clearSearchOnClickOutside = _c === void 0 ? true : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, onSearchCallback = _a.onSearch, onSearchExit = _a.onSearchExit, onSelectResult = _a.onSelectResult, _e = _a.searchDebounceIntervalMs, searchDebounceIntervalMs = _e === void 0 ? 300 : _e, _f = _a.searchForChannels, searchForChannels = _f === void 0 ? false : _f, searchFunction = _a.searchFunction, searchQueryParams = _a.searchQueryParams, setChannels = _a.setChannels;
        var _g = useChatContext('useChannelSearch'), client = _g.client, setActiveChannel = _g.setActiveChannel, themeVersion = _g.themeVersion;
        var _h = React$2.useState(false), inputIsFocused = _h[0], setInputIsFocused = _h[1];
        var _j = React$2.useState(''), query = _j[0], setQuery = _j[1];
        var _k = React$2.useState([]), results = _k[0], setResults = _k[1];
        var _l = React$2.useState(false), searching = _l[0], setSearching = _l[1];
        var searchQueryPromiseInProgress = React$2.useRef();
        var shouldIgnoreQueryResults = React$2.useRef(false);
        var inputRef = React$2.useRef(null);
        var searchBarRef = React$2.useRef(null);
        var clearState = React$2.useCallback(function () {
            setQuery('');
            setResults([]);
            setSearching(false);
            if (searchQueryPromiseInProgress.current) {
                shouldIgnoreQueryResults.current = true;
            }
        }, []);
        var activateSearch = React$2.useCallback(function () {
            setInputIsFocused(true);
        }, []);
        var exitSearch = React$2.useCallback(function () {
            var _a;
            setInputIsFocused(false);
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
            clearState();
            onSearchExit === null || onSearchExit === void 0 ? void 0 : onSearchExit();
        }, [clearState, onSearchExit]);
        React$2.useEffect(function () {
            if (disabled)
                return;
            var clickListener = function (event) {
                var _a, _b;
                if (!(event.target instanceof HTMLElement))
                    return;
                var isInputClick = themeVersion === '2'
                    ? (_a = searchBarRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)
                    : (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);
                if (isInputClick)
                    return;
                if ((inputIsFocused && !query) || clearSearchOnClickOutside) {
                    exitSearch();
                }
            };
            document.addEventListener('click', clickListener);
            return function () { return document.removeEventListener('click', clickListener); };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);
        React$2.useEffect(function () {
            if (!inputRef.current || disabled)
                return;
            var handleKeyDown = function (event) {
                if (event.key === 'Escape')
                    return exitSearch();
            };
            inputRef.current.addEventListener('keydown', handleKeyDown);
            return function () {
                var _a;
                // eslint-disable-next-line react-hooks/exhaustive-deps
                (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', handleKeyDown);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [disabled]);
        var selectResult = React$2.useCallback(function (result) { return __awaiter(void 0, void 0, void 0, function () {
            var selectedChannel, newChannel;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!client.userID)
                            return [2 /*return*/];
                        if (!onSelectResult) return [3 /*break*/, 2];
                        return [4 /*yield*/, onSelectResult({
                                setQuery: setQuery,
                                setResults: setResults,
                                setSearching: setSearching,
                            }, result)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        if (!isChannel(result)) return [3 /*break*/, 3];
                        setActiveChannel(result);
                        selectedChannel = result;
                        return [3 /*break*/, 5];
                    case 3:
                        newChannel = client.channel(channelType, { members: [client.userID, result.id] });
                        return [4 /*yield*/, newChannel.watch()];
                    case 4:
                        _a.sent();
                        setActiveChannel(newChannel);
                        selectedChannel = newChannel;
                        _a.label = 5;
                    case 5:
                        setChannels(function (channels) { return uniqBy(__spreadArray([selectedChannel], channels, true), 'cid'); });
                        if (clearSearchOnClickOutside) {
                            exitSearch();
                        }
                        return [2 /*return*/];
                }
            });
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);
        var getChannels = React$2.useCallback(function (text) { return __awaiter(void 0, void 0, void 0, function () {
            var results, userQueryPromise, users, channelQueryPromise, _a, channels, users, error_1;
            var _b, _c, _d, _e, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        results = [];
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, , 7]);
                        userQueryPromise = client.queryUsers(__assign({ $or: [{ id: { $autocomplete: text } }, { name: { $autocomplete: text } }], id: { $ne: client.userID } }, (_b = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _b === void 0 ? void 0 : _b.filters), __assign({ id: 1 }, (_c = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _c === void 0 ? void 0 : _c.sort), __assign({ limit: 8 }, (_d = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _d === void 0 ? void 0 : _d.options));
                        if (!!searchForChannels) return [3 /*break*/, 3];
                        searchQueryPromiseInProgress.current = userQueryPromise;
                        return [4 /*yield*/, searchQueryPromiseInProgress.current];
                    case 2:
                        users = (_h.sent()).users;
                        results = users;
                        return [3 /*break*/, 5];
                    case 3:
                        channelQueryPromise = client.queryChannels(__assign({ name: { $autocomplete: text } }, (_e = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _e === void 0 ? void 0 : _e.filters), ((_f = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _f === void 0 ? void 0 : _f.sort) || {}, __assign({ limit: 5 }, (_g = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _g === void 0 ? void 0 : _g.options));
                        searchQueryPromiseInProgress.current = Promise.all([
                            channelQueryPromise,
                            userQueryPromise,
                        ]);
                        return [4 /*yield*/, searchQueryPromiseInProgress.current];
                    case 4:
                        _a = _h.sent(), channels = _a[0], users = _a[1].users;
                        results = __spreadArray(__spreadArray([], channels, true), users, true);
                        _h.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_1 = _h.sent();
                        console.error(error_1);
                        return [3 /*break*/, 7];
                    case 7:
                        setSearching(false);
                        if (!shouldIgnoreQueryResults.current) {
                            setResults(results);
                        }
                        else {
                            shouldIgnoreQueryResults.current = false;
                        }
                        searchQueryPromiseInProgress.current = undefined;
                        return [2 /*return*/];
                }
            });
        }); }, [client, searchForChannels, searchQueryParams]);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        var scheduleGetChannels = React$2.useCallback(lodash_debounce(getChannels, searchDebounceIntervalMs), [
            getChannels,
            searchDebounceIntervalMs,
        ]);
        var onSearch = React$2.useCallback(function (event) {
            event.preventDefault();
            if (disabled)
                return;
            if (searchFunction) {
                searchFunction({
                    setQuery: setQuery,
                    setResults: setResults,
                    setSearching: setSearching,
                }, event);
            }
            else if (event.target.value) {
                setSearching(true);
                setQuery(event.target.value);
                scheduleGetChannels(event.target.value);
            }
            else if (!event.target.value) {
                clearState();
                scheduleGetChannels.cancel();
            }
            onSearchCallback === null || onSearchCallback === void 0 ? void 0 : onSearchCallback(event);
        }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchFunction]);
        return {
            activateSearch: activateSearch,
            clearState: clearState,
            exitSearch: exitSearch,
            inputIsFocused: inputIsFocused,
            inputRef: inputRef,
            onSearch: onSearch,
            query: query,
            results: results,
            searchBarRef: searchBarRef,
            searching: searching,
            selectResult: selectResult,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var MenuIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'menu-icon', fill: 'none', height: '24', viewBox: '0 0 24 24', width: '24', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { clipRule: 'evenodd', d: 'M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z', fill: 'black', fillRule: 'evenodd' }))); };
    var ReturnIcon = function () { return (React__default["default"].createElement("svg", { "data-testid": 'return-icon', fill: 'none', height: '20', viewBox: '0 0 22 22', width: '20', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M21.6668 9.66666V12.3333H5.6529L12.9932 19.6736L11.1076 21.5592L0.54834 11L11.1076 0.440765L12.9932 2.32638L5.6529 9.66666H21.6668Z', fill: '#080707' }))); };
    var XIcon = function () { return (React__default["default"].createElement("svg", { fill: 'none', height: '14', viewBox: '0 0 14 14', width: '14', xmlns: 'http://www.w3.org/2000/svg' },
        React__default["default"].createElement("path", { d: 'M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z', fill: '#747881' }))); };
    var SearchIcon = function (_a) {
        var className = _a.className;
        return (React__default["default"].createElement("svg", { className: className, fill: 'none', height: '18', viewBox: '0 0 18 18', width: '18', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("path", { d: 'M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z', fill: '#747881' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SearchInput = function (props) {
        var disabled = props.disabled, inputRef = props.inputRef, onSearch = props.onSearch, placeholder = props.placeholder, query = props.query;
        var t = useTranslationContext('SearchInput').t;
        return (React__default["default"].createElement("input", { className: 'str-chat__channel-search-input', "data-testid": 'search-input', disabled: disabled, onChange: onSearch, placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : t('Search'), ref: inputRef, type: 'text', value: query }));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var SearchBarButton = function (_a) {
        var children = _a.children, className = _a.className, onClick = _a.onClick;
        return (React__default["default"].createElement("button", { className: clsx('str-chat__channel-search-bar-button', className), "data-testid": 'search-bar-button', onClick: onClick }, children));
    };
    // todo: add context menu control logic
    var SearchBar = function (props) {
        var activateSearch = props.activateSearch, AppMenu = props.AppMenu, _a = props.ClearInputIcon, ClearInputIcon = _a === void 0 ? XIcon : _a, exitSearch = props.exitSearch, _b = props.ExitSearchIcon, ExitSearchIcon = _b === void 0 ? ReturnIcon : _b, inputIsFocused = props.inputIsFocused, _c = props.MenuIcon, MenuIcon$1 = _c === void 0 ? MenuIcon : _c, searchBarRef = props.searchBarRef, _d = props.SearchInput, SearchInput$1 = _d === void 0 ? SearchInput : _d, _e = props.SearchInputIcon, SearchInputIcon = _e === void 0 ? SearchIcon : _e, inputProps = __rest(props, ["activateSearch", "AppMenu", "ClearInputIcon", "exitSearch", "ExitSearchIcon", "inputIsFocused", "MenuIcon", "searchBarRef", "SearchInput", "SearchInputIcon"]);
        var _f = React$2.useState(false), menuIsOpen = _f[0], setMenuIsOpen = _f[1];
        var appMenuRef = React$2.useRef(null);
        React$2.useEffect(function () {
            if (!appMenuRef.current)
                return;
            var handleKeyDown = function (event) {
                if (menuIsOpen && event.key === 'Escape') {
                    setMenuIsOpen(false);
                }
            };
            var clickListener = function (e) {
                var _a;
                if (!(e.target instanceof HTMLElement) ||
                    !menuIsOpen ||
                    ((_a = appMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)))
                    return;
                setMenuIsOpen(false);
            };
            document.addEventListener('keydown', handleKeyDown);
            document.addEventListener('click', clickListener);
            return function () {
                document.removeEventListener('keydown', handleKeyDown);
                document.removeEventListener('click', clickListener);
            };
        }, [menuIsOpen]);
        React$2.useEffect(function () {
            if (!props.inputRef.current)
                return;
            var handleFocus = function () {
                activateSearch();
            };
            var handleBlur = function (e) {
                e.stopPropagation(); // handle blur/focus state with React state
            };
            props.inputRef.current.addEventListener('focus', handleFocus);
            props.inputRef.current.addEventListener('blur', handleBlur);
            return function () {
                var _a, _b;
                (_a = props.inputRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('focus', handleFocus);
                (_b = props.inputRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('blur', handleBlur);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var handleClearClick = React$2.useCallback(function () {
            var _a;
            exitSearch();
            (_a = inputProps.inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var closeAppMenu = React$2.useCallback(function () { return setMenuIsOpen(false); }, []);
        return (React__default["default"].createElement("div", { className: 'str-chat__channel-search-bar', "data-testid": 'search-bar', ref: searchBarRef },
            inputIsFocused ? (React__default["default"].createElement(SearchBarButton, { className: 'str-chat__channel-search-bar-button--exit-search', onClick: exitSearch },
                React__default["default"].createElement(ExitSearchIcon, null))) : AppMenu ? (React__default["default"].createElement(SearchBarButton, { className: 'str-chat__channel-search-bar-button--menu', onClick: function () { return setMenuIsOpen(function (prev) { return !prev; }); } },
                React__default["default"].createElement(MenuIcon$1, null))) : null,
            React__default["default"].createElement("div", { className: clsx('str-chat__channel-search-input--wrapper', inputProps.query && 'str-chat__channel-search-input--wrapper-active') },
                React__default["default"].createElement("div", { className: 'str-chat__channel-search-input--icon' },
                    React__default["default"].createElement(SearchInputIcon, null)),
                React__default["default"].createElement(SearchInput$1, __assign({}, inputProps)),
                React__default["default"].createElement("button", { className: 'str-chat__channel-search-input--clear-button', "data-testid": 'clear-input-button', disabled: !inputProps.query, onClick: handleClearClick },
                    React__default["default"].createElement(ClearInputIcon, null))),
            menuIsOpen && AppMenu && (React__default["default"].createElement("div", { ref: appMenuRef },
                React__default["default"].createElement(AppMenu, { close: closeAppMenu })))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DefaultSearchEmpty = function () {
        var t = useTranslationContext('SearchResults').t;
        return (React__default["default"].createElement("div", { "aria-live": 'polite', className: 'str-chat__channel-search-container-empty' },
            React__default["default"].createElement(SearchIcon, null),
            t('No results found')));
    };
    var DefaultSearchResultsHeader = function (_a) {
        var results = _a.results;
        var t = useTranslationContext('SearchResultsHeader').t;
        return (React__default["default"].createElement("div", { className: 'str-chat__channel-search-results-header', "data-testid": 'channel-search-results-header' }, t('searchResultsCount', {
            count: results.length,
        })));
    };
    var DefaultSearchResultsList = function (props) {
        var focusedUser = props.focusedUser, results = props.results, _a = props.SearchResultItem, SearchResultItem = _a === void 0 ? DefaultSearchResultItem : _a, selectResult = props.selectResult;
        return (React__default["default"].createElement(React__default["default"].Fragment, null, results.map(function (result, index) { return (React__default["default"].createElement(SearchResultItem, { focusedUser: focusedUser, index: index, key: index, result: result, selectResult: selectResult })); })));
    };
    var DefaultSearchResultItem = function (props) {
        var _a, _b;
        var focusedUser = props.focusedUser, index = props.index, result = props.result, selectResult = props.selectResult;
        var focused = focusedUser === index;
        var themeVersion = useChatContext().themeVersion;
        var className = clsx('str-chat__channel-search-result', focused && 'str-chat__channel-search-result--focused focused');
        if (isChannel(result)) {
            var channel_1 = result;
            return themeVersion === '2' ? (React__default["default"].createElement(ChannelPreview, { channel: channel_1, className: className, onSelect: function () { return selectResult(channel_1); } })) : (React__default["default"].createElement("button", { "aria-label": "Select Channel: ".concat(((_a = channel_1.data) === null || _a === void 0 ? void 0 : _a.name) || ''), className: className, "data-testid": 'channel-search-result-channel', onClick: function () { return selectResult(channel_1); }, role: 'option' },
                React__default["default"].createElement("div", { className: 'result-hashtag' }, "#"),
                React__default["default"].createElement("p", { className: 'channel-search__result-text' }, (_b = channel_1.data) === null || _b === void 0 ? void 0 : _b.name)));
        }
        else {
            return (React__default["default"].createElement("button", { "aria-label": "Select User Channel: ".concat(result.name || ''), className: className, "data-testid": 'channel-search-result-user', onClick: function () { return selectResult(result); }, role: 'option' },
                React__default["default"].createElement(Avatar, { image: result.image, name: result.name || result.id, size: themeVersion === '2' ? 40 : undefined, user: result }),
                React__default["default"].createElement("div", { className: 'str-chat__channel-search-result--display-name' }, result.name || result.id)));
        }
    };
    var ResultsContainer = function (_a) {
        var children = _a.children, popupResults = _a.popupResults;
        var t = useTranslationContext('ResultsContainer').t;
        return (React__default["default"].createElement("div", { "aria-label": t('aria/Channel search results'), className: clsx("str-chat__channel-search-container str-chat__channel-search-result-list", popupResults ? 'popup' : 'inline') }, children));
    };
    var SearchResults = function (props) {
        var popupResults = props.popupResults, results = props.results, searching = props.searching, _a = props.SearchEmpty, SearchEmpty = _a === void 0 ? DefaultSearchEmpty : _a, _b = props.SearchResultsHeader, SearchResultsHeader = _b === void 0 ? DefaultSearchResultsHeader : _b, SearchLoading = props.SearchLoading, _c = props.SearchResultItem, SearchResultItem = _c === void 0 ? DefaultSearchResultItem : _c, _d = props.SearchResultsList, SearchResultsList = _d === void 0 ? DefaultSearchResultsList : _d, selectResult = props.selectResult;
        var t = useTranslationContext('SearchResults').t;
        var _e = React$2.useState(), focusedResult = _e[0], setFocusedResult = _e[1];
        var handleKeyDown = React$2.useCallback(function (event) {
            if (event.key === 'ArrowUp') {
                setFocusedResult(function (prevFocused) {
                    if (prevFocused === undefined)
                        return 0;
                    return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
                });
            }
            if (event.key === 'ArrowDown') {
                setFocusedResult(function (prevFocused) {
                    if (prevFocused === undefined)
                        return 0;
                    return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
                });
            }
            if (event.key === 'Enter') {
                event.preventDefault();
                if (focusedResult !== undefined) {
                    selectResult(results[focusedResult]);
                    return setFocusedResult(undefined);
                }
            }
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [focusedResult]);
        React$2.useEffect(function () {
            document.addEventListener('keydown', handleKeyDown, false);
            return function () { return document.removeEventListener('keydown', handleKeyDown); };
        }, [handleKeyDown]);
        if (searching) {
            return (React__default["default"].createElement(ResultsContainer, { popupResults: popupResults }, SearchLoading ? (React__default["default"].createElement(SearchLoading, null)) : (React__default["default"].createElement("div", { className: 'str-chat__channel-search-container-searching', "data-testid": 'search-in-progress-indicator' }, t('Searching...')))));
        }
        if (!results.length) {
            return (React__default["default"].createElement(ResultsContainer, { popupResults: popupResults },
                React__default["default"].createElement(SearchEmpty, null)));
        }
        return (React__default["default"].createElement(ResultsContainer, { popupResults: popupResults },
            React__default["default"].createElement(SearchResultsHeader, { results: results }),
            React__default["default"].createElement(SearchResultsList, { focusedUser: focusedResult, results: results, SearchResultItem: SearchResultItem, selectResult: selectResult })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedChannelSearch = function (props) {
        var AppMenu = props.AppMenu, ClearInputIcon = props.ClearInputIcon, ExitSearchIcon = props.ExitSearchIcon, MenuIcon = props.MenuIcon, placeholder = props.placeholder, _a = props.popupResults, popupResults = _a === void 0 ? false : _a, _b = props.SearchBar, SearchBar$1 = _b === void 0 ? SearchBar : _b, SearchEmpty = props.SearchEmpty, _c = props.SearchInput, SearchInput$1 = _c === void 0 ? SearchInput : _c, SearchLoading = props.SearchLoading, SearchInputIcon = props.SearchInputIcon, SearchResultItem = props.SearchResultItem, SearchResultsList = props.SearchResultsList, SearchResultsHeader = props.SearchResultsHeader, channelSearchParams = __rest(props, ["AppMenu", "ClearInputIcon", "ExitSearchIcon", "MenuIcon", "placeholder", "popupResults", "SearchBar", "SearchEmpty", "SearchInput", "SearchLoading", "SearchInputIcon", "SearchResultItem", "SearchResultsList", "SearchResultsHeader"]);
        var themeVersion = useChatContext('ChannelSearch').themeVersion;
        var _d = useChannelSearch(channelSearchParams), activateSearch = _d.activateSearch, clearState = _d.clearState, exitSearch = _d.exitSearch, inputIsFocused = _d.inputIsFocused, inputRef = _d.inputRef, onSearch = _d.onSearch, query = _d.query, results = _d.results, searchBarRef = _d.searchBarRef, searching = _d.searching, selectResult = _d.selectResult;
        var showSearchBarV2 = themeVersion === '2';
        return (React__default["default"].createElement("div", { className: clsx('str-chat__channel-search', popupResults ? 'str-chat__channel-search--popup' : 'str-chat__channel-search--inline', {
                'str-chat__channel-search--with-results': results.length > 0,
            }), "data-testid": 'channel-search' },
            showSearchBarV2 ? (React__default["default"].createElement(SearchBar$1, { activateSearch: activateSearch, AppMenu: AppMenu, ClearInputIcon: ClearInputIcon, clearState: clearState, disabled: channelSearchParams.disabled, exitSearch: exitSearch, ExitSearchIcon: ExitSearchIcon, inputIsFocused: inputIsFocused, inputRef: inputRef, MenuIcon: MenuIcon, onSearch: onSearch, placeholder: placeholder, query: query, searchBarRef: searchBarRef, SearchInput: SearchInput$1, SearchInputIcon: SearchInputIcon })) : (React__default["default"].createElement(SearchInput$1, { clearState: clearState, disabled: channelSearchParams.disabled, inputRef: inputRef, onSearch: onSearch, placeholder: placeholder, query: query })),
            query && (React__default["default"].createElement(SearchResults, { popupResults: popupResults, results: results, SearchEmpty: SearchEmpty, searching: searching, SearchLoading: SearchLoading, SearchResultItem: SearchResultItem, SearchResultsHeader: SearchResultsHeader, SearchResultsList: SearchResultsList, selectResult: selectResult }))));
    };
    /**
     * The ChannelSearch component makes a query users call and displays the results in a list.
     * Clicking on a list item will navigate you into a channel with the selected user. It can be used
     * on its own or added to the ChannelList component by setting the `showChannelSearch` prop to true.
     */
    var ChannelSearch = React__default["default"].memo(UnMemoizedChannelSearch);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadMoreButton = function (_a) {
        var children = _a.children, isLoading = _a.isLoading, onClick = _a.onClick, refreshing = _a.refreshing;
        var t = useTranslationContext('UnMemoizedLoadMoreButton').t;
        var childrenOrDefaultString = children !== null && children !== void 0 ? children : t('Load more');
        var loading = typeof isLoading !== 'undefined' ? isLoading : refreshing;
        React$2.useEffect(function () {
            deprecationAndReplacementWarning([[{ refreshing: refreshing }, { isLoading: isLoading }]], 'LoadMoreButton');
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return (React__default["default"].createElement("div", { className: 'str-chat__load-more-button' },
            React__default["default"].createElement("button", { "aria-label": t('aria/Load More Channels'), className: 'str-chat__load-more-button__button str-chat__cta-button', "data-testid": 'load-more-button', disabled: loading, onClick: onClick }, loading ? React__default["default"].createElement(LoadingIndicator, null) : childrenOrDefaultString)));
    };
    var LoadMoreButton = React__default["default"].memo(UnMemoizedLoadMoreButton);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedLoadMorePaginator = function (props) {
        var children = props.children, hasNextPage = props.hasNextPage, isLoading = props.isLoading, _a = props.LoadMoreButton, LoadMoreButton$1 = _a === void 0 ? LoadMoreButton : _a, loadNextPage = props.loadNextPage, refreshing = props.refreshing, reverse = props.reverse;
        var loadingState = typeof isLoading !== 'undefined' ? isLoading : refreshing;
        React$2.useEffect(function () {
            deprecationAndReplacementWarning([[{ refreshing: refreshing }, { isLoading: isLoading }]], 'LoadMorePaginator');
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return (React__default["default"].createElement(React__default["default"].Fragment, null,
            !reverse && children,
            hasNextPage && React__default["default"].createElement(LoadMoreButton$1, { isLoading: loadingState, onClick: loadNextPage }),
            reverse && children));
    };
    var LoadMorePaginator = React__default["default"].memo(UnMemoizedLoadMorePaginator);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var DEFAULT_FILTERS = {};
    var DEFAULT_OPTIONS = {};
    var DEFAULT_SORT = {};
    var UnMemoizedChannelList = function (props) {
        var _a, _b;
        var additionalChannelSearchProps = props.additionalChannelSearchProps, _c = props.Avatar, Avatar$1 = _c === void 0 ? Avatar : _c, allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels, channelRenderFilterFn = props.channelRenderFilterFn, _d = props.ChannelSearch, ChannelSearch$1 = _d === void 0 ? ChannelSearch : _d, customActiveChannel = props.customActiveChannel, customQueryChannels = props.customQueryChannels, _e = props.EmptyStateIndicator, EmptyStateIndicator$1 = _e === void 0 ? EmptyStateIndicator : _e, filters = props.filters, _f = props.LoadingErrorIndicator, LoadingErrorIndicator = _f === void 0 ? ChatDown : _f, _g = props.LoadingIndicator, LoadingIndicator = _g === void 0 ? LoadingChannels : _g, _h = props.List, List = _h === void 0 ? ChannelListMessenger : _h, lockChannelOrder = props.lockChannelOrder, onAddedToChannel = props.onAddedToChannel, onChannelDeleted = props.onChannelDeleted, onChannelHidden = props.onChannelHidden, onChannelTruncated = props.onChannelTruncated, onChannelUpdated = props.onChannelUpdated, onChannelVisible = props.onChannelVisible, onMessageNew = props.onMessageNew, onMessageNewHandler = props.onMessageNewHandler, onRemovedFromChannel = props.onRemovedFromChannel, options = props.options, _j = props.Paginator, Paginator = _j === void 0 ? LoadMorePaginator : _j, Preview = props.Preview, recoveryThrottleIntervalMs = props.recoveryThrottleIntervalMs, renderChannels = props.renderChannels, _k = props.sendChannelsToList, sendChannelsToList = _k === void 0 ? false : _k, _l = props.setActiveChannelOnMount, setActiveChannelOnMount = _l === void 0 ? true : _l, _m = props.showChannelSearch, showChannelSearch = _m === void 0 ? false : _m, _o = props.sort, sort = _o === void 0 ? DEFAULT_SORT : _o, _p = props.watchers, watchers = _p === void 0 ? {} : _p;
        var _q = useChatContext('ChannelList'), channel = _q.channel, channelsQueryState = _q.channelsQueryState, client = _q.client, closeMobileNav = _q.closeMobileNav, customClasses = _q.customClasses, _r = _q.navOpen, navOpen = _r === void 0 ? false : _r, setActiveChannel = _q.setActiveChannel, theme = _q.theme, useImageFlagEmojisOnWindows = _q.useImageFlagEmojisOnWindows;
        var channelListRef = React$2.useRef(null);
        var _s = React$2.useState(0), channelUpdateCount = _s[0], setChannelUpdateCount = _s[1];
        var _t = React$2.useState(false), searchActive = _t[0], setSearchActive = _t[1];
        /**
         * Set a channel with id {customActiveChannel} as active and move it to the top of the list.
         * If customActiveChannel prop is absent, then set the first channel in list as active channel.
         */
        var activeChannelHandler = function (channels, setChannels) { return __awaiter(void 0, void 0, void 0, function () {
            var customActiveChannelObject, newChannels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!channels.length || channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {
                            return [2 /*return*/];
                        }
                        if (!customActiveChannel) return [3 /*break*/, 3];
                        customActiveChannelObject = channels.find(function (chan) { return chan.id === customActiveChannel; });
                        if (!!customActiveChannelObject) return [3 /*break*/, 2];
                        return [4 /*yield*/, client.queryChannels({ id: customActiveChannel })];
                    case 1:
                        //@ts-expect-error
                        customActiveChannelObject = (_a.sent())[0];
                        _a.label = 2;
                    case 2:
                        if (customActiveChannelObject) {
                            setActiveChannel(customActiveChannelObject, watchers);
                            newChannels = moveChannelUp({
                                activeChannel: customActiveChannelObject,
                                channels: channels,
                                cid: customActiveChannelObject.cid,
                            });
                            setChannels(newChannels);
                        }
                        return [2 /*return*/];
                    case 3:
                        if (setActiveChannelOnMount) {
                            setActiveChannel(channels[0], watchers);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * For some events, inner properties on the channel will update but the shallow comparison will not
         * force a re-render. Incrementing this dummy variable ensures the channel previews update.
         */
        var forceUpdate = function () { return setChannelUpdateCount(function (count) { return count + 1; }); };
        var onSearch = React$2.useCallback(function (event) {
            var _a;
            if (!event.target.value) {
                setSearchActive(false);
            }
            else {
                setSearchActive(true);
            }
            (_a = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearch) === null || _a === void 0 ? void 0 : _a.call(additionalChannelSearchProps, event);
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var onSearchExit = React$2.useCallback(function () {
            var _a;
            setSearchActive(false);
            (_a = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearchExit) === null || _a === void 0 ? void 0 : _a.call(additionalChannelSearchProps);
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        var _u = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels), channels = _u.channels, hasNextPage = _u.hasNextPage, loadNextPage = _u.loadNextPage, setChannels = _u.setChannels;
        var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
        useMobileNavigation(channelListRef, navOpen, closeMobileNav);
        useMessageNewListener(setChannels, onMessageNewHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);
        useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);
        useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);
        useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);
        useChannelDeletedListener(setChannels, onChannelDeleted);
        useChannelHiddenListener(setChannels, onChannelHidden);
        useChannelVisibleListener(setChannels, onChannelVisible);
        useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);
        useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);
        useConnectionRecoveredListener(forceUpdate);
        useUserPresenceChangedListener(setChannels);
        React$2.useEffect(function () {
            var handleEvent = function (event) {
                if (event.cid === (channel === null || channel === void 0 ? void 0 : channel.cid)) {
                    setActiveChannel();
                }
            };
            client.on('channel.deleted', handleEvent);
            client.on('channel.hidden', handleEvent);
            return function () {
                client.off('channel.deleted', handleEvent);
                client.off('channel.hidden', handleEvent);
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [channel === null || channel === void 0 ? void 0 : channel.cid]);
        var renderChannel = function (item) {
            var previewProps = {
                activeChannel: channel,
                Avatar: Avatar$1,
                channel: item,
                // forces the update of preview component on channel update
                channelUpdateCount: channelUpdateCount,
                key: item.id,
                Preview: Preview,
                setActiveChannel: setActiveChannel,
                watchers: watchers,
            };
            return React__default["default"].createElement(ChannelPreview, __assign({}, previewProps));
        };
        var className = clsx((_a = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _a !== void 0 ? _a : 'str-chat', theme, (_b = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channelList) !== null && _b !== void 0 ? _b : 'str-chat-channel-list str-chat__channel-list str-chat__channel-list-react', {
            'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),
            'str-chat-channel-list--open': navOpen,
        });
        var showChannelList = !searchActive || (additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.popupResults);
        return (React__default["default"].createElement(ChannelListContextProvider, { value: { channels: channels, setChannels: setChannels } },
            React__default["default"].createElement("div", { className: className, ref: channelListRef },
                showChannelSearch && (React__default["default"].createElement(ChannelSearch$1, __assign({ onSearch: onSearch, onSearchExit: onSearchExit, setChannels: setChannels }, additionalChannelSearchProps))),
                showChannelList && (React__default["default"].createElement(List, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : undefined, loading: !!channelsQueryState.queryInProgress &&
                        ['reload', 'uninitialized'].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator, LoadingIndicator: LoadingIndicator, setChannels: setChannels }, !(loadedChannels === null || loadedChannels === void 0 ? void 0 : loadedChannels.length) ? (React__default["default"].createElement(EmptyStateIndicator$1, { listType: 'channel' })) : (React__default["default"].createElement(Paginator, { hasNextPage: hasNextPage, isLoading: channelsQueryState.queryInProgress === 'load-more', loadNextPage: loadNextPage }, renderChannels
                    ? renderChannels(loadedChannels, renderChannel)
                    : loadedChannels.map(function (channel) { return renderChannel(channel); }))))))));
    };
    /**
     * Renders a preview list of Channels, allowing you to select the Channel you want to open
     */
    var ChannelList = React__default["default"].memo(UnMemoizedChannelList);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var version$1 = '11.11.0';

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChat = function (_a) {
        var _b, _c;
        var client = _a.client, _d = _a.defaultLanguage, defaultLanguage = _d === void 0 ? 'en' : _d, i18nInstance = _a.i18nInstance, initialNavOpen = _a.initialNavOpen;
        var _e = React$2.useState({
            t: function (key) { return key; },
            tDateTimeParser: defaultDateTimeParser,
            userLanguage: 'en',
        }), translators = _e[0], setTranslators = _e[1];
        var _f = React$2.useState(), channel = _f[0], setChannel = _f[1];
        var _g = React$2.useState([]), mutes = _g[0], setMutes = _g[1];
        var _h = React$2.useState(initialNavOpen), navOpen = _h[0], setNavOpen = _h[1];
        var _j = React$2.useState({}), latestMessageDatesByChannels = _j[0], setLatestMessageDatesByChannels = _j[1];
        var clientMutes = ((_b = client.user) === null || _b === void 0 ? void 0 : _b.mutes) || [];
        var closeMobileNav = function () { return setNavOpen(false); };
        var openMobileNav = function () { return setTimeout(function () { return setNavOpen(true); }, 100); };
        var appSettings = React$2.useRef(null);
        var getAppSettings = function () {
            if (appSettings.current) {
                return appSettings.current;
            }
            appSettings.current = client.getAppSettings();
            return appSettings.current;
        };
        React$2.useEffect(function () {
            if (client) {
                var userAgent = client.getUserAgent();
                if (!userAgent.includes('stream-chat-react')) {
                    // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'
                    client.setUserAgent("stream-chat-react-".concat(version$1, "-").concat(userAgent));
                }
            }
        }, [client]);
        React$2.useEffect(function () {
            setMutes(clientMutes);
            var handleEvent = function (event) {
                var _a;
                setMutes(((_a = event.me) === null || _a === void 0 ? void 0 : _a.mutes) || []);
            };
            client.on('notification.mutes_updated', handleEvent);
            return function () { return client.off('notification.mutes_updated', handleEvent); };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [clientMutes === null || clientMutes === void 0 ? void 0 : clientMutes.length]);
        React$2.useEffect(function () {
            var _a;
            var userLanguage = (_a = client.user) === null || _a === void 0 ? void 0 : _a.language;
            if (!userLanguage) {
                var browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version
                userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
            }
            var streami18n = i18nInstance || new Streami18n({ language: userLanguage });
            streami18n.registerSetLanguageCallback(function (t) {
                return setTranslators(function (prevTranslator) { return (__assign(__assign({}, prevTranslator), { t: t })); });
            });
            streami18n.getTranslators().then(function (translator) {
                setTranslators(__assign(__assign({}, translator), { userLanguage: userLanguage || defaultLanguage }));
            });
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [i18nInstance]);
        var setActiveChannel = React$2.useCallback(function (activeChannel, watchers, event) {
            if (watchers === void 0) { watchers = {}; }
            return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (event && event.preventDefault)
                                event.preventDefault();
                            if (!(activeChannel && Object.keys(watchers).length)) return [3 /*break*/, 2];
                            return [4 /*yield*/, activeChannel.query({ watch: true, watchers: watchers })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            setChannel(activeChannel);
                            closeMobileNav();
                            return [2 /*return*/];
                    }
                });
            });
        }, []);
        React$2.useEffect(function () {
            setLatestMessageDatesByChannels({});
        }, [(_c = client.user) === null || _c === void 0 ? void 0 : _c.id]);
        return {
            channel: channel,
            closeMobileNav: closeMobileNav,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            translators: translators,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useCreateChatContext = function (value) {
        var _a;
        var channel = value.channel, channelsQueryState = value.channelsQueryState, client = value.client, closeMobileNav = value.closeMobileNav, customClasses = value.customClasses, getAppSettings = value.getAppSettings, latestMessageDatesByChannels = value.latestMessageDatesByChannels, mutes = value.mutes, navOpen = value.navOpen, openMobileNav = value.openMobileNav, setActiveChannel = value.setActiveChannel, theme = value.theme, themeVersion = value.themeVersion, useImageFlagEmojisOnWindows = value.useImageFlagEmojisOnWindows;
        var channelCid = channel === null || channel === void 0 ? void 0 : channel.cid;
        var channelsQueryError = channelsQueryState.error;
        var channelsQueryInProgress = channelsQueryState.queryInProgress;
        var clientValues = "".concat(client.clientID).concat(Object.keys(client.activeChannels).length).concat(Object.keys(client.listeners).length).concat(client.mutedChannels.length, "\n  ").concat((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);
        var mutedUsersLength = mutes.length;
        var chatContext = React$2.useMemo(function () { return ({
            channel: channel,
            channelsQueryState: channelsQueryState,
            client: client,
            closeMobileNav: closeMobileNav,
            customClasses: customClasses,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            theme: theme,
            themeVersion: themeVersion,
            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,
        }); }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
            channelCid,
            channelsQueryError,
            channelsQueryInProgress,
            clientValues,
            getAppSettings,
            mutedUsersLength,
            navOpen,
        ]);
        return chatContext;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var useChannelsQueryState = function () {
        var _a = React$2.useState(null), error = _a[0], setError = _a[1];
        var _b = React$2.useState('uninitialized'), queryInProgress = _b[0], setQueryInProgress = _b[1];
        return {
            error: error,
            queryInProgress: queryInProgress,
            setError: setError,
            setQueryInProgress: setQueryInProgress,
        };
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var darkModeTheme = {
        '--bg-gradient-end': '#101214',
        '--bg-gradient-start': '#070a0d',
        '--black': '#ffffff',
        '--blue-alice': '#00193d',
        '--border': '#141924',
        '--button-background': '#ffffff',
        '--button-text': '#005fff',
        '--grey': '#7a7a7a',
        '--grey-gainsboro': '#2d2f2f',
        '--grey-whisper': '#1c1e22',
        '--modal-shadow': '#000000',
        '--overlay': '#00000066',
        '--overlay-dark': '#ffffffcc',
        '--shadow-icon': '#00000080',
        '--targetedMessageBackground': '#302d22',
        '--transparent': 'transparent',
        '--white': '#101418',
        '--white-smoke': '#13151b',
        '--white-snow': '#070a0d',
    };
    /**
     * @deprecated This hook has been deprecated in favor of the new
     * theming (V2) setup which sets its variables through CSS files.
     * Refer to the [documentation](https://getstream.io/chat/docs/sdk/react/theming/themingv2/) of the new theming for the upgrade.
     *
     * **Will be removed with the complete transition to the theming V2.**
     */
    var useCustomStyles = function (customStyles) {
        if (!customStyles)
            return;
        for (var _i = 0, _a = Object.entries(customStyles); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            document.documentElement.style.setProperty(key, value);
        }
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components
     * as it provides the ChatContext.
     */
    var Chat = function (props) {
        var children = props.children, client = props.client, customClasses = props.customClasses, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;
        var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, getAppSettings = _e.getAppSettings, latestMessageDatesByChannels = _e.latestMessageDatesByChannels, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;
        var channelsQueryState = useChannelsQueryState();
        var themeVersion = typeof window !== 'undefined'
            ? (window
                .getComputedStyle(document.documentElement)
                .getPropertyValue('--str-chat__theme-version')
                .replace(' ', '') || '1')
            : '1';
        useCustomStyles(darkMode ? darkModeTheme : customStyles);
        var chatContextValue = useCreateChatContext({
            channel: channel,
            channelsQueryState: channelsQueryState,
            client: client,
            closeMobileNav: closeMobileNav,
            customClasses: customClasses,
            getAppSettings: getAppSettings,
            latestMessageDatesByChannels: latestMessageDatesByChannels,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            theme: theme,
            themeVersion: themeVersion,
            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,
        });
        if (!translators.t)
            return null;
        return (React__default["default"].createElement(ChatProvider, { value: chatContextValue },
            React__default["default"].createElement(TranslationProvider, { value: translators }, children)));
    };

    window.StreamChat.StreamChat=streamChat.StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * React hook to create, connect and return `StreamChat` client.
     */
    var useCreateChatClient = function (_a) {
        var apiKey = _a.apiKey, tokenOrProvider = _a.tokenOrProvider, userData = _a.userData;
        var _b = React$2.useState(null), chatClient = _b[0], setChatClient = _b[1];
        var _c = React$2.useState(userData), cachedUserData = _c[0], setCachedUserData = _c[1];
        if (userData.id !== cachedUserData.id) {
            setCachedUserData(userData);
        }
        React$2.useEffect(function () {
            var client = new streamChat.StreamChat(apiKey);
            var didUserConnectInterrupt = false;
            var connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(function () {
                if (!didUserConnectInterrupt)
                    setChatClient(client);
            });
            return function () {
                didUserConnectInterrupt = true;
                setChatClient(null);
                connectionPromise
                    .then(function () { return client.disconnectUser(); })
                    .then(function () {
                    console.log("Connection for user \"".concat(cachedUserData.id, "\" has been closed"));
                });
            };
        }, [apiKey, cachedUserData, tokenOrProvider]);
        return chatClient;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var CloseIcon = function (_a) {
        var title = _a.title;
        var t = useTranslationContext('CloseIcon').t;
        return (React__default["default"].createElement("svg", { "data-testid": 'close-no-outline', fill: 'none', viewBox: '0 0 24 24', xmlns: 'http://www.w3.org/2000/svg' },
            React__default["default"].createElement("title", null, title !== null && title !== void 0 ? title : t('Close')),
            React__default["default"].createElement("path", { d: 'M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z', fill: 'black' })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ThreadHeader = function (props) {
        var closeThread = props.closeThread, overrideImage = props.overrideImage, overrideTitle = props.overrideTitle;
        var t = useTranslationContext('ThreadHeader').t;
        var channel = useChannelStateContext('').channel;
        var displayTitle = useChannelPreviewInfo({
            channel: channel,
            overrideImage: overrideImage,
            overrideTitle: overrideTitle,
        }).displayTitle;
        return (React__default["default"].createElement("div", { className: 'str-chat__thread-header' },
            React__default["default"].createElement("div", { className: 'str-chat__thread-header-details' },
                React__default["default"].createElement("div", { className: 'str-chat__thread-header-title' }, t('Thread')),
                React__default["default"].createElement("div", { className: 'str-chat__thread-header-subtitle' }, displayTitle)),
            React__default["default"].createElement("button", { "aria-label": t('aria/Close thread'), className: 'str-chat__square-button str-chat__close-thread-button', "data-testid": 'close-button', onClick: closeThread },
                React__default["default"].createElement(CloseIcon, null))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ThreadStart = function () {
        var thread = useChannelStateContext('ThreadStart').thread;
        var t = useTranslationContext('ThreadStart').t;
        if (!(thread === null || thread === void 0 ? void 0 : thread.reply_count))
            return null;
        return (React__default["default"].createElement("div", { className: 'str-chat__thread-start' }, t('replyCount', { count: thread.reply_count })));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var ThreadHead = function (props) {
        var _a = useComponentContext('ThreadHead').ThreadStart, ThreadStart$1 = _a === void 0 ? ThreadStart : _a;
        return (React__default["default"].createElement("div", { className: 'str-chat__parent-message-li' },
            React__default["default"].createElement(Message, __assign({ initialMessage: true, threadList: true }, props)),
            React__default["default"].createElement(ThreadStart$1, null)));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * The Thread component renders a parent Message with a list of replies
     */
    var Thread = function (props) {
        var _a = useChannelStateContext('Thread'), channel = _a.channel, channelConfig = _a.channelConfig, thread = _a.thread;
        if (!thread || (channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.replies) === false)
            return null;
        // The wrapper ensures a key variable is set and the component recreates on thread switch
        return React__default["default"].createElement(ThreadInner, __assign({}, props, { key: "thread-".concat(thread.id, "-").concat(channel === null || channel === void 0 ? void 0 : channel.cid) }));
    };
    var ThreadInner = function (props) {
        var _a, _b;
        var additionalMessageInputProps = props.additionalMessageInputProps, additionalMessageListProps = props.additionalMessageListProps, additionalParentMessageProps = props.additionalParentMessageProps, additionalVirtualizedMessageListProps = props.additionalVirtualizedMessageListProps, _c = props.autoFocus, autoFocus = _c === void 0 ? true : _c, _d = props.enableDateSeparator, enableDateSeparator = _d === void 0 ? false : _d, _e = props.fullWidth, fullWidth = _e === void 0 ? false : _e, PropInput = props.Input, PropMessage = props.Message, _f = props.messageActions, messageActions = _f === void 0 ? Object.keys(MESSAGE_ACTIONS) : _f, virtualized = props.virtualized;
        var _g = useChannelStateContext('Thread'), thread = _g.thread, threadHasMore = _g.threadHasMore, threadLoadingMore = _g.threadLoadingMore, threadMessages = _g.threadMessages, threadSuppressAutoscroll = _g.threadSuppressAutoscroll;
        var _h = useChannelActionContext('Thread'), closeThread = _h.closeThread, loadMoreThread = _h.loadMoreThread;
        var _j = useChatContext('Thread'), customClasses = _j.customClasses, themeVersion = _j.themeVersion;
        var _k = useComponentContext('Thread'), ContextInput = _k.ThreadInput, ContextMessage = _k.Message, _l = _k.ThreadHead, ThreadHead$1 = _l === void 0 ? ThreadHead : _l, _m = _k.ThreadHeader, ThreadHeader$1 = _m === void 0 ? ThreadHeader : _m, VirtualMessage = _k.VirtualMessage;
        var ThreadInput = (_b = (_a = PropInput !== null && PropInput !== void 0 ? PropInput : additionalMessageInputProps === null || additionalMessageInputProps === void 0 ? void 0 : additionalMessageInputProps.Input) !== null && _a !== void 0 ? _a : ContextInput) !== null && _b !== void 0 ? _b : (themeVersion === '2' ? MessageInputFlat : MessageInputSmall);
        var ThreadMessage = PropMessage || (additionalMessageListProps === null || additionalMessageListProps === void 0 ? void 0 : additionalMessageListProps.Message);
        var FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;
        var MessageUIComponent = ThreadMessage || FallbackMessage;
        var ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
        React$2.useEffect(function () {
            if ((thread === null || thread === void 0 ? void 0 : thread.id) && (thread === null || thread === void 0 ? void 0 : thread.reply_count)) {
                // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options
                loadMoreThread();
            }
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        if (!thread)
            return null;
        var threadClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.thread) ||
            clsx('str-chat__thread-container str-chat__thread', {
                'str-chat__thread--full': fullWidth,
                'str-chat__thread--virtualized': virtualized,
            });
        var head = (React__default["default"].createElement(ThreadHead$1, __assign({ key: thread.id, message: thread, Message: MessageUIComponent }, additionalParentMessageProps)));
        return (React__default["default"].createElement("div", { className: threadClass },
            React__default["default"].createElement(ThreadHeader$1, { closeThread: closeThread, thread: thread }),
            React__default["default"].createElement(ThreadMessageList, __assign({ disableDateSeparator: !enableDateSeparator, hasMore: threadHasMore, head: head, loadingMore: threadLoadingMore, loadMore: loadMoreThread, Message: MessageUIComponent, messageActions: messageActions, messages: threadMessages || [], suppressAutoscroll: threadSuppressAutoscroll, threadList: true }, (virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps))),
            React__default["default"].createElement(MessageInput, __assign({ focus: autoFocus, Input: ThreadInput, parent: thread, publishTypingEvent: false }, additionalMessageInputProps))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var UnMemoizedWindow = function (props) {
        var children = props.children, _a = props.hideOnThread, hideOnThread = _a === void 0 ? false : _a, propThread = props.thread;
        var contextThread = useChannelStateContext('Window').thread;
        return (React__default["default"].createElement("div", { className: clsx('str-chat__main-panel', {
                'str-chat__main-panel--hideOnThread': hideOnThread && (contextThread || propThread),
            }) }, children));
    };
    /**
     * A UI component for conditionally displaying a Thread or Channel
     */
    var Window = React__default["default"].memo(UnMemoizedWindow);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var classNames = {
        1: {
            buttonClassName: 'str-chat__input-flat-emojiselect',
            pickerContainerClassName: undefined,
            wrapperClassName: 'str-chat__emojiselect-wrapper',
        },
        2: {
            buttonClassName: 'str-chat__emoji-picker-button',
            pickerContainerClassName: 'str-chat__message-textarea-emoji-picker-container',
            wrapperClassName: 'str-chat__message-textarea-emoji-picker',
        },
    };
    var EmojiPicker = function (props) {
        var _a, _b, _c;
        var themeVersion = useChatContext('EmojiPicker').themeVersion;
        var t = useTranslationContext('EmojiPicker').t;
        var _d = useMessageInputContext('EmojiPicker'), insertText = _d.insertText, textareaRef = _d.textareaRef;
        var _e = React$2.useState(false), displayPicker = _e[0], setDisplayPicker = _e[1];
        var _f = React$2.useState(null), referenceElement = _f[0], setReferenceElement = _f[1];
        var _g = React$2.useState(null), popperElement = _g[0], setPopperElement = _g[1];
        var _h = usePopper(referenceElement, popperElement, __assign({ placement: themeVersion === '2' ? 'top-end' : 'top-start' }, props.popperOptions)), attributes = _h.attributes, styles = _h.styles;
        var _j = classNames[themeVersion], buttonClassName = _j.buttonClassName, pickerContainerClassName = _j.pickerContainerClassName, wrapperClassName = _j.wrapperClassName;
        var _k = props.ButtonIconComponent, ButtonIconComponent = _k === void 0 ? themeVersion === '2' ? EmojiPickerIcon : EmojiIconLarge : _k;
        React$2.useEffect(function () {
            if (!popperElement || !referenceElement)
                return;
            var handlePointerDown = function (e) {
                var target = e.target;
                if (popperElement.contains(target) || referenceElement.contains(target))
                    return;
                setDisplayPicker(false);
            };
            window.addEventListener('pointerdown', handlePointerDown);
            return function () { return window.removeEventListener('pointerdown', handlePointerDown); };
        }, [referenceElement, popperElement]);
        return (React__default["default"].createElement("div", { className: (_a = props.wrapperClassName) !== null && _a !== void 0 ? _a : wrapperClassName },
            displayPicker && (React__default["default"].createElement("div", __assign({ className: (_b = props.pickerContainerClassName) !== null && _b !== void 0 ? _b : pickerContainerClassName, style: styles.popper }, attributes.popper, { ref: setPopperElement }),
                React__default["default"].createElement(Picker__default["default"], __assign({ data: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, import('@emoji-mart/data')];
                            case 1: return [2 /*return*/, (_a.sent()).default];
                        }
                    }); }); }, onEmojiSelect: function (e) {
                        var _a;
                        insertText(e.native);
                        (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                    } }, props.pickerProps)))),
            themeVersion === '1' && (React__default["default"].createElement(Tooltip, null, displayPicker ? t('Close emoji picker') : t('Open emoji picker'))),
            React__default["default"].createElement("button", { "aria-expanded": displayPicker, "aria-label": t('aria/Emoji picker'), className: (_c = props.buttonClassName) !== null && _c !== void 0 ? _c : buttonClassName, onClick: function () { return setDisplayPicker(function (cv) { return !cv; }); }, ref: setReferenceElement, type: 'button' }, ButtonIconComponent && React__default["default"].createElement(ButtonIconComponent, null))));
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// entry file for Rollup for the UMD build \w Emojis

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to compose unicode character classes. */
    var rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
        rsComboSymbolsRange = '\\u20d0-\\u20f0';

    /** Used to compose unicode capture groups. */
    var rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']';

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 'ss'
    };

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Built-in value references. */
    var Symbol$1 = root.Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$3(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString$3(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    var lodash_deburr = deburr;

    var e$1 = lodash_deburr;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};function t$1(){return t$1=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(e[a]=o[a]);}return e},t$1.apply(this,arguments)}var o=/[|\\{}()[\]^$+*?.]/g,a=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(o,"\\$&")};const s=[["ß","ss"],["ẞ","Ss"],["ä","ae"],["Ä","Ae"],["ö","oe"],["Ö","Oe"],["ü","ue"],["Ü","Ue"],["À","A"],["Á","A"],["Â","A"],["Ã","A"],["Ä","Ae"],["Å","A"],["Æ","AE"],["Ç","C"],["È","E"],["É","E"],["Ê","E"],["Ë","E"],["Ì","I"],["Í","I"],["Î","I"],["Ï","I"],["Ð","D"],["Ñ","N"],["Ò","O"],["Ó","O"],["Ô","O"],["Õ","O"],["Ö","Oe"],["Ő","O"],["Ø","O"],["Ù","U"],["Ú","U"],["Û","U"],["Ü","Ue"],["Ű","U"],["Ý","Y"],["Þ","TH"],["ß","ss"],["à","a"],["á","a"],["â","a"],["ã","a"],["ä","ae"],["å","a"],["æ","ae"],["ç","c"],["è","e"],["é","e"],["ê","e"],["ë","e"],["ì","i"],["í","i"],["î","i"],["ï","i"],["ð","d"],["ñ","n"],["ò","o"],["ó","o"],["ô","o"],["õ","o"],["ö","oe"],["ő","o"],["ø","o"],["ù","u"],["ú","u"],["û","u"],["ü","ue"],["ű","u"],["ý","y"],["þ","th"],["ÿ","y"],["ẞ","SS"],["à","a"],["À","A"],["á","a"],["Á","A"],["â","a"],["Â","A"],["ã","a"],["Ã","A"],["è","e"],["È","E"],["é","e"],["É","E"],["ê","e"],["Ê","E"],["ì","i"],["Ì","I"],["í","i"],["Í","I"],["ò","o"],["Ò","O"],["ó","o"],["Ó","O"],["ô","o"],["Ô","O"],["õ","o"],["Õ","O"],["ù","u"],["Ù","U"],["ú","u"],["Ú","U"],["ý","y"],["Ý","Y"],["ă","a"],["Ă","A"],["Đ","D"],["đ","d"],["ĩ","i"],["Ĩ","I"],["ũ","u"],["Ũ","U"],["ơ","o"],["Ơ","O"],["ư","u"],["Ư","U"],["ạ","a"],["Ạ","A"],["ả","a"],["Ả","A"],["ấ","a"],["Ấ","A"],["ầ","a"],["Ầ","A"],["ẩ","a"],["Ẩ","A"],["ẫ","a"],["Ẫ","A"],["ậ","a"],["Ậ","A"],["ắ","a"],["Ắ","A"],["ằ","a"],["Ằ","A"],["ẳ","a"],["Ẳ","A"],["ẵ","a"],["Ẵ","A"],["ặ","a"],["Ặ","A"],["ẹ","e"],["Ẹ","E"],["ẻ","e"],["Ẻ","E"],["ẽ","e"],["Ẽ","E"],["ế","e"],["Ế","E"],["ề","e"],["Ề","E"],["ể","e"],["Ể","E"],["ễ","e"],["Ễ","E"],["ệ","e"],["Ệ","E"],["ỉ","i"],["Ỉ","I"],["ị","i"],["Ị","I"],["ọ","o"],["Ọ","O"],["ỏ","o"],["Ỏ","O"],["ố","o"],["Ố","O"],["ồ","o"],["Ồ","O"],["ổ","o"],["Ổ","O"],["ỗ","o"],["Ỗ","O"],["ộ","o"],["Ộ","O"],["ớ","o"],["Ớ","O"],["ờ","o"],["Ờ","O"],["ở","o"],["Ở","O"],["ỡ","o"],["Ỡ","O"],["ợ","o"],["Ợ","O"],["ụ","u"],["Ụ","U"],["ủ","u"],["Ủ","U"],["ứ","u"],["Ứ","U"],["ừ","u"],["Ừ","U"],["ử","u"],["Ử","U"],["ữ","u"],["Ữ","U"],["ự","u"],["Ự","U"],["ỳ","y"],["Ỳ","Y"],["ỵ","y"],["Ỵ","Y"],["ỷ","y"],["Ỷ","Y"],["ỹ","y"],["Ỹ","Y"],["ء","e"],["آ","a"],["أ","a"],["ؤ","w"],["إ","i"],["ئ","y"],["ا","a"],["ب","b"],["ة","t"],["ت","t"],["ث","th"],["ج","j"],["ح","h"],["خ","kh"],["د","d"],["ذ","dh"],["ر","r"],["ز","z"],["س","s"],["ش","sh"],["ص","s"],["ض","d"],["ط","t"],["ظ","z"],["ع","e"],["غ","gh"],["ـ","_"],["ف","f"],["ق","q"],["ك","k"],["ل","l"],["م","m"],["ن","n"],["ه","h"],["و","w"],["ى","a"],["ي","y"],["َ‎","a"],["ُ","u"],["ِ‎","i"],["٠","0"],["١","1"],["٢","2"],["٣","3"],["٤","4"],["٥","5"],["٦","6"],["٧","7"],["٨","8"],["٩","9"],["چ","ch"],["ک","k"],["گ","g"],["پ","p"],["ژ","zh"],["ی","y"],["۰","0"],["۱","1"],["۲","2"],["۳","3"],["۴","4"],["۵","5"],["۶","6"],["۷","7"],["۸","8"],["۹","9"],["ټ","p"],["ځ","z"],["څ","c"],["ډ","d"],["ﺫ","d"],["ﺭ","r"],["ړ","r"],["ﺯ","z"],["ږ","g"],["ښ","x"],["ګ","g"],["ڼ","n"],["ۀ","e"],["ې","e"],["ۍ","ai"],["ٹ","t"],["ڈ","d"],["ڑ","r"],["ں","n"],["ہ","h"],["ھ","h"],["ے","e"],["А","A"],["а","a"],["Б","B"],["б","b"],["В","V"],["в","v"],["Г","G"],["г","g"],["Д","D"],["д","d"],["ъе","ye"],["Ъе","Ye"],["ъЕ","yE"],["ЪЕ","YE"],["Е","E"],["е","e"],["Ё","Yo"],["ё","yo"],["Ж","Zh"],["ж","zh"],["З","Z"],["з","z"],["И","I"],["и","i"],["ый","iy"],["Ый","Iy"],["ЫЙ","IY"],["ыЙ","iY"],["Й","Y"],["й","y"],["К","K"],["к","k"],["Л","L"],["л","l"],["М","M"],["м","m"],["Н","N"],["н","n"],["О","O"],["о","o"],["П","P"],["п","p"],["Р","R"],["р","r"],["С","S"],["с","s"],["Т","T"],["т","t"],["У","U"],["у","u"],["Ф","F"],["ф","f"],["Х","Kh"],["х","kh"],["Ц","Ts"],["ц","ts"],["Ч","Ch"],["ч","ch"],["Ш","Sh"],["ш","sh"],["Щ","Sch"],["щ","sch"],["Ъ",""],["ъ",""],["Ы","Y"],["ы","y"],["Ь",""],["ь",""],["Э","E"],["э","e"],["Ю","Yu"],["ю","yu"],["Я","Ya"],["я","ya"],["ă","a"],["Ă","A"],["ș","s"],["Ș","S"],["ț","t"],["Ț","T"],["ţ","t"],["Ţ","T"],["ş","s"],["Ş","S"],["ç","c"],["Ç","C"],["ğ","g"],["Ğ","G"],["ı","i"],["İ","I"],["ա","a"],["Ա","A"],["բ","b"],["Բ","B"],["գ","g"],["Գ","G"],["դ","d"],["Դ","D"],["ե","ye"],["Ե","Ye"],["զ","z"],["Զ","Z"],["է","e"],["Է","E"],["ը","y"],["Ը","Y"],["թ","t"],["Թ","T"],["ժ","zh"],["Ժ","Zh"],["ի","i"],["Ի","I"],["լ","l"],["Լ","L"],["խ","kh"],["Խ","Kh"],["ծ","ts"],["Ծ","Ts"],["կ","k"],["Կ","K"],["հ","h"],["Հ","H"],["ձ","dz"],["Ձ","Dz"],["ղ","gh"],["Ղ","Gh"],["ճ","tch"],["Ճ","Tch"],["մ","m"],["Մ","M"],["յ","y"],["Յ","Y"],["ն","n"],["Ն","N"],["շ","sh"],["Շ","Sh"],["ո","vo"],["Ո","Vo"],["չ","ch"],["Չ","Ch"],["պ","p"],["Պ","P"],["ջ","j"],["Ջ","J"],["ռ","r"],["Ռ","R"],["ս","s"],["Ս","S"],["վ","v"],["Վ","V"],["տ","t"],["Տ","T"],["ր","r"],["Ր","R"],["ց","c"],["Ց","C"],["ու","u"],["ՈՒ","U"],["Ու","U"],["փ","p"],["Փ","P"],["ք","q"],["Ք","Q"],["օ","o"],["Օ","O"],["ֆ","f"],["Ֆ","F"],["և","yev"],["ა","a"],["ბ","b"],["გ","g"],["დ","d"],["ე","e"],["ვ","v"],["ზ","z"],["თ","t"],["ი","i"],["კ","k"],["ლ","l"],["მ","m"],["ნ","n"],["ო","o"],["პ","p"],["ჟ","zh"],["რ","r"],["ს","s"],["ტ","t"],["უ","u"],["ფ","ph"],["ქ","q"],["ღ","gh"],["ყ","k"],["შ","sh"],["ჩ","ch"],["ც","ts"],["ძ","dz"],["წ","ts"],["ჭ","tch"],["ხ","kh"],["ჯ","j"],["ჰ","h"],["č","c"],["ď","d"],["ě","e"],["ň","n"],["ř","r"],["š","s"],["ť","t"],["ů","u"],["ž","z"],["Č","C"],["Ď","D"],["Ě","E"],["Ň","N"],["Ř","R"],["Š","S"],["Ť","T"],["Ů","U"],["Ž","Z"],["ހ","h"],["ށ","sh"],["ނ","n"],["ރ","r"],["ބ","b"],["ޅ","lh"],["ކ","k"],["އ","a"],["ވ","v"],["މ","m"],["ފ","f"],["ދ","dh"],["ތ","th"],["ލ","l"],["ގ","g"],["ޏ","gn"],["ސ","s"],["ޑ","d"],["ޒ","z"],["ޓ","t"],["ޔ","y"],["ޕ","p"],["ޖ","j"],["ޗ","ch"],["ޘ","tt"],["ޙ","hh"],["ޚ","kh"],["ޛ","th"],["ޜ","z"],["ޝ","sh"],["ޞ","s"],["ޟ","d"],["ޠ","t"],["ޡ","z"],["ޢ","a"],["ޣ","gh"],["ޤ","q"],["ޥ","w"],["ަ","a"],["ާ","aa"],["ި","i"],["ީ","ee"],["ު","u"],["ޫ","oo"],["ެ","e"],["ޭ","ey"],["ޮ","o"],["ޯ","oa"],["ް",""],["α","a"],["β","v"],["γ","g"],["δ","d"],["ε","e"],["ζ","z"],["η","i"],["θ","th"],["ι","i"],["κ","k"],["λ","l"],["μ","m"],["ν","n"],["ξ","ks"],["ο","o"],["π","p"],["ρ","r"],["σ","s"],["τ","t"],["υ","y"],["φ","f"],["χ","x"],["ψ","ps"],["ω","o"],["ά","a"],["έ","e"],["ί","i"],["ό","o"],["ύ","y"],["ή","i"],["ώ","o"],["ς","s"],["ϊ","i"],["ΰ","y"],["ϋ","y"],["ΐ","i"],["Α","A"],["Β","B"],["Γ","G"],["Δ","D"],["Ε","E"],["Ζ","Z"],["Η","I"],["Θ","TH"],["Ι","I"],["Κ","K"],["Λ","L"],["Μ","M"],["Ν","N"],["Ξ","KS"],["Ο","O"],["Π","P"],["Ρ","R"],["Σ","S"],["Τ","T"],["Υ","Y"],["Φ","F"],["Χ","X"],["Ψ","PS"],["Ω","O"],["Ά","A"],["Έ","E"],["Ί","I"],["Ό","O"],["Ύ","Y"],["Ή","I"],["Ώ","O"],["Ϊ","I"],["Ϋ","Y"],["ā","a"],["ē","e"],["ģ","g"],["ī","i"],["ķ","k"],["ļ","l"],["ņ","n"],["ū","u"],["Ā","A"],["Ē","E"],["Ģ","G"],["Ī","I"],["Ķ","K"],["Ļ","L"],["Ņ","N"],["Ū","U"],["č","c"],["š","s"],["ž","z"],["Č","C"],["Š","S"],["Ž","Z"],["ą","a"],["č","c"],["ę","e"],["ė","e"],["į","i"],["š","s"],["ų","u"],["ū","u"],["ž","z"],["Ą","A"],["Č","C"],["Ę","E"],["Ė","E"],["Į","I"],["Š","S"],["Ų","U"],["Ū","U"],["Ќ","Kj"],["ќ","kj"],["Љ","Lj"],["љ","lj"],["Њ","Nj"],["њ","nj"],["Тс","Ts"],["тс","ts"],["ą","a"],["ć","c"],["ę","e"],["ł","l"],["ń","n"],["ś","s"],["ź","z"],["ż","z"],["Ą","A"],["Ć","C"],["Ę","E"],["Ł","L"],["Ń","N"],["Ś","S"],["Ź","Z"],["Ż","Z"],["Є","Ye"],["І","I"],["Ї","Yi"],["Ґ","G"],["є","ye"],["і","i"],["ї","yi"],["ґ","g"],["Ĳ","IJ"],["ĳ","ij"],["¢","c"],["¥","Y"],["߿","b"],["৳","t"],["૱","Bo"],["฿","B"],["₠","CE"],["₡","C"],["₢","Cr"],["₣","F"],["₥","m"],["₦","N"],["₧","Pt"],["₨","Rs"],["₩","W"],["₫","s"],["€","E"],["₭","K"],["₮","T"],["₯","Dp"],["₰","S"],["₱","P"],["₲","G"],["₳","A"],["₴","S"],["₵","C"],["₶","tt"],["₷","S"],["₸","T"],["₹","R"],["₺","L"],["₽","P"],["₿","B"],["﹩","$"],["￠","c"],["￥","Y"],["￦","W"],["𝐀","A"],["𝐁","B"],["𝐂","C"],["𝐃","D"],["𝐄","E"],["𝐅","F"],["𝐆","G"],["𝐇","H"],["𝐈","I"],["𝐉","J"],["𝐊","K"],["𝐋","L"],["𝐌","M"],["𝐍","N"],["𝐎","O"],["𝐏","P"],["𝐐","Q"],["𝐑","R"],["𝐒","S"],["𝐓","T"],["𝐔","U"],["𝐕","V"],["𝐖","W"],["𝐗","X"],["𝐘","Y"],["𝐙","Z"],["𝐚","a"],["𝐛","b"],["𝐜","c"],["𝐝","d"],["𝐞","e"],["𝐟","f"],["𝐠","g"],["𝐡","h"],["𝐢","i"],["𝐣","j"],["𝐤","k"],["𝐥","l"],["𝐦","m"],["𝐧","n"],["𝐨","o"],["𝐩","p"],["𝐪","q"],["𝐫","r"],["𝐬","s"],["𝐭","t"],["𝐮","u"],["𝐯","v"],["𝐰","w"],["𝐱","x"],["𝐲","y"],["𝐳","z"],["𝐴","A"],["𝐵","B"],["𝐶","C"],["𝐷","D"],["𝐸","E"],["𝐹","F"],["𝐺","G"],["𝐻","H"],["𝐼","I"],["𝐽","J"],["𝐾","K"],["𝐿","L"],["𝑀","M"],["𝑁","N"],["𝑂","O"],["𝑃","P"],["𝑄","Q"],["𝑅","R"],["𝑆","S"],["𝑇","T"],["𝑈","U"],["𝑉","V"],["𝑊","W"],["𝑋","X"],["𝑌","Y"],["𝑍","Z"],["𝑎","a"],["𝑏","b"],["𝑐","c"],["𝑑","d"],["𝑒","e"],["𝑓","f"],["𝑔","g"],["𝑖","i"],["𝑗","j"],["𝑘","k"],["𝑙","l"],["𝑚","m"],["𝑛","n"],["𝑜","o"],["𝑝","p"],["𝑞","q"],["𝑟","r"],["𝑠","s"],["𝑡","t"],["𝑢","u"],["𝑣","v"],["𝑤","w"],["𝑥","x"],["𝑦","y"],["𝑧","z"],["𝑨","A"],["𝑩","B"],["𝑪","C"],["𝑫","D"],["𝑬","E"],["𝑭","F"],["𝑮","G"],["𝑯","H"],["𝑰","I"],["𝑱","J"],["𝑲","K"],["𝑳","L"],["𝑴","M"],["𝑵","N"],["𝑶","O"],["𝑷","P"],["𝑸","Q"],["𝑹","R"],["𝑺","S"],["𝑻","T"],["𝑼","U"],["𝑽","V"],["𝑾","W"],["𝑿","X"],["𝒀","Y"],["𝒁","Z"],["𝒂","a"],["𝒃","b"],["𝒄","c"],["𝒅","d"],["𝒆","e"],["𝒇","f"],["𝒈","g"],["𝒉","h"],["𝒊","i"],["𝒋","j"],["𝒌","k"],["𝒍","l"],["𝒎","m"],["𝒏","n"],["𝒐","o"],["𝒑","p"],["𝒒","q"],["𝒓","r"],["𝒔","s"],["𝒕","t"],["𝒖","u"],["𝒗","v"],["𝒘","w"],["𝒙","x"],["𝒚","y"],["𝒛","z"],["𝒜","A"],["𝒞","C"],["𝒟","D"],["𝒢","g"],["𝒥","J"],["𝒦","K"],["𝒩","N"],["𝒪","O"],["𝒫","P"],["𝒬","Q"],["𝒮","S"],["𝒯","T"],["𝒰","U"],["𝒱","V"],["𝒲","W"],["𝒳","X"],["𝒴","Y"],["𝒵","Z"],["𝒶","a"],["𝒷","b"],["𝒸","c"],["𝒹","d"],["𝒻","f"],["𝒽","h"],["𝒾","i"],["𝒿","j"],["𝓀","h"],["𝓁","l"],["𝓂","m"],["𝓃","n"],["𝓅","p"],["𝓆","q"],["𝓇","r"],["𝓈","s"],["𝓉","t"],["𝓊","u"],["𝓋","v"],["𝓌","w"],["𝓍","x"],["𝓎","y"],["𝓏","z"],["𝓐","A"],["𝓑","B"],["𝓒","C"],["𝓓","D"],["𝓔","E"],["𝓕","F"],["𝓖","G"],["𝓗","H"],["𝓘","I"],["𝓙","J"],["𝓚","K"],["𝓛","L"],["𝓜","M"],["𝓝","N"],["𝓞","O"],["𝓟","P"],["𝓠","Q"],["𝓡","R"],["𝓢","S"],["𝓣","T"],["𝓤","U"],["𝓥","V"],["𝓦","W"],["𝓧","X"],["𝓨","Y"],["𝓩","Z"],["𝓪","a"],["𝓫","b"],["𝓬","c"],["𝓭","d"],["𝓮","e"],["𝓯","f"],["𝓰","g"],["𝓱","h"],["𝓲","i"],["𝓳","j"],["𝓴","k"],["𝓵","l"],["𝓶","m"],["𝓷","n"],["𝓸","o"],["𝓹","p"],["𝓺","q"],["𝓻","r"],["𝓼","s"],["𝓽","t"],["𝓾","u"],["𝓿","v"],["𝔀","w"],["𝔁","x"],["𝔂","y"],["𝔃","z"],["𝔄","A"],["𝔅","B"],["𝔇","D"],["𝔈","E"],["𝔉","F"],["𝔊","G"],["𝔍","J"],["𝔎","K"],["𝔏","L"],["𝔐","M"],["𝔑","N"],["𝔒","O"],["𝔓","P"],["𝔔","Q"],["𝔖","S"],["𝔗","T"],["𝔘","U"],["𝔙","V"],["𝔚","W"],["𝔛","X"],["𝔜","Y"],["𝔞","a"],["𝔟","b"],["𝔠","c"],["𝔡","d"],["𝔢","e"],["𝔣","f"],["𝔤","g"],["𝔥","h"],["𝔦","i"],["𝔧","j"],["𝔨","k"],["𝔩","l"],["𝔪","m"],["𝔫","n"],["𝔬","o"],["𝔭","p"],["𝔮","q"],["𝔯","r"],["𝔰","s"],["𝔱","t"],["𝔲","u"],["𝔳","v"],["𝔴","w"],["𝔵","x"],["𝔶","y"],["𝔷","z"],["𝔸","A"],["𝔹","B"],["𝔻","D"],["𝔼","E"],["𝔽","F"],["𝔾","G"],["𝕀","I"],["𝕁","J"],["𝕂","K"],["𝕃","L"],["𝕄","M"],["𝕆","N"],["𝕊","S"],["𝕋","T"],["𝕌","U"],["𝕍","V"],["𝕎","W"],["𝕏","X"],["𝕐","Y"],["𝕒","a"],["𝕓","b"],["𝕔","c"],["𝕕","d"],["𝕖","e"],["𝕗","f"],["𝕘","g"],["𝕙","h"],["𝕚","i"],["𝕛","j"],["𝕜","k"],["𝕝","l"],["𝕞","m"],["𝕟","n"],["𝕠","o"],["𝕡","p"],["𝕢","q"],["𝕣","r"],["𝕤","s"],["𝕥","t"],["𝕦","u"],["𝕧","v"],["𝕨","w"],["𝕩","x"],["𝕪","y"],["𝕫","z"],["𝕬","A"],["𝕭","B"],["𝕮","C"],["𝕯","D"],["𝕰","E"],["𝕱","F"],["𝕲","G"],["𝕳","H"],["𝕴","I"],["𝕵","J"],["𝕶","K"],["𝕷","L"],["𝕸","M"],["𝕹","N"],["𝕺","O"],["𝕻","P"],["𝕼","Q"],["𝕽","R"],["𝕾","S"],["𝕿","T"],["𝖀","U"],["𝖁","V"],["𝖂","W"],["𝖃","X"],["𝖄","Y"],["𝖅","Z"],["𝖆","a"],["𝖇","b"],["𝖈","c"],["𝖉","d"],["𝖊","e"],["𝖋","f"],["𝖌","g"],["𝖍","h"],["𝖎","i"],["𝖏","j"],["𝖐","k"],["𝖑","l"],["𝖒","m"],["𝖓","n"],["𝖔","o"],["𝖕","p"],["𝖖","q"],["𝖗","r"],["𝖘","s"],["𝖙","t"],["𝖚","u"],["𝖛","v"],["𝖜","w"],["𝖝","x"],["𝖞","y"],["𝖟","z"],["𝖠","A"],["𝖡","B"],["𝖢","C"],["𝖣","D"],["𝖤","E"],["𝖥","F"],["𝖦","G"],["𝖧","H"],["𝖨","I"],["𝖩","J"],["𝖪","K"],["𝖫","L"],["𝖬","M"],["𝖭","N"],["𝖮","O"],["𝖯","P"],["𝖰","Q"],["𝖱","R"],["𝖲","S"],["𝖳","T"],["𝖴","U"],["𝖵","V"],["𝖶","W"],["𝖷","X"],["𝖸","Y"],["𝖹","Z"],["𝖺","a"],["𝖻","b"],["𝖼","c"],["𝖽","d"],["𝖾","e"],["𝖿","f"],["𝗀","g"],["𝗁","h"],["𝗂","i"],["𝗃","j"],["𝗄","k"],["𝗅","l"],["𝗆","m"],["𝗇","n"],["𝗈","o"],["𝗉","p"],["𝗊","q"],["𝗋","r"],["𝗌","s"],["𝗍","t"],["𝗎","u"],["𝗏","v"],["𝗐","w"],["𝗑","x"],["𝗒","y"],["𝗓","z"],["𝗔","A"],["𝗕","B"],["𝗖","C"],["𝗗","D"],["𝗘","E"],["𝗙","F"],["𝗚","G"],["𝗛","H"],["𝗜","I"],["𝗝","J"],["𝗞","K"],["𝗟","L"],["𝗠","M"],["𝗡","N"],["𝗢","O"],["𝗣","P"],["𝗤","Q"],["𝗥","R"],["𝗦","S"],["𝗧","T"],["𝗨","U"],["𝗩","V"],["𝗪","W"],["𝗫","X"],["𝗬","Y"],["𝗭","Z"],["𝗮","a"],["𝗯","b"],["𝗰","c"],["𝗱","d"],["𝗲","e"],["𝗳","f"],["𝗴","g"],["𝗵","h"],["𝗶","i"],["𝗷","j"],["𝗸","k"],["𝗹","l"],["𝗺","m"],["𝗻","n"],["𝗼","o"],["𝗽","p"],["𝗾","q"],["𝗿","r"],["𝘀","s"],["𝘁","t"],["𝘂","u"],["𝘃","v"],["𝘄","w"],["𝘅","x"],["𝘆","y"],["𝘇","z"],["𝘈","A"],["𝘉","B"],["𝘊","C"],["𝘋","D"],["𝘌","E"],["𝘍","F"],["𝘎","G"],["𝘏","H"],["𝘐","I"],["𝘑","J"],["𝘒","K"],["𝘓","L"],["𝘔","M"],["𝘕","N"],["𝘖","O"],["𝘗","P"],["𝘘","Q"],["𝘙","R"],["𝘚","S"],["𝘛","T"],["𝘜","U"],["𝘝","V"],["𝘞","W"],["𝘟","X"],["𝘠","Y"],["𝘡","Z"],["𝘢","a"],["𝘣","b"],["𝘤","c"],["𝘥","d"],["𝘦","e"],["𝘧","f"],["𝘨","g"],["𝘩","h"],["𝘪","i"],["𝘫","j"],["𝘬","k"],["𝘭","l"],["𝘮","m"],["𝘯","n"],["𝘰","o"],["𝘱","p"],["𝘲","q"],["𝘳","r"],["𝘴","s"],["𝘵","t"],["𝘶","u"],["𝘷","v"],["𝘸","w"],["𝘹","x"],["𝘺","y"],["𝘻","z"],["𝘼","A"],["𝘽","B"],["𝘾","C"],["𝘿","D"],["𝙀","E"],["𝙁","F"],["𝙂","G"],["𝙃","H"],["𝙄","I"],["𝙅","J"],["𝙆","K"],["𝙇","L"],["𝙈","M"],["𝙉","N"],["𝙊","O"],["𝙋","P"],["𝙌","Q"],["𝙍","R"],["𝙎","S"],["𝙏","T"],["𝙐","U"],["𝙑","V"],["𝙒","W"],["𝙓","X"],["𝙔","Y"],["𝙕","Z"],["𝙖","a"],["𝙗","b"],["𝙘","c"],["𝙙","d"],["𝙚","e"],["𝙛","f"],["𝙜","g"],["𝙝","h"],["𝙞","i"],["𝙟","j"],["𝙠","k"],["𝙡","l"],["𝙢","m"],["𝙣","n"],["𝙤","o"],["𝙥","p"],["𝙦","q"],["𝙧","r"],["𝙨","s"],["𝙩","t"],["𝙪","u"],["𝙫","v"],["𝙬","w"],["𝙭","x"],["𝙮","y"],["𝙯","z"],["𝙰","A"],["𝙱","B"],["𝙲","C"],["𝙳","D"],["𝙴","E"],["𝙵","F"],["𝙶","G"],["𝙷","H"],["𝙸","I"],["𝙹","J"],["𝙺","K"],["𝙻","L"],["𝙼","M"],["𝙽","N"],["𝙾","O"],["𝙿","P"],["𝚀","Q"],["𝚁","R"],["𝚂","S"],["𝚃","T"],["𝚄","U"],["𝚅","V"],["𝚆","W"],["𝚇","X"],["𝚈","Y"],["𝚉","Z"],["𝚊","a"],["𝚋","b"],["𝚌","c"],["𝚍","d"],["𝚎","e"],["𝚏","f"],["𝚐","g"],["𝚑","h"],["𝚒","i"],["𝚓","j"],["𝚔","k"],["𝚕","l"],["𝚖","m"],["𝚗","n"],["𝚘","o"],["𝚙","p"],["𝚚","q"],["𝚛","r"],["𝚜","s"],["𝚝","t"],["𝚞","u"],["𝚟","v"],["𝚠","w"],["𝚡","x"],["𝚢","y"],["𝚣","z"],["𝚤","l"],["𝚥","j"],["𝛢","A"],["𝛣","B"],["𝛤","G"],["𝛥","D"],["𝛦","E"],["𝛧","Z"],["𝛨","I"],["𝛩","TH"],["𝛪","I"],["𝛫","K"],["𝛬","L"],["𝛭","M"],["𝛮","N"],["𝛯","KS"],["𝛰","O"],["𝛱","P"],["𝛲","R"],["𝛳","TH"],["𝛴","S"],["𝛵","T"],["𝛶","Y"],["𝛷","F"],["𝛸","x"],["𝛹","PS"],["𝛺","O"],["𝛻","D"],["𝛼","a"],["𝛽","b"],["𝛾","g"],["𝛿","d"],["𝜀","e"],["𝜁","z"],["𝜂","i"],["𝜃","th"],["𝜄","i"],["𝜅","k"],["𝜆","l"],["𝜇","m"],["𝜈","n"],["𝜉","ks"],["𝜊","o"],["𝜋","p"],["𝜌","r"],["𝜍","s"],["𝜎","s"],["𝜏","t"],["𝜐","y"],["𝜑","f"],["𝜒","x"],["𝜓","ps"],["𝜔","o"],["𝜕","d"],["𝜖","E"],["𝜗","TH"],["𝜘","K"],["𝜙","f"],["𝜚","r"],["𝜛","p"],["𝜜","A"],["𝜝","V"],["𝜞","G"],["𝜟","D"],["𝜠","E"],["𝜡","Z"],["𝜢","I"],["𝜣","TH"],["𝜤","I"],["𝜥","K"],["𝜦","L"],["𝜧","M"],["𝜨","N"],["𝜩","KS"],["𝜪","O"],["𝜫","P"],["𝜬","S"],["𝜭","TH"],["𝜮","S"],["𝜯","T"],["𝜰","Y"],["𝜱","F"],["𝜲","X"],["𝜳","PS"],["𝜴","O"],["𝜵","D"],["𝜶","a"],["𝜷","v"],["𝜸","g"],["𝜹","d"],["𝜺","e"],["𝜻","z"],["𝜼","i"],["𝜽","th"],["𝜾","i"],["𝜿","k"],["𝝀","l"],["𝝁","m"],["𝝂","n"],["𝝃","ks"],["𝝄","o"],["𝝅","p"],["𝝆","r"],["𝝇","s"],["𝝈","s"],["𝝉","t"],["𝝊","y"],["𝝋","f"],["𝝌","x"],["𝝍","ps"],["𝝎","o"],["𝝏","a"],["𝝐","e"],["𝝑","i"],["𝝒","k"],["𝝓","f"],["𝝔","r"],["𝝕","p"],["𝝖","A"],["𝝗","B"],["𝝘","G"],["𝝙","D"],["𝝚","E"],["𝝛","Z"],["𝝜","I"],["𝝝","TH"],["𝝞","I"],["𝝟","K"],["𝝠","L"],["𝝡","M"],["𝝢","N"],["𝝣","KS"],["𝝤","O"],["𝝥","P"],["𝝦","R"],["𝝧","TH"],["𝝨","S"],["𝝩","T"],["𝝪","Y"],["𝝫","F"],["𝝬","X"],["𝝭","PS"],["𝝮","O"],["𝝯","D"],["𝝰","a"],["𝝱","v"],["𝝲","g"],["𝝳","d"],["𝝴","e"],["𝝵","z"],["𝝶","i"],["𝝷","th"],["𝝸","i"],["𝝹","k"],["𝝺","l"],["𝝻","m"],["𝝼","n"],["𝝽","ks"],["𝝾","o"],["𝝿","p"],["𝞀","r"],["𝞁","s"],["𝞂","s"],["𝞃","t"],["𝞄","y"],["𝞅","f"],["𝞆","x"],["𝞇","ps"],["𝞈","o"],["𝞉","a"],["𝞊","e"],["𝞋","i"],["𝞌","k"],["𝞍","f"],["𝞎","r"],["𝞏","p"],["𝞐","A"],["𝞑","V"],["𝞒","G"],["𝞓","D"],["𝞔","E"],["𝞕","Z"],["𝞖","I"],["𝞗","TH"],["𝞘","I"],["𝞙","K"],["𝞚","L"],["𝞛","M"],["𝞜","N"],["𝞝","KS"],["𝞞","O"],["𝞟","P"],["𝞠","S"],["𝞡","TH"],["𝞢","S"],["𝞣","T"],["𝞤","Y"],["𝞥","F"],["𝞦","X"],["𝞧","PS"],["𝞨","O"],["𝞩","D"],["𝞪","av"],["𝞫","g"],["𝞬","d"],["𝞭","e"],["𝞮","z"],["𝞯","i"],["𝞰","i"],["𝞱","th"],["𝞲","i"],["𝞳","k"],["𝞴","l"],["𝞵","m"],["𝞶","n"],["𝞷","ks"],["𝞸","o"],["𝞹","p"],["𝞺","r"],["𝞻","s"],["𝞼","s"],["𝞽","t"],["𝞾","y"],["𝞿","f"],["𝟀","x"],["𝟁","ps"],["𝟂","o"],["𝟃","a"],["𝟄","e"],["𝟅","i"],["𝟆","k"],["𝟇","f"],["𝟈","r"],["𝟉","p"],["𝟊","F"],["𝟋","f"],["⒜","(a)"],["⒝","(b)"],["⒞","(c)"],["⒟","(d)"],["⒠","(e)"],["⒡","(f)"],["⒢","(g)"],["⒣","(h)"],["⒤","(i)"],["⒥","(j)"],["⒦","(k)"],["⒧","(l)"],["⒨","(m)"],["⒩","(n)"],["⒪","(o)"],["⒫","(p)"],["⒬","(q)"],["⒭","(r)"],["⒮","(s)"],["⒯","(t)"],["⒰","(u)"],["⒱","(v)"],["⒲","(w)"],["⒳","(x)"],["⒴","(y)"],["⒵","(z)"],["Ⓐ","(A)"],["Ⓑ","(B)"],["Ⓒ","(C)"],["Ⓓ","(D)"],["Ⓔ","(E)"],["Ⓕ","(F)"],["Ⓖ","(G)"],["Ⓗ","(H)"],["Ⓘ","(I)"],["Ⓙ","(J)"],["Ⓚ","(K)"],["Ⓛ","(L)"],["Ⓝ","(N)"],["Ⓞ","(O)"],["Ⓟ","(P)"],["Ⓠ","(Q)"],["Ⓡ","(R)"],["Ⓢ","(S)"],["Ⓣ","(T)"],["Ⓤ","(U)"],["Ⓥ","(V)"],["Ⓦ","(W)"],["Ⓧ","(X)"],["Ⓨ","(Y)"],["Ⓩ","(Z)"],["ⓐ","(a)"],["ⓑ","(b)"],["ⓒ","(b)"],["ⓓ","(c)"],["ⓔ","(e)"],["ⓕ","(f)"],["ⓖ","(g)"],["ⓗ","(h)"],["ⓘ","(i)"],["ⓙ","(j)"],["ⓚ","(k)"],["ⓛ","(l)"],["ⓜ","(m)"],["ⓝ","(n)"],["ⓞ","(o)"],["ⓟ","(p)"],["ⓠ","(q)"],["ⓡ","(r)"],["ⓢ","(s)"],["ⓣ","(t)"],["ⓤ","(u)"],["ⓥ","(v)"],["ⓦ","(w)"],["ⓧ","(x)"],["ⓨ","(y)"],["ⓩ","(z)"],["Ċ","C"],["ċ","c"],["Ġ","G"],["ġ","g"],["Ħ","H"],["ħ","h"],["Ż","Z"],["ż","z"],["𝟎","0"],["𝟏","1"],["𝟐","2"],["𝟑","3"],["𝟒","4"],["𝟓","5"],["𝟔","6"],["𝟕","7"],["𝟖","8"],["𝟗","9"],["𝟘","0"],["𝟙","1"],["𝟚","2"],["𝟛","3"],["𝟜","4"],["𝟝","5"],["𝟞","6"],["𝟟","7"],["𝟠","8"],["𝟡","9"],["𝟢","0"],["𝟣","1"],["𝟤","2"],["𝟥","3"],["𝟦","4"],["𝟧","5"],["𝟨","6"],["𝟩","7"],["𝟪","8"],["𝟫","9"],["𝟬","0"],["𝟭","1"],["𝟮","2"],["𝟯","3"],["𝟰","4"],["𝟱","5"],["𝟲","6"],["𝟳","7"],["𝟴","8"],["𝟵","9"],["𝟶","0"],["𝟷","1"],["𝟸","2"],["𝟹","3"],["𝟺","4"],["𝟻","5"],["𝟼","6"],["𝟽","7"],["𝟾","8"],["𝟿","9"],["①","1"],["②","2"],["③","3"],["④","4"],["⑤","5"],["⑥","6"],["⑦","7"],["⑧","8"],["⑨","9"],["⑩","10"],["⑪","11"],["⑫","12"],["⑬","13"],["⑭","14"],["⑮","15"],["⑯","16"],["⑰","17"],["⑱","18"],["⑲","19"],["⑳","20"],["⑴","1"],["⑵","2"],["⑶","3"],["⑷","4"],["⑸","5"],["⑹","6"],["⑺","7"],["⑻","8"],["⑼","9"],["⑽","10"],["⑾","11"],["⑿","12"],["⒀","13"],["⒁","14"],["⒂","15"],["⒃","16"],["⒄","17"],["⒅","18"],["⒆","19"],["⒇","20"],["⒈","1."],["⒉","2."],["⒊","3."],["⒋","4."],["⒌","5."],["⒍","6."],["⒎","7."],["⒏","8."],["⒐","9."],["⒑","10."],["⒒","11."],["⒓","12."],["⒔","13."],["⒕","14."],["⒖","15."],["⒗","16."],["⒘","17."],["⒙","18."],["⒚","19."],["⒛","20."],["⓪","0"],["⓫","11"],["⓬","12"],["⓭","13"],["⓮","14"],["⓯","15"],["⓰","16"],["⓱","17"],["⓲","18"],["⓳","19"],["⓴","20"],["⓵","1"],["⓶","2"],["⓷","3"],["⓸","4"],["⓹","5"],["⓺","6"],["⓻","7"],["⓼","8"],["⓽","9"],["⓾","10"],["⓿","0"],["🙰","&"],["🙱","&"],["🙲","&"],["🙳","&"],["🙴","&"],["🙵","&"],["🙶",'"'],["🙷",'"'],["🙸",'"'],["‽","?!"],["🙹","?!"],["🙺","?!"],["🙻","?!"],["🙼","/"],["🙽","\\"],["🜇","AR"],["🜈","V"],["🜉","V"],["🜆","VR"],["🜅","VF"],["🜩","2"],["🜪","5"],["🝡","f"],["🝢","W"],["🝣","U"],["🝧","V"],["🝨","T"],["🝪","V"],["🝫","MB"],["🝬","VB"],["🝲","3B"],["🝳","3B"],["💯","100"],["🔙","BACK"],["🔚","END"],["🔛","ON!"],["🔜","SOON"],["🔝","TOP"],["🔞","18"],["🔤","abc"],["🔠","ABCD"],["🔡","abcd"],["🔢","1234"],["🔣","T&@%"],["#️⃣","#"],["*️⃣","*"],["0️⃣","0"],["1️⃣","1"],["2️⃣","2"],["3️⃣","3"],["4️⃣","4"],["5️⃣","5"],["6️⃣","6"],["7️⃣","7"],["8️⃣","8"],["9️⃣","9"],["🔟","10"],["🅰️","A"],["🅱️","B"],["🆎","AB"],["🆑","CL"],["🅾️","O"],["🅿","P"],["🆘","SOS"],["🅲","C"],["🅳","D"],["🅴","E"],["🅵","F"],["🅶","G"],["🅷","H"],["🅸","I"],["🅹","J"],["🅺","K"],["🅻","L"],["🅼","M"],["🅽","N"],["🆀","Q"],["🆁","R"],["🆂","S"],["🆃","T"],["🆄","U"],["🆅","V"],["🆆","W"],["🆇","X"],["🆈","Y"],["🆉","Z"]];function h$1(o,h){if("string"!=typeof o)throw new TypeError(`Expected a string, got \`${typeof o}\``);h=t$1({customReplacements:[]},h);const r=new Map([...s,...h.customReplacements]);return o=((e,t)=>{for(const[o,s]of t)e=e.replace(new RegExp(a(o),"g"),s);return e})(o=o.normalize(),r),e$1(o)}

    var index_modern = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': h$1
    });

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const emptyString$1 = '';

    /**
    @private
    */
    class StringScanner$1 {
      /**
      @param {string} string
      */
      constructor(string) {
        /** @type {string[]} */
        this.chars = [ ...string ];

        /** @type {number} */
        this.charCount = this.chars.length;

        /** @type {number} */
        this.charIndex = 0;

        /** @type {number[]} */
        this.charsToBytes = new Array(this.charCount);

        /** @type {boolean} */
        this.multiByteMode = false;

        /** @type {string} */
        this.string = string;

        let { chars, charCount, charsToBytes } = this;

        if (charCount === string.length) {
          // There are no multibyte characters in the input string, so char indexes
          // and byte indexes are the same.
          for (let i = 0; i < charCount; ++i) {
            charsToBytes[i] = i;
          }
        } else {
          // Create a mapping of character indexes to byte indexes. When the string
          // contains multibyte characters, a byte index may not necessarily align
          // with a character index.
          for (let byteIndex = 0, charIndex = 0; charIndex < charCount; ++charIndex) {
            charsToBytes[charIndex] = byteIndex;
            byteIndex += chars[charIndex].length;
          }

          this.multiByteMode = true;
        }
      }

      /**
      Whether the current character index is at the end of the input string.

      @type {boolean}
      */
      get isEnd() {
        return this.charIndex >= this.charCount;
      }

      // -- Protected Methods ------------------------------------------------------

      /**
      Returns the number of characters in the given _string_, which may differ from
      the byte length if the string contains multibyte characters.

      @param {string} string
      @returns {number}
      */
      _charLength(string) {
        let { length } = string;

        if (length < 2 || !this.multiByteMode) {
          return length;
        }

        // We could get the char length with `[ ...string ].length`, but that's
        // actually slower than this approach, which replaces surrogate pairs with
        // single-byte characters.
        return string.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, '_').length;
      }

      // -- Public Methods ---------------------------------------------------------

      /**
      Advances the scanner by the given number of characters, stopping if the end of
      the string is reached.

      @param {number} [count]
      */
      advance(count = 1) {
        this.charIndex = Math.min(this.charCount, this.charIndex + count);
      }

      /**
      Consumes and returns the given number of characters if possible, advancing the
      scanner and stopping if the end of the string is reached.

      If no characters could be consumed, an empty string will be returned.

      @param {number} [count]
      @returns {string}
      */
      consume(count = 1) {
        let chars = this.peek(count);
        this.advance(count);
        return chars;
      }

      /**
      Consumes a match for the given sticky regex, advances the scanner, updates the
      `lastIndex` property of the regex, and returns the matching string.

      The regex must have a sticky flag ("y") so that its `lastIndex` prop can be
      used to anchor the match at the current scanner position.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {RegExp} regex
      @returns {string}
      */
      consumeMatch(regex) {
        if (!regex.sticky) {
          throw new Error('`regex` must have a sticky flag ("y")');
        }

        regex.lastIndex = this.charsToBytes[this.charIndex];

        let result = regex.exec(this.string);

        if (result === null) {
          return emptyString$1;
        }

        let match = result[0];
        this.advance(this._charLength(match));
        return match;
      }

      /**
      Consumes and returns all characters for which the given function returns a
      truthy value, stopping on the first falsy return value or if the end of the
      input is reached.

      @param {(char: string) => boolean} fn
      @returns {string}
      */
      consumeMatchFn(fn) {
        let startIndex = this.charIndex;

        while (!this.isEnd && fn(this.peek())) {
          this.advance();
        }

        return this.charIndex > startIndex
          ? this.string.slice(this.charsToBytes[startIndex], this.charsToBytes[this.charIndex])
          : emptyString$1;
      }

      /**
      Consumes the given string if it exists at the current character index, and
      advances the scanner.

      If the given string doesn't exist at the current character index, an empty
      string will be returned and the scanner will not be advanced.

      @param {string} stringToConsume
      @returns {string}
      */
      consumeString(stringToConsume) {
        if (this.consumeStringFast(stringToConsume)) {
          return stringToConsume;
        }

        if (!this.multiByteMode) {
          return emptyString$1;
        }

        let { length } = stringToConsume;
        let charLengthToMatch = this._charLength(stringToConsume);

        if (charLengthToMatch !== length
            && stringToConsume === this.peek(charLengthToMatch)) {

          this.advance(charLengthToMatch);
          return stringToConsume;
        }

        return emptyString$1;
      }

      /**
       * Does the same thing as `consumeString()`, but doesn't support consuming
       * multibyte characters. This can be much faster if you only need to match
       * single byte characters.
       *
       * @param {string} stringToConsume
       * @returns {string}
       */
      consumeStringFast(stringToConsume) {
        if (this.peek() === stringToConsume[0]) {
          let { length } = stringToConsume;

          if (length === 1) {
            this.advance();
            return stringToConsume;
          }

          if (this.peek(length) === stringToConsume) {
            this.advance(length);
            return stringToConsume;
          }
        }

        return emptyString$1;
      }

      /**
      Consumes characters until the given global regex is matched, advancing the
      scanner up to (but not beyond) the beginning of the match and updating the
      `lastIndex` property of the regex.

      The regex must have a global flag ("g") so that its `lastIndex` prop can be
      used to begin the search at the current scanner position.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {RegExp} regex
      @returns {string}
      */
      consumeUntilMatch(regex) {
        if (!regex.global) {
          throw new Error('`regex` must have a global flag ("g")');
        }

        let byteIndex = this.charsToBytes[this.charIndex];
        regex.lastIndex = byteIndex;

        let match = regex.exec(this.string);

        if (match === null || match.index === byteIndex) {
          return emptyString$1;
        }

        let result = this.string.slice(byteIndex, match.index);
        this.advance(this._charLength(result));
        return result;
      }

      /**
      Consumes characters until the given string is found, advancing the scanner up
      to (but not beyond) that point.

      Returns the consumed string, or an empty string if nothing was consumed.

      @param {string} searchString
      @returns {string}
      */
      consumeUntilString(searchString) {
        let { charIndex, charsToBytes, string } = this;
        let byteIndex = charsToBytes[charIndex];
        let matchByteIndex = string.indexOf(searchString, byteIndex);

        if (matchByteIndex <= 0) {
          return emptyString$1;
        }

        let result = string.slice(byteIndex, matchByteIndex);
        this.advance(this._charLength(result));
        return result;
      }

      /**
      Returns the given number of characters starting at the current character
      index, without advancing the scanner and without exceeding the end of the
      input string.

      @param {number} [count]
      @returns {string}
      */
      peek(count = 1) {
        // Inlining this comparison instead of checking `this.isEnd` improves perf
        // slightly since `peek()` is called so frequently.
        if (this.charIndex >= this.charCount) {
          return emptyString$1;
        }

        if (count === 1) {
          return this.chars[this.charIndex];
        }

        let { charsToBytes, charIndex } = this;
        return this.string.slice(charsToBytes[charIndex], charsToBytes[charIndex + count]);
      }

      /**
      Resets the scanner position to the given character _index_, or to the start of
      the input string if no index is given.

      If _index_ is negative, the scanner position will be moved backward by that
      many characters, stopping if the beginning of the string is reached.

      @param {number} [index]
      */
      reset(index = 0) {
        this.charIndex = index >= 0
          ? Math.min(this.charCount, index)
          : Math.max(0, this.charIndex + index);
      }
    }

    var StringScanner_1 = StringScanner$1;

    var syntax$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // -- Exported Constants -------------------------------------------------------

    /**
    Mapping of predefined entity names to their replacement values.

    @type {Readonly<{[name: string]: string}>}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent
    */
    const predefinedEntities = Object.freeze(Object.assign(Object.create(null), {
      amp: '&',
      apos: "'",
      gt: '>',
      lt: '<',
      quot: '"'
    }));

    syntax$1.predefinedEntities = predefinedEntities;

    // -- Exported Functions -------------------------------------------------------

    /**
    Returns `true` if _char_ is an XML `NameChar`, `false` if it isn't.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameChar
    */
    function isNameChar(char) {
      if (isNameStartChar(char)) {
        return true;
      }

      let cp = getCodePoint(char);

      return cp === 0x2D // -
        || cp === 0x2E // .
        || (cp >= 0x30 && cp <= 0x39) // 0-9
        || cp === 0xB7
        || (cp >= 0x300 && cp <= 0x36F)
        || (cp >= 0x203F && cp <= 0x2040);
    }

    syntax$1.isNameChar = isNameChar;

    /**
    Returns `true` if _char_ is an XML `NameStartChar`, `false` if it isn't.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameStartChar
    */
    function isNameStartChar(char) {
      let cp = getCodePoint(char);

      return cp === 0x3A // :
        || cp === 0x5F // _
        || (cp >= 0x41 && cp <= 0x5A) // A-Z
        || (cp >= 0x61 && cp <= 0x7A) // a-z
        || (cp >= 0xC0 && cp <= 0xD6)
        || (cp >= 0xD8 && cp <= 0xF6)
        || (cp >= 0xF8 && cp <= 0x2FF)
        || (cp >= 0x370 && cp <= 0x37D)
        || (cp >= 0x37F && cp <= 0x1FFF)
        || (cp >= 0x200C && cp <= 0x200D)
        || (cp >= 0x2070 && cp <= 0x218F)
        || (cp >= 0x2C00 && cp <= 0x2FEF)
        || (cp >= 0x3001 && cp <= 0xD7FF)
        || (cp >= 0xF900 && cp <= 0xFDCF)
        || (cp >= 0xFDF0 && cp <= 0xFFFD)
        || (cp >= 0x10000 && cp <= 0xEFFFF);
    }

    syntax$1.isNameStartChar = isNameStartChar;

    /**
    Returns `true` if _char_ is not a valid XML `Char`, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char
    */
    function isNotXmlChar(char) {
      return !isXmlChar(char);
    }

    syntax$1.isNotXmlChar = isNotXmlChar;

    /**
    Returns `true` if _char_ is a valid reference character (which may appear
    between `&` and `;` in a reference), `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-references
    */
    function isReferenceChar(char) {
      return char === '#' || isNameChar(char);
    }

    syntax$1.isReferenceChar = isReferenceChar;

    /**
    Returns `true` if _char_ is an XML whitespace character, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#white
    */
    function isWhitespace(char) {
      let cp = getCodePoint(char);

      return cp === 0x20
        || cp === 0x9
        || cp === 0xA
        || cp === 0xD;
    }

    syntax$1.isWhitespace = isWhitespace;

    /**
    Returns `true` if _char_ is a valid XML `Char`, `false` otherwise.

    @param {string} char
    @returns {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char
    */
    function isXmlChar(char) {
      let cp = getCodePoint(char);

      return cp === 0x9
        || cp === 0xA
        || cp === 0xD
        || (cp >= 0x20 && cp <= 0xD7FF)
        || (cp >= 0xE000 && cp <= 0xFFFD)
        || (cp >= 0x10000 && cp <= 0x10FFFF);
    }

    syntax$1.isXmlChar = isXmlChar;

    // -- Private Functions --------------------------------------------------------

    /**
    Returns the Unicode code point value of the given character, or `-1` if _char_
    is empty.

    @param {string} char
    @returns {number}
    */
    function getCodePoint(char) {
      return char.codePointAt(0) || -1;
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
    Base interface for a node in an XML document.

    @public
    */
    class XmlNode$7 {
      constructor() {
        /**
        Parent node of this node, or `null` if this node has no parent.

        @type {XmlDocument|XmlElement|null}
        @public
        */
        this.parent = null;
      }

      /**
      Document that contains this node, or `null` if this node is not associated
      with a document.

      @type {XmlDocument?}
      @public
      */
      get document() {
        return this.parent
          ? this.parent.document
          : null;
      }

      /**
      Whether this node is the root node of the document.

      @returns {boolean}
      @public
      */
      get isRootNode() {
        return this.parent
          ? this.parent === this.document
          : false;
      }

      /**
      Whether whitespace should be preserved in the content of this element and
      its children.

      This is influenced by the value of the special `xml:space` attribute, and
      will be `true` for any node whose `xml:space` attribute is set to
      "preserve". If a node has no such attribute, it will inherit the value of
      the nearest ancestor that does (if any).

      @type {boolean}
      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space
      @public
      */
      get preserveWhitespace() {
        return Boolean(this.parent && this.parent.preserveWhitespace);
      }

      /**
      Type of this node.

      The value of this property is a string that matches one of the static `TYPE_*`
      properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).

      The `XmlNode` class itself is a base class and doesn't have its own type name.

      @type {string}
      @public
      */
      get type() {
        return '';
      }

      /**
      Returns a JSON-serializable object representing this node, minus properties
      that could result in circular references.

      @returns {{[key: string]: any}}
      @public
      */
      toJSON() {
        /** @type {{[key: string]: any}} */
        let json = {
          type: this.type
        };

        if (this.isRootNode) {
          json.isRootNode = true;
        }

        if (this.preserveWhitespace) {
          json.preserveWhitespace = true;
        }

        return json;
      }
    }

    /**
    Type value for an `XmlCdata` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_CDATA = 'cdata';

    /**
    Type value for an `XmlComment` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_COMMENT = 'comment';

    /**
    Type value for an `XmlDocument` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_DOCUMENT = 'document';

    /**
    Type value for an `XmlElement` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_ELEMENT = 'element';

    /**
    Type value for an `XmlProcessingInstruction` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_PROCESSING_INSTRUCTION = 'pi';

    /**
    Type value for an `XmlText` node.

    @type {string}
    @public
    */
    XmlNode$7.TYPE_TEXT = 'text';

    var XmlNode_1 = XmlNode$7;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlNode$6 = XmlNode_1;

    /**
    Text content within an XML document.

    @public
    */
    class XmlText$3 extends XmlNode$6 {
      /**
      @param {string} [text]
      */
      constructor(text = '') {
        super();

        /**
        Text content of this node.

        @type {string}
        @public
        */
        this.text = text;
      }

      get type() {
        return XmlNode$6.TYPE_TEXT;
      }

      toJSON() {
        return Object.assign(XmlNode$6.prototype.toJSON.call(this), {
          text: this.text
        });
      }
    }

    var XmlText_1 = XmlText$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlNode$5 = XmlNode_1;
    const XmlText$2 = XmlText_1;

    /**
    A CDATA section within an XML document.

    @public
    */
    class XmlCdata$2 extends XmlText$2 {
      get type() {
        return XmlNode$5.TYPE_CDATA;
      }
    }

    var XmlCdata_1 = XmlCdata$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlNode$4 = XmlNode_1;

    /**
    A comment within an XML document.

    @public
    */
    class XmlComment$2 extends XmlNode$4 {
      /**
      @param {string} [content]
      */
      constructor(content = '') {
        super();

        /**
        Content of this comment.

        @type {string}
        @public
        */
        this.content = content;
      }

      get type() {
        return XmlNode$4.TYPE_COMMENT;
      }

      toJSON() {
        return Object.assign(XmlNode$4.prototype.toJSON.call(this), {
          content: this.content
        });
      }
    }

    var XmlComment_1 = XmlComment$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlNode$3 = XmlNode_1;

    /**
    Element in an XML document.

    @public
    */
    class XmlElement$3 extends XmlNode$3 {
      /**
      @param {string} name
      @param {{[attrName: string]: string}} [attributes]
      @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]
      */
      constructor(name, attributes = Object.create(null), children = []) {
        super();

        /**
        Name of this element.

        @type {string}
        @public
        */
        this.name = name;

        /**
        Attributes on this element.

        @type {{[attrName: string]: string}}
        @public
        */
        this.attributes = attributes;

        /**
        Child nodes of this element.

        @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}
        @public
        */
        this.children = children;
      }

      /**
      Whether this node is empty (meaning it has no children).

      @type {boolean}
      @public
      */
      get isEmpty() {
        return this.children.length === 0;
      }

      /** @type {boolean} */
      get preserveWhitespace() {
        /** @type {XmlNode?} */
        let node = this;

        while (node instanceof XmlElement$3) {
          if ('xml:space' in node.attributes) {
            return node.attributes['xml:space'] === 'preserve';
          }

          node = node.parent;
        }

        return false;
      }

      /**
      Text content of this element and all its descendants.

      @type {string}
      @public
      */
      get text() {
        return this.children
          .map(child => 'text' in child ? child.text : '')
          .join('');
      }

      get type() {
        return XmlNode$3.TYPE_ELEMENT;
      }

      /** @returns {{[key: string]: any}} */
      toJSON() {
        return Object.assign(XmlNode$3.prototype.toJSON.call(this), {
          name: this.name,
          attributes: this.attributes,
          children: this.children.map(child => child.toJSON()),
        });
      }
    }

    var XmlElement_1 = XmlElement$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlElement$2 = XmlElement_1;
    const XmlNode$2 = XmlNode_1;

    /**
    Represents an XML document. All elements within the document are descendants of
    this node.

    @public
    */
    class XmlDocument$2 extends XmlNode$2 {
      /**
      @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]
      */
      constructor(children = []) {
        super();

        /**
        Child nodes of this document.

        @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}
        @public
        */
        this.children = children;
      }

      get document() {
        return this;
      }

      /**
      Root element of this document, or `null` if this document is empty.

      @type {XmlElement?}
      @public
      */
      get root() {
        // @ts-ignore
        return this.children.find((child) => child instanceof XmlElement$2) || null;
      }

      /**
      Text content of this document and all its descendants.

      @type {string}
      @public
      */
      get text() {
        return this.children
          .map(child => 'text' in child ? child.text : '')
          .join('');
      }

      get type() {
        return XmlNode$2.TYPE_DOCUMENT;
      }

      toJSON() {
        return Object.assign(XmlNode$2.prototype.toJSON.call(this), {
          children: this.children.map(child => child.toJSON()),
        });
      }
    }

    var XmlDocument_1 = XmlDocument$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const XmlNode$1 = XmlNode_1;

    /**
    A processing instruction within an XML document.

    @public
    */
    class XmlProcessingInstruction$2 extends XmlNode$1 {
      /**
      @param {string} name
      @param {string} [content]
      */
      constructor(name, content = '') {
        super();

        /**
        Name of this processing instruction. Also sometimes referred to as the
        processing instruction "target".

        @type {string}
        @public
        */
        this.name = name;

        /**
        Content of this processing instruction.

        @type {string}
        @public
        */
        this.content = content;
      }

      get type() {
        return XmlNode$1.TYPE_PROCESSING_INSTRUCTION;
      }

      toJSON() {
        return Object.assign(XmlNode$1.prototype.toJSON.call(this), {
          name: this.name,
          content: this.content
        });
      }
    }

    var XmlProcessingInstruction_1 = XmlProcessingInstruction$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const StringScanner = StringScanner_1;
    const syntax = syntax$1;
    const XmlCdata$1 = XmlCdata_1;
    const XmlComment$1 = XmlComment_1;
    const XmlDocument$1 = XmlDocument_1;
    const XmlElement$1 = XmlElement_1;
    const XmlProcessingInstruction$1 = XmlProcessingInstruction_1;
    const XmlText$1 = XmlText_1;

    const emptyString = '';

    /**
    Parses an XML string into an `XmlDocument`.

    @private
    */
    class Parser$1 {
      /**
      @param {string} xml
        XML string to parse.

      @param {object} [options]
        Parsing options.

        @param {boolean} [options.ignoreUndefinedEntities=false]
        @param {boolean} [options.preserveCdata=false]
        @param {boolean} [options.preserveComments=false]
        @param {(entity: string) => string?} [options.resolveUndefinedEntity]
        @param {boolean} [options.sortAttributes=false]
      */
      constructor(xml, options = {}) {
        /** @type {XmlDocument} */
        this.document = new XmlDocument$1();

        /** @type {XmlDocument|XmlElement} */
        this.currentNode = this.document;

        this.options = options;
        this.scanner = new StringScanner(normalizeXmlString(xml));

        this.consumeProlog();

        if (!this.consumeElement()) {
          this.error('Root element is missing or invalid');
        }

        while (this.consumeMisc()) {} // eslint-disable-line no-empty

        if (!this.scanner.isEnd) {
          this.error('Extra content at the end of the document');
        }
      }

      /**
      Adds the given `XmlNode` as a child of `this.currentNode`.

      @param {XmlNode} node
      */
      addNode(node) {
        node.parent = this.currentNode;

        // @ts-ignore
        this.currentNode.children.push(node);
      }

      /**
      Adds the given _text_ to the document, either by appending it to a preceding
      `XmlText` node (if possible) or by creating a new `XmlText` node.

      @param {string} text
      */
      addText(text) {
        let { children } = this.currentNode;

        if (children.length > 0) {
          let prevNode = children[children.length - 1];

          if (prevNode instanceof XmlText$1) {
            // The previous node is a text node, so we can append to it and avoid
            // creating another node.
            prevNode.text += text;
            return;
          }
        }

        this.addNode(new XmlText$1(text));
      }

      /**
      Consumes an `AttValue` (attribute value) if possible.

      @returns {string|false}
        Contents of the `AttValue` minus quotes, or `false` if nothing was consumed.
        An empty string indicates that an `AttValue` was consumed but was empty.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttValue
      */
      consumeAttributeValue() {
        let { scanner } = this;
        let quote = scanner.peek();

        if (quote !== '"' && quote !== "'") {
          return false;
        }

        scanner.advance();

        let chars;
        let isClosed = false;
        let value = emptyString;
        let regex = quote === '"'
          ? /[^"&<]+/y
          : /[^'&<]+/y;

        matchLoop: while (!scanner.isEnd) {
          chars = scanner.consumeMatch(regex);

          if (chars) {
            this.validateChars(chars);
            value += chars.replace(/[\t\r\n]/g, ' ');
          }

          let nextChar = scanner.peek();

          switch (nextChar) {
            case quote:
              isClosed = true;
              break matchLoop;

            case '&':
              value += this.consumeReference();
              continue;

            case '<':
              this.error('Unescaped `<` is not allowed in an attribute value'); /* istanbul ignore next */
              break;

            case emptyString:
              this.error('Unclosed attribute'); /* istanbul ignore next */
              break;

          }
        }

        if (!isClosed) {
          this.error('Unclosed attribute');
        }

        scanner.advance();
        return value;
      }

      /**
      Consumes a CDATA section if possible.

      @returns {boolean}
        Whether a CDATA section was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-cdata-sect
      */
      consumeCdataSection() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<![CDATA[')) {
          return false;
        }

        let text = scanner.consumeUntilString(']]>');
        this.validateChars(text);

        if (!scanner.consumeStringFast(']]>')) {
          this.error('Unclosed CDATA section');
        }

        if (this.options.preserveCdata) {
          this.addNode(new XmlCdata$1(text));
        } else {
          this.addText(text);
        }

        return true;
      }

      /**
      Consumes character data if possible.

      @returns {boolean}
        Whether character data was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#dt-chardata
      */
      consumeCharData() {
        let { scanner } = this;
        let charData = scanner.consumeUntilMatch(/<|&|]]>/g);

        if (!charData) {
          return false;
        }

        this.validateChars(charData);

        if (scanner.peek() === ']' && scanner.peek(3) === ']]>') {
          this.error('Element content may not contain the CDATA section close delimiter `]]>`');
        }

        this.addText(charData);
        return true;
      }

      /**
      Consumes a comment if possible.

      @returns {boolean}
        Whether a comment was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Comment
      */
      consumeComment() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<!--')) {
          return false;
        }

        let content = scanner.consumeUntilString('--');
        this.validateChars(content);

        if (!scanner.consumeStringFast('-->')) {
          if (scanner.peek(2) === '--') {
            this.error("The string `--` isn't allowed inside a comment");
          } else {
            this.error('Unclosed comment');
          }
        }

        if (this.options.preserveComments) {
          this.addNode(new XmlComment$1(content.trim()));
        }

        return true;
      }

      /**
      Consumes a reference in a content context if possible.

      This differs from `consumeReference()` in that a consumed reference will be
      added to the document as a text node instead of returned.

      @returns {boolean}
        Whether a reference was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#entproc
      */
      consumeContentReference() {
        let ref = this.consumeReference();

        if (ref) {
          this.addText(ref);
          return true;
        }

        return false;
      }

      /**
      Consumes a doctype declaration if possible.

      This is a loose implementation since doctype declarations are currently
      discarded without further parsing.

      @returns {boolean}
        Whether a doctype declaration was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#dtd
      */
      consumeDoctypeDeclaration() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<!DOCTYPE')
            || !this.consumeWhitespace()) {

          return false;
        }

        scanner.consumeMatch(/[^[>]+/y);

        if (scanner.consumeMatch(/\[[\s\S]+?\][\x20\t\r\n]*>/y)) {
          return true;
        }

        if (!scanner.consumeStringFast('>')) {
          this.error('Unclosed doctype declaration');
        }

        return true;
      }

      /**
      Consumes an element if possible.

      @returns {boolean}
        Whether an element was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-element
      */
      consumeElement() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        if (scanner.peek() !== '<') {
          return false;
        }

        scanner.advance();
        let name = this.consumeName();

        if (!name) {
          scanner.reset(mark);
          return false;
        }

        let attributes = Object.create(null);

        while (this.consumeWhitespace()) {
          let attrName = this.consumeName();

          if (!attrName) {
            continue;
          }

          let attrValue = this.consumeEqual()
            && this.consumeAttributeValue();

          if (attrValue === false) {
            this.error('Attribute value expected');
          }

          if (attrName in attributes) {
            this.error(`Duplicate attribute: ${attrName}`);
          }

          if (attrName === 'xml:space'
              && attrValue !== 'default'
              && attrValue !== 'preserve') {

            this.error('Value of the `xml:space` attribute must be "default" or "preserve"');
          }

          attributes[attrName] = attrValue;
        }

        if (this.options.sortAttributes) {
          let attrNames = Object.keys(attributes).sort();
          let sortedAttributes = Object.create(null);

          for (let i = 0; i < attrNames.length; ++i) {
            let attrName = attrNames[i];
            sortedAttributes[attrName] = attributes[attrName];
          }

          attributes = sortedAttributes;
        }

        let isEmpty = Boolean(scanner.consumeStringFast('/>'));
        let element = new XmlElement$1(name, attributes);

        element.parent = this.currentNode;

        if (!isEmpty) {
          if (!scanner.consumeStringFast('>')) {
            this.error(`Unclosed start tag for element \`${name}\``);
          }

          this.currentNode = element;
          this.consumeCharData();

          while (
            this.consumeElement()
              || this.consumeContentReference()
              || this.consumeCdataSection()
              || this.consumeProcessingInstruction()
              || this.consumeComment()
          ) {
            this.consumeCharData();
          }

          let endTagMark = scanner.charIndex;
          let endTagName;

          if (!scanner.consumeStringFast('</')
              || !(endTagName = this.consumeName())
              || endTagName !== name) {

            scanner.reset(endTagMark);
            this.error(`Missing end tag for element ${name}`);
          }

          this.consumeWhitespace();

          if (!scanner.consumeStringFast('>')) {
            this.error(`Unclosed end tag for element ${name}`);
          }

          this.currentNode = element.parent;
        }

        this.addNode(element);
        return true;
      }

      /**
      Consumes an `Eq` production if possible.

      @returns {boolean}
        Whether an `Eq` production was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Eq
      */
      consumeEqual() {
        this.consumeWhitespace();

        if (this.scanner.consumeStringFast('=')) {
          this.consumeWhitespace();
          return true;
        }

        return false;
      }

      /**
      Consumes `Misc` content if possible.

      @returns {boolean}
        Whether anything was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Misc
      */
      consumeMisc() {
        return this.consumeComment()
          || this.consumeProcessingInstruction()
          || this.consumeWhitespace();
      }

      /**
      Consumes one or more `Name` characters if possible.

      @returns {string}
        `Name` characters, or an empty string if none were consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Name
      */
      consumeName() {
        return syntax.isNameStartChar(this.scanner.peek())
          ? this.scanner.consumeMatchFn(syntax.isNameChar)
          : emptyString;
      }

      /**
      Consumes a processing instruction if possible.

      @returns {boolean}
        Whether a processing instruction was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-pi
      */
      consumeProcessingInstruction() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        if (!scanner.consumeStringFast('<?')) {
          return false;
        }

        let name = this.consumeName();

        if (name) {
          if (name.toLowerCase() === 'xml') {
            scanner.reset(mark);
            this.error("XML declaration isn't allowed here");
          }
        } else {
          this.error('Invalid processing instruction');
        }

        if (!this.consumeWhitespace()) {
          if (scanner.consumeStringFast('?>')) {
            this.addNode(new XmlProcessingInstruction$1(name));
            return true;
          }

          this.error('Whitespace is required after a processing instruction name');
        }

        let content = scanner.consumeUntilString('?>');
        this.validateChars(content);

        if (!scanner.consumeStringFast('?>')) {
          this.error('Unterminated processing instruction');
        }

        this.addNode(new XmlProcessingInstruction$1(name, content));
        return true;
      }

      /**
      Consumes a prolog if possible.

      @returns {boolean}
        Whether a prolog was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-prolog-dtd
      */
      consumeProlog() {
        let { scanner } = this;
        let mark = scanner.charIndex;

        this.consumeXmlDeclaration();

        while (this.consumeMisc()) {} // eslint-disable-line no-empty

        if (this.consumeDoctypeDeclaration()) {
          while (this.consumeMisc()) {} // eslint-disable-line no-empty
        }

        return mark < scanner.charIndex;
      }

      /**
      Consumes a reference if possible.

      This differs from `consumeContentReference()` in that a consumed reference
      will be returned rather than added to the document.

      @returns {string|false}
        Parsed reference value, or `false` if nothing was consumed (to distinguish
        from a reference that resolves to an empty string).

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Reference
      */
      consumeReference() {
        let { scanner } = this;

        if (scanner.peek() !== '&') {
          return false;
        }

        scanner.advance();

        let ref = scanner.consumeMatchFn(syntax.isReferenceChar);

        if (scanner.consume() !== ';') {
          this.error('Unterminated reference (a reference must end with `;`)');
        }

        let parsedValue;

        if (ref[0] === '#') {
          // This is a character reference.
          let codePoint = ref[1] === 'x'
            ? parseInt(ref.slice(2), 16) // Hex codepoint.
            : parseInt(ref.slice(1), 10); // Decimal codepoint.

          if (isNaN(codePoint)) {
            this.error('Invalid character reference');
          }

          parsedValue = String.fromCodePoint(codePoint);

          if (!syntax.isXmlChar(parsedValue)) {
            this.error('Character reference resolves to an invalid character');
          }
        } else {
          // This is an entity reference.
          parsedValue = syntax.predefinedEntities[ref];

          if (parsedValue === undefined) {
            let {
              ignoreUndefinedEntities,
              resolveUndefinedEntity
            } = this.options;

            let wrappedRef = `&${ref};`; // for backcompat with <= 2.x

            if (resolveUndefinedEntity) {
              let resolvedValue = resolveUndefinedEntity(wrappedRef);

              if (resolvedValue !== null && resolvedValue !== undefined) {
                let type = typeof resolvedValue;

                if (type !== 'string') {
                  throw new TypeError(`\`resolveUndefinedEntity()\` must return a string, \`null\`, or \`undefined\`, but returned a value of type ${type}`);
                }

                return resolvedValue;
              }
            }

            if (ignoreUndefinedEntities) {
              return wrappedRef;
            }

            scanner.reset(-wrappedRef.length);
            this.error(`Named entity isn't defined: ${wrappedRef}`);
          }
        }

        return parsedValue;
      }

      /**
      Consumes a `SystemLiteral` if possible.

      A `SystemLiteral` is similar to an attribute value, but allows the characters
      `<` and `&` and doesn't replace references.

      @returns {string|false}
        Value of the `SystemLiteral` minus quotes, or `false` if nothing was
        consumed. An empty string indicates that a `SystemLiteral` was consumed but
        was empty.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-SystemLiteral
      */
      consumeSystemLiteral() {
        let { scanner } = this;
        let quote = scanner.consumeStringFast('"') || scanner.consumeStringFast("'");

        if (!quote) {
          return false;
        }

        let value = scanner.consumeUntilString(quote);
        this.validateChars(value);

        if (!scanner.consumeStringFast(quote)) {
          this.error('Missing end quote');
        }

        return value;
      }

      /**
      Consumes one or more whitespace characters if possible.

      @returns {boolean}
        Whether any whitespace characters were consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#white
      */
      consumeWhitespace() {
        return Boolean(this.scanner.consumeMatchFn(syntax.isWhitespace));
      }

      /**
      Consumes an XML declaration if possible.

      @returns {boolean}
        Whether an XML declaration was consumed.

      @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-XMLDecl
      */
      consumeXmlDeclaration() {
        let { scanner } = this;

        if (!scanner.consumeStringFast('<?xml')) {
          return false;
        }

        if (!this.consumeWhitespace()) {
          this.error('Invalid XML declaration');
        }

        let version = Boolean(scanner.consumeStringFast('version'))
          && this.consumeEqual()
          && this.consumeSystemLiteral();

        if (version === false) {
          this.error('XML version is missing or invalid');
        } else if (!/^1\.[0-9]+$/.test(version)) {
          this.error('Invalid character in version number');
        }

        if (this.consumeWhitespace()) {
          let encoding = Boolean(scanner.consumeStringFast('encoding'))
            && this.consumeEqual()
            && this.consumeSystemLiteral();

          if (encoding) {
            this.consumeWhitespace();
          }

          let standalone = Boolean(scanner.consumeStringFast('standalone'))
            && this.consumeEqual()
            && this.consumeSystemLiteral();

          if (standalone) {
            if (standalone !== 'yes' && standalone !== 'no') {
              this.error('Only "yes" and "no" are permitted as values of `standalone`');
            }

            this.consumeWhitespace();
          }
        }

        if (!scanner.consumeStringFast('?>')) {
          this.error('Invalid or unclosed XML declaration');
        }

        return true;
      }

      /**
      Throws an error at the current scanner position.

      @param {string} message
      */
      error(message) {
        let { charIndex, string: xml } = this.scanner;
        let column = 1;
        let excerpt = '';
        let line = 1;

        // Find the line and column where the error occurred.
        for (let i = 0; i < charIndex; ++i) {
          let char = xml[i];

          if (char === '\n') {
            column = 1;
            excerpt = '';
            line += 1;
          } else {
            column += 1;
            excerpt += char;
          }
        }

        let eol = xml.indexOf('\n', charIndex);

        excerpt += eol === -1
          ? xml.slice(charIndex)
          : xml.slice(charIndex, eol);

        let excerptStart = 0;

        // Keep the excerpt below 50 chars, but always keep the error position in
        // view.
        if (excerpt.length > 50) {
          if (column < 40) {
            excerpt = excerpt.slice(0, 50);
          } else {
            excerptStart = column - 20;
            excerpt = excerpt.slice(excerptStart, column + 30);
          }
        }

        let err = new Error(
          `${message} (line ${line}, column ${column})\n`
            + `  ${excerpt}\n`
            + ' '.repeat(column - excerptStart + 1) + '^\n'
        );

        Object.assign(err, {
          column,
          excerpt,
          line,
          pos: charIndex
        });

        throw err;
      }

      /**
      Throws an invalid character error if any character in the given _string_ isn't
      a valid XML character.

      @param {string} string
      */
      validateChars(string) {
        let charIndex = 0;

        for (let char of string) {
          if (syntax.isNotXmlChar(char)) {
            this.scanner.reset(-([ ...string ].length - charIndex));
            this.error('Invalid character');
          }

          charIndex += 1;
        }
      }
    }

    var Parser_1 = Parser$1;

    // -- Private Functions --------------------------------------------------------

    /**
    Normalizes the given XML string by stripping a byte order mark (if present) and
    replacing CRLF sequences and lone CR characters with LF characters.

    @param {string} xml
    @returns {string}
    */
    function normalizeXmlString(xml) {
      if (xml[0] === '\uFEFF') {
        xml = xml.slice(1);
      }

      return xml.replace(/\r\n?/g, '\n');
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const Parser = Parser_1;
    const XmlCdata = XmlCdata_1;
    const XmlComment = XmlComment_1;
    const XmlDocument = XmlDocument_1;
    const XmlElement = XmlElement_1;
    const XmlNode = XmlNode_1;
    const XmlProcessingInstruction = XmlProcessingInstruction_1;
    const XmlText = XmlText_1;

    /**
    Parses the given XML string and returns an `XmlDocument` instance representing
    the document tree.

    @example

      const parseXml = require('@rgrove/parse-xml');
      let doc = parseXml('<kittens fuzzy="yes">I like fuzzy kittens.</kittens>');

    @param {string} xml
      XML string to parse.

    @param {object} [options]
      Parsing options.

      @param {boolean} [options.ignoreUndefinedEntities=false]
        When `true`, an undefined named entity (like "&bogus;") will be left in the
        output as is instead of causing a parse error.

      @param {boolean} [options.preserveCdata=false]
        When `true`, CDATA sections will be preserved in the document as `XmlCdata`
        nodes. Otherwise CDATA sections will be represented as `XmlText` nodes,
        which keeps the node tree simpler and easier to work with.

      @param {boolean} [options.preserveComments=false]
        When `true`, comments will be preserved in the document as `XmlComment`
        nodes. Otherwise comments will not be included in the node tree.

      @param {(entity: string) => string?} [options.resolveUndefinedEntity]
        When an undefined named entity is encountered, this function will be called
        with the entity as its only argument. It should return a string value with
        which to replace the entity, or `null` or `undefined` to treat the entity as
        undefined (which may result in a parse error depending on the value of
        `ignoreUndefinedEntities`).

      @param {boolean} [options.sortAttributes=false]
        When `true`, attributes in an element's `attributes` object will be sorted
        in alphanumeric order by name. Otherwise they'll retain their original order
        as found in the XML.

    @returns {XmlDocument}
    @public
    */
    function parseXml(xml, options) {
      return (new Parser(xml, options)).document;
    }

    parseXml.XmlCdata = XmlCdata;
    parseXml.XmlComment = XmlComment;
    parseXml.XmlDocument = XmlDocument;
    parseXml.XmlElement = XmlElement;
    parseXml.XmlNode = XmlNode;
    parseXml.XmlProcessingInstruction = XmlProcessingInstruction;
    parseXml.XmlText = XmlText;

    var src = parseXml;

    var parseXml$1 = src;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var immutable = extend$1;

    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function extend$1() {
        var target = {};

        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
                if (hasOwnProperty$2.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }

        return target
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var bail_1 = bail$1;

    function bail$1(err) {
      if (err) {
        throw err
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    var isBuffer = function isBuffer (obj) {
      return obj != null && obj.constructor != null &&
        typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var isPlainObj = value => {
    	if (Object.prototype.toString.call(value) !== '[object Object]') {
    		return false;
    	}

    	const prototype = Object.getPrototypeOf(value);
    	return prototype === null || prototype === Object.prototype;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var slice$2 = [].slice;

    var wrap_1 = wrap$2;

    // Wrap `fn`.
    // Can be sync or async; return a promise, receive a completion handler, return
    // new values and errors.
    function wrap$2(fn, callback) {
      var invoked;

      return wrapped

      function wrapped() {
        var params = slice$2.call(arguments, 0);
        var callback = fn.length > params.length;
        var result;

        if (callback) {
          params.push(done);
        }

        try {
          result = fn.apply(null, params);
        } catch (error) {
          // Well, this is quite the pickle.
          // `fn` received a callback and invoked it (thus continuing the pipeline),
          // but later also threw an error.
          // We’re not about to restart the pipeline again, so the only thing left
          // to do is to throw the thing instead.
          if (callback && invoked) {
            throw error
          }

          return done(error)
        }

        if (!callback) {
          if (result && typeof result.then === 'function') {
            result.then(then, done);
          } else if (result instanceof Error) {
            done(result);
          } else {
            then(result);
          }
        }
      }

      // Invoke `next`, only once.
      function done() {
        if (!invoked) {
          invoked = true;

          callback.apply(null, arguments);
        }
      }

      // Invoke `done` with one value.
      // Tracks if an error is passed, too.
      function then(value) {
        done(null, value);
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var wrap$1 = wrap_1;

    var trough_1 = trough$1;

    trough$1.wrap = wrap$1;

    var slice$1 = [].slice;

    // Create new middleware.
    function trough$1() {
      var fns = [];
      var middleware = {};

      middleware.run = run;
      middleware.use = use;

      return middleware

      // Run `fns`.  Last argument must be a completion handler.
      function run() {
        var index = -1;
        var input = slice$1.call(arguments, 0, -1);
        var done = arguments[arguments.length - 1];

        if (typeof done !== 'function') {
          throw new Error('Expected function as last argument, not ' + done)
        }

        next.apply(null, [null].concat(input));

        // Run the next `fn`, if any.
        function next(err) {
          var fn = fns[++index];
          var params = slice$1.call(arguments, 0);
          var values = params.slice(1);
          var length = input.length;
          var pos = -1;

          if (err) {
            done(err);
            return
          }

          // Copy non-nully input into values.
          while (++pos < length) {
            if (values[pos] === null || values[pos] === undefined) {
              values[pos] = input[pos];
            }
          }

          input = values;

          // Next or done.
          if (fn) {
            wrap$1(fn, next).apply(null, input);
          } else {
            done.apply(null, [null].concat(input));
          }
        }
      }

      // Add `fn` to the list.
      function use(fn) {
        if (typeof fn !== 'function') {
          throw new Error('Expected `fn` to be a function, not ' + fn)
        }

        fns.push(fn);

        return middleware
      }
    }

    var vfile$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var own$5 = {}.hasOwnProperty;

    var unistUtilStringifyPosition = stringify$1;

    function stringify$1(value) {
      // Nothing.
      if (!value || typeof value !== 'object') {
        return ''
      }

      // Node.
      if (own$5.call(value, 'position') || own$5.call(value, 'type')) {
        return position(value.position)
      }

      // Position.
      if (own$5.call(value, 'start') || own$5.call(value, 'end')) {
        return position(value)
      }

      // Point.
      if (own$5.call(value, 'line') || own$5.call(value, 'column')) {
        return point(value)
      }

      // ?
      return ''
    }

    function point(point) {
      if (!point || typeof point !== 'object') {
        point = {};
      }

      return index(point.line) + ':' + index(point.column)
    }

    function position(pos) {
      if (!pos || typeof pos !== 'object') {
        pos = {};
      }

      return point(pos.start) + '-' + point(pos.end)
    }

    function index(value) {
      return value && typeof value === 'number' ? value : 1
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var stringify = unistUtilStringifyPosition;

    var vfileMessage = VMessage$1;

    // Inherit from `Error#`.
    function VMessagePrototype() {}
    VMessagePrototype.prototype = Error.prototype;
    VMessage$1.prototype = new VMessagePrototype();

    // Message properties.
    var proto = VMessage$1.prototype;

    proto.file = '';
    proto.name = '';
    proto.reason = '';
    proto.message = '';
    proto.stack = '';
    proto.fatal = null;
    proto.column = null;
    proto.line = null;

    // Construct a new VMessage.
    //
    // Note: We cannot invoke `Error` on the created context, as that adds readonly
    // `line` and `column` attributes on Safari 9, thus throwing and failing the
    // data.
    function VMessage$1(reason, position, origin) {
      var parts;
      var range;
      var location;

      if (typeof position === 'string') {
        origin = position;
        position = null;
      }

      parts = parseOrigin(origin);
      range = stringify(position) || '1:1';

      location = {
        start: {line: null, column: null},
        end: {line: null, column: null}
      };

      // Node.
      if (position && position.position) {
        position = position.position;
      }

      if (position) {
        // Position.
        if (position.start) {
          location = position;
          position = position.start;
        } else {
          // Point.
          location.start = position;
        }
      }

      if (reason.stack) {
        this.stack = reason.stack;
        reason = reason.message;
      }

      this.message = reason;
      this.name = range;
      this.reason = reason;
      this.line = position ? position.line : null;
      this.column = position ? position.column : null;
      this.location = location;
      this.source = parts[0];
      this.ruleId = parts[1];
    }

    function parseOrigin(origin) {
      var result = [null, null];
      var index;

      if (typeof origin === 'string') {
        index = origin.indexOf(':');

        if (index === -1) {
          result[1] = origin;
        } else {
          result[0] = origin.slice(0, index);
          result[1] = origin.slice(index + 1);
        }
      }

      return result
    }

    var minpath = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};// Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }

      return parts;
    }

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    // path.resolve([from ...], to)
    // posix version
    function resolve() {
      var resolvedPath = '',
          resolvedAbsolute = false;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : '/';

        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }

      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)

      // Normalize the path
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');

      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }
    // path.normalize(path)
    // posix version
    function normalize(path) {
      var isPathAbsolute = isAbsolute(path),
          trailingSlash = substr(path, -1) === '/';

      // Normalize the path
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isPathAbsolute).join('/');

      if (!path && !isPathAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }

      return (isPathAbsolute ? '/' : '') + path;
    }
    // posix version
    function isAbsolute(path) {
      return path.charAt(0) === '/';
    }

    // posix version
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    }


    // path.relative(from, to)
    // posix version
    function relative(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);

      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }

        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }

        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }

      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));

      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }

      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }

      outputParts = outputParts.concat(toParts.slice(samePartsLength));

      return outputParts.join('/');
    }

    var sep = '/';
    var delimiter = ':';

    function dirname(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];

      if (!root && !dir) {
        // No dirname whatsoever
        return '.';
      }

      if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.substr(0, dir.length - 1);
      }

      return root + dir;
    }

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }


    function extname(path) {
      return splitPath(path)[3];
    }
    var path = {
      extname: extname,
      basename: basename,
      dirname: dirname,
      sep: sep,
      delimiter: delimiter,
      relative: relative,
      join: join,
      isAbsolute: isAbsolute,
      normalize: normalize,
      resolve: resolve
    };
    function filter (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }

    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b' ?
        function (str, start, len) { return str.substr(start, len) } :
        function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;

    var path$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        resolve: resolve,
        normalize: normalize,
        isAbsolute: isAbsolute,
        join: join,
        relative: relative,
        sep: sep,
        delimiter: delimiter,
        dirname: dirname,
        basename: basename,
        extname: extname,
        'default': path
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(path$1);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {

    	module.exports = require$$0$1;
    } (minpath));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop$1() {}

    var on = noop$1;
    var addListener = noop$1;
    var once = noop$1;
    var off = noop$1;
    var removeListener = noop$1;
    var removeAllListeners = noop$1;
    var emit = noop$1;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var minproc = process;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var p$1 = minpath.exports;
    var proc = minproc;
    var buffer$1 = isBuffer;

    var core = VFile$1;

    var own$4 = {}.hasOwnProperty;

    // Order of setting (least specific to most), we need this because otherwise
    // `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
    // stem can be set.
    var order$1 = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

    VFile$1.prototype.toString = toString$2;

    // Access full path (`~/index.min.js`).
    Object.defineProperty(VFile$1.prototype, 'path', {get: getPath, set: setPath});

    // Access parent path (`~`).
    Object.defineProperty(VFile$1.prototype, 'dirname', {
      get: getDirname,
      set: setDirname
    });

    // Access basename (`index.min.js`).
    Object.defineProperty(VFile$1.prototype, 'basename', {
      get: getBasename,
      set: setBasename
    });

    // Access extname (`.js`).
    Object.defineProperty(VFile$1.prototype, 'extname', {
      get: getExtname,
      set: setExtname
    });

    // Access stem (`index.min`).
    Object.defineProperty(VFile$1.prototype, 'stem', {get: getStem, set: setStem});

    // Construct a new file.
    function VFile$1(options) {
      var prop;
      var index;

      if (!options) {
        options = {};
      } else if (typeof options === 'string' || buffer$1(options)) {
        options = {contents: options};
      } else if ('message' in options && 'messages' in options) {
        return options
      }

      if (!(this instanceof VFile$1)) {
        return new VFile$1(options)
      }

      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = proc.cwd();

      // Set path related properties in the correct order.
      index = -1;

      while (++index < order$1.length) {
        prop = order$1[index];

        if (own$4.call(options, prop)) {
          this[prop] = options[prop];
        }
      }

      // Set non-path related properties.
      for (prop in options) {
        if (order$1.indexOf(prop) < 0) {
          this[prop] = options[prop];
        }
      }
    }

    function getPath() {
      return this.history[this.history.length - 1]
    }

    function setPath(path) {
      assertNonEmpty(path, 'path');

      if (this.path !== path) {
        this.history.push(path);
      }
    }

    function getDirname() {
      return typeof this.path === 'string' ? p$1.dirname(this.path) : undefined
    }

    function setDirname(dirname) {
      assertPath(this.path, 'dirname');
      this.path = p$1.join(dirname || '', this.basename);
    }

    function getBasename() {
      return typeof this.path === 'string' ? p$1.basename(this.path) : undefined
    }

    function setBasename(basename) {
      assertNonEmpty(basename, 'basename');
      assertPart(basename, 'basename');
      this.path = p$1.join(this.dirname || '', basename);
    }

    function getExtname() {
      return typeof this.path === 'string' ? p$1.extname(this.path) : undefined
    }

    function setExtname(extname) {
      assertPart(extname, 'extname');
      assertPath(this.path, 'extname');

      if (extname) {
        if (extname.charCodeAt(0) !== 46 /* `.` */) {
          throw new Error('`extname` must start with `.`')
        }

        if (extname.indexOf('.', 1) > -1) {
          throw new Error('`extname` cannot contain multiple dots')
        }
      }

      this.path = p$1.join(this.dirname, this.stem + (extname || ''));
    }

    function getStem() {
      return typeof this.path === 'string'
        ? p$1.basename(this.path, this.extname)
        : undefined
    }

    function setStem(stem) {
      assertNonEmpty(stem, 'stem');
      assertPart(stem, 'stem');
      this.path = p$1.join(this.dirname || '', stem + (this.extname || ''));
    }

    // Get the value of the file.
    function toString$2(encoding) {
      return (this.contents || '').toString(encoding)
    }

    // Assert that `part` is not a path (i.e., does not contain `p.sep`).
    function assertPart(part, name) {
      if (part && part.indexOf(p$1.sep) > -1) {
        throw new Error(
          '`' + name + '` cannot be a path: did not expect `' + p$1.sep + '`'
        )
      }
    }

    // Assert that `part` is not empty.
    function assertNonEmpty(part, name) {
      if (!part) {
        throw new Error('`' + name + '` cannot be empty')
      }
    }

    // Assert `path` exists.
    function assertPath(path, name) {
      if (!path) {
        throw new Error('Setting `' + name + '` requires `path` to be set too')
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var VMessage = vfileMessage;
    var VFile = core;

    var lib = VFile;

    VFile.prototype.message = message;
    VFile.prototype.info = info;
    VFile.prototype.fail = fail;

    // Create a message with `reason` at `position`.
    // When an error is passed in as `reason`, copies the stack.
    function message(reason, position, origin) {
      var message = new VMessage(reason, position, origin);

      if (this.path) {
        message.name = this.path + ':' + message.name;
        message.file = this.path;
      }

      message.fatal = false;

      this.messages.push(message);

      return message
    }

    // Fail: creates a vmessage, associates it with the file, and throws it.
    function fail() {
      var message = this.message.apply(this, arguments);

      message.fatal = true;

      throw message
    }

    // Info: creates a vmessage, associates it with the file, and marks the fatality
    // as null.
    function info() {
      var message = this.message.apply(this, arguments);

      message.fatal = null;

      return message
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {

    	module.exports = lib;
    } (vfile$1));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var bail = bail_1;
    var buffer = isBuffer;
    var extend = extend$2;
    var plain = isPlainObj;
    var trough = trough_1;
    var vfile = vfile$1.exports;

    // Expose a frozen processor.
    var unified_1 = unified$1().freeze();

    var slice = [].slice;
    var own$3 = {}.hasOwnProperty;

    // Process pipeline.
    var pipeline = trough()
      .use(pipelineParse)
      .use(pipelineRun)
      .use(pipelineStringify);

    function pipelineParse(p, ctx) {
      ctx.tree = p.parse(ctx.file);
    }

    function pipelineRun(p, ctx, next) {
      p.run(ctx.tree, ctx.file, done);

      function done(error, tree, file) {
        if (error) {
          next(error);
        } else {
          ctx.tree = tree;
          ctx.file = file;
          next();
        }
      }
    }

    function pipelineStringify(p, ctx) {
      var result = p.stringify(ctx.tree, ctx.file);

      if (result === undefined || result === null) ; else if (typeof result === 'string' || buffer(result)) {
        ctx.file.contents = result;
      } else {
        ctx.file.result = result;
      }
    }

    // Function to create the first processor.
    function unified$1() {
      var attachers = [];
      var transformers = trough();
      var namespace = {};
      var freezeIndex = -1;
      var frozen;

      // Data management.
      processor.data = data;

      // Lock.
      processor.freeze = freeze;

      // Plugins.
      processor.attachers = attachers;
      processor.use = use;

      // API.
      processor.parse = parse;
      processor.stringify = stringify;
      processor.run = run;
      processor.runSync = runSync;
      processor.process = process;
      processor.processSync = processSync;

      // Expose.
      return processor

      // Create a new processor based on the processor in the current scope.
      function processor() {
        var destination = unified$1();
        var index = -1;

        while (++index < attachers.length) {
          destination.use.apply(null, attachers[index]);
        }

        destination.data(extend(true, {}, namespace));

        return destination
      }

      // Freeze: used to signal a processor that has finished configuration.
      //
      // For example, take unified itself: it’s frozen.
      // Plugins should not be added to it.
      // Rather, it should be extended, by invoking it, before modifying it.
      //
      // In essence, always invoke this when exporting a processor.
      function freeze() {
        var values;
        var transformer;

        if (frozen) {
          return processor
        }

        while (++freezeIndex < attachers.length) {
          values = attachers[freezeIndex];

          if (values[1] === false) {
            continue
          }

          if (values[1] === true) {
            values[1] = undefined;
          }

          transformer = values[0].apply(processor, values.slice(1));

          if (typeof transformer === 'function') {
            transformers.use(transformer);
          }
        }

        frozen = true;
        freezeIndex = Infinity;

        return processor
      }

      // Data management.
      // Getter / setter for processor-specific informtion.
      function data(key, value) {
        if (typeof key === 'string') {
          // Set `key`.
          if (arguments.length === 2) {
            assertUnfrozen('data', frozen);
            namespace[key] = value;
            return processor
          }

          // Get `key`.
          return (own$3.call(namespace, key) && namespace[key]) || null
        }

        // Set space.
        if (key) {
          assertUnfrozen('data', frozen);
          namespace = key;
          return processor
        }

        // Get space.
        return namespace
      }

      // Plugin management.
      //
      // Pass it:
      // *   an attacher and options,
      // *   a preset,
      // *   a list of presets, attachers, and arguments (list of attachers and
      //     options).
      function use(value) {
        var settings;

        assertUnfrozen('use', frozen);

        if (value === null || value === undefined) ; else if (typeof value === 'function') {
          addPlugin.apply(null, arguments);
        } else if (typeof value === 'object') {
          if ('length' in value) {
            addList(value);
          } else {
            addPreset(value);
          }
        } else {
          throw new Error('Expected usable value, not `' + value + '`')
        }

        if (settings) {
          namespace.settings = extend(namespace.settings || {}, settings);
        }

        return processor

        function addPreset(result) {
          addList(result.plugins);

          if (result.settings) {
            settings = extend(settings || {}, result.settings);
          }
        }

        function add(value) {
          if (typeof value === 'function') {
            addPlugin(value);
          } else if (typeof value === 'object') {
            if ('length' in value) {
              addPlugin.apply(null, value);
            } else {
              addPreset(value);
            }
          } else {
            throw new Error('Expected usable value, not `' + value + '`')
          }
        }

        function addList(plugins) {
          var index = -1;

          if (plugins === null || plugins === undefined) ; else if (typeof plugins === 'object' && 'length' in plugins) {
            while (++index < plugins.length) {
              add(plugins[index]);
            }
          } else {
            throw new Error('Expected a list of plugins, not `' + plugins + '`')
          }
        }

        function addPlugin(plugin, value) {
          var entry = find(plugin);

          if (entry) {
            if (plain(entry[1]) && plain(value)) {
              value = extend(true, entry[1], value);
            }

            entry[1] = value;
          } else {
            attachers.push(slice.call(arguments));
          }
        }
      }

      function find(plugin) {
        var index = -1;

        while (++index < attachers.length) {
          if (attachers[index][0] === plugin) {
            return attachers[index]
          }
        }
      }

      // Parse a file (in string or vfile representation) into a unist node using
      // the `Parser` on the processor.
      function parse(doc) {
        var file = vfile(doc);
        var Parser;

        freeze();
        Parser = processor.Parser;
        assertParser('parse', Parser);

        if (newable(Parser, 'parse')) {
          return new Parser(String(file), file).parse()
        }

        return Parser(String(file), file) // eslint-disable-line new-cap
      }

      // Run transforms on a unist node representation of a file (in string or
      // vfile representation), async.
      function run(node, file, cb) {
        assertNode(node);
        freeze();

        if (!cb && typeof file === 'function') {
          cb = file;
          file = null;
        }

        if (!cb) {
          return new Promise(executor)
        }

        executor(null, cb);

        function executor(resolve, reject) {
          transformers.run(node, vfile(file), done);

          function done(error, tree, file) {
            tree = tree || node;
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(tree);
            } else {
              cb(null, tree, file);
            }
          }
        }
      }

      // Run transforms on a unist node representation of a file (in string or
      // vfile representation), sync.
      function runSync(node, file) {
        var result;
        var complete;

        run(node, file, done);

        assertDone('runSync', 'run', complete);

        return result

        function done(error, tree) {
          complete = true;
          result = tree;
          bail(error);
        }
      }

      // Stringify a unist node representation of a file (in string or vfile
      // representation) into a string using the `Compiler` on the processor.
      function stringify(node, doc) {
        var file = vfile(doc);
        var Compiler;

        freeze();
        Compiler = processor.Compiler;
        assertCompiler('stringify', Compiler);
        assertNode(node);

        if (newable(Compiler, 'compile')) {
          return new Compiler(node, file).compile()
        }

        return Compiler(node, file) // eslint-disable-line new-cap
      }

      // Parse a file (in string or vfile representation) into a unist node using
      // the `Parser` on the processor, then run transforms on that node, and
      // compile the resulting node using the `Compiler` on the processor, and
      // store that result on the vfile.
      function process(doc, cb) {
        freeze();
        assertParser('process', processor.Parser);
        assertCompiler('process', processor.Compiler);

        if (!cb) {
          return new Promise(executor)
        }

        executor(null, cb);

        function executor(resolve, reject) {
          var file = vfile(doc);

          pipeline.run(processor, {file: file}, done);

          function done(error) {
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(file);
            } else {
              cb(null, file);
            }
          }
        }
      }

      // Process the given document (in string or vfile representation), sync.
      function processSync(doc) {
        var file;
        var complete;

        freeze();
        assertParser('processSync', processor.Parser);
        assertCompiler('processSync', processor.Compiler);
        file = vfile(doc);

        process(file, done);

        assertDone('processSync', 'process', complete);

        return file

        function done(error) {
          complete = true;
          bail(error);
        }
      }
    }

    // Check if `value` is a constructor.
    function newable(value, name) {
      return (
        typeof value === 'function' &&
        value.prototype &&
        // A function with keys in its prototype is probably a constructor.
        // Classes’ prototype methods are not enumerable, so we check if some value
        // exists in the prototype.
        (keys(value.prototype) || name in value.prototype)
      )
    }

    // Check if `value` is an object with keys.
    function keys(value) {
      var key;
      for (key in value) {
        return true
      }

      return false
    }

    // Assert a parser is available.
    function assertParser(name, Parser) {
      if (typeof Parser !== 'function') {
        throw new Error('Cannot `' + name + '` without `Parser`')
      }
    }

    // Assert a compiler is available.
    function assertCompiler(name, Compiler) {
      if (typeof Compiler !== 'function') {
        throw new Error('Cannot `' + name + '` without `Compiler`')
      }
    }

    // Assert the processor is not frozen.
    function assertUnfrozen(name, frozen) {
      if (frozen) {
        throw new Error(
          'Cannot invoke `' +
            name +
            '` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.'
        )
      }
    }

    // Assert `node` is a unist node.
    function assertNode(node) {
      if (!node || typeof node.type !== 'string') {
        throw new Error('Expected node, got `' + node + '`')
      }
    }

    // Assert that `complete` is `true`.
    function assertDone(name, asyncName, complete) {
      if (!complete) {
        throw new Error(
          '`' + name + '` finished async. Use `' + asyncName + '` instead'
        )
      }
    }

    var mdastUtilFromMarkdown = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var mdastUtilToString = toString$1;

    // Get the text content of a node.
    // Prefer the node’s plain-text fields, otherwise serialize its children,
    // and if the given value is an array, serialize the nodes in it.
    function toString$1(node) {
      return (
        (node &&
          (node.value ||
            node.alt ||
            node.title ||
            ('children' in node && all(node.children)) ||
            ('length' in node && all(node)))) ||
        ''
      )
    }

    function all(values) {
      var result = [];
      var index = -1;

      while (++index < values.length) {
        result[index] = toString$1(values[index]);
      }

      return result.join('')
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assign$5 = Object.assign;

    var assign_1 = assign$5;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var own$2 = {}.hasOwnProperty;

    var hasOwnProperty$1 = own$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function normalizeIdentifier$3(value) {
      return (
        value // Collapse Markdown whitespace.
          .replace(/[\t\n\r ]+/g, ' ') // Trim.
          .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
          // counterpart is uppercased will result in a different uppercase
          // character.
          // Hence, to get that form, we perform both lower- and uppercase.
          // Upper case makes sure keys will not interact with default prototypal
          // methods: no object method is uppercase.
          .toLowerCase()
          .toUpperCase()
      )
    }

    var normalizeIdentifier_1 = normalizeIdentifier$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var fromCharCode$4 = String.fromCharCode;

    var fromCharCode_1 = fromCharCode$4;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var fromCharCode$3 = fromCharCode_1;

    function safeFromInt$1(value, base) {
      var code = parseInt(value, base);

      if (
        // C0 except for HT, LF, FF, CR, space
        code < 9 ||
        code === 11 ||
        (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.
        (code > 126 && code < 160) || // Lone high surrogates and low surrogates.
        (code > 55295 && code < 57344) || // Noncharacters.
        (code > 64975 && code < 65008) ||
        (code & 65535) === 65535 ||
        (code & 65535) === 65534 || // Out of range
        code > 1114111
      ) {
        return '\uFFFD'
      }

      return fromCharCode$3(code)
    }

    var safeFromInt_1 = safeFromInt$1;

    var content$3 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownLineEnding$j(code) {
      return code < -2
    }

    var markdownLineEnding_1 = markdownLineEnding$j;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownSpace$9(code) {
      return code === -2 || code === -1 || code === 32
    }

    var markdownSpace_1 = markdownSpace$9;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownSpace$8 = markdownSpace_1;

    function spaceFactory(effects, ok, type, max) {
      var limit = max ? max - 1 : Infinity;
      var size = 0;
      return start

      function start(code) {
        if (markdownSpace$8(code)) {
          effects.enter(type);
          return prefix(code)
        }

        return ok(code)
      }

      function prefix(code) {
        if (markdownSpace$8(code) && size++ < limit) {
          effects.consume(code);
          return prefix
        }

        effects.exit(type);
        return ok(code)
      }
    }

    var factorySpace$h = spaceFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(content$3, '__esModule', {value: true});

    var markdownLineEnding$i = markdownLineEnding_1;
    var factorySpace$g = factorySpace$h;

    var tokenize$3 = initializeContent;

    function initializeContent(effects) {
      var contentStart = effects.attempt(
        this.parser.constructs.contentInitial,
        afterContentStartConstruct,
        paragraphInitial
      );
      var previous;
      return contentStart

      function afterContentStartConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$g(effects, contentStart, 'linePrefix')
      }

      function paragraphInitial(code) {
        effects.enter('paragraph');
        return lineStart(code)
      }

      function lineStart(code) {
        var token = effects.enter('chunkText', {
          contentType: 'text',
          previous: previous
        });

        if (previous) {
          previous.next = token;
        }

        previous = token;
        return data(code)
      }

      function data(code) {
        if (code === null) {
          effects.exit('chunkText');
          effects.exit('paragraph');
          effects.consume(code);
          return
        }

        if (markdownLineEnding$i(code)) {
          effects.consume(code);
          effects.exit('chunkText');
          return lineStart
        } // Data.

        effects.consume(code);
        return data
      }
    }

    content$3.tokenize = tokenize$3;

    var document$3 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$h = markdownLineEnding_1;
    var factorySpace$f = factorySpace$h;

    var partialBlankLine$4 = {
      tokenize: tokenizePartialBlankLine,
      partial: true
    };

    function tokenizePartialBlankLine(effects, ok, nok) {
      return factorySpace$f(effects, afterWhitespace, 'linePrefix')

      function afterWhitespace(code) {
        return code === null || markdownLineEnding$h(code) ? ok(code) : nok(code)
      }
    }

    var partialBlankLine_1 = partialBlankLine$4;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(document$3, '__esModule', {value: true});

    var markdownLineEnding$g = markdownLineEnding_1;
    var factorySpace$e = factorySpace$h;
    var partialBlankLine$3 = partialBlankLine_1;

    var tokenize$2 = initializeDocument;
    var containerConstruct = {
      tokenize: tokenizeContainer
    };
    var lazyFlowConstruct = {
      tokenize: tokenizeLazyFlow
    };

    function initializeDocument(effects) {
      var self = this;
      var stack = [];
      var continued = 0;
      var inspectConstruct = {
        tokenize: tokenizeInspect,
        partial: true
      };
      var inspectResult;
      var childFlow;
      var childToken;
      return start

      function start(code) {
        if (continued < stack.length) {
          self.containerState = stack[continued][1];
          return effects.attempt(
            stack[continued][0].continuation,
            documentContinue,
            documentContinued
          )(code)
        }

        return documentContinued(code)
      }

      function documentContinue(code) {
        continued++;
        return start(code)
      }

      function documentContinued(code) {
        // If we’re in a concrete construct (such as when expecting another line of
        // HTML, or we resulted in lazy content), we can immediately start flow.
        if (inspectResult && inspectResult.flowContinue) {
          return flowStart(code)
        }

        self.interrupt =
          childFlow &&
          childFlow.currentConstruct &&
          childFlow.currentConstruct.interruptible;
        self.containerState = {};
        return effects.attempt(
          containerConstruct,
          containerContinue,
          flowStart
        )(code)
      }

      function containerContinue(code) {
        stack.push([self.currentConstruct, self.containerState]);
        self.containerState = undefined;
        return documentContinued(code)
      }

      function flowStart(code) {
        if (code === null) {
          exitContainers(0, true);
          effects.consume(code);
          return
        }

        childFlow = childFlow || self.parser.flow(self.now());
        effects.enter('chunkFlow', {
          contentType: 'flow',
          previous: childToken,
          _tokenizer: childFlow
        });
        return flowContinue(code)
      }

      function flowContinue(code) {
        if (code === null) {
          continueFlow(effects.exit('chunkFlow'));
          return flowStart(code)
        }

        if (markdownLineEnding$g(code)) {
          effects.consume(code);
          continueFlow(effects.exit('chunkFlow'));
          return effects.check(inspectConstruct, documentAfterPeek)
        }

        effects.consume(code);
        return flowContinue
      }

      function documentAfterPeek(code) {
        exitContainers(
          inspectResult.continued,
          inspectResult && inspectResult.flowEnd
        );
        continued = 0;
        return start(code)
      }

      function continueFlow(token) {
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.lazy = inspectResult && inspectResult.lazy;
        childFlow.defineSkip(token.start);
        childFlow.write(self.sliceStream(token));
      }

      function exitContainers(size, end) {
        var index = stack.length; // Close the flow.

        if (childFlow && end) {
          childFlow.write([null]);
          childToken = childFlow = undefined;
        } // Exit open containers.

        while (index-- > size) {
          self.containerState = stack[index][1];
          stack[index][0].exit.call(self, effects);
        }

        stack.length = size;
      }

      function tokenizeInspect(effects, ok) {
        var subcontinued = 0;
        inspectResult = {};
        return inspectStart

        function inspectStart(code) {
          if (subcontinued < stack.length) {
            self.containerState = stack[subcontinued][1];
            return effects.attempt(
              stack[subcontinued][0].continuation,
              inspectContinue,
              inspectLess
            )(code)
          } // If we’re continued but in a concrete flow, we can’t have more
          // containers.

          if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
            inspectResult.flowContinue = true;
            return inspectDone(code)
          }

          self.interrupt =
            childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
          self.containerState = {};
          return effects.attempt(
            containerConstruct,
            inspectFlowEnd,
            inspectDone
          )(code)
        }

        function inspectContinue(code) {
          subcontinued++;
          return self.containerState._closeFlow
            ? inspectFlowEnd(code)
            : inspectStart(code)
        }

        function inspectLess(code) {
          if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {
            // Maybe another container?
            self.containerState = {};
            return effects.attempt(
              containerConstruct,
              inspectFlowEnd, // Maybe flow, or a blank line?
              effects.attempt(
                lazyFlowConstruct,
                inspectFlowEnd,
                effects.check(partialBlankLine$3, inspectFlowEnd, inspectLazy)
              )
            )(code)
          } // Otherwise we’re interrupting.

          return inspectFlowEnd(code)
        }

        function inspectLazy(code) {
          // Act as if all containers are continued.
          subcontinued = stack.length;
          inspectResult.lazy = true;
          inspectResult.flowContinue = true;
          return inspectDone(code)
        } // We’re done with flow if we have more containers, or an interruption.

        function inspectFlowEnd(code) {
          inspectResult.flowEnd = true;
          return inspectDone(code)
        }

        function inspectDone(code) {
          inspectResult.continued = subcontinued;
          self.interrupt = self.containerState = undefined;
          return ok(code)
        }
      }
    }

    function tokenizeContainer(effects, ok, nok) {
      return factorySpace$e(
        effects,
        effects.attempt(this.parser.constructs.document, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    function tokenizeLazyFlow(effects, ok, nok) {
      return factorySpace$e(
        effects,
        effects.lazy(this.parser.constructs.flow, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    document$3.tokenize = tokenize$2;

    var flow$2 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // Counts tabs based on their expanded size, and CR+LF as one character.

    function sizeChunks$2(chunks) {
      var index = -1;
      var size = 0;

      while (++index < chunks.length) {
        size += typeof chunks[index] === 'string' ? chunks[index].length : 1;
      }

      return size
    }

    var sizeChunks_1 = sizeChunks$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var sizeChunks$1 = sizeChunks_1;

    function prefixSize$4(events, type) {
      var tail = events[events.length - 1];
      if (!tail || tail[1].type !== type) return 0
      return sizeChunks$1(tail[2].sliceStream(tail[1]))
    }

    var prefixSize_1 = prefixSize$4;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var splice$2 = [].splice;

    var splice_1 = splice$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var splice$1 = splice_1;

    // causes a stack overflow in V8 when trying to insert 100k items for instance.

    function chunkedSplice$8(list, start, remove, items) {
      var end = list.length;
      var chunkStart = 0;
      var parameters; // Make start between zero and `end` (included).

      if (start < 0) {
        start = -start > end ? 0 : end + start;
      } else {
        start = start > end ? end : start;
      }

      remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

      if (items.length < 10000) {
        parameters = Array.from(items);
        parameters.unshift(start, remove);
        splice$1.apply(list, parameters);
      } else {
        // Delete `remove` items starting from `start`
        if (remove) splice$1.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

        while (chunkStart < items.length) {
          parameters = items.slice(chunkStart, chunkStart + 10000);
          parameters.unshift(start, 0);
          splice$1.apply(list, parameters);
          chunkStart += 10000;
          start += 10000;
        }
      }
    }

    var chunkedSplice_1 = chunkedSplice$8;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assign$4 = assign_1;

    function shallow$6(object) {
      return assign$4({}, object)
    }

    var shallow_1 = shallow$6;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assign$3 = assign_1;
    var chunkedSplice$7 = chunkedSplice_1;
    var shallow$5 = shallow_1;

    function subtokenize$2(events) {
      var jumps = {};
      var index = -1;
      var event;
      var lineIndex;
      var otherIndex;
      var otherEvent;
      var parameters;
      var subevents;
      var more;

      while (++index < events.length) {
        while (index in jumps) {
          index = jumps[index];
        }

        event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
        // is in the first content of a list item.

        if (
          index &&
          event[1].type === 'chunkFlow' &&
          events[index - 1][1].type === 'listItemPrefix'
        ) {
          subevents = event[1]._tokenizer.events;
          otherIndex = 0;

          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'lineEndingBlank'
          ) {
            otherIndex += 2;
          }

          if (
            otherIndex < subevents.length &&
            subevents[otherIndex][1].type === 'content'
          ) {
            while (++otherIndex < subevents.length) {
              if (subevents[otherIndex][1].type === 'content') {
                break
              }

              if (subevents[otherIndex][1].type === 'chunkText') {
                subevents[otherIndex][1].isInFirstContentOfListItem = true;
                otherIndex++;
              }
            }
          }
        } // Enter.

        if (event[0] === 'enter') {
          if (event[1].contentType) {
            assign$3(jumps, subcontent(events, index));
            index = jumps[index];
            more = true;
          }
        } // Exit.
        else if (event[1]._container || event[1]._movePreviousLineEndings) {
          otherIndex = index;
          lineIndex = undefined;

          while (otherIndex--) {
            otherEvent = events[otherIndex];

            if (
              otherEvent[1].type === 'lineEnding' ||
              otherEvent[1].type === 'lineEndingBlank'
            ) {
              if (otherEvent[0] === 'enter') {
                if (lineIndex) {
                  events[lineIndex][1].type = 'lineEndingBlank';
                }

                otherEvent[1].type = 'lineEnding';
                lineIndex = otherIndex;
              }
            } else {
              break
            }
          }

          if (lineIndex) {
            // Fix position.
            event[1].end = shallow$5(events[lineIndex][1].start); // Switch container exit w/ line endings.

            parameters = events.slice(lineIndex, index);
            parameters.unshift(event);
            chunkedSplice$7(events, lineIndex, index - lineIndex + 1, parameters);
          }
        }
      }

      return !more
    }

    function subcontent(events, eventIndex) {
      var token = events[eventIndex][1];
      var context = events[eventIndex][2];
      var startPosition = eventIndex - 1;
      var startPositions = [];
      var tokenizer =
        token._tokenizer || context.parser[token.contentType](token.start);
      var childEvents = tokenizer.events;
      var jumps = [];
      var gaps = {};
      var stream;
      var previous;
      var index;
      var entered;
      var end;
      var adjust; // Loop forward through the linked tokens to pass them in order to the
      // subtokenizer.

      while (token) {
        // Find the position of the event for this token.
        while (events[++startPosition][1] !== token) {
          // Empty.
        }

        startPositions.push(startPosition);

        if (!token._tokenizer) {
          stream = context.sliceStream(token);

          if (!token.next) {
            stream.push(null);
          }

          if (previous) {
            tokenizer.defineSkip(token.start);
          }

          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = true;
          }

          tokenizer.write(stream);

          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = undefined;
          }
        } // Unravel the next token.

        previous = token;
        token = token.next;
      } // Now, loop back through all events (and linked tokens), to figure out which
      // parts belong where.

      token = previous;
      index = childEvents.length;

      while (index--) {
        // Make sure we’ve at least seen something (final eol is part of the last
        // token).
        if (childEvents[index][0] === 'enter') {
          entered = true;
        } else if (
          // Find a void token that includes a break.
          entered &&
          childEvents[index][1].type === childEvents[index - 1][1].type &&
          childEvents[index][1].start.line !== childEvents[index][1].end.line
        ) {
          add(childEvents.slice(index + 1, end));
          // Help GC.
          token._tokenizer = token.next = undefined;
          token = token.previous;
          end = index + 1;
        }
      }

      // Help GC.
      tokenizer.events = token._tokenizer = token.next = undefined; // Do head:

      add(childEvents.slice(0, end));
      index = -1;
      adjust = 0;

      while (++index < jumps.length) {
        gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
        adjust += jumps[index][1] - jumps[index][0] - 1;
      }

      return gaps

      function add(slice) {
        var start = startPositions.pop();
        jumps.unshift([start, start + slice.length - 1]);
        chunkedSplice$7(events, start, 2, slice);
      }
    }

    var subtokenize_1 = subtokenize$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$f = markdownLineEnding_1;
    var prefixSize$3 = prefixSize_1;
    var subtokenize$1 = subtokenize_1;
    var factorySpace$d = factorySpace$h;

    // No name because it must not be turned off.
    var content$2 = {
      tokenize: tokenizeContent,
      resolve: resolveContent,
      interruptible: true,
      lazy: true
    };
    var continuationConstruct = {
      tokenize: tokenizeContinuation,
      partial: true
    }; // Content is transparent: it’s parsed right now. That way, definitions are also
    // parsed right now: before text in paragraphs (specifically, media) are parsed.

    function resolveContent(events) {
      subtokenize$1(events);
      return events
    }

    function tokenizeContent(effects, ok) {
      var previous;
      return start

      function start(code) {
        effects.enter('content');
        previous = effects.enter('chunkContent', {
          contentType: 'content'
        });
        return data(code)
      }

      function data(code) {
        if (code === null) {
          return contentEnd(code)
        }

        if (markdownLineEnding$f(code)) {
          return effects.check(
            continuationConstruct,
            contentContinue,
            contentEnd
          )(code)
        } // Data.

        effects.consume(code);
        return data
      }

      function contentEnd(code) {
        effects.exit('chunkContent');
        effects.exit('content');
        return ok(code)
      }

      function contentContinue(code) {
        effects.consume(code);
        effects.exit('chunkContent');
        previous = previous.next = effects.enter('chunkContent', {
          contentType: 'content',
          previous: previous
        });
        return data
      }
    }

    function tokenizeContinuation(effects, ok, nok) {
      var self = this;
      return startLookahead

      function startLookahead(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$d(effects, prefixed, 'linePrefix')
      }

      function prefixed(code) {
        if (code === null || markdownLineEnding$f(code)) {
          return nok(code)
        }

        if (
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ||
          prefixSize$3(self.events, 'linePrefix') < 4
        ) {
          return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
        }

        return ok(code)
      }
    }

    var content_1 = content$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(flow$2, '__esModule', {value: true});

    var content$1 = content_1;
    var factorySpace$c = factorySpace$h;
    var partialBlankLine$2 = partialBlankLine_1;

    var tokenize$1 = initializeFlow;

    function initializeFlow(effects) {
      var self = this;
      var initial = effects.attempt(
        // Try to parse a blank line.
        partialBlankLine$2,
        atBlankEnding, // Try to parse initial flow (essentially, only code).
        effects.attempt(
          this.parser.constructs.flowInitial,
          afterConstruct,
          factorySpace$c(
            effects,
            effects.attempt(
              this.parser.constructs.flow,
              afterConstruct,
              effects.attempt(content$1, afterConstruct)
            ),
            'linePrefix'
          )
        )
      );
      return initial

      function atBlankEnding(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEndingBlank');
        effects.consume(code);
        effects.exit('lineEndingBlank');
        self.currentConstruct = undefined;
        return initial
      }

      function afterConstruct(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        self.currentConstruct = undefined;
        return initial
      }
    }

    flow$2.tokenize = tokenize$1;

    var text$4 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(text$4, '__esModule', {value: true});

    var assign$2 = assign_1;
    var shallow$4 = shallow_1;

    var text$3 = initializeFactory('text');
    var string$1 = initializeFactory('string');
    var resolver = {
      resolveAll: createResolver()
    };

    function initializeFactory(field) {
      return {
        tokenize: initializeText,
        resolveAll: createResolver(
          field === 'text' ? resolveAllLineSuffixes : undefined
        )
      }

      function initializeText(effects) {
        var self = this;
        var constructs = this.parser.constructs[field];
        var text = effects.attempt(constructs, start, notText);
        return start

        function start(code) {
          return atBreak(code) ? text(code) : notText(code)
        }

        function notText(code) {
          if (code === null) {
            effects.consume(code);
            return
          }

          effects.enter('data');
          effects.consume(code);
          return data
        }

        function data(code) {
          if (atBreak(code)) {
            effects.exit('data');
            return text(code)
          } // Data.

          effects.consume(code);
          return data
        }

        function atBreak(code) {
          var list = constructs[code];
          var index = -1;

          if (code === null) {
            return true
          }

          if (list) {
            while (++index < list.length) {
              if (
                !list[index].previous ||
                list[index].previous.call(self, self.previous)
              ) {
                return true
              }
            }
          }
        }
      }
    }

    function createResolver(extraResolver) {
      return resolveAllText

      function resolveAllText(events, context) {
        var index = -1;
        var enter; // A rather boring computation (to merge adjacent `data` events) which
        // improves mm performance by 29%.

        while (++index <= events.length) {
          if (enter === undefined) {
            if (events[index] && events[index][1].type === 'data') {
              enter = index;
              index++;
            }
          } else if (!events[index] || events[index][1].type !== 'data') {
            // Don’t do anything if there is one data token.
            if (index !== enter + 2) {
              events[enter][1].end = events[index - 1][1].end;
              events.splice(enter + 2, index - enter - 2);
              index = enter + 2;
            }

            enter = undefined;
          }
        }

        return extraResolver ? extraResolver(events, context) : events
      }
    } // A rather ugly set of instructions which again looks at chunks in the input
    // stream.
    // The reason to do this here is that it is *much* faster to parse in reverse.
    // And that we can’t hook into `null` to split the line suffix before an EOF.
    // To do: figure out if we can make this into a clean utility, or even in core.
    // As it will be useful for GFMs literal autolink extension (and maybe even
    // tables?)

    function resolveAllLineSuffixes(events, context) {
      var eventIndex = -1;
      var chunks;
      var data;
      var chunk;
      var index;
      var bufferIndex;
      var size;
      var tabs;
      var token;

      while (++eventIndex <= events.length) {
        if (
          (eventIndex === events.length ||
            events[eventIndex][1].type === 'lineEnding') &&
          events[eventIndex - 1][1].type === 'data'
        ) {
          data = events[eventIndex - 1][1];
          chunks = context.sliceStream(data);
          index = chunks.length;
          bufferIndex = -1;
          size = 0;
          tabs = undefined;

          while (index--) {
            chunk = chunks[index];

            if (typeof chunk === 'string') {
              bufferIndex = chunk.length;

              while (chunk.charCodeAt(bufferIndex - 1) === 32) {
                size++;
                bufferIndex--;
              }

              if (bufferIndex) break
              bufferIndex = -1;
            } // Number
            else if (chunk === -2) {
              tabs = true;
              size++;
            } else if (chunk === -1);
            else {
              // Replacement character, exit.
              index++;
              break
            }
          }

          if (size) {
            token = {
              type:
                eventIndex === events.length || tabs || size < 2
                  ? 'lineSuffix'
                  : 'hardBreakTrailing',
              start: {
                line: data.end.line,
                column: data.end.column - size,
                offset: data.end.offset - size,
                _index: data.start._index + index,
                _bufferIndex: index
                  ? bufferIndex
                  : data.start._bufferIndex + bufferIndex
              },
              end: shallow$4(data.end)
            };
            data.end = shallow$4(token.start);

            if (data.start.offset === data.end.offset) {
              assign$2(data, token);
            } else {
              events.splice(
                eventIndex,
                0,
                ['enter', token, context],
                ['exit', token, context]
              );
              eventIndex += 2;
            }
          }

          eventIndex++;
        }
      }

      return events
    }

    text$4.resolver = resolver;
    text$4.string = string$1;
    text$4.text = text$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function miniflat$3(value) {
      return value === null || value === undefined
        ? []
        : 'length' in value
        ? value
        : [value]
    }

    var miniflat_1 = miniflat$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var hasOwnProperty = hasOwnProperty$1;
    var chunkedSplice$6 = chunkedSplice_1;
    var miniflat$2 = miniflat_1;

    function combineExtensions$1(extensions) {
      var all = {};
      var index = -1;

      while (++index < extensions.length) {
        extension$1(all, extensions[index]);
      }

      return all
    }

    function extension$1(all, extension) {
      var hook;
      var left;
      var right;
      var code;

      for (hook in extension) {
        left = hasOwnProperty.call(all, hook) ? all[hook] : (all[hook] = {});
        right = extension[hook];

        for (code in right) {
          left[code] = constructs$2(
            miniflat$2(right[code]),
            hasOwnProperty.call(left, code) ? left[code] : []
          );
        }
      }
    }

    function constructs$2(list, existing) {
      var index = -1;
      var before = [];

      while (++index < list.length) {
    (list[index].add === 'after' ? existing : before).push(list[index]);
      }

      chunkedSplice$6(existing, 0, 0, before);
      return existing
    }

    var combineExtensions_1 = combineExtensions$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var chunkedSplice$5 = chunkedSplice_1;

    function chunkedPush$3(list, items) {
      if (list.length) {
        chunkedSplice$5(list, list.length, 0, items);
        return list
      }

      return items
    }

    var chunkedPush_1 = chunkedPush$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function resolveAll$3(constructs, events, context) {
      var called = [];
      var index = -1;
      var resolve;

      while (++index < constructs.length) {
        resolve = constructs[index].resolveAll;

        if (resolve && called.indexOf(resolve) < 0) {
          events = resolve(events, context);
          called.push(resolve);
        }
      }

      return events
    }

    var resolveAll_1 = resolveAll$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var fromCharCode$2 = fromCharCode_1;

    function serializeChunks$1(chunks) {
      var index = -1;
      var result = [];
      var chunk;
      var value;
      var atTab;

      while (++index < chunks.length) {
        chunk = chunks[index];

        if (typeof chunk === 'string') {
          value = chunk;
        } else if (chunk === -5) {
          value = '\r';
        } else if (chunk === -4) {
          value = '\n';
        } else if (chunk === -3) {
          value = '\r' + '\n';
        } else if (chunk === -2) {
          value = '\t';
        } else if (chunk === -1) {
          if (atTab) continue
          value = ' ';
        } else {
          // Currently only replacement character.
          value = fromCharCode$2(chunk);
        }

        atTab = chunk === -2;
        result.push(value);
      }

      return result.join('')
    }

    var serializeChunks_1 = serializeChunks$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function sliceChunks$1(chunks, token) {
      var startIndex = token.start._index;
      var startBufferIndex = token.start._bufferIndex;
      var endIndex = token.end._index;
      var endBufferIndex = token.end._bufferIndex;
      var view;

      if (startIndex === endIndex) {
        view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
      } else {
        view = chunks.slice(startIndex, endIndex);

        if (startBufferIndex > -1) {
          view[0] = view[0].slice(startBufferIndex);
        }

        if (endBufferIndex > 0) {
          view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
      }

      return view
    }

    var sliceChunks_1 = sliceChunks$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var assign$1 = assign_1;
    var markdownLineEnding$e = markdownLineEnding_1;
    var chunkedPush$2 = chunkedPush_1;
    var chunkedSplice$4 = chunkedSplice_1;
    var miniflat$1 = miniflat_1;
    var resolveAll$2 = resolveAll_1;
    var serializeChunks = serializeChunks_1;
    var shallow$3 = shallow_1;
    var sliceChunks = sliceChunks_1;

    // Create a tokenizer.
    // Tokenizers deal with one type of data (e.g., containers, flow, text).
    // The parser is the object dealing with it all.
    // `initialize` works like other constructs, except that only its `tokenize`
    // function is used, in which case it doesn’t receive an `ok` or `nok`.
    // `from` can be given to set the point before the first character, although
    // when further lines are indented, they must be set with `defineSkip`.
    function createTokenizer$1(parser, initialize, from) {
      var point = from
        ? shallow$3(from)
        : {
            line: 1,
            column: 1,
            offset: 0
          };
      var columnStart = {};
      var resolveAllConstructs = [];
      var chunks = [];
      var stack = [];

      var effects = {
        consume: consume,
        enter: enter,
        exit: exit,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
          interrupt: true
        }),
        lazy: constructFactory(onsuccessfulcheck, {
          lazy: true
        })
      }; // State and tools for resolving and serializing.

      var context = {
        previous: null,
        events: [],
        parser: parser,
        sliceStream: sliceStream,
        sliceSerialize: sliceSerialize,
        now: now,
        defineSkip: skip,
        write: write
      }; // The state function.

      var state = initialize.tokenize.call(context, effects); // Track which character we expect to be consumed, to catch bugs.

      if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
      } // Store where we are in the input stream.

      point._index = 0;
      point._bufferIndex = -1;
      return context

      function write(slice) {
        chunks = chunkedPush$2(chunks, slice);
        main(); // Exit if we’re not done, resolve might change stuff.

        if (chunks[chunks.length - 1] !== null) {
          return []
        }

        addResult(initialize, 0); // Otherwise, resolve, and exit.

        context.events = resolveAll$2(resolveAllConstructs, context.events, context);
        return context.events
      } //
      // Tools.
      //

      function sliceSerialize(token) {
        return serializeChunks(sliceStream(token))
      }

      function sliceStream(token) {
        return sliceChunks(chunks, token)
      }

      function now() {
        return shallow$3(point)
      }

      function skip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
      } //
      // State management.
      //
      // Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
      // `consume`).
      // Here is where we walk through the chunks, which either include strings of
      // several characters, or numerical character codes.
      // The reason to do this in a loop instead of a call is so the stack can
      // drain.

      function main() {
        var chunkIndex;
        var chunk;

        while (point._index < chunks.length) {
          chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.

          if (typeof chunk === 'string') {
            chunkIndex = point._index;

            if (point._bufferIndex < 0) {
              point._bufferIndex = 0;
            }

            while (
              point._index === chunkIndex &&
              point._bufferIndex < chunk.length
            ) {
              go(chunk.charCodeAt(point._bufferIndex));
            }
          } else {
            go(chunk);
          }
        }
      } // Deal with one code.

      function go(code) {
        state = state(code);
      } // Move a character forward.

      function consume(code) {
        if (markdownLineEnding$e(code)) {
          point.line++;
          point.column = 1;
          point.offset += code === -3 ? 2 : 1;
          accountForPotentialSkip();
        } else if (code !== -1) {
          point.column++;
          point.offset++;
        } // Not in a string chunk.

        if (point._bufferIndex < 0) {
          point._index++;
        } else {
          point._bufferIndex++; // At end of string chunk.

          if (point._bufferIndex === chunks[point._index].length) {
            point._bufferIndex = -1;
            point._index++;
          }
        } // Expose the previous character.

        context.previous = code; // Mark as consumed.
      } // Start a token.

      function enter(type, fields) {
        var token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push(['enter', token, context]);
        stack.push(token);
        return token
      } // Stop a token.

      function exit(type) {
        var token = stack.pop();
        token.end = now();
        context.events.push(['exit', token, context]);
        return token
      } // Use results.

      function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
      } // Discard results.

      function onsuccessfulcheck(construct, info) {
        info.restore();
      } // Factory to attempt/check/interrupt.

      function constructFactory(onreturn, fields) {
        return hook // Handle either an object mapping codes to constructs, a list of
        // constructs, or a single construct.

        function hook(constructs, returnState, bogusState) {
          var listOfConstructs;
          var constructIndex;
          var currentConstruct;
          var info;
          return constructs.tokenize || 'length' in constructs
            ? handleListOfConstructs(miniflat$1(constructs))
            : handleMapOfConstructs

          function handleMapOfConstructs(code) {
            if (code in constructs || null in constructs) {
              return handleListOfConstructs(
                constructs.null
                  ? /* c8 ignore next */
                    miniflat$1(constructs[code]).concat(miniflat$1(constructs.null))
                  : constructs[code]
              )(code)
            }

            return bogusState(code)
          }

          function handleListOfConstructs(list) {
            listOfConstructs = list;
            constructIndex = 0;
            return handleConstruct(list[constructIndex])
          }

          function handleConstruct(construct) {
            return start

            function start(code) {
              // To do: not nede to store if there is no bogus state, probably?
              // Currently doesn’t work because `inspect` in document does a check
              // w/o a bogus, which doesn’t make sense. But it does seem to help perf
              // by not storing.
              info = store();
              currentConstruct = construct;

              if (!construct.partial) {
                context.currentConstruct = construct;
              }

              if (
                construct.name &&
                context.parser.constructs.disable.null.indexOf(construct.name) > -1
              ) {
                return nok()
              }

              return construct.tokenize.call(
                fields ? assign$1({}, context, fields) : context,
                effects,
                ok,
                nok
              )(code)
            }
          }

          function ok(code) {
            onreturn(currentConstruct, info);
            return returnState
          }

          function nok(code) {
            info.restore();

            if (++constructIndex < listOfConstructs.length) {
              return handleConstruct(listOfConstructs[constructIndex])
            }

            return bogusState
          }
        }
      }

      function addResult(construct, from) {
        if (construct.resolveAll && resolveAllConstructs.indexOf(construct) < 0) {
          resolveAllConstructs.push(construct);
        }

        if (construct.resolve) {
          chunkedSplice$4(
            context.events,
            from,
            context.events.length - from,
            construct.resolve(context.events.slice(from), context)
          );
        }

        if (construct.resolveTo) {
          context.events = construct.resolveTo(context.events, context);
        }
      }

      function store() {
        var startPoint = now();
        var startPrevious = context.previous;
        var startCurrentConstruct = context.currentConstruct;
        var startEventsIndex = context.events.length;
        var startStack = Array.from(stack);
        return {
          restore: restore,
          from: startEventsIndex
        }

        function restore() {
          point = startPoint;
          context.previous = startPrevious;
          context.currentConstruct = startCurrentConstruct;
          context.events.length = startEventsIndex;
          stack = startStack;
          accountForPotentialSkip();
        }
      }

      function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
          point.column = columnStart[point.line];
          point.offset += columnStart[point.line] - 1;
        }
      }
    }

    var createTokenizer_1 = createTokenizer$1;

    var constructs$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function markdownLineEndingOrSpace$8(code) {
      return code < 0 || code === 32
    }

    var markdownLineEndingOrSpace_1 = markdownLineEndingOrSpace$8;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is generated by `script/`.
    //
    // CommonMark handles attention (emphasis, strong) markers based on what comes
    // before or after them.
    // One such difference is if those characters are Unicode punctuation.
    // This script is generated from the Unicode data.
    var unicodePunctuation$2 = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

    var unicodePunctuationRegex$1 = unicodePunctuation$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var fromCharCode$1 = fromCharCode_1;

    function regexCheck$8(regex) {
      return check

      function check(code) {
        return regex.test(fromCharCode$1(code))
      }
    }

    var regexCheck_1 = regexCheck$8;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unicodePunctuationRegex = unicodePunctuationRegex$1;
    var regexCheck$7 = regexCheck_1;

    // In fact adds to the bundle size.

    var unicodePunctuation$1 = regexCheck$7(unicodePunctuationRegex);

    var unicodePunctuation_1 = unicodePunctuation$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$6 = regexCheck_1;

    var unicodeWhitespace$1 = regexCheck$6(/\s/);

    var unicodeWhitespace_1 = unicodeWhitespace$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEndingOrSpace$7 = markdownLineEndingOrSpace_1;
    var unicodePunctuation = unicodePunctuation_1;
    var unicodeWhitespace = unicodeWhitespace_1;

    // Classify whether a character is unicode whitespace, unicode punctuation, or
    // anything else.
    // Used for attention (emphasis, strong), whose sequences can open or close
    // based on the class of surrounding characters.
    function classifyCharacter$1(code) {
      if (
        code === null ||
        markdownLineEndingOrSpace$7(code) ||
        unicodeWhitespace(code)
      ) {
        return 1
      }

      if (unicodePunctuation(code)) {
        return 2
      }
    }

    var classifyCharacter_1 = classifyCharacter$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // chunks (replacement characters, tabs, or line endings).

    function movePoint$1(point, offset) {
      point.column += offset;
      point.offset += offset;
      point._bufferIndex += offset;
      return point
    }

    var movePoint_1 = movePoint$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var chunkedPush$1 = chunkedPush_1;
    var chunkedSplice$3 = chunkedSplice_1;
    var classifyCharacter = classifyCharacter_1;
    var movePoint = movePoint_1;
    var resolveAll$1 = resolveAll_1;
    var shallow$2 = shallow_1;

    var attention$1 = {
      name: 'attention',
      tokenize: tokenizeAttention,
      resolveAll: resolveAllAttention
    };

    function resolveAllAttention(events, context) {
      var index = -1;
      var open;
      var group;
      var text;
      var openingSequence;
      var closingSequence;
      var use;
      var nextEvents;
      var offset; // Walk through all events.
      //
      // Note: performance of this is fine on an mb of normal markdown, but it’s
      // a bottleneck for malicious stuff.

      while (++index < events.length) {
        // Find a token that can close.
        if (
          events[index][0] === 'enter' &&
          events[index][1].type === 'attentionSequence' &&
          events[index][1]._close
        ) {
          open = index; // Now walk back to find an opener.

          while (open--) {
            // Find a token that can open the closer.
            if (
              events[open][0] === 'exit' &&
              events[open][1].type === 'attentionSequence' &&
              events[open][1]._open && // If the markers are the same:
              context.sliceSerialize(events[open][1]).charCodeAt(0) ===
                context.sliceSerialize(events[index][1]).charCodeAt(0)
            ) {
              // If the opening can close or the closing can open,
              // and the close size *is not* a multiple of three,
              // but the sum of the opening and closing size *is* multiple of three,
              // then don’t match.
              if (
                (events[open][1]._close || events[index][1]._open) &&
                (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
                !(
                  (events[open][1].end.offset -
                    events[open][1].start.offset +
                    events[index][1].end.offset -
                    events[index][1].start.offset) %
                  3
                )
              ) {
                continue
              } // Number of markers to use from the sequence.

              use =
                events[open][1].end.offset - events[open][1].start.offset > 1 &&
                events[index][1].end.offset - events[index][1].start.offset > 1
                  ? 2
                  : 1;
              openingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start: movePoint(shallow$2(events[open][1].end), -use),
                end: shallow$2(events[open][1].end)
              };
              closingSequence = {
                type: use > 1 ? 'strongSequence' : 'emphasisSequence',
                start: shallow$2(events[index][1].start),
                end: movePoint(shallow$2(events[index][1].start), use)
              };
              text = {
                type: use > 1 ? 'strongText' : 'emphasisText',
                start: shallow$2(events[open][1].end),
                end: shallow$2(events[index][1].start)
              };
              group = {
                type: use > 1 ? 'strong' : 'emphasis',
                start: shallow$2(openingSequence.start),
                end: shallow$2(closingSequence.end)
              };
              events[open][1].end = shallow$2(openingSequence.start);
              events[index][1].start = shallow$2(closingSequence.end);
              nextEvents = []; // If there are more markers in the opening, add them before.

              if (events[open][1].end.offset - events[open][1].start.offset) {
                nextEvents = chunkedPush$1(nextEvents, [
                  ['enter', events[open][1], context],
                  ['exit', events[open][1], context]
                ]);
              } // Opening.

              nextEvents = chunkedPush$1(nextEvents, [
                ['enter', group, context],
                ['enter', openingSequence, context],
                ['exit', openingSequence, context],
                ['enter', text, context]
              ]); // Between.

              nextEvents = chunkedPush$1(
                nextEvents,
                resolveAll$1(
                  context.parser.constructs.insideSpan.null,
                  events.slice(open + 1, index),
                  context
                )
              ); // Closing.

              nextEvents = chunkedPush$1(nextEvents, [
                ['exit', text, context],
                ['enter', closingSequence, context],
                ['exit', closingSequence, context],
                ['exit', group, context]
              ]); // If there are more markers in the closing, add them after.

              if (events[index][1].end.offset - events[index][1].start.offset) {
                offset = 2;
                nextEvents = chunkedPush$1(nextEvents, [
                  ['enter', events[index][1], context],
                  ['exit', events[index][1], context]
                ]);
              } else {
                offset = 0;
              }

              chunkedSplice$3(events, open - 1, index - open + 3, nextEvents);
              index = open + nextEvents.length - offset - 2;
              break
            }
          }
        }
      } // Remove remaining sequences.

      index = -1;

      while (++index < events.length) {
        if (events[index][1].type === 'attentionSequence') {
          events[index][1].type = 'data';
        }
      }

      return events
    }

    function tokenizeAttention(effects, ok) {
      var before = classifyCharacter(this.previous);
      var marker;
      return start

      function start(code) {
        effects.enter('attentionSequence');
        marker = code;
        return sequence(code)
      }

      function sequence(code) {
        var token;
        var after;
        var open;
        var close;

        if (code === marker) {
          effects.consume(code);
          return sequence
        }

        token = effects.exit('attentionSequence');
        after = classifyCharacter(code);
        open = !after || (after === 2 && before);
        close = !before || (before === 2 && after);
        token._open = marker === 42 ? open : open && (before || !close);
        token._close = marker === 42 ? close : close && (after || !open);
        return ok(code)
      }
    }

    var attention_1 = attention$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$5 = regexCheck_1;

    var asciiAlpha$3 = regexCheck$5(/[A-Za-z]/);

    var asciiAlpha_1 = asciiAlpha$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$4 = regexCheck_1;

    var asciiAlphanumeric$4 = regexCheck$4(/[\dA-Za-z]/);

    var asciiAlphanumeric_1 = asciiAlphanumeric$4;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$3 = regexCheck_1;

    var asciiAtext$1 = regexCheck$3(/[#-'*+\--9=?A-Z^-~]/);

    var asciiAtext_1 = asciiAtext$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // Note: EOF is seen as ASCII control here, because `null < 32 == true`.
    function asciiControl$2(code) {
      return (
        // Special whitespace codes (which have negative values), C0 and Control
        // character DEL
        code < 32 || code === 127
      )
    }

    var asciiControl_1 = asciiControl$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiAlpha$2 = asciiAlpha_1;
    var asciiAlphanumeric$3 = asciiAlphanumeric_1;
    var asciiAtext = asciiAtext_1;
    var asciiControl$1 = asciiControl_1;

    var autolink$1 = {
      name: 'autolink',
      tokenize: tokenizeAutolink
    };

    function tokenizeAutolink(effects, ok, nok) {
      var size = 1;
      return start

      function start(code) {
        effects.enter('autolink');
        effects.enter('autolinkMarker');
        effects.consume(code);
        effects.exit('autolinkMarker');
        effects.enter('autolinkProtocol');
        return open
      }

      function open(code) {
        if (asciiAlpha$2(code)) {
          effects.consume(code);
          return schemeOrEmailAtext
        }

        return asciiAtext(code) ? emailAtext(code) : nok(code)
      }

      function schemeOrEmailAtext(code) {
        return code === 43 || code === 45 || code === 46 || asciiAlphanumeric$3(code)
          ? schemeInsideOrEmailAtext(code)
          : emailAtext(code)
      }

      function schemeInsideOrEmailAtext(code) {
        if (code === 58) {
          effects.consume(code);
          return urlInside
        }

        if (
          (code === 43 || code === 45 || code === 46 || asciiAlphanumeric$3(code)) &&
          size++ < 32
        ) {
          effects.consume(code);
          return schemeInsideOrEmailAtext
        }

        return emailAtext(code)
      }

      function urlInside(code) {
        if (code === 62) {
          effects.exit('autolinkProtocol');
          return end(code)
        }

        if (code === 32 || code === 60 || asciiControl$1(code)) {
          return nok(code)
        }

        effects.consume(code);
        return urlInside
      }

      function emailAtext(code) {
        if (code === 64) {
          effects.consume(code);
          size = 0;
          return emailAtSignOrDot
        }

        if (asciiAtext(code)) {
          effects.consume(code);
          return emailAtext
        }

        return nok(code)
      }

      function emailAtSignOrDot(code) {
        return asciiAlphanumeric$3(code) ? emailLabel(code) : nok(code)
      }

      function emailLabel(code) {
        if (code === 46) {
          effects.consume(code);
          size = 0;
          return emailAtSignOrDot
        }

        if (code === 62) {
          // Exit, then change the type.
          effects.exit('autolinkProtocol').type = 'autolinkEmail';
          return end(code)
        }

        return emailValue(code)
      }

      function emailValue(code) {
        if ((code === 45 || asciiAlphanumeric$3(code)) && size++ < 63) {
          effects.consume(code);
          return code === 45 ? emailValue : emailLabel
        }

        return nok(code)
      }

      function end(code) {
        effects.enter('autolinkMarker');
        effects.consume(code);
        effects.exit('autolinkMarker');
        effects.exit('autolink');
        return ok
      }
    }

    var autolink_1 = autolink$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownSpace$7 = markdownSpace_1;
    var factorySpace$b = factorySpace$h;

    var blockQuote$1 = {
      name: 'blockQuote',
      tokenize: tokenizeBlockQuoteStart,
      continuation: {
        tokenize: tokenizeBlockQuoteContinuation
      },
      exit: exit
    };

    function tokenizeBlockQuoteStart(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        if (code === 62) {
          if (!self.containerState.open) {
            effects.enter('blockQuote', {
              _container: true
            });
            self.containerState.open = true;
          }

          effects.enter('blockQuotePrefix');
          effects.enter('blockQuoteMarker');
          effects.consume(code);
          effects.exit('blockQuoteMarker');
          return after
        }

        return nok(code)
      }

      function after(code) {
        if (markdownSpace$7(code)) {
          effects.enter('blockQuotePrefixWhitespace');
          effects.consume(code);
          effects.exit('blockQuotePrefixWhitespace');
          effects.exit('blockQuotePrefix');
          return ok
        }

        effects.exit('blockQuotePrefix');
        return ok(code)
      }
    }

    function tokenizeBlockQuoteContinuation(effects, ok, nok) {
      return factorySpace$b(
        effects,
        effects.attempt(blockQuote$1, ok, nok),
        'linePrefix',
        this.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4
      )
    }

    function exit(effects) {
      effects.exit('blockQuote');
    }

    var blockQuote_1 = blockQuote$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$2 = regexCheck_1;

    var asciiPunctuation$1 = regexCheck$2(/[!-/:-@[-`{-~]/);

    var asciiPunctuation_1 = asciiPunctuation$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiPunctuation = asciiPunctuation_1;

    var characterEscape$1 = {
      name: 'characterEscape',
      tokenize: tokenizeCharacterEscape
    };

    function tokenizeCharacterEscape(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('characterEscape');
        effects.enter('escapeMarker');
        effects.consume(code);
        effects.exit('escapeMarker');
        return open
      }

      function open(code) {
        if (asciiPunctuation(code)) {
          effects.enter('characterEscapeValue');
          effects.consume(code);
          effects.exit('characterEscapeValue');
          effects.exit('characterEscape');
          return ok
        }

        return nok(code)
      }
    }

    var characterEscape_1 = characterEscape$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var AEli="Æ";var AElig="Æ";var AM="&";var AMP="&";var Aacut="Á";var Aacute="Á";var Abreve="Ă";var Acir="Â";var Acirc="Â";var Acy="А";var Afr="𝔄";var Agrav="À";var Agrave="À";var Alpha="Α";var Amacr="Ā";var And="⩓";var Aogon="Ą";var Aopf="𝔸";var ApplyFunction="⁡";var Arin="Å";var Aring="Å";var Ascr="𝒜";var Assign="≔";var Atild="Ã";var Atilde="Ã";var Aum="Ä";var Auml="Ä";var Backslash="∖";var Barv="⫧";var Barwed="⌆";var Bcy="Б";var Because="∵";var Bernoullis="ℬ";var Beta="Β";var Bfr="𝔅";var Bopf="𝔹";var Breve="˘";var Bscr="ℬ";var Bumpeq="≎";var CHcy="Ч";var COP="©";var COPY="©";var Cacute="Ć";var Cap="⋒";var CapitalDifferentialD="ⅅ";var Cayleys="ℭ";var Ccaron="Č";var Ccedi="Ç";var Ccedil="Ç";var Ccirc="Ĉ";var Cconint="∰";var Cdot="Ċ";var Cedilla="¸";var CenterDot="·";var Cfr="ℭ";var Chi="Χ";var CircleDot="⊙";var CircleMinus="⊖";var CirclePlus="⊕";var CircleTimes="⊗";var ClockwiseContourIntegral="∲";var CloseCurlyDoubleQuote="”";var CloseCurlyQuote="’";var Colon="∷";var Colone="⩴";var Congruent="≡";var Conint="∯";var ContourIntegral="∮";var Copf="ℂ";var Coproduct="∐";var CounterClockwiseContourIntegral="∳";var Cross="⨯";var Cscr="𝒞";var Cup="⋓";var CupCap="≍";var DD="ⅅ";var DDotrahd="⤑";var DJcy="Ђ";var DScy="Ѕ";var DZcy="Џ";var Dagger="‡";var Darr="↡";var Dashv="⫤";var Dcaron="Ď";var Dcy="Д";var Del="∇";var Delta="Δ";var Dfr="𝔇";var DiacriticalAcute="´";var DiacriticalDot="˙";var DiacriticalDoubleAcute="˝";var DiacriticalGrave="`";var DiacriticalTilde="˜";var Diamond="⋄";var DifferentialD="ⅆ";var Dopf="𝔻";var Dot="¨";var DotDot="⃜";var DotEqual="≐";var DoubleContourIntegral="∯";var DoubleDot="¨";var DoubleDownArrow="⇓";var DoubleLeftArrow="⇐";var DoubleLeftRightArrow="⇔";var DoubleLeftTee="⫤";var DoubleLongLeftArrow="⟸";var DoubleLongLeftRightArrow="⟺";var DoubleLongRightArrow="⟹";var DoubleRightArrow="⇒";var DoubleRightTee="⊨";var DoubleUpArrow="⇑";var DoubleUpDownArrow="⇕";var DoubleVerticalBar="∥";var DownArrow="↓";var DownArrowBar="⤓";var DownArrowUpArrow="⇵";var DownBreve="̑";var DownLeftRightVector="⥐";var DownLeftTeeVector="⥞";var DownLeftVector="↽";var DownLeftVectorBar="⥖";var DownRightTeeVector="⥟";var DownRightVector="⇁";var DownRightVectorBar="⥗";var DownTee="⊤";var DownTeeArrow="↧";var Downarrow="⇓";var Dscr="𝒟";var Dstrok="Đ";var ENG="Ŋ";var ET="Ð";var ETH="Ð";var Eacut="É";var Eacute="É";var Ecaron="Ě";var Ecir="Ê";var Ecirc="Ê";var Ecy="Э";var Edot="Ė";var Efr="𝔈";var Egrav="È";var Egrave="È";var Element$1="∈";var Emacr="Ē";var EmptySmallSquare="◻";var EmptyVerySmallSquare="▫";var Eogon="Ę";var Eopf="𝔼";var Epsilon="Ε";var Equal="⩵";var EqualTilde="≂";var Equilibrium="⇌";var Escr="ℰ";var Esim="⩳";var Eta="Η";var Eum="Ë";var Euml="Ë";var Exists="∃";var ExponentialE="ⅇ";var Fcy="Ф";var Ffr="𝔉";var FilledSmallSquare="◼";var FilledVerySmallSquare="▪";var Fopf="𝔽";var ForAll="∀";var Fouriertrf="ℱ";var Fscr="ℱ";var GJcy="Ѓ";var G=">";var GT=">";var Gamma="Γ";var Gammad="Ϝ";var Gbreve="Ğ";var Gcedil="Ģ";var Gcirc="Ĝ";var Gcy="Г";var Gdot="Ġ";var Gfr="𝔊";var Gg="⋙";var Gopf="𝔾";var GreaterEqual="≥";var GreaterEqualLess="⋛";var GreaterFullEqual="≧";var GreaterGreater="⪢";var GreaterLess="≷";var GreaterSlantEqual="⩾";var GreaterTilde="≳";var Gscr="𝒢";var Gt="≫";var HARDcy="Ъ";var Hacek="ˇ";var Hat="^";var Hcirc="Ĥ";var Hfr="ℌ";var HilbertSpace="ℋ";var Hopf="ℍ";var HorizontalLine="─";var Hscr="ℋ";var Hstrok="Ħ";var HumpDownHump="≎";var HumpEqual="≏";var IEcy="Е";var IJlig="Ĳ";var IOcy="Ё";var Iacut="Í";var Iacute="Í";var Icir="Î";var Icirc="Î";var Icy="И";var Idot="İ";var Ifr="ℑ";var Igrav="Ì";var Igrave="Ì";var Im="ℑ";var Imacr="Ī";var ImaginaryI="ⅈ";var Implies="⇒";var Int="∬";var Integral="∫";var Intersection="⋂";var InvisibleComma="⁣";var InvisibleTimes="⁢";var Iogon="Į";var Iopf="𝕀";var Iota="Ι";var Iscr="ℐ";var Itilde="Ĩ";var Iukcy="І";var Ium="Ï";var Iuml="Ï";var Jcirc="Ĵ";var Jcy="Й";var Jfr="𝔍";var Jopf="𝕁";var Jscr="𝒥";var Jsercy="Ј";var Jukcy="Є";var KHcy="Х";var KJcy="Ќ";var Kappa="Κ";var Kcedil="Ķ";var Kcy="К";var Kfr="𝔎";var Kopf="𝕂";var Kscr="𝒦";var LJcy="Љ";var L="<";var LT="<";var Lacute="Ĺ";var Lambda="Λ";var Lang="⟪";var Laplacetrf="ℒ";var Larr="↞";var Lcaron="Ľ";var Lcedil="Ļ";var Lcy="Л";var LeftAngleBracket="⟨";var LeftArrow="←";var LeftArrowBar="⇤";var LeftArrowRightArrow="⇆";var LeftCeiling="⌈";var LeftDoubleBracket="⟦";var LeftDownTeeVector="⥡";var LeftDownVector="⇃";var LeftDownVectorBar="⥙";var LeftFloor="⌊";var LeftRightArrow="↔";var LeftRightVector="⥎";var LeftTee="⊣";var LeftTeeArrow="↤";var LeftTeeVector="⥚";var LeftTriangle="⊲";var LeftTriangleBar="⧏";var LeftTriangleEqual="⊴";var LeftUpDownVector="⥑";var LeftUpTeeVector="⥠";var LeftUpVector="↿";var LeftUpVectorBar="⥘";var LeftVector="↼";var LeftVectorBar="⥒";var Leftarrow="⇐";var Leftrightarrow="⇔";var LessEqualGreater="⋚";var LessFullEqual="≦";var LessGreater="≶";var LessLess="⪡";var LessSlantEqual="⩽";var LessTilde="≲";var Lfr="𝔏";var Ll="⋘";var Lleftarrow="⇚";var Lmidot="Ŀ";var LongLeftArrow="⟵";var LongLeftRightArrow="⟷";var LongRightArrow="⟶";var Longleftarrow="⟸";var Longleftrightarrow="⟺";var Longrightarrow="⟹";var Lopf="𝕃";var LowerLeftArrow="↙";var LowerRightArrow="↘";var Lscr="ℒ";var Lsh="↰";var Lstrok="Ł";var Lt="≪";var Mcy="М";var MediumSpace=" ";var Mellintrf="ℳ";var Mfr="𝔐";var MinusPlus="∓";var Mopf="𝕄";var Mscr="ℳ";var Mu="Μ";var NJcy="Њ";var Nacute="Ń";var Ncaron="Ň";var Ncedil="Ņ";var Ncy="Н";var NegativeMediumSpace="​";var NegativeThickSpace="​";var NegativeThinSpace="​";var NegativeVeryThinSpace="​";var NestedGreaterGreater="≫";var NestedLessLess="≪";var NewLine="\n";var Nfr="𝔑";var NoBreak="⁠";var NonBreakingSpace=" ";var Nopf="ℕ";var Not="⫬";var NotCongruent="≢";var NotCupCap="≭";var NotDoubleVerticalBar="∦";var NotElement="∉";var NotEqual="≠";var NotEqualTilde="≂̸";var NotExists="∄";var NotGreater="≯";var NotGreaterEqual="≱";var NotGreaterFullEqual="≧̸";var NotGreaterGreater="≫̸";var NotGreaterLess="≹";var NotGreaterSlantEqual="⩾̸";var NotGreaterTilde="≵";var NotHumpDownHump="≎̸";var NotHumpEqual="≏̸";var NotLeftTriangle="⋪";var NotLeftTriangleBar="⧏̸";var NotLeftTriangleEqual="⋬";var NotLess="≮";var NotLessEqual="≰";var NotLessGreater="≸";var NotLessLess="≪̸";var NotLessSlantEqual="⩽̸";var NotLessTilde="≴";var NotNestedGreaterGreater="⪢̸";var NotNestedLessLess="⪡̸";var NotPrecedes="⊀";var NotPrecedesEqual="⪯̸";var NotPrecedesSlantEqual="⋠";var NotReverseElement="∌";var NotRightTriangle="⋫";var NotRightTriangleBar="⧐̸";var NotRightTriangleEqual="⋭";var NotSquareSubset="⊏̸";var NotSquareSubsetEqual="⋢";var NotSquareSuperset="⊐̸";var NotSquareSupersetEqual="⋣";var NotSubset="⊂⃒";var NotSubsetEqual="⊈";var NotSucceeds="⊁";var NotSucceedsEqual="⪰̸";var NotSucceedsSlantEqual="⋡";var NotSucceedsTilde="≿̸";var NotSuperset="⊃⃒";var NotSupersetEqual="⊉";var NotTilde="≁";var NotTildeEqual="≄";var NotTildeFullEqual="≇";var NotTildeTilde="≉";var NotVerticalBar="∤";var Nscr="𝒩";var Ntild="Ñ";var Ntilde="Ñ";var Nu="Ν";var OElig="Œ";var Oacut="Ó";var Oacute="Ó";var Ocir="Ô";var Ocirc="Ô";var Ocy="О";var Odblac="Ő";var Ofr="𝔒";var Ograv="Ò";var Ograve="Ò";var Omacr="Ō";var Omega="Ω";var Omicron="Ο";var Oopf="𝕆";var OpenCurlyDoubleQuote="“";var OpenCurlyQuote="‘";var Or="⩔";var Oscr="𝒪";var Oslas="Ø";var Oslash="Ø";var Otild="Õ";var Otilde="Õ";var Otimes="⨷";var Oum="Ö";var Ouml="Ö";var OverBar="‾";var OverBrace="⏞";var OverBracket="⎴";var OverParenthesis="⏜";var PartialD="∂";var Pcy="П";var Pfr="𝔓";var Phi="Φ";var Pi="Π";var PlusMinus="±";var Poincareplane="ℌ";var Popf="ℙ";var Pr="⪻";var Precedes="≺";var PrecedesEqual="⪯";var PrecedesSlantEqual="≼";var PrecedesTilde="≾";var Prime="″";var Product="∏";var Proportion="∷";var Proportional="∝";var Pscr="𝒫";var Psi="Ψ";var QUO="\"";var QUOT="\"";var Qfr="𝔔";var Qopf="ℚ";var Qscr="𝒬";var RBarr="⤐";var RE="®";var REG="®";var Racute="Ŕ";var Rang="⟫";var Rarr="↠";var Rarrtl="⤖";var Rcaron="Ř";var Rcedil="Ŗ";var Rcy="Р";var Re="ℜ";var ReverseElement="∋";var ReverseEquilibrium="⇋";var ReverseUpEquilibrium="⥯";var Rfr="ℜ";var Rho="Ρ";var RightAngleBracket="⟩";var RightArrow="→";var RightArrowBar="⇥";var RightArrowLeftArrow="⇄";var RightCeiling="⌉";var RightDoubleBracket="⟧";var RightDownTeeVector="⥝";var RightDownVector="⇂";var RightDownVectorBar="⥕";var RightFloor="⌋";var RightTee="⊢";var RightTeeArrow="↦";var RightTeeVector="⥛";var RightTriangle="⊳";var RightTriangleBar="⧐";var RightTriangleEqual="⊵";var RightUpDownVector="⥏";var RightUpTeeVector="⥜";var RightUpVector="↾";var RightUpVectorBar="⥔";var RightVector="⇀";var RightVectorBar="⥓";var Rightarrow="⇒";var Ropf="ℝ";var RoundImplies="⥰";var Rrightarrow="⇛";var Rscr="ℛ";var Rsh="↱";var RuleDelayed="⧴";var SHCHcy="Щ";var SHcy="Ш";var SOFTcy="Ь";var Sacute="Ś";var Sc="⪼";var Scaron="Š";var Scedil="Ş";var Scirc="Ŝ";var Scy="С";var Sfr="𝔖";var ShortDownArrow="↓";var ShortLeftArrow="←";var ShortRightArrow="→";var ShortUpArrow="↑";var Sigma="Σ";var SmallCircle="∘";var Sopf="𝕊";var Sqrt="√";var Square="□";var SquareIntersection="⊓";var SquareSubset="⊏";var SquareSubsetEqual="⊑";var SquareSuperset="⊐";var SquareSupersetEqual="⊒";var SquareUnion="⊔";var Sscr="𝒮";var Star="⋆";var Sub="⋐";var Subset="⋐";var SubsetEqual="⊆";var Succeeds="≻";var SucceedsEqual="⪰";var SucceedsSlantEqual="≽";var SucceedsTilde="≿";var SuchThat="∋";var Sum="∑";var Sup="⋑";var Superset="⊃";var SupersetEqual="⊇";var Supset="⋑";var THOR="Þ";var THORN="Þ";var TRADE="™";var TSHcy="Ћ";var TScy="Ц";var Tab="\t";var Tau="Τ";var Tcaron="Ť";var Tcedil="Ţ";var Tcy="Т";var Tfr="𝔗";var Therefore="∴";var Theta="Θ";var ThickSpace="  ";var ThinSpace=" ";var Tilde="∼";var TildeEqual="≃";var TildeFullEqual="≅";var TildeTilde="≈";var Topf="𝕋";var TripleDot="⃛";var Tscr="𝒯";var Tstrok="Ŧ";var Uacut="Ú";var Uacute="Ú";var Uarr="↟";var Uarrocir="⥉";var Ubrcy="Ў";var Ubreve="Ŭ";var Ucir="Û";var Ucirc="Û";var Ucy="У";var Udblac="Ű";var Ufr="𝔘";var Ugrav="Ù";var Ugrave="Ù";var Umacr="Ū";var UnderBar="_";var UnderBrace="⏟";var UnderBracket="⎵";var UnderParenthesis="⏝";var Union="⋃";var UnionPlus="⊎";var Uogon="Ų";var Uopf="𝕌";var UpArrow="↑";var UpArrowBar="⤒";var UpArrowDownArrow="⇅";var UpDownArrow="↕";var UpEquilibrium="⥮";var UpTee="⊥";var UpTeeArrow="↥";var Uparrow="⇑";var Updownarrow="⇕";var UpperLeftArrow="↖";var UpperRightArrow="↗";var Upsi="ϒ";var Upsilon="Υ";var Uring="Ů";var Uscr="𝒰";var Utilde="Ũ";var Uum="Ü";var Uuml="Ü";var VDash="⊫";var Vbar="⫫";var Vcy="В";var Vdash="⊩";var Vdashl="⫦";var Vee="⋁";var Verbar="‖";var Vert="‖";var VerticalBar="∣";var VerticalLine="|";var VerticalSeparator="❘";var VerticalTilde="≀";var VeryThinSpace=" ";var Vfr="𝔙";var Vopf="𝕍";var Vscr="𝒱";var Vvdash="⊪";var Wcirc="Ŵ";var Wedge="⋀";var Wfr="𝔚";var Wopf="𝕎";var Wscr="𝒲";var Xfr="𝔛";var Xi="Ξ";var Xopf="𝕏";var Xscr="𝒳";var YAcy="Я";var YIcy="Ї";var YUcy="Ю";var Yacut="Ý";var Yacute="Ý";var Ycirc="Ŷ";var Ycy="Ы";var Yfr="𝔜";var Yopf="𝕐";var Yscr="𝒴";var Yuml="Ÿ";var ZHcy="Ж";var Zacute="Ź";var Zcaron="Ž";var Zcy="З";var Zdot="Ż";var ZeroWidthSpace="​";var Zeta="Ζ";var Zfr="ℨ";var Zopf="ℤ";var Zscr="𝒵";var aacut="á";var aacute="á";var abreve="ă";var ac="∾";var acE="∾̳";var acd="∿";var acir="â";var acirc="â";var acut="´";var acute="´";var acy="а";var aeli="æ";var aelig="æ";var af="⁡";var afr="𝔞";var agrav="à";var agrave="à";var alefsym="ℵ";var aleph="ℵ";var alpha="α";var amacr="ā";var amalg="⨿";var am="&";var amp="&";var and="∧";var andand="⩕";var andd="⩜";var andslope="⩘";var andv="⩚";var ang="∠";var ange="⦤";var angle="∠";var angmsd="∡";var angmsdaa="⦨";var angmsdab="⦩";var angmsdac="⦪";var angmsdad="⦫";var angmsdae="⦬";var angmsdaf="⦭";var angmsdag="⦮";var angmsdah="⦯";var angrt="∟";var angrtvb="⊾";var angrtvbd="⦝";var angsph="∢";var angst="Å";var angzarr="⍼";var aogon="ą";var aopf="𝕒";var ap="≈";var apE="⩰";var apacir="⩯";var ape="≊";var apid="≋";var apos="'";var approx="≈";var approxeq="≊";var arin="å";var aring="å";var ascr="𝒶";var ast="*";var asymp="≈";var asympeq="≍";var atild="ã";var atilde="ã";var aum="ä";var auml="ä";var awconint="∳";var awint="⨑";var bNot="⫭";var backcong="≌";var backepsilon="϶";var backprime="‵";var backsim="∽";var backsimeq="⋍";var barvee="⊽";var barwed="⌅";var barwedge="⌅";var bbrk="⎵";var bbrktbrk="⎶";var bcong="≌";var bcy="б";var bdquo="„";var becaus="∵";var because="∵";var bemptyv="⦰";var bepsi="϶";var bernou="ℬ";var beta="β";var beth="ℶ";var between="≬";var bfr="𝔟";var bigcap="⋂";var bigcirc="◯";var bigcup="⋃";var bigodot="⨀";var bigoplus="⨁";var bigotimes="⨂";var bigsqcup="⨆";var bigstar="★";var bigtriangledown="▽";var bigtriangleup="△";var biguplus="⨄";var bigvee="⋁";var bigwedge="⋀";var bkarow="⤍";var blacklozenge="⧫";var blacksquare="▪";var blacktriangle="▴";var blacktriangledown="▾";var blacktriangleleft="◂";var blacktriangleright="▸";var blank="␣";var blk12="▒";var blk14="░";var blk34="▓";var block="█";var bne="=⃥";var bnequiv="≡⃥";var bnot="⌐";var bopf="𝕓";var bot="⊥";var bottom="⊥";var bowtie="⋈";var boxDL="╗";var boxDR="╔";var boxDl="╖";var boxDr="╓";var boxH="═";var boxHD="╦";var boxHU="╩";var boxHd="╤";var boxHu="╧";var boxUL="╝";var boxUR="╚";var boxUl="╜";var boxUr="╙";var boxV="║";var boxVH="╬";var boxVL="╣";var boxVR="╠";var boxVh="╫";var boxVl="╢";var boxVr="╟";var boxbox="⧉";var boxdL="╕";var boxdR="╒";var boxdl="┐";var boxdr="┌";var boxh="─";var boxhD="╥";var boxhU="╨";var boxhd="┬";var boxhu="┴";var boxminus="⊟";var boxplus="⊞";var boxtimes="⊠";var boxuL="╛";var boxuR="╘";var boxul="┘";var boxur="└";var boxv="│";var boxvH="╪";var boxvL="╡";var boxvR="╞";var boxvh="┼";var boxvl="┤";var boxvr="├";var bprime="‵";var breve="˘";var brvba="¦";var brvbar="¦";var bscr="𝒷";var bsemi="⁏";var bsim="∽";var bsime="⋍";var bsol="\\";var bsolb="⧅";var bsolhsub="⟈";var bull="•";var bullet="•";var bump="≎";var bumpE="⪮";var bumpe="≏";var bumpeq="≏";var cacute="ć";var cap="∩";var capand="⩄";var capbrcup="⩉";var capcap="⩋";var capcup="⩇";var capdot="⩀";var caps="∩︀";var caret="⁁";var caron="ˇ";var ccaps="⩍";var ccaron="č";var ccedi="ç";var ccedil="ç";var ccirc="ĉ";var ccups="⩌";var ccupssm="⩐";var cdot="ċ";var cedi="¸";var cedil="¸";var cemptyv="⦲";var cen="¢";var cent="¢";var centerdot="·";var cfr="𝔠";var chcy="ч";var check="✓";var checkmark="✓";var chi="χ";var cir="○";var cirE="⧃";var circ="ˆ";var circeq="≗";var circlearrowleft="↺";var circlearrowright="↻";var circledR="®";var circledS="Ⓢ";var circledast="⊛";var circledcirc="⊚";var circleddash="⊝";var cire="≗";var cirfnint="⨐";var cirmid="⫯";var cirscir="⧂";var clubs="♣";var clubsuit="♣";var colon=":";var colone="≔";var coloneq="≔";var comma=",";var commat="@";var comp="∁";var compfn="∘";var complement="∁";var complexes="ℂ";var cong="≅";var congdot="⩭";var conint="∮";var copf="𝕔";var coprod="∐";var cop="©";var copy="©";var copysr="℗";var crarr="↵";var cross="✗";var cscr="𝒸";var csub="⫏";var csube="⫑";var csup="⫐";var csupe="⫒";var ctdot="⋯";var cudarrl="⤸";var cudarrr="⤵";var cuepr="⋞";var cuesc="⋟";var cularr="↶";var cularrp="⤽";var cup="∪";var cupbrcap="⩈";var cupcap="⩆";var cupcup="⩊";var cupdot="⊍";var cupor="⩅";var cups="∪︀";var curarr="↷";var curarrm="⤼";var curlyeqprec="⋞";var curlyeqsucc="⋟";var curlyvee="⋎";var curlywedge="⋏";var curre="¤";var curren="¤";var curvearrowleft="↶";var curvearrowright="↷";var cuvee="⋎";var cuwed="⋏";var cwconint="∲";var cwint="∱";var cylcty="⌭";var dArr="⇓";var dHar="⥥";var dagger="†";var daleth="ℸ";var darr="↓";var dash="‐";var dashv="⊣";var dbkarow="⤏";var dblac="˝";var dcaron="ď";var dcy="д";var dd="ⅆ";var ddagger="‡";var ddarr="⇊";var ddotseq="⩷";var de="°";var deg="°";var delta="δ";var demptyv="⦱";var dfisht="⥿";var dfr="𝔡";var dharl="⇃";var dharr="⇂";var diam="⋄";var diamond="⋄";var diamondsuit="♦";var diams="♦";var die="¨";var digamma="ϝ";var disin="⋲";var div="÷";var divid="÷";var divide="÷";var divideontimes="⋇";var divonx="⋇";var djcy="ђ";var dlcorn="⌞";var dlcrop="⌍";var dollar="$";var dopf="𝕕";var dot="˙";var doteq="≐";var doteqdot="≑";var dotminus="∸";var dotplus="∔";var dotsquare="⊡";var doublebarwedge="⌆";var downarrow="↓";var downdownarrows="⇊";var downharpoonleft="⇃";var downharpoonright="⇂";var drbkarow="⤐";var drcorn="⌟";var drcrop="⌌";var dscr="𝒹";var dscy="ѕ";var dsol="⧶";var dstrok="đ";var dtdot="⋱";var dtri="▿";var dtrif="▾";var duarr="⇵";var duhar="⥯";var dwangle="⦦";var dzcy="џ";var dzigrarr="⟿";var eDDot="⩷";var eDot="≑";var eacut="é";var eacute="é";var easter="⩮";var ecaron="ě";var ecir="ê";var ecirc="ê";var ecolon="≕";var ecy="э";var edot="ė";var ee="ⅇ";var efDot="≒";var efr="𝔢";var eg="⪚";var egrav="è";var egrave="è";var egs="⪖";var egsdot="⪘";var el="⪙";var elinters="⏧";var ell="ℓ";var els="⪕";var elsdot="⪗";var emacr="ē";var empty="∅";var emptyset="∅";var emptyv="∅";var emsp13=" ";var emsp14=" ";var emsp=" ";var eng="ŋ";var ensp=" ";var eogon="ę";var eopf="𝕖";var epar="⋕";var eparsl="⧣";var eplus="⩱";var epsi="ε";var epsilon="ε";var epsiv="ϵ";var eqcirc="≖";var eqcolon="≕";var eqsim="≂";var eqslantgtr="⪖";var eqslantless="⪕";var equals="=";var equest="≟";var equiv="≡";var equivDD="⩸";var eqvparsl="⧥";var erDot="≓";var erarr="⥱";var escr="ℯ";var esdot="≐";var esim="≂";var eta="η";var et="ð";var eth="ð";var eum="ë";var euml="ë";var euro="€";var excl="!";var exist="∃";var expectation="ℰ";var exponentiale="ⅇ";var fallingdotseq="≒";var fcy="ф";var female="♀";var ffilig="ﬃ";var fflig="ﬀ";var ffllig="ﬄ";var ffr="𝔣";var filig="ﬁ";var fjlig="fj";var flat="♭";var fllig="ﬂ";var fltns="▱";var fnof="ƒ";var fopf="𝕗";var forall="∀";var fork="⋔";var forkv="⫙";var fpartint="⨍";var frac1="¼";var frac12="½";var frac13="⅓";var frac14="¼";var frac15="⅕";var frac16="⅙";var frac18="⅛";var frac23="⅔";var frac25="⅖";var frac3="¾";var frac34="¾";var frac35="⅗";var frac38="⅜";var frac45="⅘";var frac56="⅚";var frac58="⅝";var frac78="⅞";var frasl="⁄";var frown="⌢";var fscr="𝒻";var gE="≧";var gEl="⪌";var gacute="ǵ";var gamma="γ";var gammad="ϝ";var gap="⪆";var gbreve="ğ";var gcirc="ĝ";var gcy="г";var gdot="ġ";var ge="≥";var gel="⋛";var geq="≥";var geqq="≧";var geqslant="⩾";var ges="⩾";var gescc="⪩";var gesdot="⪀";var gesdoto="⪂";var gesdotol="⪄";var gesl="⋛︀";var gesles="⪔";var gfr="𝔤";var gg="≫";var ggg="⋙";var gimel="ℷ";var gjcy="ѓ";var gl="≷";var glE="⪒";var gla="⪥";var glj="⪤";var gnE="≩";var gnap="⪊";var gnapprox="⪊";var gne="⪈";var gneq="⪈";var gneqq="≩";var gnsim="⋧";var gopf="𝕘";var grave="`";var gscr="ℊ";var gsim="≳";var gsime="⪎";var gsiml="⪐";var g$1=">";var gt=">";var gtcc="⪧";var gtcir="⩺";var gtdot="⋗";var gtlPar="⦕";var gtquest="⩼";var gtrapprox="⪆";var gtrarr="⥸";var gtrdot="⋗";var gtreqless="⋛";var gtreqqless="⪌";var gtrless="≷";var gtrsim="≳";var gvertneqq="≩︀";var gvnE="≩︀";var hArr="⇔";var hairsp=" ";var half="½";var hamilt="ℋ";var hardcy="ъ";var harr="↔";var harrcir="⥈";var harrw="↭";var hbar="ℏ";var hcirc="ĥ";var hearts="♥";var heartsuit="♥";var hellip="…";var hercon="⊹";var hfr="𝔥";var hksearow="⤥";var hkswarow="⤦";var hoarr="⇿";var homtht="∻";var hookleftarrow="↩";var hookrightarrow="↪";var hopf="𝕙";var horbar="―";var hscr="𝒽";var hslash="ℏ";var hstrok="ħ";var hybull="⁃";var hyphen="‐";var iacut="í";var iacute="í";var ic="⁣";var icir="î";var icirc="î";var icy="и";var iecy="е";var iexc="¡";var iexcl="¡";var iff="⇔";var ifr="𝔦";var igrav="ì";var igrave="ì";var ii="ⅈ";var iiiint="⨌";var iiint="∭";var iinfin="⧜";var iiota="℩";var ijlig="ĳ";var imacr="ī";var image="ℑ";var imagline="ℐ";var imagpart="ℑ";var imath="ı";var imof="⊷";var imped="Ƶ";var incare="℅";var infin="∞";var infintie="⧝";var inodot="ı";var int="∫";var intcal="⊺";var integers="ℤ";var intercal="⊺";var intlarhk="⨗";var intprod="⨼";var iocy="ё";var iogon="į";var iopf="𝕚";var iota="ι";var iprod="⨼";var iques="¿";var iquest="¿";var iscr="𝒾";var isin="∈";var isinE="⋹";var isindot="⋵";var isins="⋴";var isinsv="⋳";var isinv="∈";var it="⁢";var itilde="ĩ";var iukcy="і";var ium="ï";var iuml="ï";var jcirc="ĵ";var jcy="й";var jfr="𝔧";var jmath="ȷ";var jopf="𝕛";var jscr="𝒿";var jsercy="ј";var jukcy="є";var kappa="κ";var kappav="ϰ";var kcedil="ķ";var kcy="к";var kfr="𝔨";var kgreen="ĸ";var khcy="х";var kjcy="ќ";var kopf="𝕜";var kscr="𝓀";var lAarr="⇚";var lArr="⇐";var lAtail="⤛";var lBarr="⤎";var lE="≦";var lEg="⪋";var lHar="⥢";var lacute="ĺ";var laemptyv="⦴";var lagran="ℒ";var lambda="λ";var lang="⟨";var langd="⦑";var langle="⟨";var lap="⪅";var laqu="«";var laquo="«";var larr="←";var larrb="⇤";var larrbfs="⤟";var larrfs="⤝";var larrhk="↩";var larrlp="↫";var larrpl="⤹";var larrsim="⥳";var larrtl="↢";var lat="⪫";var latail="⤙";var late="⪭";var lates="⪭︀";var lbarr="⤌";var lbbrk="❲";var lbrace="{";var lbrack="[";var lbrke="⦋";var lbrksld="⦏";var lbrkslu="⦍";var lcaron="ľ";var lcedil="ļ";var lceil="⌈";var lcub="{";var lcy="л";var ldca="⤶";var ldquo="“";var ldquor="„";var ldrdhar="⥧";var ldrushar="⥋";var ldsh="↲";var le="≤";var leftarrow="←";var leftarrowtail="↢";var leftharpoondown="↽";var leftharpoonup="↼";var leftleftarrows="⇇";var leftrightarrow="↔";var leftrightarrows="⇆";var leftrightharpoons="⇋";var leftrightsquigarrow="↭";var leftthreetimes="⋋";var leg="⋚";var leq="≤";var leqq="≦";var leqslant="⩽";var les="⩽";var lescc="⪨";var lesdot="⩿";var lesdoto="⪁";var lesdotor="⪃";var lesg="⋚︀";var lesges="⪓";var lessapprox="⪅";var lessdot="⋖";var lesseqgtr="⋚";var lesseqqgtr="⪋";var lessgtr="≶";var lesssim="≲";var lfisht="⥼";var lfloor="⌊";var lfr="𝔩";var lg="≶";var lgE="⪑";var lhard="↽";var lharu="↼";var lharul="⥪";var lhblk="▄";var ljcy="љ";var ll="≪";var llarr="⇇";var llcorner="⌞";var llhard="⥫";var lltri="◺";var lmidot="ŀ";var lmoust="⎰";var lmoustache="⎰";var lnE="≨";var lnap="⪉";var lnapprox="⪉";var lne="⪇";var lneq="⪇";var lneqq="≨";var lnsim="⋦";var loang="⟬";var loarr="⇽";var lobrk="⟦";var longleftarrow="⟵";var longleftrightarrow="⟷";var longmapsto="⟼";var longrightarrow="⟶";var looparrowleft="↫";var looparrowright="↬";var lopar="⦅";var lopf="𝕝";var loplus="⨭";var lotimes="⨴";var lowast="∗";var lowbar="_";var loz="◊";var lozenge="◊";var lozf="⧫";var lpar="(";var lparlt="⦓";var lrarr="⇆";var lrcorner="⌟";var lrhar="⇋";var lrhard="⥭";var lrm="‎";var lrtri="⊿";var lsaquo="‹";var lscr="𝓁";var lsh="↰";var lsim="≲";var lsime="⪍";var lsimg="⪏";var lsqb="[";var lsquo="‘";var lsquor="‚";var lstrok="ł";var l$1="<";var lt="<";var ltcc="⪦";var ltcir="⩹";var ltdot="⋖";var lthree="⋋";var ltimes="⋉";var ltlarr="⥶";var ltquest="⩻";var ltrPar="⦖";var ltri="◃";var ltrie="⊴";var ltrif="◂";var lurdshar="⥊";var luruhar="⥦";var lvertneqq="≨︀";var lvnE="≨︀";var mDDot="∺";var mac="¯";var macr="¯";var male="♂";var malt="✠";var maltese="✠";var map="↦";var mapsto="↦";var mapstodown="↧";var mapstoleft="↤";var mapstoup="↥";var marker="▮";var mcomma="⨩";var mcy="м";var mdash="—";var measuredangle="∡";var mfr="𝔪";var mho="℧";var micr="µ";var micro="µ";var mid="∣";var midast="*";var midcir="⫰";var middo="·";var middot="·";var minus="−";var minusb="⊟";var minusd="∸";var minusdu="⨪";var mlcp="⫛";var mldr="…";var mnplus="∓";var models="⊧";var mopf="𝕞";var mp="∓";var mscr="𝓂";var mstpos="∾";var mu="μ";var multimap="⊸";var mumap="⊸";var nGg="⋙̸";var nGt="≫⃒";var nGtv="≫̸";var nLeftarrow="⇍";var nLeftrightarrow="⇎";var nLl="⋘̸";var nLt="≪⃒";var nLtv="≪̸";var nRightarrow="⇏";var nVDash="⊯";var nVdash="⊮";var nabla="∇";var nacute="ń";var nang="∠⃒";var nap="≉";var napE="⩰̸";var napid="≋̸";var napos="ŉ";var napprox="≉";var natur="♮";var natural="♮";var naturals="ℕ";var nbs=" ";var nbsp=" ";var nbump="≎̸";var nbumpe="≏̸";var ncap="⩃";var ncaron="ň";var ncedil="ņ";var ncong="≇";var ncongdot="⩭̸";var ncup="⩂";var ncy="н";var ndash="–";var ne="≠";var neArr="⇗";var nearhk="⤤";var nearr="↗";var nearrow="↗";var nedot="≐̸";var nequiv="≢";var nesear="⤨";var nesim="≂̸";var nexist="∄";var nexists="∄";var nfr="𝔫";var ngE="≧̸";var nge="≱";var ngeq="≱";var ngeqq="≧̸";var ngeqslant="⩾̸";var nges="⩾̸";var ngsim="≵";var ngt="≯";var ngtr="≯";var nhArr="⇎";var nharr="↮";var nhpar="⫲";var ni="∋";var nis="⋼";var nisd="⋺";var niv="∋";var njcy="њ";var nlArr="⇍";var nlE="≦̸";var nlarr="↚";var nldr="‥";var nle="≰";var nleftarrow="↚";var nleftrightarrow="↮";var nleq="≰";var nleqq="≦̸";var nleqslant="⩽̸";var nles="⩽̸";var nless="≮";var nlsim="≴";var nlt="≮";var nltri="⋪";var nltrie="⋬";var nmid="∤";var nopf="𝕟";var no="¬";var not="¬";var notin="∉";var notinE="⋹̸";var notindot="⋵̸";var notinva="∉";var notinvb="⋷";var notinvc="⋶";var notni="∌";var notniva="∌";var notnivb="⋾";var notnivc="⋽";var npar="∦";var nparallel="∦";var nparsl="⫽⃥";var npart="∂̸";var npolint="⨔";var npr="⊀";var nprcue="⋠";var npre="⪯̸";var nprec="⊀";var npreceq="⪯̸";var nrArr="⇏";var nrarr="↛";var nrarrc="⤳̸";var nrarrw="↝̸";var nrightarrow="↛";var nrtri="⋫";var nrtrie="⋭";var nsc="⊁";var nsccue="⋡";var nsce="⪰̸";var nscr="𝓃";var nshortmid="∤";var nshortparallel="∦";var nsim="≁";var nsime="≄";var nsimeq="≄";var nsmid="∤";var nspar="∦";var nsqsube="⋢";var nsqsupe="⋣";var nsub="⊄";var nsubE="⫅̸";var nsube="⊈";var nsubset="⊂⃒";var nsubseteq="⊈";var nsubseteqq="⫅̸";var nsucc="⊁";var nsucceq="⪰̸";var nsup="⊅";var nsupE="⫆̸";var nsupe="⊉";var nsupset="⊃⃒";var nsupseteq="⊉";var nsupseteqq="⫆̸";var ntgl="≹";var ntild="ñ";var ntilde="ñ";var ntlg="≸";var ntriangleleft="⋪";var ntrianglelefteq="⋬";var ntriangleright="⋫";var ntrianglerighteq="⋭";var nu="ν";var num="#";var numero="№";var numsp=" ";var nvDash="⊭";var nvHarr="⤄";var nvap="≍⃒";var nvdash="⊬";var nvge="≥⃒";var nvgt=">⃒";var nvinfin="⧞";var nvlArr="⤂";var nvle="≤⃒";var nvlt="<⃒";var nvltrie="⊴⃒";var nvrArr="⤃";var nvrtrie="⊵⃒";var nvsim="∼⃒";var nwArr="⇖";var nwarhk="⤣";var nwarr="↖";var nwarrow="↖";var nwnear="⤧";var oS="Ⓢ";var oacut="ó";var oacute="ó";var oast="⊛";var ocir="ô";var ocirc="ô";var ocy="о";var odash="⊝";var odblac="ő";var odiv="⨸";var odot="⊙";var odsold="⦼";var oelig="œ";var ofcir="⦿";var ofr="𝔬";var ogon="˛";var ograv="ò";var ograve="ò";var ogt="⧁";var ohbar="⦵";var ohm="Ω";var oint="∮";var olarr="↺";var olcir="⦾";var olcross="⦻";var oline="‾";var olt="⧀";var omacr="ō";var omega="ω";var omicron="ο";var omid="⦶";var ominus="⊖";var oopf="𝕠";var opar="⦷";var operp="⦹";var oplus="⊕";var or="∨";var orarr="↻";var ord="º";var order="ℴ";var orderof="ℴ";var ordf="ª";var ordm="º";var origof="⊶";var oror="⩖";var orslope="⩗";var orv="⩛";var oscr="ℴ";var oslas="ø";var oslash="ø";var osol="⊘";var otild="õ";var otilde="õ";var otimes="⊗";var otimesas="⨶";var oum="ö";var ouml="ö";var ovbar="⌽";var par="¶";var para="¶";var parallel="∥";var parsim="⫳";var parsl="⫽";var part="∂";var pcy="п";var percnt="%";var period=".";var permil="‰";var perp="⊥";var pertenk="‱";var pfr="𝔭";var phi="φ";var phiv="ϕ";var phmmat="ℳ";var phone="☎";var pi="π";var pitchfork="⋔";var piv="ϖ";var planck="ℏ";var planckh="ℎ";var plankv="ℏ";var plus="+";var plusacir="⨣";var plusb="⊞";var pluscir="⨢";var plusdo="∔";var plusdu="⨥";var pluse="⩲";var plusm="±";var plusmn="±";var plussim="⨦";var plustwo="⨧";var pm="±";var pointint="⨕";var popf="𝕡";var poun="£";var pound="£";var pr="≺";var prE="⪳";var prap="⪷";var prcue="≼";var pre="⪯";var prec="≺";var precapprox="⪷";var preccurlyeq="≼";var preceq="⪯";var precnapprox="⪹";var precneqq="⪵";var precnsim="⋨";var precsim="≾";var prime="′";var primes="ℙ";var prnE="⪵";var prnap="⪹";var prnsim="⋨";var prod="∏";var profalar="⌮";var profline="⌒";var profsurf="⌓";var prop="∝";var propto="∝";var prsim="≾";var prurel="⊰";var pscr="𝓅";var psi="ψ";var puncsp=" ";var qfr="𝔮";var qint="⨌";var qopf="𝕢";var qprime="⁗";var qscr="𝓆";var quaternions="ℍ";var quatint="⨖";var quest="?";var questeq="≟";var quo="\"";var quot="\"";var rAarr="⇛";var rArr="⇒";var rAtail="⤜";var rBarr="⤏";var rHar="⥤";var race="∽̱";var racute="ŕ";var radic="√";var raemptyv="⦳";var rang="⟩";var rangd="⦒";var range="⦥";var rangle="⟩";var raqu="»";var raquo="»";var rarr="→";var rarrap="⥵";var rarrb="⇥";var rarrbfs="⤠";var rarrc="⤳";var rarrfs="⤞";var rarrhk="↪";var rarrlp="↬";var rarrpl="⥅";var rarrsim="⥴";var rarrtl="↣";var rarrw="↝";var ratail="⤚";var ratio="∶";var rationals="ℚ";var rbarr="⤍";var rbbrk="❳";var rbrace="}";var rbrack="]";var rbrke="⦌";var rbrksld="⦎";var rbrkslu="⦐";var rcaron="ř";var rcedil="ŗ";var rceil="⌉";var rcub="}";var rcy="р";var rdca="⤷";var rdldhar="⥩";var rdquo="”";var rdquor="”";var rdsh="↳";var real="ℜ";var realine="ℛ";var realpart="ℜ";var reals="ℝ";var rect="▭";var re="®";var reg="®";var rfisht="⥽";var rfloor="⌋";var rfr="𝔯";var rhard="⇁";var rharu="⇀";var rharul="⥬";var rho="ρ";var rhov="ϱ";var rightarrow="→";var rightarrowtail="↣";var rightharpoondown="⇁";var rightharpoonup="⇀";var rightleftarrows="⇄";var rightleftharpoons="⇌";var rightrightarrows="⇉";var rightsquigarrow="↝";var rightthreetimes="⋌";var ring="˚";var risingdotseq="≓";var rlarr="⇄";var rlhar="⇌";var rlm="‏";var rmoust="⎱";var rmoustache="⎱";var rnmid="⫮";var roang="⟭";var roarr="⇾";var robrk="⟧";var ropar="⦆";var ropf="𝕣";var roplus="⨮";var rotimes="⨵";var rpar=")";var rpargt="⦔";var rppolint="⨒";var rrarr="⇉";var rsaquo="›";var rscr="𝓇";var rsh="↱";var rsqb="]";var rsquo="’";var rsquor="’";var rthree="⋌";var rtimes="⋊";var rtri="▹";var rtrie="⊵";var rtrif="▸";var rtriltri="⧎";var ruluhar="⥨";var rx="℞";var sacute="ś";var sbquo="‚";var sc="≻";var scE="⪴";var scap="⪸";var scaron="š";var sccue="≽";var sce="⪰";var scedil="ş";var scirc="ŝ";var scnE="⪶";var scnap="⪺";var scnsim="⋩";var scpolint="⨓";var scsim="≿";var scy="с";var sdot="⋅";var sdotb="⊡";var sdote="⩦";var seArr="⇘";var searhk="⤥";var searr="↘";var searrow="↘";var sec="§";var sect="§";var semi=";";var seswar="⤩";var setminus="∖";var setmn="∖";var sext="✶";var sfr="𝔰";var sfrown="⌢";var sharp="♯";var shchcy="щ";var shcy="ш";var shortmid="∣";var shortparallel="∥";var sh="­";var shy="­";var sigma="σ";var sigmaf="ς";var sigmav="ς";var sim="∼";var simdot="⩪";var sime="≃";var simeq="≃";var simg="⪞";var simgE="⪠";var siml="⪝";var simlE="⪟";var simne="≆";var simplus="⨤";var simrarr="⥲";var slarr="←";var smallsetminus="∖";var smashp="⨳";var smeparsl="⧤";var smid="∣";var smile="⌣";var smt="⪪";var smte="⪬";var smtes="⪬︀";var softcy="ь";var sol="/";var solb="⧄";var solbar="⌿";var sopf="𝕤";var spades="♠";var spadesuit="♠";var spar="∥";var sqcap="⊓";var sqcaps="⊓︀";var sqcup="⊔";var sqcups="⊔︀";var sqsub="⊏";var sqsube="⊑";var sqsubset="⊏";var sqsubseteq="⊑";var sqsup="⊐";var sqsupe="⊒";var sqsupset="⊐";var sqsupseteq="⊒";var squ="□";var square="□";var squarf="▪";var squf="▪";var srarr="→";var sscr="𝓈";var ssetmn="∖";var ssmile="⌣";var sstarf="⋆";var star="☆";var starf="★";var straightepsilon="ϵ";var straightphi="ϕ";var strns="¯";var sub="⊂";var subE="⫅";var subdot="⪽";var sube="⊆";var subedot="⫃";var submult="⫁";var subnE="⫋";var subne="⊊";var subplus="⪿";var subrarr="⥹";var subset="⊂";var subseteq="⊆";var subseteqq="⫅";var subsetneq="⊊";var subsetneqq="⫋";var subsim="⫇";var subsub="⫕";var subsup="⫓";var succ="≻";var succapprox="⪸";var succcurlyeq="≽";var succeq="⪰";var succnapprox="⪺";var succneqq="⪶";var succnsim="⋩";var succsim="≿";var sum="∑";var sung="♪";var sup="⊃";var sup1="¹";var sup2="²";var sup3="³";var supE="⫆";var supdot="⪾";var supdsub="⫘";var supe="⊇";var supedot="⫄";var suphsol="⟉";var suphsub="⫗";var suplarr="⥻";var supmult="⫂";var supnE="⫌";var supne="⊋";var supplus="⫀";var supset="⊃";var supseteq="⊇";var supseteqq="⫆";var supsetneq="⊋";var supsetneqq="⫌";var supsim="⫈";var supsub="⫔";var supsup="⫖";var swArr="⇙";var swarhk="⤦";var swarr="↙";var swarrow="↙";var swnwar="⤪";var szli="ß";var szlig="ß";var target="⌖";var tau="τ";var tbrk="⎴";var tcaron="ť";var tcedil="ţ";var tcy="т";var tdot="⃛";var telrec="⌕";var tfr="𝔱";var there4="∴";var therefore="∴";var theta="θ";var thetasym="ϑ";var thetav="ϑ";var thickapprox="≈";var thicksim="∼";var thinsp=" ";var thkap="≈";var thksim="∼";var thor="þ";var thorn="þ";var tilde="˜";var time="×";var times="×";var timesb="⊠";var timesbar="⨱";var timesd="⨰";var tint="∭";var toea="⤨";var top="⊤";var topbot="⌶";var topcir="⫱";var topf="𝕥";var topfork="⫚";var tosa="⤩";var tprime="‴";var trade="™";var triangle="▵";var triangledown="▿";var triangleleft="◃";var trianglelefteq="⊴";var triangleq="≜";var triangleright="▹";var trianglerighteq="⊵";var tridot="◬";var trie="≜";var triminus="⨺";var triplus="⨹";var trisb="⧍";var tritime="⨻";var trpezium="⏢";var tscr="𝓉";var tscy="ц";var tshcy="ћ";var tstrok="ŧ";var twixt="≬";var twoheadleftarrow="↞";var twoheadrightarrow="↠";var uArr="⇑";var uHar="⥣";var uacut="ú";var uacute="ú";var uarr="↑";var ubrcy="ў";var ubreve="ŭ";var ucir="û";var ucirc="û";var ucy="у";var udarr="⇅";var udblac="ű";var udhar="⥮";var ufisht="⥾";var ufr="𝔲";var ugrav="ù";var ugrave="ù";var uharl="↿";var uharr="↾";var uhblk="▀";var ulcorn="⌜";var ulcorner="⌜";var ulcrop="⌏";var ultri="◸";var umacr="ū";var um="¨";var uml="¨";var uogon="ų";var uopf="𝕦";var uparrow="↑";var updownarrow="↕";var upharpoonleft="↿";var upharpoonright="↾";var uplus="⊎";var upsi="υ";var upsih="ϒ";var upsilon="υ";var upuparrows="⇈";var urcorn="⌝";var urcorner="⌝";var urcrop="⌎";var uring="ů";var urtri="◹";var uscr="𝓊";var utdot="⋰";var utilde="ũ";var utri="▵";var utrif="▴";var uuarr="⇈";var uum="ü";var uuml="ü";var uwangle="⦧";var vArr="⇕";var vBar="⫨";var vBarv="⫩";var vDash="⊨";var vangrt="⦜";var varepsilon="ϵ";var varkappa="ϰ";var varnothing="∅";var varphi="ϕ";var varpi="ϖ";var varpropto="∝";var varr="↕";var varrho="ϱ";var varsigma="ς";var varsubsetneq="⊊︀";var varsubsetneqq="⫋︀";var varsupsetneq="⊋︀";var varsupsetneqq="⫌︀";var vartheta="ϑ";var vartriangleleft="⊲";var vartriangleright="⊳";var vcy="в";var vdash="⊢";var vee="∨";var veebar="⊻";var veeeq="≚";var vellip="⋮";var verbar="|";var vert="|";var vfr="𝔳";var vltri="⊲";var vnsub="⊂⃒";var vnsup="⊃⃒";var vopf="𝕧";var vprop="∝";var vrtri="⊳";var vscr="𝓋";var vsubnE="⫋︀";var vsubne="⊊︀";var vsupnE="⫌︀";var vsupne="⊋︀";var vzigzag="⦚";var wcirc="ŵ";var wedbar="⩟";var wedge="∧";var wedgeq="≙";var weierp="℘";var wfr="𝔴";var wopf="𝕨";var wp="℘";var wr="≀";var wreath="≀";var wscr="𝓌";var xcap="⋂";var xcirc="◯";var xcup="⋃";var xdtri="▽";var xfr="𝔵";var xhArr="⟺";var xharr="⟷";var xi="ξ";var xlArr="⟸";var xlarr="⟵";var xmap="⟼";var xnis="⋻";var xodot="⨀";var xopf="𝕩";var xoplus="⨁";var xotime="⨂";var xrArr="⟹";var xrarr="⟶";var xscr="𝓍";var xsqcup="⨆";var xuplus="⨄";var xutri="△";var xvee="⋁";var xwedge="⋀";var yacut="ý";var yacute="ý";var yacy="я";var ycirc="ŷ";var ycy="ы";var ye="¥";var yen="¥";var yfr="𝔶";var yicy="ї";var yopf="𝕪";var yscr="𝓎";var yucy="ю";var yum="ÿ";var yuml="ÿ";var zacute="ź";var zcaron="ž";var zcy="з";var zdot="ż";var zeetrf="ℨ";var zeta="ζ";var zfr="𝔷";var zhcy="ж";var zigrarr="⇝";var zopf="𝕫";var zscr="𝓏";var zwj="‍";var zwnj="‌";var require$$0 = {AEli:AEli,AElig:AElig,AM:AM,AMP:AMP,Aacut:Aacut,Aacute:Aacute,Abreve:Abreve,Acir:Acir,Acirc:Acirc,Acy:Acy,Afr:Afr,Agrav:Agrav,Agrave:Agrave,Alpha:Alpha,Amacr:Amacr,And:And,Aogon:Aogon,Aopf:Aopf,ApplyFunction:ApplyFunction,Arin:Arin,Aring:Aring,Ascr:Ascr,Assign:Assign,Atild:Atild,Atilde:Atilde,Aum:Aum,Auml:Auml,Backslash:Backslash,Barv:Barv,Barwed:Barwed,Bcy:Bcy,Because:Because,Bernoullis:Bernoullis,Beta:Beta,Bfr:Bfr,Bopf:Bopf,Breve:Breve,Bscr:Bscr,Bumpeq:Bumpeq,CHcy:CHcy,COP:COP,COPY:COPY,Cacute:Cacute,Cap:Cap,CapitalDifferentialD:CapitalDifferentialD,Cayleys:Cayleys,Ccaron:Ccaron,Ccedi:Ccedi,Ccedil:Ccedil,Ccirc:Ccirc,Cconint:Cconint,Cdot:Cdot,Cedilla:Cedilla,CenterDot:CenterDot,Cfr:Cfr,Chi:Chi,CircleDot:CircleDot,CircleMinus:CircleMinus,CirclePlus:CirclePlus,CircleTimes:CircleTimes,ClockwiseContourIntegral:ClockwiseContourIntegral,CloseCurlyDoubleQuote:CloseCurlyDoubleQuote,CloseCurlyQuote:CloseCurlyQuote,Colon:Colon,Colone:Colone,Congruent:Congruent,Conint:Conint,ContourIntegral:ContourIntegral,Copf:Copf,Coproduct:Coproduct,CounterClockwiseContourIntegral:CounterClockwiseContourIntegral,Cross:Cross,Cscr:Cscr,Cup:Cup,CupCap:CupCap,DD:DD,DDotrahd:DDotrahd,DJcy:DJcy,DScy:DScy,DZcy:DZcy,Dagger:Dagger,Darr:Darr,Dashv:Dashv,Dcaron:Dcaron,Dcy:Dcy,Del:Del,Delta:Delta,Dfr:Dfr,DiacriticalAcute:DiacriticalAcute,DiacriticalDot:DiacriticalDot,DiacriticalDoubleAcute:DiacriticalDoubleAcute,DiacriticalGrave:DiacriticalGrave,DiacriticalTilde:DiacriticalTilde,Diamond:Diamond,DifferentialD:DifferentialD,Dopf:Dopf,Dot:Dot,DotDot:DotDot,DotEqual:DotEqual,DoubleContourIntegral:DoubleContourIntegral,DoubleDot:DoubleDot,DoubleDownArrow:DoubleDownArrow,DoubleLeftArrow:DoubleLeftArrow,DoubleLeftRightArrow:DoubleLeftRightArrow,DoubleLeftTee:DoubleLeftTee,DoubleLongLeftArrow:DoubleLongLeftArrow,DoubleLongLeftRightArrow:DoubleLongLeftRightArrow,DoubleLongRightArrow:DoubleLongRightArrow,DoubleRightArrow:DoubleRightArrow,DoubleRightTee:DoubleRightTee,DoubleUpArrow:DoubleUpArrow,DoubleUpDownArrow:DoubleUpDownArrow,DoubleVerticalBar:DoubleVerticalBar,DownArrow:DownArrow,DownArrowBar:DownArrowBar,DownArrowUpArrow:DownArrowUpArrow,DownBreve:DownBreve,DownLeftRightVector:DownLeftRightVector,DownLeftTeeVector:DownLeftTeeVector,DownLeftVector:DownLeftVector,DownLeftVectorBar:DownLeftVectorBar,DownRightTeeVector:DownRightTeeVector,DownRightVector:DownRightVector,DownRightVectorBar:DownRightVectorBar,DownTee:DownTee,DownTeeArrow:DownTeeArrow,Downarrow:Downarrow,Dscr:Dscr,Dstrok:Dstrok,ENG:ENG,ET:ET,ETH:ETH,Eacut:Eacut,Eacute:Eacute,Ecaron:Ecaron,Ecir:Ecir,Ecirc:Ecirc,Ecy:Ecy,Edot:Edot,Efr:Efr,Egrav:Egrav,Egrave:Egrave,Element:Element$1,Emacr:Emacr,EmptySmallSquare:EmptySmallSquare,EmptyVerySmallSquare:EmptyVerySmallSquare,Eogon:Eogon,Eopf:Eopf,Epsilon:Epsilon,Equal:Equal,EqualTilde:EqualTilde,Equilibrium:Equilibrium,Escr:Escr,Esim:Esim,Eta:Eta,Eum:Eum,Euml:Euml,Exists:Exists,ExponentialE:ExponentialE,Fcy:Fcy,Ffr:Ffr,FilledSmallSquare:FilledSmallSquare,FilledVerySmallSquare:FilledVerySmallSquare,Fopf:Fopf,ForAll:ForAll,Fouriertrf:Fouriertrf,Fscr:Fscr,GJcy:GJcy,G:G,GT:GT,Gamma:Gamma,Gammad:Gammad,Gbreve:Gbreve,Gcedil:Gcedil,Gcirc:Gcirc,Gcy:Gcy,Gdot:Gdot,Gfr:Gfr,Gg:Gg,Gopf:Gopf,GreaterEqual:GreaterEqual,GreaterEqualLess:GreaterEqualLess,GreaterFullEqual:GreaterFullEqual,GreaterGreater:GreaterGreater,GreaterLess:GreaterLess,GreaterSlantEqual:GreaterSlantEqual,GreaterTilde:GreaterTilde,Gscr:Gscr,Gt:Gt,HARDcy:HARDcy,Hacek:Hacek,Hat:Hat,Hcirc:Hcirc,Hfr:Hfr,HilbertSpace:HilbertSpace,Hopf:Hopf,HorizontalLine:HorizontalLine,Hscr:Hscr,Hstrok:Hstrok,HumpDownHump:HumpDownHump,HumpEqual:HumpEqual,IEcy:IEcy,IJlig:IJlig,IOcy:IOcy,Iacut:Iacut,Iacute:Iacute,Icir:Icir,Icirc:Icirc,Icy:Icy,Idot:Idot,Ifr:Ifr,Igrav:Igrav,Igrave:Igrave,Im:Im,Imacr:Imacr,ImaginaryI:ImaginaryI,Implies:Implies,Int:Int,Integral:Integral,Intersection:Intersection,InvisibleComma:InvisibleComma,InvisibleTimes:InvisibleTimes,Iogon:Iogon,Iopf:Iopf,Iota:Iota,Iscr:Iscr,Itilde:Itilde,Iukcy:Iukcy,Ium:Ium,Iuml:Iuml,Jcirc:Jcirc,Jcy:Jcy,Jfr:Jfr,Jopf:Jopf,Jscr:Jscr,Jsercy:Jsercy,Jukcy:Jukcy,KHcy:KHcy,KJcy:KJcy,Kappa:Kappa,Kcedil:Kcedil,Kcy:Kcy,Kfr:Kfr,Kopf:Kopf,Kscr:Kscr,LJcy:LJcy,L:L,LT:LT,Lacute:Lacute,Lambda:Lambda,Lang:Lang,Laplacetrf:Laplacetrf,Larr:Larr,Lcaron:Lcaron,Lcedil:Lcedil,Lcy:Lcy,LeftAngleBracket:LeftAngleBracket,LeftArrow:LeftArrow,LeftArrowBar:LeftArrowBar,LeftArrowRightArrow:LeftArrowRightArrow,LeftCeiling:LeftCeiling,LeftDoubleBracket:LeftDoubleBracket,LeftDownTeeVector:LeftDownTeeVector,LeftDownVector:LeftDownVector,LeftDownVectorBar:LeftDownVectorBar,LeftFloor:LeftFloor,LeftRightArrow:LeftRightArrow,LeftRightVector:LeftRightVector,LeftTee:LeftTee,LeftTeeArrow:LeftTeeArrow,LeftTeeVector:LeftTeeVector,LeftTriangle:LeftTriangle,LeftTriangleBar:LeftTriangleBar,LeftTriangleEqual:LeftTriangleEqual,LeftUpDownVector:LeftUpDownVector,LeftUpTeeVector:LeftUpTeeVector,LeftUpVector:LeftUpVector,LeftUpVectorBar:LeftUpVectorBar,LeftVector:LeftVector,LeftVectorBar:LeftVectorBar,Leftarrow:Leftarrow,Leftrightarrow:Leftrightarrow,LessEqualGreater:LessEqualGreater,LessFullEqual:LessFullEqual,LessGreater:LessGreater,LessLess:LessLess,LessSlantEqual:LessSlantEqual,LessTilde:LessTilde,Lfr:Lfr,Ll:Ll,Lleftarrow:Lleftarrow,Lmidot:Lmidot,LongLeftArrow:LongLeftArrow,LongLeftRightArrow:LongLeftRightArrow,LongRightArrow:LongRightArrow,Longleftarrow:Longleftarrow,Longleftrightarrow:Longleftrightarrow,Longrightarrow:Longrightarrow,Lopf:Lopf,LowerLeftArrow:LowerLeftArrow,LowerRightArrow:LowerRightArrow,Lscr:Lscr,Lsh:Lsh,Lstrok:Lstrok,Lt:Lt,"Map":"⤅",Mcy:Mcy,MediumSpace:MediumSpace,Mellintrf:Mellintrf,Mfr:Mfr,MinusPlus:MinusPlus,Mopf:Mopf,Mscr:Mscr,Mu:Mu,NJcy:NJcy,Nacute:Nacute,Ncaron:Ncaron,Ncedil:Ncedil,Ncy:Ncy,NegativeMediumSpace:NegativeMediumSpace,NegativeThickSpace:NegativeThickSpace,NegativeThinSpace:NegativeThinSpace,NegativeVeryThinSpace:NegativeVeryThinSpace,NestedGreaterGreater:NestedGreaterGreater,NestedLessLess:NestedLessLess,NewLine:NewLine,Nfr:Nfr,NoBreak:NoBreak,NonBreakingSpace:NonBreakingSpace,Nopf:Nopf,Not:Not,NotCongruent:NotCongruent,NotCupCap:NotCupCap,NotDoubleVerticalBar:NotDoubleVerticalBar,NotElement:NotElement,NotEqual:NotEqual,NotEqualTilde:NotEqualTilde,NotExists:NotExists,NotGreater:NotGreater,NotGreaterEqual:NotGreaterEqual,NotGreaterFullEqual:NotGreaterFullEqual,NotGreaterGreater:NotGreaterGreater,NotGreaterLess:NotGreaterLess,NotGreaterSlantEqual:NotGreaterSlantEqual,NotGreaterTilde:NotGreaterTilde,NotHumpDownHump:NotHumpDownHump,NotHumpEqual:NotHumpEqual,NotLeftTriangle:NotLeftTriangle,NotLeftTriangleBar:NotLeftTriangleBar,NotLeftTriangleEqual:NotLeftTriangleEqual,NotLess:NotLess,NotLessEqual:NotLessEqual,NotLessGreater:NotLessGreater,NotLessLess:NotLessLess,NotLessSlantEqual:NotLessSlantEqual,NotLessTilde:NotLessTilde,NotNestedGreaterGreater:NotNestedGreaterGreater,NotNestedLessLess:NotNestedLessLess,NotPrecedes:NotPrecedes,NotPrecedesEqual:NotPrecedesEqual,NotPrecedesSlantEqual:NotPrecedesSlantEqual,NotReverseElement:NotReverseElement,NotRightTriangle:NotRightTriangle,NotRightTriangleBar:NotRightTriangleBar,NotRightTriangleEqual:NotRightTriangleEqual,NotSquareSubset:NotSquareSubset,NotSquareSubsetEqual:NotSquareSubsetEqual,NotSquareSuperset:NotSquareSuperset,NotSquareSupersetEqual:NotSquareSupersetEqual,NotSubset:NotSubset,NotSubsetEqual:NotSubsetEqual,NotSucceeds:NotSucceeds,NotSucceedsEqual:NotSucceedsEqual,NotSucceedsSlantEqual:NotSucceedsSlantEqual,NotSucceedsTilde:NotSucceedsTilde,NotSuperset:NotSuperset,NotSupersetEqual:NotSupersetEqual,NotTilde:NotTilde,NotTildeEqual:NotTildeEqual,NotTildeFullEqual:NotTildeFullEqual,NotTildeTilde:NotTildeTilde,NotVerticalBar:NotVerticalBar,Nscr:Nscr,Ntild:Ntild,Ntilde:Ntilde,Nu:Nu,OElig:OElig,Oacut:Oacut,Oacute:Oacute,Ocir:Ocir,Ocirc:Ocirc,Ocy:Ocy,Odblac:Odblac,Ofr:Ofr,Ograv:Ograv,Ograve:Ograve,Omacr:Omacr,Omega:Omega,Omicron:Omicron,Oopf:Oopf,OpenCurlyDoubleQuote:OpenCurlyDoubleQuote,OpenCurlyQuote:OpenCurlyQuote,Or:Or,Oscr:Oscr,Oslas:Oslas,Oslash:Oslash,Otild:Otild,Otilde:Otilde,Otimes:Otimes,Oum:Oum,Ouml:Ouml,OverBar:OverBar,OverBrace:OverBrace,OverBracket:OverBracket,OverParenthesis:OverParenthesis,PartialD:PartialD,Pcy:Pcy,Pfr:Pfr,Phi:Phi,Pi:Pi,PlusMinus:PlusMinus,Poincareplane:Poincareplane,Popf:Popf,Pr:Pr,Precedes:Precedes,PrecedesEqual:PrecedesEqual,PrecedesSlantEqual:PrecedesSlantEqual,PrecedesTilde:PrecedesTilde,Prime:Prime,Product:Product,Proportion:Proportion,Proportional:Proportional,Pscr:Pscr,Psi:Psi,QUO:QUO,QUOT:QUOT,Qfr:Qfr,Qopf:Qopf,Qscr:Qscr,RBarr:RBarr,RE:RE,REG:REG,Racute:Racute,Rang:Rang,Rarr:Rarr,Rarrtl:Rarrtl,Rcaron:Rcaron,Rcedil:Rcedil,Rcy:Rcy,Re:Re,ReverseElement:ReverseElement,ReverseEquilibrium:ReverseEquilibrium,ReverseUpEquilibrium:ReverseUpEquilibrium,Rfr:Rfr,Rho:Rho,RightAngleBracket:RightAngleBracket,RightArrow:RightArrow,RightArrowBar:RightArrowBar,RightArrowLeftArrow:RightArrowLeftArrow,RightCeiling:RightCeiling,RightDoubleBracket:RightDoubleBracket,RightDownTeeVector:RightDownTeeVector,RightDownVector:RightDownVector,RightDownVectorBar:RightDownVectorBar,RightFloor:RightFloor,RightTee:RightTee,RightTeeArrow:RightTeeArrow,RightTeeVector:RightTeeVector,RightTriangle:RightTriangle,RightTriangleBar:RightTriangleBar,RightTriangleEqual:RightTriangleEqual,RightUpDownVector:RightUpDownVector,RightUpTeeVector:RightUpTeeVector,RightUpVector:RightUpVector,RightUpVectorBar:RightUpVectorBar,RightVector:RightVector,RightVectorBar:RightVectorBar,Rightarrow:Rightarrow,Ropf:Ropf,RoundImplies:RoundImplies,Rrightarrow:Rrightarrow,Rscr:Rscr,Rsh:Rsh,RuleDelayed:RuleDelayed,SHCHcy:SHCHcy,SHcy:SHcy,SOFTcy:SOFTcy,Sacute:Sacute,Sc:Sc,Scaron:Scaron,Scedil:Scedil,Scirc:Scirc,Scy:Scy,Sfr:Sfr,ShortDownArrow:ShortDownArrow,ShortLeftArrow:ShortLeftArrow,ShortRightArrow:ShortRightArrow,ShortUpArrow:ShortUpArrow,Sigma:Sigma,SmallCircle:SmallCircle,Sopf:Sopf,Sqrt:Sqrt,Square:Square,SquareIntersection:SquareIntersection,SquareSubset:SquareSubset,SquareSubsetEqual:SquareSubsetEqual,SquareSuperset:SquareSuperset,SquareSupersetEqual:SquareSupersetEqual,SquareUnion:SquareUnion,Sscr:Sscr,Star:Star,Sub:Sub,Subset:Subset,SubsetEqual:SubsetEqual,Succeeds:Succeeds,SucceedsEqual:SucceedsEqual,SucceedsSlantEqual:SucceedsSlantEqual,SucceedsTilde:SucceedsTilde,SuchThat:SuchThat,Sum:Sum,Sup:Sup,Superset:Superset,SupersetEqual:SupersetEqual,Supset:Supset,THOR:THOR,THORN:THORN,TRADE:TRADE,TSHcy:TSHcy,TScy:TScy,Tab:Tab,Tau:Tau,Tcaron:Tcaron,Tcedil:Tcedil,Tcy:Tcy,Tfr:Tfr,Therefore:Therefore,Theta:Theta,ThickSpace:ThickSpace,ThinSpace:ThinSpace,Tilde:Tilde,TildeEqual:TildeEqual,TildeFullEqual:TildeFullEqual,TildeTilde:TildeTilde,Topf:Topf,TripleDot:TripleDot,Tscr:Tscr,Tstrok:Tstrok,Uacut:Uacut,Uacute:Uacute,Uarr:Uarr,Uarrocir:Uarrocir,Ubrcy:Ubrcy,Ubreve:Ubreve,Ucir:Ucir,Ucirc:Ucirc,Ucy:Ucy,Udblac:Udblac,Ufr:Ufr,Ugrav:Ugrav,Ugrave:Ugrave,Umacr:Umacr,UnderBar:UnderBar,UnderBrace:UnderBrace,UnderBracket:UnderBracket,UnderParenthesis:UnderParenthesis,Union:Union,UnionPlus:UnionPlus,Uogon:Uogon,Uopf:Uopf,UpArrow:UpArrow,UpArrowBar:UpArrowBar,UpArrowDownArrow:UpArrowDownArrow,UpDownArrow:UpDownArrow,UpEquilibrium:UpEquilibrium,UpTee:UpTee,UpTeeArrow:UpTeeArrow,Uparrow:Uparrow,Updownarrow:Updownarrow,UpperLeftArrow:UpperLeftArrow,UpperRightArrow:UpperRightArrow,Upsi:Upsi,Upsilon:Upsilon,Uring:Uring,Uscr:Uscr,Utilde:Utilde,Uum:Uum,Uuml:Uuml,VDash:VDash,Vbar:Vbar,Vcy:Vcy,Vdash:Vdash,Vdashl:Vdashl,Vee:Vee,Verbar:Verbar,Vert:Vert,VerticalBar:VerticalBar,VerticalLine:VerticalLine,VerticalSeparator:VerticalSeparator,VerticalTilde:VerticalTilde,VeryThinSpace:VeryThinSpace,Vfr:Vfr,Vopf:Vopf,Vscr:Vscr,Vvdash:Vvdash,Wcirc:Wcirc,Wedge:Wedge,Wfr:Wfr,Wopf:Wopf,Wscr:Wscr,Xfr:Xfr,Xi:Xi,Xopf:Xopf,Xscr:Xscr,YAcy:YAcy,YIcy:YIcy,YUcy:YUcy,Yacut:Yacut,Yacute:Yacute,Ycirc:Ycirc,Ycy:Ycy,Yfr:Yfr,Yopf:Yopf,Yscr:Yscr,Yuml:Yuml,ZHcy:ZHcy,Zacute:Zacute,Zcaron:Zcaron,Zcy:Zcy,Zdot:Zdot,ZeroWidthSpace:ZeroWidthSpace,Zeta:Zeta,Zfr:Zfr,Zopf:Zopf,Zscr:Zscr,aacut:aacut,aacute:aacute,abreve:abreve,ac:ac,acE:acE,acd:acd,acir:acir,acirc:acirc,acut:acut,acute:acute,acy:acy,aeli:aeli,aelig:aelig,af:af,afr:afr,agrav:agrav,agrave:agrave,alefsym:alefsym,aleph:aleph,alpha:alpha,amacr:amacr,amalg:amalg,am:am,amp:amp,and:and,andand:andand,andd:andd,andslope:andslope,andv:andv,ang:ang,ange:ange,angle:angle,angmsd:angmsd,angmsdaa:angmsdaa,angmsdab:angmsdab,angmsdac:angmsdac,angmsdad:angmsdad,angmsdae:angmsdae,angmsdaf:angmsdaf,angmsdag:angmsdag,angmsdah:angmsdah,angrt:angrt,angrtvb:angrtvb,angrtvbd:angrtvbd,angsph:angsph,angst:angst,angzarr:angzarr,aogon:aogon,aopf:aopf,ap:ap,apE:apE,apacir:apacir,ape:ape,apid:apid,apos:apos,approx:approx,approxeq:approxeq,arin:arin,aring:aring,ascr:ascr,ast:ast,asymp:asymp,asympeq:asympeq,atild:atild,atilde:atilde,aum:aum,auml:auml,awconint:awconint,awint:awint,bNot:bNot,backcong:backcong,backepsilon:backepsilon,backprime:backprime,backsim:backsim,backsimeq:backsimeq,barvee:barvee,barwed:barwed,barwedge:barwedge,bbrk:bbrk,bbrktbrk:bbrktbrk,bcong:bcong,bcy:bcy,bdquo:bdquo,becaus:becaus,because:because,bemptyv:bemptyv,bepsi:bepsi,bernou:bernou,beta:beta,beth:beth,between:between,bfr:bfr,bigcap:bigcap,bigcirc:bigcirc,bigcup:bigcup,bigodot:bigodot,bigoplus:bigoplus,bigotimes:bigotimes,bigsqcup:bigsqcup,bigstar:bigstar,bigtriangledown:bigtriangledown,bigtriangleup:bigtriangleup,biguplus:biguplus,bigvee:bigvee,bigwedge:bigwedge,bkarow:bkarow,blacklozenge:blacklozenge,blacksquare:blacksquare,blacktriangle:blacktriangle,blacktriangledown:blacktriangledown,blacktriangleleft:blacktriangleleft,blacktriangleright:blacktriangleright,blank:blank,blk12:blk12,blk14:blk14,blk34:blk34,block:block,bne:bne,bnequiv:bnequiv,bnot:bnot,bopf:bopf,bot:bot,bottom:bottom,bowtie:bowtie,boxDL:boxDL,boxDR:boxDR,boxDl:boxDl,boxDr:boxDr,boxH:boxH,boxHD:boxHD,boxHU:boxHU,boxHd:boxHd,boxHu:boxHu,boxUL:boxUL,boxUR:boxUR,boxUl:boxUl,boxUr:boxUr,boxV:boxV,boxVH:boxVH,boxVL:boxVL,boxVR:boxVR,boxVh:boxVh,boxVl:boxVl,boxVr:boxVr,boxbox:boxbox,boxdL:boxdL,boxdR:boxdR,boxdl:boxdl,boxdr:boxdr,boxh:boxh,boxhD:boxhD,boxhU:boxhU,boxhd:boxhd,boxhu:boxhu,boxminus:boxminus,boxplus:boxplus,boxtimes:boxtimes,boxuL:boxuL,boxuR:boxuR,boxul:boxul,boxur:boxur,boxv:boxv,boxvH:boxvH,boxvL:boxvL,boxvR:boxvR,boxvh:boxvh,boxvl:boxvl,boxvr:boxvr,bprime:bprime,breve:breve,brvba:brvba,brvbar:brvbar,bscr:bscr,bsemi:bsemi,bsim:bsim,bsime:bsime,bsol:bsol,bsolb:bsolb,bsolhsub:bsolhsub,bull:bull,bullet:bullet,bump:bump,bumpE:bumpE,bumpe:bumpe,bumpeq:bumpeq,cacute:cacute,cap:cap,capand:capand,capbrcup:capbrcup,capcap:capcap,capcup:capcup,capdot:capdot,caps:caps,caret:caret,caron:caron,ccaps:ccaps,ccaron:ccaron,ccedi:ccedi,ccedil:ccedil,ccirc:ccirc,ccups:ccups,ccupssm:ccupssm,cdot:cdot,cedi:cedi,cedil:cedil,cemptyv:cemptyv,cen:cen,cent:cent,centerdot:centerdot,cfr:cfr,chcy:chcy,check:check,checkmark:checkmark,chi:chi,cir:cir,cirE:cirE,circ:circ,circeq:circeq,circlearrowleft:circlearrowleft,circlearrowright:circlearrowright,circledR:circledR,circledS:circledS,circledast:circledast,circledcirc:circledcirc,circleddash:circleddash,cire:cire,cirfnint:cirfnint,cirmid:cirmid,cirscir:cirscir,clubs:clubs,clubsuit:clubsuit,colon:colon,colone:colone,coloneq:coloneq,comma:comma,commat:commat,comp:comp,compfn:compfn,complement:complement,complexes:complexes,cong:cong,congdot:congdot,conint:conint,copf:copf,coprod:coprod,cop:cop,copy:copy,copysr:copysr,crarr:crarr,cross:cross,cscr:cscr,csub:csub,csube:csube,csup:csup,csupe:csupe,ctdot:ctdot,cudarrl:cudarrl,cudarrr:cudarrr,cuepr:cuepr,cuesc:cuesc,cularr:cularr,cularrp:cularrp,cup:cup,cupbrcap:cupbrcap,cupcap:cupcap,cupcup:cupcup,cupdot:cupdot,cupor:cupor,cups:cups,curarr:curarr,curarrm:curarrm,curlyeqprec:curlyeqprec,curlyeqsucc:curlyeqsucc,curlyvee:curlyvee,curlywedge:curlywedge,curre:curre,curren:curren,curvearrowleft:curvearrowleft,curvearrowright:curvearrowright,cuvee:cuvee,cuwed:cuwed,cwconint:cwconint,cwint:cwint,cylcty:cylcty,dArr:dArr,dHar:dHar,dagger:dagger,daleth:daleth,darr:darr,dash:dash,dashv:dashv,dbkarow:dbkarow,dblac:dblac,dcaron:dcaron,dcy:dcy,dd:dd,ddagger:ddagger,ddarr:ddarr,ddotseq:ddotseq,de:de,deg:deg,delta:delta,demptyv:demptyv,dfisht:dfisht,dfr:dfr,dharl:dharl,dharr:dharr,diam:diam,diamond:diamond,diamondsuit:diamondsuit,diams:diams,die:die,digamma:digamma,disin:disin,div:div,divid:divid,divide:divide,divideontimes:divideontimes,divonx:divonx,djcy:djcy,dlcorn:dlcorn,dlcrop:dlcrop,dollar:dollar,dopf:dopf,dot:dot,doteq:doteq,doteqdot:doteqdot,dotminus:dotminus,dotplus:dotplus,dotsquare:dotsquare,doublebarwedge:doublebarwedge,downarrow:downarrow,downdownarrows:downdownarrows,downharpoonleft:downharpoonleft,downharpoonright:downharpoonright,drbkarow:drbkarow,drcorn:drcorn,drcrop:drcrop,dscr:dscr,dscy:dscy,dsol:dsol,dstrok:dstrok,dtdot:dtdot,dtri:dtri,dtrif:dtrif,duarr:duarr,duhar:duhar,dwangle:dwangle,dzcy:dzcy,dzigrarr:dzigrarr,eDDot:eDDot,eDot:eDot,eacut:eacut,eacute:eacute,easter:easter,ecaron:ecaron,ecir:ecir,ecirc:ecirc,ecolon:ecolon,ecy:ecy,edot:edot,ee:ee,efDot:efDot,efr:efr,eg:eg,egrav:egrav,egrave:egrave,egs:egs,egsdot:egsdot,el:el,elinters:elinters,ell:ell,els:els,elsdot:elsdot,emacr:emacr,empty:empty,emptyset:emptyset,emptyv:emptyv,emsp13:emsp13,emsp14:emsp14,emsp:emsp,eng:eng,ensp:ensp,eogon:eogon,eopf:eopf,epar:epar,eparsl:eparsl,eplus:eplus,epsi:epsi,epsilon:epsilon,epsiv:epsiv,eqcirc:eqcirc,eqcolon:eqcolon,eqsim:eqsim,eqslantgtr:eqslantgtr,eqslantless:eqslantless,equals:equals,equest:equest,equiv:equiv,equivDD:equivDD,eqvparsl:eqvparsl,erDot:erDot,erarr:erarr,escr:escr,esdot:esdot,esim:esim,eta:eta,et:et,eth:eth,eum:eum,euml:euml,euro:euro,excl:excl,exist:exist,expectation:expectation,exponentiale:exponentiale,fallingdotseq:fallingdotseq,fcy:fcy,female:female,ffilig:ffilig,fflig:fflig,ffllig:ffllig,ffr:ffr,filig:filig,fjlig:fjlig,flat:flat,fllig:fllig,fltns:fltns,fnof:fnof,fopf:fopf,forall:forall,fork:fork,forkv:forkv,fpartint:fpartint,frac1:frac1,frac12:frac12,frac13:frac13,frac14:frac14,frac15:frac15,frac16:frac16,frac18:frac18,frac23:frac23,frac25:frac25,frac3:frac3,frac34:frac34,frac35:frac35,frac38:frac38,frac45:frac45,frac56:frac56,frac58:frac58,frac78:frac78,frasl:frasl,frown:frown,fscr:fscr,gE:gE,gEl:gEl,gacute:gacute,gamma:gamma,gammad:gammad,gap:gap,gbreve:gbreve,gcirc:gcirc,gcy:gcy,gdot:gdot,ge:ge,gel:gel,geq:geq,geqq:geqq,geqslant:geqslant,ges:ges,gescc:gescc,gesdot:gesdot,gesdoto:gesdoto,gesdotol:gesdotol,gesl:gesl,gesles:gesles,gfr:gfr,gg:gg,ggg:ggg,gimel:gimel,gjcy:gjcy,gl:gl,glE:glE,gla:gla,glj:glj,gnE:gnE,gnap:gnap,gnapprox:gnapprox,gne:gne,gneq:gneq,gneqq:gneqq,gnsim:gnsim,gopf:gopf,grave:grave,gscr:gscr,gsim:gsim,gsime:gsime,gsiml:gsiml,g:g$1,gt:gt,gtcc:gtcc,gtcir:gtcir,gtdot:gtdot,gtlPar:gtlPar,gtquest:gtquest,gtrapprox:gtrapprox,gtrarr:gtrarr,gtrdot:gtrdot,gtreqless:gtreqless,gtreqqless:gtreqqless,gtrless:gtrless,gtrsim:gtrsim,gvertneqq:gvertneqq,gvnE:gvnE,hArr:hArr,hairsp:hairsp,half:half,hamilt:hamilt,hardcy:hardcy,harr:harr,harrcir:harrcir,harrw:harrw,hbar:hbar,hcirc:hcirc,hearts:hearts,heartsuit:heartsuit,hellip:hellip,hercon:hercon,hfr:hfr,hksearow:hksearow,hkswarow:hkswarow,hoarr:hoarr,homtht:homtht,hookleftarrow:hookleftarrow,hookrightarrow:hookrightarrow,hopf:hopf,horbar:horbar,hscr:hscr,hslash:hslash,hstrok:hstrok,hybull:hybull,hyphen:hyphen,iacut:iacut,iacute:iacute,ic:ic,icir:icir,icirc:icirc,icy:icy,iecy:iecy,iexc:iexc,iexcl:iexcl,iff:iff,ifr:ifr,igrav:igrav,igrave:igrave,ii:ii,iiiint:iiiint,iiint:iiint,iinfin:iinfin,iiota:iiota,ijlig:ijlig,imacr:imacr,image:image,imagline:imagline,imagpart:imagpart,imath:imath,imof:imof,imped:imped,"in":"∈",incare:incare,infin:infin,infintie:infintie,inodot:inodot,int:int,intcal:intcal,integers:integers,intercal:intercal,intlarhk:intlarhk,intprod:intprod,iocy:iocy,iogon:iogon,iopf:iopf,iota:iota,iprod:iprod,iques:iques,iquest:iquest,iscr:iscr,isin:isin,isinE:isinE,isindot:isindot,isins:isins,isinsv:isinsv,isinv:isinv,it:it,itilde:itilde,iukcy:iukcy,ium:ium,iuml:iuml,jcirc:jcirc,jcy:jcy,jfr:jfr,jmath:jmath,jopf:jopf,jscr:jscr,jsercy:jsercy,jukcy:jukcy,kappa:kappa,kappav:kappav,kcedil:kcedil,kcy:kcy,kfr:kfr,kgreen:kgreen,khcy:khcy,kjcy:kjcy,kopf:kopf,kscr:kscr,lAarr:lAarr,lArr:lArr,lAtail:lAtail,lBarr:lBarr,lE:lE,lEg:lEg,lHar:lHar,lacute:lacute,laemptyv:laemptyv,lagran:lagran,lambda:lambda,lang:lang,langd:langd,langle:langle,lap:lap,laqu:laqu,laquo:laquo,larr:larr,larrb:larrb,larrbfs:larrbfs,larrfs:larrfs,larrhk:larrhk,larrlp:larrlp,larrpl:larrpl,larrsim:larrsim,larrtl:larrtl,lat:lat,latail:latail,late:late,lates:lates,lbarr:lbarr,lbbrk:lbbrk,lbrace:lbrace,lbrack:lbrack,lbrke:lbrke,lbrksld:lbrksld,lbrkslu:lbrkslu,lcaron:lcaron,lcedil:lcedil,lceil:lceil,lcub:lcub,lcy:lcy,ldca:ldca,ldquo:ldquo,ldquor:ldquor,ldrdhar:ldrdhar,ldrushar:ldrushar,ldsh:ldsh,le:le,leftarrow:leftarrow,leftarrowtail:leftarrowtail,leftharpoondown:leftharpoondown,leftharpoonup:leftharpoonup,leftleftarrows:leftleftarrows,leftrightarrow:leftrightarrow,leftrightarrows:leftrightarrows,leftrightharpoons:leftrightharpoons,leftrightsquigarrow:leftrightsquigarrow,leftthreetimes:leftthreetimes,leg:leg,leq:leq,leqq:leqq,leqslant:leqslant,les:les,lescc:lescc,lesdot:lesdot,lesdoto:lesdoto,lesdotor:lesdotor,lesg:lesg,lesges:lesges,lessapprox:lessapprox,lessdot:lessdot,lesseqgtr:lesseqgtr,lesseqqgtr:lesseqqgtr,lessgtr:lessgtr,lesssim:lesssim,lfisht:lfisht,lfloor:lfloor,lfr:lfr,lg:lg,lgE:lgE,lhard:lhard,lharu:lharu,lharul:lharul,lhblk:lhblk,ljcy:ljcy,ll:ll,llarr:llarr,llcorner:llcorner,llhard:llhard,lltri:lltri,lmidot:lmidot,lmoust:lmoust,lmoustache:lmoustache,lnE:lnE,lnap:lnap,lnapprox:lnapprox,lne:lne,lneq:lneq,lneqq:lneqq,lnsim:lnsim,loang:loang,loarr:loarr,lobrk:lobrk,longleftarrow:longleftarrow,longleftrightarrow:longleftrightarrow,longmapsto:longmapsto,longrightarrow:longrightarrow,looparrowleft:looparrowleft,looparrowright:looparrowright,lopar:lopar,lopf:lopf,loplus:loplus,lotimes:lotimes,lowast:lowast,lowbar:lowbar,loz:loz,lozenge:lozenge,lozf:lozf,lpar:lpar,lparlt:lparlt,lrarr:lrarr,lrcorner:lrcorner,lrhar:lrhar,lrhard:lrhard,lrm:lrm,lrtri:lrtri,lsaquo:lsaquo,lscr:lscr,lsh:lsh,lsim:lsim,lsime:lsime,lsimg:lsimg,lsqb:lsqb,lsquo:lsquo,lsquor:lsquor,lstrok:lstrok,l:l$1,lt:lt,ltcc:ltcc,ltcir:ltcir,ltdot:ltdot,lthree:lthree,ltimes:ltimes,ltlarr:ltlarr,ltquest:ltquest,ltrPar:ltrPar,ltri:ltri,ltrie:ltrie,ltrif:ltrif,lurdshar:lurdshar,luruhar:luruhar,lvertneqq:lvertneqq,lvnE:lvnE,mDDot:mDDot,mac:mac,macr:macr,male:male,malt:malt,maltese:maltese,map:map,mapsto:mapsto,mapstodown:mapstodown,mapstoleft:mapstoleft,mapstoup:mapstoup,marker:marker,mcomma:mcomma,mcy:mcy,mdash:mdash,measuredangle:measuredangle,mfr:mfr,mho:mho,micr:micr,micro:micro,mid:mid,midast:midast,midcir:midcir,middo:middo,middot:middot,minus:minus,minusb:minusb,minusd:minusd,minusdu:minusdu,mlcp:mlcp,mldr:mldr,mnplus:mnplus,models:models,mopf:mopf,mp:mp,mscr:mscr,mstpos:mstpos,mu:mu,multimap:multimap,mumap:mumap,nGg:nGg,nGt:nGt,nGtv:nGtv,nLeftarrow:nLeftarrow,nLeftrightarrow:nLeftrightarrow,nLl:nLl,nLt:nLt,nLtv:nLtv,nRightarrow:nRightarrow,nVDash:nVDash,nVdash:nVdash,nabla:nabla,nacute:nacute,nang:nang,nap:nap,napE:napE,napid:napid,napos:napos,napprox:napprox,natur:natur,natural:natural,naturals:naturals,nbs:nbs,nbsp:nbsp,nbump:nbump,nbumpe:nbumpe,ncap:ncap,ncaron:ncaron,ncedil:ncedil,ncong:ncong,ncongdot:ncongdot,ncup:ncup,ncy:ncy,ndash:ndash,ne:ne,neArr:neArr,nearhk:nearhk,nearr:nearr,nearrow:nearrow,nedot:nedot,nequiv:nequiv,nesear:nesear,nesim:nesim,nexist:nexist,nexists:nexists,nfr:nfr,ngE:ngE,nge:nge,ngeq:ngeq,ngeqq:ngeqq,ngeqslant:ngeqslant,nges:nges,ngsim:ngsim,ngt:ngt,ngtr:ngtr,nhArr:nhArr,nharr:nharr,nhpar:nhpar,ni:ni,nis:nis,nisd:nisd,niv:niv,njcy:njcy,nlArr:nlArr,nlE:nlE,nlarr:nlarr,nldr:nldr,nle:nle,nleftarrow:nleftarrow,nleftrightarrow:nleftrightarrow,nleq:nleq,nleqq:nleqq,nleqslant:nleqslant,nles:nles,nless:nless,nlsim:nlsim,nlt:nlt,nltri:nltri,nltrie:nltrie,nmid:nmid,nopf:nopf,no:no,not:not,notin:notin,notinE:notinE,notindot:notindot,notinva:notinva,notinvb:notinvb,notinvc:notinvc,notni:notni,notniva:notniva,notnivb:notnivb,notnivc:notnivc,npar:npar,nparallel:nparallel,nparsl:nparsl,npart:npart,npolint:npolint,npr:npr,nprcue:nprcue,npre:npre,nprec:nprec,npreceq:npreceq,nrArr:nrArr,nrarr:nrarr,nrarrc:nrarrc,nrarrw:nrarrw,nrightarrow:nrightarrow,nrtri:nrtri,nrtrie:nrtrie,nsc:nsc,nsccue:nsccue,nsce:nsce,nscr:nscr,nshortmid:nshortmid,nshortparallel:nshortparallel,nsim:nsim,nsime:nsime,nsimeq:nsimeq,nsmid:nsmid,nspar:nspar,nsqsube:nsqsube,nsqsupe:nsqsupe,nsub:nsub,nsubE:nsubE,nsube:nsube,nsubset:nsubset,nsubseteq:nsubseteq,nsubseteqq:nsubseteqq,nsucc:nsucc,nsucceq:nsucceq,nsup:nsup,nsupE:nsupE,nsupe:nsupe,nsupset:nsupset,nsupseteq:nsupseteq,nsupseteqq:nsupseteqq,ntgl:ntgl,ntild:ntild,ntilde:ntilde,ntlg:ntlg,ntriangleleft:ntriangleleft,ntrianglelefteq:ntrianglelefteq,ntriangleright:ntriangleright,ntrianglerighteq:ntrianglerighteq,nu:nu,num:num,numero:numero,numsp:numsp,nvDash:nvDash,nvHarr:nvHarr,nvap:nvap,nvdash:nvdash,nvge:nvge,nvgt:nvgt,nvinfin:nvinfin,nvlArr:nvlArr,nvle:nvle,nvlt:nvlt,nvltrie:nvltrie,nvrArr:nvrArr,nvrtrie:nvrtrie,nvsim:nvsim,nwArr:nwArr,nwarhk:nwarhk,nwarr:nwarr,nwarrow:nwarrow,nwnear:nwnear,oS:oS,oacut:oacut,oacute:oacute,oast:oast,ocir:ocir,ocirc:ocirc,ocy:ocy,odash:odash,odblac:odblac,odiv:odiv,odot:odot,odsold:odsold,oelig:oelig,ofcir:ofcir,ofr:ofr,ogon:ogon,ograv:ograv,ograve:ograve,ogt:ogt,ohbar:ohbar,ohm:ohm,oint:oint,olarr:olarr,olcir:olcir,olcross:olcross,oline:oline,olt:olt,omacr:omacr,omega:omega,omicron:omicron,omid:omid,ominus:ominus,oopf:oopf,opar:opar,operp:operp,oplus:oplus,or:or,orarr:orarr,ord:ord,order:order,orderof:orderof,ordf:ordf,ordm:ordm,origof:origof,oror:oror,orslope:orslope,orv:orv,oscr:oscr,oslas:oslas,oslash:oslash,osol:osol,otild:otild,otilde:otilde,otimes:otimes,otimesas:otimesas,oum:oum,ouml:ouml,ovbar:ovbar,par:par,para:para,parallel:parallel,parsim:parsim,parsl:parsl,part:part,pcy:pcy,percnt:percnt,period:period,permil:permil,perp:perp,pertenk:pertenk,pfr:pfr,phi:phi,phiv:phiv,phmmat:phmmat,phone:phone,pi:pi,pitchfork:pitchfork,piv:piv,planck:planck,planckh:planckh,plankv:plankv,plus:plus,plusacir:plusacir,plusb:plusb,pluscir:pluscir,plusdo:plusdo,plusdu:plusdu,pluse:pluse,plusm:plusm,plusmn:plusmn,plussim:plussim,plustwo:plustwo,pm:pm,pointint:pointint,popf:popf,poun:poun,pound:pound,pr:pr,prE:prE,prap:prap,prcue:prcue,pre:pre,prec:prec,precapprox:precapprox,preccurlyeq:preccurlyeq,preceq:preceq,precnapprox:precnapprox,precneqq:precneqq,precnsim:precnsim,precsim:precsim,prime:prime,primes:primes,prnE:prnE,prnap:prnap,prnsim:prnsim,prod:prod,profalar:profalar,profline:profline,profsurf:profsurf,prop:prop,propto:propto,prsim:prsim,prurel:prurel,pscr:pscr,psi:psi,puncsp:puncsp,qfr:qfr,qint:qint,qopf:qopf,qprime:qprime,qscr:qscr,quaternions:quaternions,quatint:quatint,quest:quest,questeq:questeq,quo:quo,quot:quot,rAarr:rAarr,rArr:rArr,rAtail:rAtail,rBarr:rBarr,rHar:rHar,race:race,racute:racute,radic:radic,raemptyv:raemptyv,rang:rang,rangd:rangd,range:range,rangle:rangle,raqu:raqu,raquo:raquo,rarr:rarr,rarrap:rarrap,rarrb:rarrb,rarrbfs:rarrbfs,rarrc:rarrc,rarrfs:rarrfs,rarrhk:rarrhk,rarrlp:rarrlp,rarrpl:rarrpl,rarrsim:rarrsim,rarrtl:rarrtl,rarrw:rarrw,ratail:ratail,ratio:ratio,rationals:rationals,rbarr:rbarr,rbbrk:rbbrk,rbrace:rbrace,rbrack:rbrack,rbrke:rbrke,rbrksld:rbrksld,rbrkslu:rbrkslu,rcaron:rcaron,rcedil:rcedil,rceil:rceil,rcub:rcub,rcy:rcy,rdca:rdca,rdldhar:rdldhar,rdquo:rdquo,rdquor:rdquor,rdsh:rdsh,real:real,realine:realine,realpart:realpart,reals:reals,rect:rect,re:re,reg:reg,rfisht:rfisht,rfloor:rfloor,rfr:rfr,rhard:rhard,rharu:rharu,rharul:rharul,rho:rho,rhov:rhov,rightarrow:rightarrow,rightarrowtail:rightarrowtail,rightharpoondown:rightharpoondown,rightharpoonup:rightharpoonup,rightleftarrows:rightleftarrows,rightleftharpoons:rightleftharpoons,rightrightarrows:rightrightarrows,rightsquigarrow:rightsquigarrow,rightthreetimes:rightthreetimes,ring:ring,risingdotseq:risingdotseq,rlarr:rlarr,rlhar:rlhar,rlm:rlm,rmoust:rmoust,rmoustache:rmoustache,rnmid:rnmid,roang:roang,roarr:roarr,robrk:robrk,ropar:ropar,ropf:ropf,roplus:roplus,rotimes:rotimes,rpar:rpar,rpargt:rpargt,rppolint:rppolint,rrarr:rrarr,rsaquo:rsaquo,rscr:rscr,rsh:rsh,rsqb:rsqb,rsquo:rsquo,rsquor:rsquor,rthree:rthree,rtimes:rtimes,rtri:rtri,rtrie:rtrie,rtrif:rtrif,rtriltri:rtriltri,ruluhar:ruluhar,rx:rx,sacute:sacute,sbquo:sbquo,sc:sc,scE:scE,scap:scap,scaron:scaron,sccue:sccue,sce:sce,scedil:scedil,scirc:scirc,scnE:scnE,scnap:scnap,scnsim:scnsim,scpolint:scpolint,scsim:scsim,scy:scy,sdot:sdot,sdotb:sdotb,sdote:sdote,seArr:seArr,searhk:searhk,searr:searr,searrow:searrow,sec:sec,sect:sect,semi:semi,seswar:seswar,setminus:setminus,setmn:setmn,sext:sext,sfr:sfr,sfrown:sfrown,sharp:sharp,shchcy:shchcy,shcy:shcy,shortmid:shortmid,shortparallel:shortparallel,sh:sh,shy:shy,sigma:sigma,sigmaf:sigmaf,sigmav:sigmav,sim:sim,simdot:simdot,sime:sime,simeq:simeq,simg:simg,simgE:simgE,siml:siml,simlE:simlE,simne:simne,simplus:simplus,simrarr:simrarr,slarr:slarr,smallsetminus:smallsetminus,smashp:smashp,smeparsl:smeparsl,smid:smid,smile:smile,smt:smt,smte:smte,smtes:smtes,softcy:softcy,sol:sol,solb:solb,solbar:solbar,sopf:sopf,spades:spades,spadesuit:spadesuit,spar:spar,sqcap:sqcap,sqcaps:sqcaps,sqcup:sqcup,sqcups:sqcups,sqsub:sqsub,sqsube:sqsube,sqsubset:sqsubset,sqsubseteq:sqsubseteq,sqsup:sqsup,sqsupe:sqsupe,sqsupset:sqsupset,sqsupseteq:sqsupseteq,squ:squ,square:square,squarf:squarf,squf:squf,srarr:srarr,sscr:sscr,ssetmn:ssetmn,ssmile:ssmile,sstarf:sstarf,star:star,starf:starf,straightepsilon:straightepsilon,straightphi:straightphi,strns:strns,sub:sub,subE:subE,subdot:subdot,sube:sube,subedot:subedot,submult:submult,subnE:subnE,subne:subne,subplus:subplus,subrarr:subrarr,subset:subset,subseteq:subseteq,subseteqq:subseteqq,subsetneq:subsetneq,subsetneqq:subsetneqq,subsim:subsim,subsub:subsub,subsup:subsup,succ:succ,succapprox:succapprox,succcurlyeq:succcurlyeq,succeq:succeq,succnapprox:succnapprox,succneqq:succneqq,succnsim:succnsim,succsim:succsim,sum:sum,sung:sung,sup:sup,sup1:sup1,sup2:sup2,sup3:sup3,supE:supE,supdot:supdot,supdsub:supdsub,supe:supe,supedot:supedot,suphsol:suphsol,suphsub:suphsub,suplarr:suplarr,supmult:supmult,supnE:supnE,supne:supne,supplus:supplus,supset:supset,supseteq:supseteq,supseteqq:supseteqq,supsetneq:supsetneq,supsetneqq:supsetneqq,supsim:supsim,supsub:supsub,supsup:supsup,swArr:swArr,swarhk:swarhk,swarr:swarr,swarrow:swarrow,swnwar:swnwar,szli:szli,szlig:szlig,target:target,tau:tau,tbrk:tbrk,tcaron:tcaron,tcedil:tcedil,tcy:tcy,tdot:tdot,telrec:telrec,tfr:tfr,there4:there4,therefore:therefore,theta:theta,thetasym:thetasym,thetav:thetav,thickapprox:thickapprox,thicksim:thicksim,thinsp:thinsp,thkap:thkap,thksim:thksim,thor:thor,thorn:thorn,tilde:tilde,time:time,times:times,timesb:timesb,timesbar:timesbar,timesd:timesd,tint:tint,toea:toea,top:top,topbot:topbot,topcir:topcir,topf:topf,topfork:topfork,tosa:tosa,tprime:tprime,trade:trade,triangle:triangle,triangledown:triangledown,triangleleft:triangleleft,trianglelefteq:trianglelefteq,triangleq:triangleq,triangleright:triangleright,trianglerighteq:trianglerighteq,tridot:tridot,trie:trie,triminus:triminus,triplus:triplus,trisb:trisb,tritime:tritime,trpezium:trpezium,tscr:tscr,tscy:tscy,tshcy:tshcy,tstrok:tstrok,twixt:twixt,twoheadleftarrow:twoheadleftarrow,twoheadrightarrow:twoheadrightarrow,uArr:uArr,uHar:uHar,uacut:uacut,uacute:uacute,uarr:uarr,ubrcy:ubrcy,ubreve:ubreve,ucir:ucir,ucirc:ucirc,ucy:ucy,udarr:udarr,udblac:udblac,udhar:udhar,ufisht:ufisht,ufr:ufr,ugrav:ugrav,ugrave:ugrave,uharl:uharl,uharr:uharr,uhblk:uhblk,ulcorn:ulcorn,ulcorner:ulcorner,ulcrop:ulcrop,ultri:ultri,umacr:umacr,um:um,uml:uml,uogon:uogon,uopf:uopf,uparrow:uparrow,updownarrow:updownarrow,upharpoonleft:upharpoonleft,upharpoonright:upharpoonright,uplus:uplus,upsi:upsi,upsih:upsih,upsilon:upsilon,upuparrows:upuparrows,urcorn:urcorn,urcorner:urcorner,urcrop:urcrop,uring:uring,urtri:urtri,uscr:uscr,utdot:utdot,utilde:utilde,utri:utri,utrif:utrif,uuarr:uuarr,uum:uum,uuml:uuml,uwangle:uwangle,vArr:vArr,vBar:vBar,vBarv:vBarv,vDash:vDash,vangrt:vangrt,varepsilon:varepsilon,varkappa:varkappa,varnothing:varnothing,varphi:varphi,varpi:varpi,varpropto:varpropto,varr:varr,varrho:varrho,varsigma:varsigma,varsubsetneq:varsubsetneq,varsubsetneqq:varsubsetneqq,varsupsetneq:varsupsetneq,varsupsetneqq:varsupsetneqq,vartheta:vartheta,vartriangleleft:vartriangleleft,vartriangleright:vartriangleright,vcy:vcy,vdash:vdash,vee:vee,veebar:veebar,veeeq:veeeq,vellip:vellip,verbar:verbar,vert:vert,vfr:vfr,vltri:vltri,vnsub:vnsub,vnsup:vnsup,vopf:vopf,vprop:vprop,vrtri:vrtri,vscr:vscr,vsubnE:vsubnE,vsubne:vsubne,vsupnE:vsupnE,vsupne:vsupne,vzigzag:vzigzag,wcirc:wcirc,wedbar:wedbar,wedge:wedge,wedgeq:wedgeq,weierp:weierp,wfr:wfr,wopf:wopf,wp:wp,wr:wr,wreath:wreath,wscr:wscr,xcap:xcap,xcirc:xcirc,xcup:xcup,xdtri:xdtri,xfr:xfr,xhArr:xhArr,xharr:xharr,xi:xi,xlArr:xlArr,xlarr:xlarr,xmap:xmap,xnis:xnis,xodot:xodot,xopf:xopf,xoplus:xoplus,xotime:xotime,xrArr:xrArr,xrarr:xrarr,xscr:xscr,xsqcup:xsqcup,xuplus:xuplus,xutri:xutri,xvee:xvee,xwedge:xwedge,yacut:yacut,yacute:yacute,yacy:yacy,ycirc:ycirc,ycy:ycy,ye:ye,yen:yen,yfr:yfr,yicy:yicy,yopf:yopf,yscr:yscr,yucy:yucy,yum:yum,yuml:yuml,zacute:zacute,zcaron:zcaron,zcy:zcy,zdot:zdot,zeetrf:zeetrf,zeta:zeta,zfr:zfr,zhcy:zhcy,zigrarr:zigrarr,zopf:zopf,zscr:zscr,zwj:zwj,zwnj:zwnj};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var characterEntities = require$$0;

    var decodeEntity_1 = decodeEntity$1;

    var own$1 = {}.hasOwnProperty;

    function decodeEntity$1(characters) {
      return own$1.call(characterEntities, characters)
        ? characterEntities[characters]
        : false
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck$1 = regexCheck_1;

    var asciiDigit$2 = regexCheck$1(/\d/);

    var asciiDigit_1 = asciiDigit$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var regexCheck = regexCheck_1;

    var asciiHexDigit$1 = regexCheck(/[\dA-Fa-f]/);

    var asciiHexDigit_1 = asciiHexDigit$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var decodeEntity = decodeEntity_1;
    var asciiAlphanumeric$2 = asciiAlphanumeric_1;
    var asciiDigit$1 = asciiDigit_1;
    var asciiHexDigit = asciiHexDigit_1;

    function _interopDefaultLegacy$1(e) {
      return e && typeof e === 'object' && 'default' in e ? e : {default: e}
    }

    var decodeEntity__default = /*#__PURE__*/ _interopDefaultLegacy$1(decodeEntity);

    var characterReference$1 = {
      name: 'characterReference',
      tokenize: tokenizeCharacterReference
    };

    function tokenizeCharacterReference(effects, ok, nok) {
      var self = this;
      var size = 0;
      var max;
      var test;
      return start

      function start(code) {
        effects.enter('characterReference');
        effects.enter('characterReferenceMarker');
        effects.consume(code);
        effects.exit('characterReferenceMarker');
        return open
      }

      function open(code) {
        if (code === 35) {
          effects.enter('characterReferenceMarkerNumeric');
          effects.consume(code);
          effects.exit('characterReferenceMarkerNumeric');
          return numeric
        }

        effects.enter('characterReferenceValue');
        max = 31;
        test = asciiAlphanumeric$2;
        return value(code)
      }

      function numeric(code) {
        if (code === 88 || code === 120) {
          effects.enter('characterReferenceMarkerHexadecimal');
          effects.consume(code);
          effects.exit('characterReferenceMarkerHexadecimal');
          effects.enter('characterReferenceValue');
          max = 6;
          test = asciiHexDigit;
          return value
        }

        effects.enter('characterReferenceValue');
        max = 7;
        test = asciiDigit$1;
        return value(code)
      }

      function value(code) {
        var token;

        if (code === 59 && size) {
          token = effects.exit('characterReferenceValue');

          if (
            test === asciiAlphanumeric$2 &&
            !decodeEntity__default['default'](self.sliceSerialize(token))
          ) {
            return nok(code)
          }

          effects.enter('characterReferenceMarker');
          effects.consume(code);
          effects.exit('characterReferenceMarker');
          effects.exit('characterReference');
          return ok
        }

        if (test(code) && size++ < max) {
          effects.consume(code);
          return value
        }

        return nok(code)
      }
    }

    var characterReference_1 = characterReference$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$d = markdownLineEnding_1;
    var markdownLineEndingOrSpace$6 = markdownLineEndingOrSpace_1;
    var prefixSize$2 = prefixSize_1;
    var factorySpace$a = factorySpace$h;

    var codeFenced$1 = {
      name: 'codeFenced',
      tokenize: tokenizeCodeFenced,
      concrete: true
    };

    function tokenizeCodeFenced(effects, ok, nok) {
      var self = this;
      var closingFenceConstruct = {
        tokenize: tokenizeClosingFence,
        partial: true
      };
      var initialPrefix = prefixSize$2(this.events, 'linePrefix');
      var sizeOpen = 0;
      var marker;
      return start

      function start(code) {
        effects.enter('codeFenced');
        effects.enter('codeFencedFence');
        effects.enter('codeFencedFenceSequence');
        marker = code;
        return sequenceOpen(code)
      }

      function sequenceOpen(code) {
        if (code === marker) {
          effects.consume(code);
          sizeOpen++;
          return sequenceOpen
        }

        effects.exit('codeFencedFenceSequence');
        return sizeOpen < 3
          ? nok(code)
          : factorySpace$a(effects, infoOpen, 'whitespace')(code)
      }

      function infoOpen(code) {
        if (code === null || markdownLineEnding$d(code)) {
          return openAfter(code)
        }

        effects.enter('codeFencedFenceInfo');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return info(code)
      }

      function info(code) {
        if (code === null || markdownLineEndingOrSpace$6(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceInfo');
          return factorySpace$a(effects, infoAfter, 'whitespace')(code)
        }

        if (code === 96 && code === marker) return nok(code)
        effects.consume(code);
        return info
      }

      function infoAfter(code) {
        if (code === null || markdownLineEnding$d(code)) {
          return openAfter(code)
        }

        effects.enter('codeFencedFenceMeta');
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return meta(code)
      }

      function meta(code) {
        if (code === null || markdownLineEnding$d(code)) {
          effects.exit('chunkString');
          effects.exit('codeFencedFenceMeta');
          return openAfter(code)
        }

        if (code === 96 && code === marker) return nok(code)
        effects.consume(code);
        return meta
      }

      function openAfter(code) {
        effects.exit('codeFencedFence');
        return self.interrupt ? ok(code) : content(code)
      }

      function content(code) {
        if (code === null) {
          return after(code)
        }

        if (markdownLineEnding$d(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix
              ? factorySpace$a(effects, content, 'linePrefix', initialPrefix + 1)
              : content
          )
        }

        effects.enter('codeFlowValue');
        return contentContinue(code)
      }

      function contentContinue(code) {
        if (code === null || markdownLineEnding$d(code)) {
          effects.exit('codeFlowValue');
          return content(code)
        }

        effects.consume(code);
        return contentContinue
      }

      function after(code) {
        effects.exit('codeFenced');
        return ok(code)
      }

      function tokenizeClosingFence(effects, ok, nok) {
        var size = 0;
        return factorySpace$a(
          effects,
          closingSequenceStart,
          'linePrefix',
          this.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )

        function closingSequenceStart(code) {
          effects.enter('codeFencedFence');
          effects.enter('codeFencedFenceSequence');
          return closingSequence(code)
        }

        function closingSequence(code) {
          if (code === marker) {
            effects.consume(code);
            size++;
            return closingSequence
          }

          if (size < sizeOpen) return nok(code)
          effects.exit('codeFencedFenceSequence');
          return factorySpace$a(effects, closingSequenceEnd, 'whitespace')(code)
        }

        function closingSequenceEnd(code) {
          if (code === null || markdownLineEnding$d(code)) {
            effects.exit('codeFencedFence');
            return ok(code)
          }

          return nok(code)
        }
      }
    }

    var codeFenced_1 = codeFenced$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$c = markdownLineEnding_1;
    var chunkedSplice$2 = chunkedSplice_1;
    var prefixSize$1 = prefixSize_1;
    var factorySpace$9 = factorySpace$h;

    var codeIndented$1 = {
      name: 'codeIndented',
      tokenize: tokenizeCodeIndented,
      resolve: resolveCodeIndented
    };
    var indentedContentConstruct = {
      tokenize: tokenizeIndentedContent,
      partial: true
    };

    function resolveCodeIndented(events, context) {
      var code = {
        type: 'codeIndented',
        start: events[0][1].start,
        end: events[events.length - 1][1].end
      };
      chunkedSplice$2(events, 0, 0, [['enter', code, context]]);
      chunkedSplice$2(events, events.length, 0, [['exit', code, context]]);
      return events
    }

    function tokenizeCodeIndented(effects, ok, nok) {
      return effects.attempt(indentedContentConstruct, afterPrefix, nok)

      function afterPrefix(code) {
        if (code === null) {
          return ok(code)
        }

        if (markdownLineEnding$c(code)) {
          return effects.attempt(indentedContentConstruct, afterPrefix, ok)(code)
        }

        effects.enter('codeFlowValue');
        return content(code)
      }

      function content(code) {
        if (code === null || markdownLineEnding$c(code)) {
          effects.exit('codeFlowValue');
          return afterPrefix(code)
        }

        effects.consume(code);
        return content
      }
    }

    function tokenizeIndentedContent(effects, ok, nok) {
      var self = this;
      return factorySpace$9(effects, afterPrefix, 'linePrefix', 4 + 1)

      function afterPrefix(code) {
        if (markdownLineEnding$c(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return factorySpace$9(effects, afterPrefix, 'linePrefix', 4 + 1)
        }

        return prefixSize$1(self.events, 'linePrefix') < 4 ? nok(code) : ok(code)
      }
    }

    var codeIndented_1 = codeIndented$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$b = markdownLineEnding_1;

    var codeText$1 = {
      name: 'codeText',
      tokenize: tokenizeCodeText,
      resolve: resolveCodeText,
      previous: previous
    };

    function resolveCodeText(events) {
      var tailExitIndex = events.length - 4;
      var headEnterIndex = 3;
      var index;
      var enter; // If we start and end with an EOL or a space.

      if (
        (events[headEnterIndex][1].type === 'lineEnding' ||
          events[headEnterIndex][1].type === 'space') &&
        (events[tailExitIndex][1].type === 'lineEnding' ||
          events[tailExitIndex][1].type === 'space')
      ) {
        index = headEnterIndex; // And we have data.

        while (++index < tailExitIndex) {
          if (events[index][1].type === 'codeTextData') {
            // Then we have padding.
            events[tailExitIndex][1].type = events[headEnterIndex][1].type =
              'codeTextPadding';
            headEnterIndex += 2;
            tailExitIndex -= 2;
            break
          }
        }
      } // Merge adjacent spaces and data.

      index = headEnterIndex - 1;
      tailExitIndex++;

      while (++index <= tailExitIndex) {
        if (enter === undefined) {
          if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
            enter = index;
          }
        } else if (
          index === tailExitIndex ||
          events[index][1].type === 'lineEnding'
        ) {
          events[enter][1].type = 'codeTextData';

          if (index !== enter + 2) {
            events[enter][1].end = events[index - 1][1].end;
            events.splice(enter + 2, index - enter - 2);
            tailExitIndex -= index - enter - 2;
            index = enter + 2;
          }

          enter = undefined;
        }
      }

      return events
    }

    function previous(code) {
      // If there is a previous code, there will always be a tail.
      return (
        code !== 96 ||
        this.events[this.events.length - 1][1].type === 'characterEscape'
      )
    }

    function tokenizeCodeText(effects, ok, nok) {
      var sizeOpen = 0;
      var size;
      var token;
      return start

      function start(code) {
        effects.enter('codeText');
        effects.enter('codeTextSequence');
        return openingSequence(code)
      }

      function openingSequence(code) {
        if (code === 96) {
          effects.consume(code);
          sizeOpen++;
          return openingSequence
        }

        effects.exit('codeTextSequence');
        return gap(code)
      }

      function gap(code) {
        // EOF.
        if (code === null) {
          return nok(code)
        } // Closing fence?
        // Could also be data.

        if (code === 96) {
          token = effects.enter('codeTextSequence');
          size = 0;
          return closingSequence(code)
        } // Tabs don’t work, and virtual spaces don’t make sense.

        if (code === 32) {
          effects.enter('space');
          effects.consume(code);
          effects.exit('space');
          return gap
        }

        if (markdownLineEnding$b(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return gap
        } // Data.

        effects.enter('codeTextData');
        return data(code)
      } // In code.

      function data(code) {
        if (
          code === null ||
          code === 32 ||
          code === 96 ||
          markdownLineEnding$b(code)
        ) {
          effects.exit('codeTextData');
          return gap(code)
        }

        effects.consume(code);
        return data
      } // Closing fence.

      function closingSequence(code) {
        // More.
        if (code === 96) {
          effects.consume(code);
          size++;
          return closingSequence
        } // Done!

        if (size === sizeOpen) {
          effects.exit('codeTextSequence');
          effects.exit('codeText');
          return ok(code)
        } // More or less accents: mark as data.

        token.type = 'codeTextData';
        return data(code)
      }
    }

    var codeText_1 = codeText$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiControl = asciiControl_1;
    var markdownLineEndingOrSpace$5 = markdownLineEndingOrSpace_1;
    var markdownLineEnding$a = markdownLineEnding_1;

    // eslint-disable-next-line max-params
    function destinationFactory(
      effects,
      ok,
      nok,
      type,
      literalType,
      literalMarkerType,
      rawType,
      stringType,
      max
    ) {
      var limit = max || Infinity;
      var balance = 0;
      return start

      function start(code) {
        if (code === 60) {
          effects.enter(type);
          effects.enter(literalType);
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          return destinationEnclosedBefore
        }

        if (asciiControl(code) || code === 41) {
          return nok(code)
        }

        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return destinationRaw(code)
      }

      function destinationEnclosedBefore(code) {
        if (code === 62) {
          effects.enter(literalMarkerType);
          effects.consume(code);
          effects.exit(literalMarkerType);
          effects.exit(literalType);
          effects.exit(type);
          return ok
        }

        effects.enter(stringType);
        effects.enter('chunkString', {
          contentType: 'string'
        });
        return destinationEnclosed(code)
      }

      function destinationEnclosed(code) {
        if (code === 62) {
          effects.exit('chunkString');
          effects.exit(stringType);
          return destinationEnclosedBefore(code)
        }

        if (code === null || code === 60 || markdownLineEnding$a(code)) {
          return nok(code)
        }

        effects.consume(code);
        return code === 92 ? destinationEnclosedEscape : destinationEnclosed
      }

      function destinationEnclosedEscape(code) {
        if (code === 60 || code === 62 || code === 92) {
          effects.consume(code);
          return destinationEnclosed
        }

        return destinationEnclosed(code)
      }

      function destinationRaw(code) {
        if (code === 40) {
          if (++balance > limit) return nok(code)
          effects.consume(code);
          return destinationRaw
        }

        if (code === 41) {
          if (!balance--) {
            effects.exit('chunkString');
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok(code)
          }

          effects.consume(code);
          return destinationRaw
        }

        if (code === null || markdownLineEndingOrSpace$5(code)) {
          if (balance) return nok(code)
          effects.exit('chunkString');
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok(code)
        }

        if (asciiControl(code)) return nok(code)
        effects.consume(code);
        return code === 92 ? destinationRawEscape : destinationRaw
      }

      function destinationRawEscape(code) {
        if (code === 40 || code === 41 || code === 92) {
          effects.consume(code);
          return destinationRaw
        }

        return destinationRaw(code)
      }
    }

    var factoryDestination$2 = destinationFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$9 = markdownLineEnding_1;
    var markdownSpace$6 = markdownSpace_1;

    // eslint-disable-next-line max-params
    function labelFactory(effects, ok, nok, type, markerType, stringType) {
      var self = this;
      var size = 0;
      var data;
      return start

      function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak
      }

      function atBreak(code) {
        if (
          code === null ||
          code === 91 ||
          (code === 93 && !data) ||
          /* c8 ignore next */
          (code === 94 &&
            /* c8 ignore next */
            !size &&
            /* c8 ignore next */
            '_hiddenFootnoteSupport' in self.parser.constructs) ||
          size > 999
        ) {
          return nok(code)
        }

        if (code === 93) {
          effects.exit(stringType);
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }

        if (markdownLineEnding$9(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return atBreak
        }

        effects.enter('chunkString', {
          contentType: 'string'
        });
        return label(code)
      }

      function label(code) {
        if (
          code === null ||
          code === 91 ||
          code === 93 ||
          markdownLineEnding$9(code) ||
          size++ > 999
        ) {
          effects.exit('chunkString');
          return atBreak(code)
        }

        effects.consume(code);
        data = data || !markdownSpace$6(code);
        return code === 92 ? labelEscape : label
      }

      function labelEscape(code) {
        if (code === 91 || code === 92 || code === 93) {
          effects.consume(code);
          size++;
          return label
        }

        return label(code)
      }
    }

    var factoryLabel$2 = labelFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$8 = markdownLineEnding_1;
    var markdownSpace$5 = markdownSpace_1;
    var factorySpace$8 = factorySpace$h;

    function whitespaceFactory(effects, ok) {
      var seen;
      return start

      function start(code) {
        if (markdownLineEnding$8(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          seen = true;
          return start
        }

        if (markdownSpace$5(code)) {
          return factorySpace$8(
            effects,
            start,
            seen ? 'linePrefix' : 'lineSuffix'
          )(code)
        }

        return ok(code)
      }
    }

    var factoryWhitespace$2 = whitespaceFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$7 = markdownLineEnding_1;
    var factorySpace$7 = factorySpace$h;

    function titleFactory(effects, ok, nok, type, markerType, stringType) {
      var marker;
      return start

      function start(code) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        marker = code === 40 ? 41 : code;
        return atFirstTitleBreak
      }

      function atFirstTitleBreak(code) {
        if (code === marker) {
          effects.enter(markerType);
          effects.consume(code);
          effects.exit(markerType);
          effects.exit(type);
          return ok
        }

        effects.enter(stringType);
        return atTitleBreak(code)
      }

      function atTitleBreak(code) {
        if (code === marker) {
          effects.exit(stringType);
          return atFirstTitleBreak(marker)
        }

        if (code === null) {
          return nok(code)
        } // Note: blank lines can’t exist in content.

        if (markdownLineEnding$7(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return factorySpace$7(effects, atTitleBreak, 'linePrefix')
        }

        effects.enter('chunkString', {
          contentType: 'string'
        });
        return title(code)
      }

      function title(code) {
        if (code === marker || code === null || markdownLineEnding$7(code)) {
          effects.exit('chunkString');
          return atTitleBreak(code)
        }

        effects.consume(code);
        return code === 92 ? titleEscape : title
      }

      function titleEscape(code) {
        if (code === marker || code === 92) {
          effects.consume(code);
          return title
        }

        return title(code)
      }
    }

    var factoryTitle$2 = titleFactory;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$6 = markdownLineEnding_1;
    var markdownLineEndingOrSpace$4 = markdownLineEndingOrSpace_1;
    var normalizeIdentifier$2 = normalizeIdentifier_1;
    var factoryDestination$1 = factoryDestination$2;
    var factoryLabel$1 = factoryLabel$2;
    var factorySpace$6 = factorySpace$h;
    var factoryWhitespace$1 = factoryWhitespace$2;
    var factoryTitle$1 = factoryTitle$2;

    var definition$1 = {
      name: 'definition',
      tokenize: tokenizeDefinition
    };
    var titleConstruct = {
      tokenize: tokenizeTitle,
      partial: true
    };

    function tokenizeDefinition(effects, ok, nok) {
      var self = this;
      var identifier;
      return start

      function start(code) {
        effects.enter('definition');
        return factoryLabel$1.call(
          self,
          effects,
          labelAfter,
          nok,
          'definitionLabel',
          'definitionLabelMarker',
          'definitionLabelString'
        )(code)
      }

      function labelAfter(code) {
        identifier = normalizeIdentifier$2(
          self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
        );

        if (code === 58) {
          effects.enter('definitionMarker');
          effects.consume(code);
          effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

          return factoryWhitespace$1(
            effects,
            factoryDestination$1(
              effects,
              effects.attempt(
                titleConstruct,
                factorySpace$6(effects, after, 'whitespace'),
                factorySpace$6(effects, after, 'whitespace')
              ),
              nok,
              'definitionDestination',
              'definitionDestinationLiteral',
              'definitionDestinationLiteralMarker',
              'definitionDestinationRaw',
              'definitionDestinationString'
            )
          )
        }

        return nok(code)
      }

      function after(code) {
        if (code === null || markdownLineEnding$6(code)) {
          effects.exit('definition');

          if (self.parser.defined.indexOf(identifier) < 0) {
            self.parser.defined.push(identifier);
          }

          return ok(code)
        }

        return nok(code)
      }
    }

    function tokenizeTitle(effects, ok, nok) {
      return start

      function start(code) {
        return markdownLineEndingOrSpace$4(code)
          ? factoryWhitespace$1(effects, before)(code)
          : nok(code)
      }

      function before(code) {
        if (code === 34 || code === 39 || code === 40) {
          return factoryTitle$1(
            effects,
            factorySpace$6(effects, after, 'whitespace'),
            nok,
            'definitionTitle',
            'definitionTitleMarker',
            'definitionTitleString'
          )(code)
        }

        return nok(code)
      }

      function after(code) {
        return code === null || markdownLineEnding$6(code) ? ok(code) : nok(code)
      }
    }

    var definition_1 = definition$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$5 = markdownLineEnding_1;

    var hardBreakEscape$1 = {
      name: 'hardBreakEscape',
      tokenize: tokenizeHardBreakEscape
    };

    function tokenizeHardBreakEscape(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('hardBreakEscape');
        effects.enter('escapeMarker');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (markdownLineEnding$5(code)) {
          effects.exit('escapeMarker');
          effects.exit('hardBreakEscape');
          return ok(code)
        }

        return nok(code)
      }
    }

    var hardBreakEscape_1 = hardBreakEscape$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$4 = markdownLineEnding_1;
    var markdownLineEndingOrSpace$3 = markdownLineEndingOrSpace_1;
    var markdownSpace$4 = markdownSpace_1;
    var chunkedSplice$1 = chunkedSplice_1;
    var factorySpace$5 = factorySpace$h;

    var headingAtx$1 = {
      name: 'headingAtx',
      tokenize: tokenizeHeadingAtx,
      resolve: resolveHeadingAtx
    };

    function resolveHeadingAtx(events, context) {
      var contentEnd = events.length - 2;
      var contentStart = 3;
      var content;
      var text; // Prefix whitespace, part of the opening.

      if (events[contentStart][1].type === 'whitespace') {
        contentStart += 2;
      } // Suffix whitespace, part of the closing.

      if (
        contentEnd - 2 > contentStart &&
        events[contentEnd][1].type === 'whitespace'
      ) {
        contentEnd -= 2;
      }

      if (
        events[contentEnd][1].type === 'atxHeadingSequence' &&
        (contentStart === contentEnd - 1 ||
          (contentEnd - 4 > contentStart &&
            events[contentEnd - 2][1].type === 'whitespace'))
      ) {
        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
      }

      if (contentEnd > contentStart) {
        content = {
          type: 'atxHeadingText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        text = {
          type: 'chunkText',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end,
          contentType: 'text'
        };
        chunkedSplice$1(events, contentStart, contentEnd - contentStart + 1, [
          ['enter', content, context],
          ['enter', text, context],
          ['exit', text, context],
          ['exit', content, context]
        ]);
      }

      return events
    }

    function tokenizeHeadingAtx(effects, ok, nok) {
      var self = this;
      var size = 0;
      return start

      function start(code) {
        effects.enter('atxHeading');
        effects.enter('atxHeadingSequence');
        return fenceOpenInside(code)
      }

      function fenceOpenInside(code) {
        if (code === 35 && size++ < 6) {
          effects.consume(code);
          return fenceOpenInside
        }

        if (code === null || markdownLineEndingOrSpace$3(code)) {
          effects.exit('atxHeadingSequence');
          return self.interrupt ? ok(code) : headingBreak(code)
        }

        return nok(code)
      }

      function headingBreak(code) {
        if (code === 35) {
          effects.enter('atxHeadingSequence');
          return sequence(code)
        }

        if (code === null || markdownLineEnding$4(code)) {
          effects.exit('atxHeading');
          return ok(code)
        }

        if (markdownSpace$4(code)) {
          return factorySpace$5(effects, headingBreak, 'whitespace')(code)
        }

        effects.enter('atxHeadingText');
        return data(code)
      }

      function sequence(code) {
        if (code === 35) {
          effects.consume(code);
          return sequence
        }

        effects.exit('atxHeadingSequence');
        return headingBreak(code)
      }

      function data(code) {
        if (code === null || code === 35 || markdownLineEndingOrSpace$3(code)) {
          effects.exit('atxHeadingText');
          return headingBreak(code)
        }

        effects.consume(code);
        return data
      }
    }

    var headingAtx_1 = headingAtx$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
    var basics = [
      'address',
      'article',
      'aside',
      'base',
      'basefont',
      'blockquote',
      'body',
      'caption',
      'center',
      'col',
      'colgroup',
      'dd',
      'details',
      'dialog',
      'dir',
      'div',
      'dl',
      'dt',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'frame',
      'frameset',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hr',
      'html',
      'iframe',
      'legend',
      'li',
      'link',
      'main',
      'menu',
      'menuitem',
      'nav',
      'noframes',
      'ol',
      'optgroup',
      'option',
      'p',
      'param',
      'section',
      'source',
      'summary',
      'table',
      'tbody',
      'td',
      'tfoot',
      'th',
      'thead',
      'title',
      'tr',
      'track',
      'ul'
    ];

    var htmlBlockNames$1 = basics;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    // This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
    var raws = ['pre', 'script', 'style', 'textarea'];

    var htmlRawNames$1 = raws;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiAlpha$1 = asciiAlpha_1;
    var asciiAlphanumeric$1 = asciiAlphanumeric_1;
    var markdownLineEnding$3 = markdownLineEnding_1;
    var markdownLineEndingOrSpace$2 = markdownLineEndingOrSpace_1;
    var markdownSpace$3 = markdownSpace_1;
    var fromCharCode = fromCharCode_1;
    var htmlBlockNames = htmlBlockNames$1;
    var htmlRawNames = htmlRawNames$1;
    var partialBlankLine$1 = partialBlankLine_1;

    var htmlFlow$1 = {
      name: 'htmlFlow',
      tokenize: tokenizeHtmlFlow,
      resolveTo: resolveToHtmlFlow,
      concrete: true
    };
    var nextBlankConstruct = {
      tokenize: tokenizeNextBlank,
      partial: true
    };

    function resolveToHtmlFlow(events) {
      var index = events.length;

      while (index--) {
        if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
          break
        }
      }

      if (index > 1 && events[index - 2][1].type === 'linePrefix') {
        // Add the prefix start to the HTML token.
        events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

        events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

        events.splice(index - 2, 2);
      }

      return events
    }

    function tokenizeHtmlFlow(effects, ok, nok) {
      var self = this;
      var kind;
      var startTag;
      var buffer;
      var index;
      var marker;
      return start

      function start(code) {
        effects.enter('htmlFlow');
        effects.enter('htmlFlowData');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationStart
        }

        if (code === 47) {
          effects.consume(code);
          return tagCloseStart
        }

        if (code === 63) {
          effects.consume(code);
          kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
          // right now, so we do need to search for `>`, similar to declarations.

          return self.interrupt ? ok : continuationDeclarationInside
        }

        if (asciiAlpha$1(code)) {
          effects.consume(code);
          buffer = fromCharCode(code);
          startTag = true;
          return tagName
        }

        return nok(code)
      }

      function declarationStart(code) {
        if (code === 45) {
          effects.consume(code);
          kind = 2;
          return commentOpenInside
        }

        if (code === 91) {
          effects.consume(code);
          kind = 5;
          buffer = 'CDATA[';
          index = 0;
          return cdataOpenInside
        }

        if (asciiAlpha$1(code)) {
          effects.consume(code);
          kind = 4;
          return self.interrupt ? ok : continuationDeclarationInside
        }

        return nok(code)
      }

      function commentOpenInside(code) {
        if (code === 45) {
          effects.consume(code);
          return self.interrupt ? ok : continuationDeclarationInside
        }

        return nok(code)
      }

      function cdataOpenInside(code) {
        if (code === buffer.charCodeAt(index++)) {
          effects.consume(code);
          return index === buffer.length
            ? self.interrupt
              ? ok
              : continuation
            : cdataOpenInside
        }

        return nok(code)
      }

      function tagCloseStart(code) {
        if (asciiAlpha$1(code)) {
          effects.consume(code);
          buffer = fromCharCode(code);
          return tagName
        }

        return nok(code)
      }

      function tagName(code) {
        if (
          code === null ||
          code === 47 ||
          code === 62 ||
          markdownLineEndingOrSpace$2(code)
        ) {
          if (
            code !== 47 &&
            startTag &&
            htmlRawNames.indexOf(buffer.toLowerCase()) > -1
          ) {
            kind = 1;
            return self.interrupt ? ok(code) : continuation(code)
          }

          if (htmlBlockNames.indexOf(buffer.toLowerCase()) > -1) {
            kind = 6;

            if (code === 47) {
              effects.consume(code);
              return basicSelfClosing
            }

            return self.interrupt ? ok(code) : continuation(code)
          }

          kind = 7; // Do not support complete HTML when interrupting.

          return self.interrupt
            ? nok(code)
            : startTag
            ? completeAttributeNameBefore(code)
            : completeClosingTagAfter(code)
        }

        if (code === 45 || asciiAlphanumeric$1(code)) {
          effects.consume(code);
          buffer += fromCharCode(code);
          return tagName
        }

        return nok(code)
      }

      function basicSelfClosing(code) {
        if (code === 62) {
          effects.consume(code);
          return self.interrupt ? ok : continuation
        }

        return nok(code)
      }

      function completeClosingTagAfter(code) {
        if (markdownSpace$3(code)) {
          effects.consume(code);
          return completeClosingTagAfter
        }

        return completeEnd(code)
      }

      function completeAttributeNameBefore(code) {
        if (code === 47) {
          effects.consume(code);
          return completeEnd
        }

        if (code === 58 || code === 95 || asciiAlpha$1(code)) {
          effects.consume(code);
          return completeAttributeName
        }

        if (markdownSpace$3(code)) {
          effects.consume(code);
          return completeAttributeNameBefore
        }

        return completeEnd(code)
      }

      function completeAttributeName(code) {
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric$1(code)
        ) {
          effects.consume(code);
          return completeAttributeName
        }

        return completeAttributeNameAfter(code)
      }

      function completeAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return completeAttributeValueBefore
        }

        if (markdownSpace$3(code)) {
          effects.consume(code);
          return completeAttributeNameAfter
        }

        return completeAttributeNameBefore(code)
      }

      function completeAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 34 || code === 39) {
          effects.consume(code);
          marker = code;
          return completeAttributeValueQuoted
        }

        if (markdownSpace$3(code)) {
          effects.consume(code);
          return completeAttributeValueBefore
        }

        marker = undefined;
        return completeAttributeValueUnquoted(code)
      }

      function completeAttributeValueQuoted(code) {
        if (code === marker) {
          effects.consume(code);
          return completeAttributeValueQuotedAfter
        }

        if (code === null || markdownLineEnding$3(code)) {
          return nok(code)
        }

        effects.consume(code);
        return completeAttributeValueQuoted
      }

      function completeAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96 ||
          markdownLineEndingOrSpace$2(code)
        ) {
          return completeAttributeNameAfter(code)
        }

        effects.consume(code);
        return completeAttributeValueUnquoted
      }

      function completeAttributeValueQuotedAfter(code) {
        if (code === 47 || code === 62 || markdownSpace$3(code)) {
          return completeAttributeNameBefore(code)
        }

        return nok(code)
      }

      function completeEnd(code) {
        if (code === 62) {
          effects.consume(code);
          return completeAfter
        }

        return nok(code)
      }

      function completeAfter(code) {
        if (markdownSpace$3(code)) {
          effects.consume(code);
          return completeAfter
        }

        return code === null || markdownLineEnding$3(code)
          ? continuation(code)
          : nok(code)
      }

      function continuation(code) {
        if (code === 45 && kind === 2) {
          effects.consume(code);
          return continuationCommentInside
        }

        if (code === 60 && kind === 1) {
          effects.consume(code);
          return continuationRawTagOpen
        }

        if (code === 62 && kind === 4) {
          effects.consume(code);
          return continuationClose
        }

        if (code === 63 && kind === 3) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        if (code === 93 && kind === 5) {
          effects.consume(code);
          return continuationCharacterDataInside
        }

        if (markdownLineEnding$3(code) && (kind === 6 || kind === 7)) {
          return effects.check(
            nextBlankConstruct,
            continuationClose,
            continuationAtLineEnding
          )(code)
        }

        if (code === null || markdownLineEnding$3(code)) {
          return continuationAtLineEnding(code)
        }

        effects.consume(code);
        return continuation
      }

      function continuationAtLineEnding(code) {
        effects.exit('htmlFlowData');
        return htmlContinueStart(code)
      }

      function htmlContinueStart(code) {
        if (code === null) {
          return done(code)
        }

        if (markdownLineEnding$3(code)) {
          effects.enter('lineEnding');
          effects.consume(code);
          effects.exit('lineEnding');
          return htmlContinueStart
        }

        effects.enter('htmlFlowData');
        return continuation(code)
      }

      function continuationCommentInside(code) {
        if (code === 45) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        return continuation(code)
      }

      function continuationRawTagOpen(code) {
        if (code === 47) {
          effects.consume(code);
          buffer = '';
          return continuationRawEndTag
        }

        return continuation(code)
      }

      function continuationRawEndTag(code) {
        if (code === 62 && htmlRawNames.indexOf(buffer.toLowerCase()) > -1) {
          effects.consume(code);
          return continuationClose
        }

        if (asciiAlpha$1(code) && buffer.length < 8) {
          effects.consume(code);
          buffer += fromCharCode(code);
          return continuationRawEndTag
        }

        return continuation(code)
      }

      function continuationCharacterDataInside(code) {
        if (code === 93) {
          effects.consume(code);
          return continuationDeclarationInside
        }

        return continuation(code)
      }

      function continuationDeclarationInside(code) {
        if (code === 62) {
          effects.consume(code);
          return continuationClose
        }

        return continuation(code)
      }

      function continuationClose(code) {
        if (code === null || markdownLineEnding$3(code)) {
          effects.exit('htmlFlowData');
          return done(code)
        }

        effects.consume(code);
        return continuationClose
      }

      function done(code) {
        effects.exit('htmlFlow');
        return ok(code)
      }
    }

    function tokenizeNextBlank(effects, ok, nok) {
      return start

      function start(code) {
        effects.exit('htmlFlowData');
        effects.enter('lineEndingBlank');
        effects.consume(code);
        effects.exit('lineEndingBlank');
        return effects.attempt(partialBlankLine$1, ok, nok)
      }
    }

    var htmlFlow_1 = htmlFlow$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiAlpha = asciiAlpha_1;
    var asciiAlphanumeric = asciiAlphanumeric_1;
    var markdownLineEnding$2 = markdownLineEnding_1;
    var markdownLineEndingOrSpace$1 = markdownLineEndingOrSpace_1;
    var markdownSpace$2 = markdownSpace_1;
    var factorySpace$4 = factorySpace$h;

    var htmlText$1 = {
      name: 'htmlText',
      tokenize: tokenizeHtmlText
    };

    function tokenizeHtmlText(effects, ok, nok) {
      var self = this;
      var marker;
      var buffer;
      var index;
      var returnState;
      return start

      function start(code) {
        effects.enter('htmlText');
        effects.enter('htmlTextData');
        effects.consume(code);
        return open
      }

      function open(code) {
        if (code === 33) {
          effects.consume(code);
          return declarationOpen
        }

        if (code === 47) {
          effects.consume(code);
          return tagCloseStart
        }

        if (code === 63) {
          effects.consume(code);
          return instruction
        }

        if (asciiAlpha(code)) {
          effects.consume(code);
          return tagOpen
        }

        return nok(code)
      }

      function declarationOpen(code) {
        if (code === 45) {
          effects.consume(code);
          return commentOpen
        }

        if (code === 91) {
          effects.consume(code);
          buffer = 'CDATA[';
          index = 0;
          return cdataOpen
        }

        if (asciiAlpha(code)) {
          effects.consume(code);
          return declaration
        }

        return nok(code)
      }

      function commentOpen(code) {
        if (code === 45) {
          effects.consume(code);
          return commentStart
        }

        return nok(code)
      }

      function commentStart(code) {
        if (code === null || code === 62) {
          return nok(code)
        }

        if (code === 45) {
          effects.consume(code);
          return commentStartDash
        }

        return comment(code)
      }

      function commentStartDash(code) {
        if (code === null || code === 62) {
          return nok(code)
        }

        return comment(code)
      }

      function comment(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 45) {
          effects.consume(code);
          return commentClose
        }

        if (markdownLineEnding$2(code)) {
          returnState = comment;
          return atLineEnding(code)
        }

        effects.consume(code);
        return comment
      }

      function commentClose(code) {
        if (code === 45) {
          effects.consume(code);
          return end
        }

        return comment(code)
      }

      function cdataOpen(code) {
        if (code === buffer.charCodeAt(index++)) {
          effects.consume(code);
          return index === buffer.length ? cdata : cdataOpen
        }

        return nok(code)
      }

      function cdata(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 93) {
          effects.consume(code);
          return cdataClose
        }

        if (markdownLineEnding$2(code)) {
          returnState = cdata;
          return atLineEnding(code)
        }

        effects.consume(code);
        return cdata
      }

      function cdataClose(code) {
        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }

        return cdata(code)
      }

      function cdataEnd(code) {
        if (code === 62) {
          return end(code)
        }

        if (code === 93) {
          effects.consume(code);
          return cdataEnd
        }

        return cdata(code)
      }

      function declaration(code) {
        if (code === null || code === 62) {
          return end(code)
        }

        if (markdownLineEnding$2(code)) {
          returnState = declaration;
          return atLineEnding(code)
        }

        effects.consume(code);
        return declaration
      }

      function instruction(code) {
        if (code === null) {
          return nok(code)
        }

        if (code === 63) {
          effects.consume(code);
          return instructionClose
        }

        if (markdownLineEnding$2(code)) {
          returnState = instruction;
          return atLineEnding(code)
        }

        effects.consume(code);
        return instruction
      }

      function instructionClose(code) {
        return code === 62 ? end(code) : instruction(code)
      }

      function tagCloseStart(code) {
        if (asciiAlpha(code)) {
          effects.consume(code);
          return tagClose
        }

        return nok(code)
      }

      function tagClose(code) {
        if (code === 45 || asciiAlphanumeric(code)) {
          effects.consume(code);
          return tagClose
        }

        return tagCloseBetween(code)
      }

      function tagCloseBetween(code) {
        if (markdownLineEnding$2(code)) {
          returnState = tagCloseBetween;
          return atLineEnding(code)
        }

        if (markdownSpace$2(code)) {
          effects.consume(code);
          return tagCloseBetween
        }

        return end(code)
      }

      function tagOpen(code) {
        if (code === 45 || asciiAlphanumeric(code)) {
          effects.consume(code);
          return tagOpen
        }

        if (code === 47 || code === 62 || markdownLineEndingOrSpace$1(code)) {
          return tagOpenBetween(code)
        }

        return nok(code)
      }

      function tagOpenBetween(code) {
        if (code === 47) {
          effects.consume(code);
          return end
        }

        if (code === 58 || code === 95 || asciiAlpha(code)) {
          effects.consume(code);
          return tagOpenAttributeName
        }

        if (markdownLineEnding$2(code)) {
          returnState = tagOpenBetween;
          return atLineEnding(code)
        }

        if (markdownSpace$2(code)) {
          effects.consume(code);
          return tagOpenBetween
        }

        return end(code)
      }

      function tagOpenAttributeName(code) {
        if (
          code === 45 ||
          code === 46 ||
          code === 58 ||
          code === 95 ||
          asciiAlphanumeric(code)
        ) {
          effects.consume(code);
          return tagOpenAttributeName
        }

        return tagOpenAttributeNameAfter(code)
      }

      function tagOpenAttributeNameAfter(code) {
        if (code === 61) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }

        if (markdownLineEnding$2(code)) {
          returnState = tagOpenAttributeNameAfter;
          return atLineEnding(code)
        }

        if (markdownSpace$2(code)) {
          effects.consume(code);
          return tagOpenAttributeNameAfter
        }

        return tagOpenBetween(code)
      }

      function tagOpenAttributeValueBefore(code) {
        if (
          code === null ||
          code === 60 ||
          code === 61 ||
          code === 62 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 34 || code === 39) {
          effects.consume(code);
          marker = code;
          return tagOpenAttributeValueQuoted
        }

        if (markdownLineEnding$2(code)) {
          returnState = tagOpenAttributeValueBefore;
          return atLineEnding(code)
        }

        if (markdownSpace$2(code)) {
          effects.consume(code);
          return tagOpenAttributeValueBefore
        }

        effects.consume(code);
        marker = undefined;
        return tagOpenAttributeValueUnquoted
      }

      function tagOpenAttributeValueQuoted(code) {
        if (code === marker) {
          effects.consume(code);
          return tagOpenAttributeValueQuotedAfter
        }

        if (code === null) {
          return nok(code)
        }

        if (markdownLineEnding$2(code)) {
          returnState = tagOpenAttributeValueQuoted;
          return atLineEnding(code)
        }

        effects.consume(code);
        return tagOpenAttributeValueQuoted
      }

      function tagOpenAttributeValueQuotedAfter(code) {
        if (code === 62 || code === 47 || markdownLineEndingOrSpace$1(code)) {
          return tagOpenBetween(code)
        }

        return nok(code)
      }

      function tagOpenAttributeValueUnquoted(code) {
        if (
          code === null ||
          code === 34 ||
          code === 39 ||
          code === 60 ||
          code === 61 ||
          code === 96
        ) {
          return nok(code)
        }

        if (code === 62 || markdownLineEndingOrSpace$1(code)) {
          return tagOpenBetween(code)
        }

        effects.consume(code);
        return tagOpenAttributeValueUnquoted
      } // We can’t have blank lines in content, so no need to worry about empty
      // tokens.

      function atLineEnding(code) {
        effects.exit('htmlTextData');
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$4(
          effects,
          afterPrefix,
          'linePrefix',
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )
      }

      function afterPrefix(code) {
        effects.enter('htmlTextData');
        return returnState(code)
      }

      function end(code) {
        if (code === 62) {
          effects.consume(code);
          effects.exit('htmlTextData');
          effects.exit('htmlText');
          return ok
        }

        return nok(code)
      }
    }

    var htmlText_1 = htmlText$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEndingOrSpace = markdownLineEndingOrSpace_1;
    var chunkedPush = chunkedPush_1;
    var chunkedSplice = chunkedSplice_1;
    var normalizeIdentifier$1 = normalizeIdentifier_1;
    var resolveAll = resolveAll_1;
    var shallow$1 = shallow_1;
    var factoryDestination = factoryDestination$2;
    var factoryLabel = factoryLabel$2;
    var factoryTitle = factoryTitle$2;
    var factoryWhitespace = factoryWhitespace$2;

    var labelEnd$3 = {
      name: 'labelEnd',
      tokenize: tokenizeLabelEnd,
      resolveTo: resolveToLabelEnd,
      resolveAll: resolveAllLabelEnd
    };
    var resourceConstruct = {
      tokenize: tokenizeResource
    };
    var fullReferenceConstruct = {
      tokenize: tokenizeFullReference
    };
    var collapsedReferenceConstruct = {
      tokenize: tokenizeCollapsedReference
    };

    function resolveAllLabelEnd(events) {
      var index = -1;
      var token;

      while (++index < events.length) {
        token = events[index][1];

        if (
          !token._used &&
          (token.type === 'labelImage' ||
            token.type === 'labelLink' ||
            token.type === 'labelEnd')
        ) {
          // Remove the marker.
          events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
          token.type = 'data';
          index++;
        }
      }

      return events
    }

    function resolveToLabelEnd(events, context) {
      var index = events.length;
      var offset = 0;
      var group;
      var label;
      var text;
      var token;
      var open;
      var close;
      var media; // Find an opening.

      while (index--) {
        token = events[index][1];

        if (open) {
          // If we see another link, or inactive link label, we’ve been here before.
          if (
            token.type === 'link' ||
            (token.type === 'labelLink' && token._inactive)
          ) {
            break
          } // Mark other link openings as inactive, as we can’t have links in
          // links.

          if (events[index][0] === 'enter' && token.type === 'labelLink') {
            token._inactive = true;
          }
        } else if (close) {
          if (
            events[index][0] === 'enter' &&
            (token.type === 'labelImage' || token.type === 'labelLink') &&
            !token._balanced
          ) {
            open = index;

            if (token.type !== 'labelLink') {
              offset = 2;
              break
            }
          }
        } else if (token.type === 'labelEnd') {
          close = index;
        }
      }

      group = {
        type: events[open][1].type === 'labelLink' ? 'link' : 'image',
        start: shallow$1(events[open][1].start),
        end: shallow$1(events[events.length - 1][1].end)
      };
      label = {
        type: 'label',
        start: shallow$1(events[open][1].start),
        end: shallow$1(events[close][1].end)
      };
      text = {
        type: 'labelText',
        start: shallow$1(events[open + offset + 2][1].end),
        end: shallow$1(events[close - 2][1].start)
      };
      media = [
        ['enter', group, context],
        ['enter', label, context]
      ]; // Opening marker.

      media = chunkedPush(media, events.slice(open + 1, open + offset + 3)); // Text open.

      media = chunkedPush(media, [['enter', text, context]]); // Between.

      media = chunkedPush(
        media,
        resolveAll(
          context.parser.constructs.insideSpan.null,
          events.slice(open + offset + 4, close - 3),
          context
        )
      ); // Text close, marker close, label close.

      media = chunkedPush(media, [
        ['exit', text, context],
        events[close - 2],
        events[close - 1],
        ['exit', label, context]
      ]); // Reference, resource, or so.

      media = chunkedPush(media, events.slice(close + 1)); // Media close.

      media = chunkedPush(media, [['exit', group, context]]);
      chunkedSplice(events, open, events.length, media);
      return events
    }

    function tokenizeLabelEnd(effects, ok, nok) {
      var self = this;
      var index = self.events.length;
      var labelStart;
      var defined; // Find an opening.

      while (index--) {
        if (
          (self.events[index][1].type === 'labelImage' ||
            self.events[index][1].type === 'labelLink') &&
          !self.events[index][1]._balanced
        ) {
          labelStart = self.events[index][1];
          break
        }
      }

      return start

      function start(code) {
        if (!labelStart) {
          return nok(code)
        } // It’s a balanced bracket, but contains a link.

        if (labelStart._inactive) return balanced(code)
        defined =
          self.parser.defined.indexOf(
            normalizeIdentifier$1(
              self.sliceSerialize({
                start: labelStart.end,
                end: self.now()
              })
            )
          ) > -1;
        effects.enter('labelEnd');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelEnd');
        return afterLabelEnd
      }

      function afterLabelEnd(code) {
        // Resource: `[asd](fgh)`.
        if (code === 40) {
          return effects.attempt(
            resourceConstruct,
            ok,
            defined ? ok : balanced
          )(code)
        } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?

        if (code === 91) {
          return effects.attempt(
            fullReferenceConstruct,
            ok,
            defined
              ? effects.attempt(collapsedReferenceConstruct, ok, balanced)
              : balanced
          )(code)
        } // Shortcut reference: `[asd]`?

        return defined ? ok(code) : balanced(code)
      }

      function balanced(code) {
        labelStart._balanced = true;
        return nok(code)
      }
    }

    function tokenizeResource(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('resource');
        effects.enter('resourceMarker');
        effects.consume(code);
        effects.exit('resourceMarker');
        return factoryWhitespace(effects, open)
      }

      function open(code) {
        if (code === 41) {
          return end(code)
        }

        return factoryDestination(
          effects,
          destinationAfter,
          nok,
          'resourceDestination',
          'resourceDestinationLiteral',
          'resourceDestinationLiteralMarker',
          'resourceDestinationRaw',
          'resourceDestinationString',
          3
        )(code)
      }

      function destinationAfter(code) {
        return markdownLineEndingOrSpace(code)
          ? factoryWhitespace(effects, between)(code)
          : end(code)
      }

      function between(code) {
        if (code === 34 || code === 39 || code === 40) {
          return factoryTitle(
            effects,
            factoryWhitespace(effects, end),
            nok,
            'resourceTitle',
            'resourceTitleMarker',
            'resourceTitleString'
          )(code)
        }

        return end(code)
      }

      function end(code) {
        if (code === 41) {
          effects.enter('resourceMarker');
          effects.consume(code);
          effects.exit('resourceMarker');
          effects.exit('resource');
          return ok
        }

        return nok(code)
      }
    }

    function tokenizeFullReference(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        return factoryLabel.call(
          self,
          effects,
          afterLabel,
          nok,
          'reference',
          'referenceMarker',
          'referenceString'
        )(code)
      }

      function afterLabel(code) {
        return self.parser.defined.indexOf(
          normalizeIdentifier$1(
            self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
          )
        ) < 0
          ? nok(code)
          : ok(code)
      }
    }

    function tokenizeCollapsedReference(effects, ok, nok) {
      return start

      function start(code) {
        effects.enter('reference');
        effects.enter('referenceMarker');
        effects.consume(code);
        effects.exit('referenceMarker');
        return open
      }

      function open(code) {
        if (code === 93) {
          effects.enter('referenceMarker');
          effects.consume(code);
          effects.exit('referenceMarker');
          effects.exit('reference');
          return ok
        }

        return nok(code)
      }
    }

    var labelEnd_1 = labelEnd$3;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var labelEnd$2 = labelEnd_1;

    var labelStartImage$1 = {
      name: 'labelStartImage',
      tokenize: tokenizeLabelStartImage,
      resolveAll: labelEnd$2.resolveAll
    };

    function tokenizeLabelStartImage(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        effects.enter('labelImage');
        effects.enter('labelImageMarker');
        effects.consume(code);
        effects.exit('labelImageMarker');
        return open
      }

      function open(code) {
        if (code === 91) {
          effects.enter('labelMarker');
          effects.consume(code);
          effects.exit('labelMarker');
          effects.exit('labelImage');
          return after
        }

        return nok(code)
      }

      function after(code) {
        /* c8 ignore next */
        return code === 94 &&
          /* c8 ignore next */
          '_hiddenFootnoteSupport' in self.parser.constructs
          ? /* c8 ignore next */
            nok(code)
          : ok(code)
      }
    }

    var labelStartImage_1 = labelStartImage$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var labelEnd$1 = labelEnd_1;

    var labelStartLink$1 = {
      name: 'labelStartLink',
      tokenize: tokenizeLabelStartLink,
      resolveAll: labelEnd$1.resolveAll
    };

    function tokenizeLabelStartLink(effects, ok, nok) {
      var self = this;
      return start

      function start(code) {
        effects.enter('labelLink');
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelLink');
        return after
      }

      function after(code) {
        /* c8 ignore next */
        return code === 94 &&
          /* c8 ignore next */
          '_hiddenFootnoteSupport' in self.parser.constructs
          ? /* c8 ignore next */
            nok(code)
          : ok(code)
      }
    }

    var labelStartLink_1 = labelStartLink$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var factorySpace$3 = factorySpace$h;

    var lineEnding$1 = {
      name: 'lineEnding',
      tokenize: tokenizeLineEnding
    };

    function tokenizeLineEnding(effects, ok) {
      return start

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace$3(effects, ok, 'linePrefix')
      }
    }

    var lineEnding_1 = lineEnding$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding$1 = markdownLineEnding_1;
    var markdownSpace$1 = markdownSpace_1;
    var factorySpace$2 = factorySpace$h;

    var thematicBreak$2 = {
      name: 'thematicBreak',
      tokenize: tokenizeThematicBreak
    };

    function tokenizeThematicBreak(effects, ok, nok) {
      var size = 0;
      var marker;
      return start

      function start(code) {
        effects.enter('thematicBreak');
        marker = code;
        return atBreak(code)
      }

      function atBreak(code) {
        if (code === marker) {
          effects.enter('thematicBreakSequence');
          return sequence(code)
        }

        if (markdownSpace$1(code)) {
          return factorySpace$2(effects, atBreak, 'whitespace')(code)
        }

        if (size < 3 || (code !== null && !markdownLineEnding$1(code))) {
          return nok(code)
        }

        effects.exit('thematicBreak');
        return ok(code)
      }

      function sequence(code) {
        if (code === marker) {
          effects.consume(code);
          size++;
          return sequence
        }

        effects.exit('thematicBreakSequence');
        return atBreak(code)
      }
    }

    var thematicBreak_1 = thematicBreak$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var asciiDigit = asciiDigit_1;
    var markdownSpace = markdownSpace_1;
    var prefixSize = prefixSize_1;
    var sizeChunks = sizeChunks_1;
    var factorySpace$1 = factorySpace$h;
    var partialBlankLine = partialBlankLine_1;
    var thematicBreak$1 = thematicBreak_1;

    var list$1 = {
      name: 'list',
      tokenize: tokenizeListStart,
      continuation: {
        tokenize: tokenizeListContinuation
      },
      exit: tokenizeListEnd
    };
    var listItemPrefixWhitespaceConstruct = {
      tokenize: tokenizeListItemPrefixWhitespace,
      partial: true
    };
    var indentConstruct = {
      tokenize: tokenizeIndent,
      partial: true
    };

    function tokenizeListStart(effects, ok, nok) {
      var self = this;
      var initialSize = prefixSize(self.events, 'linePrefix');
      var size = 0;
      return start

      function start(code) {
        var kind =
          self.containerState.type ||
          (code === 42 || code === 43 || code === 45
            ? 'listUnordered'
            : 'listOrdered');

        if (
          kind === 'listUnordered'
            ? !self.containerState.marker || code === self.containerState.marker
            : asciiDigit(code)
        ) {
          if (!self.containerState.type) {
            self.containerState.type = kind;
            effects.enter(kind, {
              _container: true
            });
          }

          if (kind === 'listUnordered') {
            effects.enter('listItemPrefix');
            return code === 42 || code === 45
              ? effects.check(thematicBreak$1, nok, atMarker)(code)
              : atMarker(code)
          }

          if (!self.interrupt || code === 49) {
            effects.enter('listItemPrefix');
            effects.enter('listItemValue');
            return inside(code)
          }
        }

        return nok(code)
      }

      function inside(code) {
        if (asciiDigit(code) && ++size < 10) {
          effects.consume(code);
          return inside
        }

        if (
          (!self.interrupt || size < 2) &&
          (self.containerState.marker
            ? code === self.containerState.marker
            : code === 41 || code === 46)
        ) {
          effects.exit('listItemValue');
          return atMarker(code)
        }

        return nok(code)
      }

      function atMarker(code) {
        effects.enter('listItemMarker');
        effects.consume(code);
        effects.exit('listItemMarker');
        self.containerState.marker = self.containerState.marker || code;
        return effects.check(
          partialBlankLine, // Can’t be empty when interrupting.
          self.interrupt ? nok : onBlank,
          effects.attempt(
            listItemPrefixWhitespaceConstruct,
            endOfPrefix,
            otherPrefix
          )
        )
      }

      function onBlank(code) {
        self.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code)
      }

      function otherPrefix(code) {
        if (markdownSpace(code)) {
          effects.enter('listItemPrefixWhitespace');
          effects.consume(code);
          effects.exit('listItemPrefixWhitespace');
          return endOfPrefix
        }

        return nok(code)
      }

      function endOfPrefix(code) {
        self.containerState.size =
          initialSize + sizeChunks(self.sliceStream(effects.exit('listItemPrefix')));
        return ok(code)
      }
    }

    function tokenizeListContinuation(effects, ok, nok) {
      var self = this;
      self.containerState._closeFlow = undefined;
      return effects.check(partialBlankLine, onBlank, notBlank)

      function onBlank(code) {
        self.containerState.furtherBlankLines =
          self.containerState.furtherBlankLines ||
          self.containerState.initialBlankLine; // We have a blank line.
        // Still, try to consume at most the items size.

        return factorySpace$1(
          effects,
          ok,
          'listItemIndent',
          self.containerState.size + 1
        )(code)
      }

      function notBlank(code) {
        if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
          self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
          return notInCurrentItem(code)
        }

        self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
        return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
      }

      function notInCurrentItem(code) {
        // While we do continue, we signal that the flow should be closed.
        self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

        self.interrupt = undefined;
        return factorySpace$1(
          effects,
          effects.attempt(list$1, ok, nok),
          'linePrefix',
          self.parser.constructs.disable.null.indexOf('codeIndented') > -1
            ? undefined
            : 4
        )(code)
      }
    }

    function tokenizeIndent(effects, ok, nok) {
      var self = this;
      return factorySpace$1(
        effects,
        afterPrefix,
        'listItemIndent',
        self.containerState.size + 1
      )

      function afterPrefix(code) {
        return prefixSize(self.events, 'listItemIndent') ===
          self.containerState.size
          ? ok(code)
          : nok(code)
      }
    }

    function tokenizeListEnd(effects) {
      effects.exit(this.containerState.type);
    }

    function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
      var self = this;
      return factorySpace$1(
        effects,
        afterPrefix,
        'listItemPrefixWhitespace',
        self.parser.constructs.disable.null.indexOf('codeIndented') > -1
          ? undefined
          : 4 + 1
      )

      function afterPrefix(code) {
        return markdownSpace(code) ||
          !prefixSize(self.events, 'listItemPrefixWhitespace')
          ? nok(code)
          : ok(code)
      }
    }

    var list_1 = list$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var markdownLineEnding = markdownLineEnding_1;
    var shallow = shallow_1;
    var factorySpace = factorySpace$h;

    var setextUnderline$1 = {
      name: 'setextUnderline',
      tokenize: tokenizeSetextUnderline,
      resolveTo: resolveToSetextUnderline
    };

    function resolveToSetextUnderline(events, context) {
      var index = events.length;
      var content;
      var text;
      var definition;
      var heading; // Find the opening of the content.
      // It’ll always exist: we don’t tokenize if it isn’t there.

      while (index--) {
        if (events[index][0] === 'enter') {
          if (events[index][1].type === 'content') {
            content = index;
            break
          }

          if (events[index][1].type === 'paragraph') {
            text = index;
          }
        } // Exit
        else {
          if (events[index][1].type === 'content') {
            // Remove the content end (if needed we’ll add it later)
            events.splice(index, 1);
          }

          if (!definition && events[index][1].type === 'definition') {
            definition = index;
          }
        }
      }

      heading = {
        type: 'setextHeading',
        start: shallow(events[text][1].start),
        end: shallow(events[events.length - 1][1].end)
      }; // Change the paragraph to setext heading text.

      events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
      // but we need move it.

      if (definition) {
        events.splice(text, 0, ['enter', heading, context]);
        events.splice(definition + 1, 0, ['exit', events[content][1], context]);
        events[content][1].end = shallow(events[definition][1].end);
      } else {
        events[content][1] = heading;
      } // Add the heading exit at the end.

      events.push(['exit', heading, context]);
      return events
    }

    function tokenizeSetextUnderline(effects, ok, nok) {
      var self = this;
      var index = self.events.length;
      var marker;
      var paragraph; // Find an opening.

      while (index--) {
        // Skip enter/exit of line ending, line prefix, and content.
        // We can now either have a definition or a paragraph.
        if (
          self.events[index][1].type !== 'lineEnding' &&
          self.events[index][1].type !== 'linePrefix' &&
          self.events[index][1].type !== 'content'
        ) {
          paragraph = self.events[index][1].type === 'paragraph';
          break
        }
      }

      return start

      function start(code) {
        if (!self.lazy && (self.interrupt || paragraph)) {
          effects.enter('setextHeadingLine');
          effects.enter('setextHeadingLineSequence');
          marker = code;
          return closingSequence(code)
        }

        return nok(code)
      }

      function closingSequence(code) {
        if (code === marker) {
          effects.consume(code);
          return closingSequence
        }

        effects.exit('setextHeadingLineSequence');
        return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
      }

      function closingSequenceEnd(code) {
        if (code === null || markdownLineEnding(code)) {
          effects.exit('setextHeadingLine');
          return ok(code)
        }

        return nok(code)
      }
    }

    var setextUnderline_1 = setextUnderline$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    Object.defineProperty(constructs$1, '__esModule', {value: true});

    var text$1$1 = text$4;
    var attention = attention_1;
    var autolink = autolink_1;
    var blockQuote = blockQuote_1;
    var characterEscape = characterEscape_1;
    var characterReference = characterReference_1;
    var codeFenced = codeFenced_1;
    var codeIndented = codeIndented_1;
    var codeText = codeText_1;
    var definition = definition_1;
    var hardBreakEscape = hardBreakEscape_1;
    var headingAtx = headingAtx_1;
    var htmlFlow = htmlFlow_1;
    var htmlText = htmlText_1;
    var labelEnd = labelEnd_1;
    var labelStartImage = labelStartImage_1;
    var labelStartLink = labelStartLink_1;
    var lineEnding = lineEnding_1;
    var list = list_1;
    var setextUnderline = setextUnderline_1;
    var thematicBreak = thematicBreak_1;

    var document$2 = {
      42: list,
      // Asterisk
      43: list,
      // Plus sign
      45: list,
      // Dash
      48: list,
      // 0
      49: list,
      // 1
      50: list,
      // 2
      51: list,
      // 3
      52: list,
      // 4
      53: list,
      // 5
      54: list,
      // 6
      55: list,
      // 7
      56: list,
      // 8
      57: list,
      // 9
      62: blockQuote // Greater than
    };
    var contentInitial = {
      91: definition // Left square bracket
    };
    var flowInitial = {
      '-2': codeIndented,
      // Horizontal tab
      '-1': codeIndented,
      // Virtual space
      32: codeIndented // Space
    };
    var flow$1 = {
      35: headingAtx,
      // Number sign
      42: thematicBreak,
      // Asterisk
      45: [setextUnderline, thematicBreak],
      // Dash
      60: htmlFlow,
      // Less than
      61: setextUnderline,
      // Equals to
      95: thematicBreak,
      // Underscore
      96: codeFenced,
      // Grave accent
      126: codeFenced // Tilde
    };
    var string = {
      38: characterReference,
      // Ampersand
      92: characterEscape // Backslash
    };
    var text$2 = {
      '-5': lineEnding,
      // Carriage return
      '-4': lineEnding,
      // Line feed
      '-3': lineEnding,
      // Carriage return + line feed
      33: labelStartImage,
      // Exclamation mark
      38: characterReference,
      // Ampersand
      42: attention,
      // Asterisk
      60: [autolink, htmlText],
      // Less than
      91: labelStartLink,
      // Left square bracket
      92: [hardBreakEscape, characterEscape],
      // Backslash
      93: labelEnd,
      // Right square bracket
      95: attention,
      // Underscore
      96: codeText // Grave accent
    };
    var insideSpan = {
      null: [attention, text$1$1.resolver]
    };
    var disable = {
      null: []
    };

    constructs$1.contentInitial = contentInitial;
    constructs$1.disable = disable;
    constructs$1.document = document$2;
    constructs$1.flow = flow$1;
    constructs$1.flowInitial = flowInitial;
    constructs$1.insideSpan = insideSpan;
    constructs$1.string = string;
    constructs$1.text = text$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var content = content$3;
    var document$1 = document$3;
    var flow = flow$2;
    var text$1 = text$4;
    var combineExtensions = combineExtensions_1;
    var createTokenizer = createTokenizer_1;
    var miniflat = miniflat_1;
    var constructs = constructs$1;

    function parse$2(options) {
      var settings = options || {};
      var parser = {
        defined: [],
        constructs: combineExtensions(
          [constructs].concat(miniflat(settings.extensions))
        ),
        content: create(content),
        document: create(document$1),
        flow: create(flow),
        string: create(text$1.string),
        text: create(text$1.text)
      };
      return parser

      function create(initializer) {
        return creator

        function creator(from) {
          return createTokenizer(parser, initializer, from)
        }
      }
    }

    var parse_1 = parse$2;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var search = /[\0\t\n\r]/g;

    function preprocess() {
      var start = true;
      var column = 1;
      var buffer = '';
      var atCarriageReturn;
      return preprocessor

      function preprocessor(value, encoding, end) {
        var chunks = [];
        var match;
        var next;
        var startPosition;
        var endPosition;
        var code;
        value = buffer + value.toString(encoding);
        startPosition = 0;
        buffer = '';

        if (start) {
          if (value.charCodeAt(0) === 65279) {
            startPosition++;
          }

          start = undefined;
        }

        while (startPosition < value.length) {
          search.lastIndex = startPosition;
          match = search.exec(value);
          endPosition = match ? match.index : value.length;
          code = value.charCodeAt(endPosition);

          if (!match) {
            buffer = value.slice(startPosition);
            break
          }

          if (code === 10 && startPosition === endPosition && atCarriageReturn) {
            chunks.push(-3);
            atCarriageReturn = undefined;
          } else {
            if (atCarriageReturn) {
              chunks.push(-5);
              atCarriageReturn = undefined;
            }

            if (startPosition < endPosition) {
              chunks.push(value.slice(startPosition, endPosition));
              column += endPosition - startPosition;
            }

            if (code === 0) {
              chunks.push(65533);
              column++;
            } else if (code === 9) {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);

              while (column++ < next) chunks.push(-1);
            } else if (code === 10) {
              chunks.push(-4);
              column = 1;
            } // Must be carriage return.
            else {
              atCarriageReturn = true;
              column = 1;
            }
          }

          startPosition = endPosition + 1;
        }

        if (end) {
          if (atCarriageReturn) chunks.push(-5);
          if (buffer) chunks.push(buffer);
          chunks.push(null);
        }

        return chunks
      }
    }

    var preprocess_1 = preprocess;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var subtokenize = subtokenize_1;

    function postprocess$1(events) {
      while (!subtokenize(events)) {
        // Empty
      }

      return events
    }

    var postprocess_1 = postprocess$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var dist = fromMarkdown$1;

    // These three are compiled away in the `dist/`

    var toString = mdastUtilToString;
    var assign = assign_1;
    var own = hasOwnProperty$1;
    var normalizeIdentifier = normalizeIdentifier_1;
    var safeFromInt = safeFromInt_1;
    var parser$2 = parse_1;
    var preprocessor = preprocess_1;
    var postprocess = postprocess_1;
    var decode = decodeEntity_1;
    var stringifyPosition = unistUtilStringifyPosition;

    function fromMarkdown$1(value, encoding, options) {
      if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
      }

      return compiler(options)(
        postprocess(
          parser$2(options).document().write(preprocessor()(value, encoding, true))
        )
      )
    }

    // Note this compiler only understand complete buffering, not streaming.
    function compiler(options) {
      var settings = options || {};
      var config = configure(
        {
          transforms: [],
          canContainEols: [
            'emphasis',
            'fragment',
            'heading',
            'paragraph',
            'strong'
          ],

          enter: {
            autolink: opener(link),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading),
            blockQuote: opener(blockQuote),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer,
            codeFencedFenceMeta: buffer,
            codeIndented: opener(codeFlow, buffer),
            codeText: opener(codeText, buffer),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition),
            definitionDestinationString: buffer,
            definitionLabelString: buffer,
            definitionTitleString: buffer,
            emphasis: opener(emphasis),
            hardBreakEscape: opener(hardBreak),
            hardBreakTrailing: opener(hardBreak),
            htmlFlow: opener(html, buffer),
            htmlFlowData: onenterdata,
            htmlText: opener(html, buffer),
            htmlTextData: onenterdata,
            image: opener(image),
            label: buffer,
            link: opener(link),
            listItem: opener(listItem),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list, onenterlistordered),
            listUnordered: opener(list),
            paragraph: opener(paragraph),
            reference: onenterreference,
            referenceString: buffer,
            resourceDestinationString: buffer,
            resourceTitleString: buffer,
            setextHeading: opener(heading),
            strong: opener(strong),
            thematicBreak: opener(thematicBreak)
          },

          exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
          }
        },

        settings.mdastExtensions || []
      );

      var data = {};

      return compile

      function compile(events) {
        var tree = {type: 'root', children: []};
        var stack = [tree];
        var tokenStack = [];
        var listStack = [];
        var index = -1;
        var handler;
        var listStart;

        var context = {
          stack: stack,
          tokenStack: tokenStack,
          config: config,
          enter: enter,
          exit: exit,
          buffer: buffer,
          resume: resume,
          setData: setData,
          getData: getData
        };

        while (++index < events.length) {
          // We preprocess lists to add `listItem` tokens, and to infer whether
          // items the list itself are spread out.
          if (
            events[index][1].type === 'listOrdered' ||
            events[index][1].type === 'listUnordered'
          ) {
            if (events[index][0] === 'enter') {
              listStack.push(index);
            } else {
              listStart = listStack.pop(index);
              index = prepareList(events, listStart, index);
            }
          }
        }

        index = -1;

        while (++index < events.length) {
          handler = config[events[index][0]];

          if (own.call(handler, events[index][1].type)) {
            handler[events[index][1].type].call(
              assign({sliceSerialize: events[index][2].sliceSerialize}, context),
              events[index][1]
            );
          }
        }

        if (tokenStack.length) {
          throw new Error(
            'Cannot close document, a token (`' +
              tokenStack[tokenStack.length - 1].type +
              '`, ' +
              stringifyPosition({
                start: tokenStack[tokenStack.length - 1].start,
                end: tokenStack[tokenStack.length - 1].end
              }) +
              ') is still open'
          )
        }

        // Figure out `root` position.
        tree.position = {
          start: point(
            events.length ? events[0][1].start : {line: 1, column: 1, offset: 0}
          ),

          end: point(
            events.length
              ? events[events.length - 2][1].end
              : {line: 1, column: 1, offset: 0}
          )
        };

        index = -1;
        while (++index < config.transforms.length) {
          tree = config.transforms[index](tree) || tree;
        }

        return tree
      }

      function prepareList(events, start, length) {
        var index = start - 1;
        var containerBalance = -1;
        var listSpread = false;
        var listItem;
        var tailIndex;
        var lineIndex;
        var tailEvent;
        var event;
        var firstBlankLineIndex;
        var atMarker;

        while (++index <= length) {
          event = events[index];

          if (
            event[1].type === 'listUnordered' ||
            event[1].type === 'listOrdered' ||
            event[1].type === 'blockQuote'
          ) {
            if (event[0] === 'enter') {
              containerBalance++;
            } else {
              containerBalance--;
            }

            atMarker = undefined;
          } else if (event[1].type === 'lineEndingBlank') {
            if (event[0] === 'enter') {
              if (
                listItem &&
                !atMarker &&
                !containerBalance &&
                !firstBlankLineIndex
              ) {
                firstBlankLineIndex = index;
              }

              atMarker = undefined;
            }
          } else if (
            event[1].type === 'linePrefix' ||
            event[1].type === 'listItemValue' ||
            event[1].type === 'listItemMarker' ||
            event[1].type === 'listItemPrefix' ||
            event[1].type === 'listItemPrefixWhitespace'
          ) ; else {
            atMarker = undefined;
          }

          if (
            (!containerBalance &&
              event[0] === 'enter' &&
              event[1].type === 'listItemPrefix') ||
            (containerBalance === -1 &&
              event[0] === 'exit' &&
              (event[1].type === 'listUnordered' ||
                event[1].type === 'listOrdered'))
          ) {
            if (listItem) {
              tailIndex = index;
              lineIndex = undefined;

              while (tailIndex--) {
                tailEvent = events[tailIndex];

                if (
                  tailEvent[1].type === 'lineEnding' ||
                  tailEvent[1].type === 'lineEndingBlank'
                ) {
                  if (tailEvent[0] === 'exit') continue

                  if (lineIndex) {
                    events[lineIndex][1].type = 'lineEndingBlank';
                    listSpread = true;
                  }

                  tailEvent[1].type = 'lineEnding';
                  lineIndex = tailIndex;
                } else if (
                  tailEvent[1].type === 'linePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefix' ||
                  tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                  tailEvent[1].type === 'blockQuoteMarker' ||
                  tailEvent[1].type === 'listItemIndent'
                ) ; else {
                  break
                }
              }

              if (
                firstBlankLineIndex &&
                (!lineIndex || firstBlankLineIndex < lineIndex)
              ) {
                listItem._spread = true;
              }

              // Fix position.
              listItem.end = point(
                lineIndex ? events[lineIndex][1].start : event[1].end
              );

              events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
              index++;
              length++;
            }

            // Create a new list item.
            if (event[1].type === 'listItemPrefix') {
              listItem = {
                type: 'listItem',
                _spread: false,
                start: point(event[1].start)
              };

              events.splice(index, 0, ['enter', listItem, event[2]]);
              index++;
              length++;
              firstBlankLineIndex = undefined;
              atMarker = true;
            }
          }
        }

        events[start][1]._spread = listSpread;
        return length
      }

      function setData(key, value) {
        data[key] = value;
      }

      function getData(key) {
        return data[key]
      }

      function point(d) {
        return {line: d.line, column: d.column, offset: d.offset}
      }

      function opener(create, and) {
        return open

        function open(token) {
          enter.call(this, create(token), token);
          if (and) and.call(this, token);
        }
      }

      function buffer() {
        this.stack.push({type: 'fragment', children: []});
      }

      function enter(node, token) {
        this.stack[this.stack.length - 1].children.push(node);
        this.stack.push(node);
        this.tokenStack.push(token);
        node.position = {start: point(token.start)};
        return node
      }

      function closer(and) {
        return close

        function close(token) {
          if (and) and.call(this, token);
          exit.call(this, token);
        }
      }

      function exit(token) {
        var node = this.stack.pop();
        var open = this.tokenStack.pop();

        if (!open) {
          throw new Error(
            'Cannot close `' +
              token.type +
              '` (' +
              stringifyPosition({start: token.start, end: token.end}) +
              '): it’s not open'
          )
        } else if (open.type !== token.type) {
          throw new Error(
            'Cannot close `' +
              token.type +
              '` (' +
              stringifyPosition({start: token.start, end: token.end}) +
              '): a different token (`' +
              open.type +
              '`, ' +
              stringifyPosition({start: open.start, end: open.end}) +
              ') is open'
          )
        }

        node.position.end = point(token.end);
        return node
      }

      function resume() {
        return toString(this.stack.pop())
      }

      //
      // Handlers.
      //

      function onenterlistordered() {
        setData('expectingFirstListItemValue', true);
      }

      function onenterlistitemvalue(token) {
        if (getData('expectingFirstListItemValue')) {
          this.stack[this.stack.length - 2].start = parseInt(
            this.sliceSerialize(token),
            10
          );

          setData('expectingFirstListItemValue');
        }
      }

      function onexitcodefencedfenceinfo() {
        var data = this.resume();
        this.stack[this.stack.length - 1].lang = data;
      }

      function onexitcodefencedfencemeta() {
        var data = this.resume();
        this.stack[this.stack.length - 1].meta = data;
      }

      function onexitcodefencedfence() {
        // Exit if this is the closing fence.
        if (getData('flowCodeInside')) return
        this.buffer();
        setData('flowCodeInside', true);
      }

      function onexitcodefenced() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data.replace(
          /^(\r?\n|\r)|(\r?\n|\r)$/g,
          ''
        );

        setData('flowCodeInside');
      }

      function onexitcodeindented() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitdefinitionlabelstring(token) {
        // Discard label, use the source content instead.
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier(
          this.sliceSerialize(token)
        ).toLowerCase();
      }

      function onexitdefinitiontitlestring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].title = data;
      }

      function onexitdefinitiondestinationstring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].url = data;
      }

      function onexitatxheadingsequence(token) {
        if (!this.stack[this.stack.length - 1].depth) {
          this.stack[this.stack.length - 1].depth = this.sliceSerialize(
            token
          ).length;
        }
      }

      function onexitsetextheadingtext() {
        setData('setextHeadingSlurpLineEnding', true);
      }

      function onexitsetextheadinglinesequence(token) {
        this.stack[this.stack.length - 1].depth =
          this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
      }

      function onexitsetextheading() {
        setData('setextHeadingSlurpLineEnding');
      }

      function onenterdata(token) {
        var siblings = this.stack[this.stack.length - 1].children;
        var tail = siblings[siblings.length - 1];

        if (!tail || tail.type !== 'text') {
          // Add a new text node.
          tail = text();
          tail.position = {start: point(token.start)};
          this.stack[this.stack.length - 1].children.push(tail);
        }

        this.stack.push(tail);
      }

      function onexitdata(token) {
        var tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = point(token.end);
      }

      function onexitlineending(token) {
        var context = this.stack[this.stack.length - 1];

        // If we’re at a hard break, include the line ending in there.
        if (getData('atHardBreak')) {
          context.children[context.children.length - 1].position.end = point(
            token.end
          );

          setData('atHardBreak');
          return
        }

        if (
          !getData('setextHeadingSlurpLineEnding') &&
          config.canContainEols.indexOf(context.type) > -1
        ) {
          onenterdata.call(this, token);
          onexitdata.call(this, token);
        }
      }

      function onexithardbreak() {
        setData('atHardBreak', true);
      }

      function onexithtmlflow() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexithtmltext() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitcodetext() {
        var data = this.resume();
        this.stack[this.stack.length - 1].value = data;
      }

      function onexitlink() {
        var context = this.stack[this.stack.length - 1];

        // To do: clean.
        if (getData('inReference')) {
          context.type += 'Reference';
          context.referenceType = getData('referenceType') || 'shortcut';
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }

        setData('referenceType');
      }

      function onexitimage() {
        var context = this.stack[this.stack.length - 1];

        // To do: clean.
        if (getData('inReference')) {
          context.type += 'Reference';
          context.referenceType = getData('referenceType') || 'shortcut';
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }

        setData('referenceType');
      }

      function onexitlabeltext(token) {
        this.stack[this.stack.length - 2].identifier = normalizeIdentifier(
          this.sliceSerialize(token)
        ).toLowerCase();
      }

      function onexitlabel() {
        var fragment = this.stack[this.stack.length - 1];
        var value = this.resume();

        this.stack[this.stack.length - 1].label = value;

        // Assume a reference.
        setData('inReference', true);

        if (this.stack[this.stack.length - 1].type === 'link') {
          this.stack[this.stack.length - 1].children = fragment.children;
        } else {
          this.stack[this.stack.length - 1].alt = value;
        }
      }

      function onexitresourcedestinationstring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].url = data;
      }

      function onexitresourcetitlestring() {
        var data = this.resume();
        this.stack[this.stack.length - 1].title = data;
      }

      function onexitresource() {
        setData('inReference');
      }

      function onenterreference() {
        setData('referenceType', 'collapsed');
      }

      function onexitreferencestring(token) {
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier(
          this.sliceSerialize(token)
        ).toLowerCase();
        setData('referenceType', 'full');
      }

      function onexitcharacterreferencemarker(token) {
        setData('characterReferenceType', token.type);
      }

      function onexitcharacterreferencevalue(token) {
        var data = this.sliceSerialize(token);
        var type = getData('characterReferenceType');
        var value;
        var tail;

        if (type) {
          value = safeFromInt(
            data,
            type === 'characterReferenceMarkerNumeric' ? 10 : 16
          );

          setData('characterReferenceType');
        } else {
          value = decode(data);
        }

        tail = this.stack.pop();
        tail.value += value;
        tail.position.end = point(token.end);
      }

      function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url = this.sliceSerialize(token);
      }

      function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url =
          'mailto:' + this.sliceSerialize(token);
      }

      //
      // Creaters.
      //

      function blockQuote() {
        return {type: 'blockquote', children: []}
      }

      function codeFlow() {
        return {type: 'code', lang: null, meta: null, value: ''}
      }

      function codeText() {
        return {type: 'inlineCode', value: ''}
      }

      function definition() {
        return {
          type: 'definition',
          identifier: '',
          label: null,
          title: null,
          url: ''
        }
      }

      function emphasis() {
        return {type: 'emphasis', children: []}
      }

      function heading() {
        return {type: 'heading', depth: undefined, children: []}
      }

      function hardBreak() {
        return {type: 'break'}
      }

      function html() {
        return {type: 'html', value: ''}
      }

      function image() {
        return {type: 'image', title: null, url: '', alt: null}
      }

      function link() {
        return {type: 'link', title: null, url: '', children: []}
      }

      function list(token) {
        return {
          type: 'list',
          ordered: token.type === 'listOrdered',
          start: null,
          spread: token._spread,
          children: []
        }
      }

      function listItem(token) {
        return {
          type: 'listItem',
          spread: token._spread,
          checked: null,
          children: []
        }
      }

      function paragraph() {
        return {type: 'paragraph', children: []}
      }

      function strong() {
        return {type: 'strong', children: []}
      }

      function text() {
        return {type: 'text', value: ''}
      }

      function thematicBreak() {
        return {type: 'thematicBreak'}
      }
    }

    function configure(config, extensions) {
      var index = -1;

      while (++index < extensions.length) {
        extension(config, extensions[index]);
      }

      return config
    }

    function extension(config, extension) {
      var key;
      var left;

      for (key in extension) {
        left = own.call(config, key) ? config[key] : (config[key] = {});

        if (key === 'canContainEols' || key === 'transforms') {
          config[key] = [].concat(left, extension[key]);
        } else {
          Object.assign(left, extension[key]);
        }
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {

    	module.exports = dist;
    } (mdastUtilFromMarkdown));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var remarkParse = parse$1;

    var fromMarkdown = mdastUtilFromMarkdown.exports;

    function parse$1(options) {
      var self = this;

      this.Parser = parse;

      function parse(doc) {
        return fromMarkdown(
          doc,
          Object.assign({}, self.data('settings'), options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: self.data('micromarkExtensions') || [],
            mdastExtensions: self.data('fromMarkdownExtensions') || []
          })
        )
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /* Expose. */
    var unistUtilVisitParents$1 = visitParents$2;

    /* Visit. */
    function visitParents$2(tree, type, visitor) {
      var stack = [];

      if (typeof type === 'function') {
        visitor = type;
        type = null;
      }

      one(tree);

      /* Visit a single node. */
      function one(node) {
        var result;

        if (!type || node.type === type) {
          result = visitor(node, stack.concat());
        }

        if (node.children && result !== false) {
          return all(node.children, node)
        }

        return result
      }

      /* Visit children in `parent`. */
      function all(children, parent) {
        var length = children.length;
        var index = -1;
        var child;

        stack.push(parent);

        while (++index < length) {
          child = children[index];

          if (child && one(child) === false) {
            return false
          }
        }

        stack.pop();

        return true
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var visitWithParents = unistUtilVisitParents$1;

    function addListMetadata$1() {
      return function (ast) {
        visitWithParents(ast, 'list', function (listNode, parents) {
          var depth = 0, i, n;
          for (i = 0, n = parents.length; i < n; i++) {
            if (parents[i].type === 'list') depth += 1;
          }
          for (i = 0, n = listNode.children.length; i < n; i++) {
            var child = listNode.children[i];
            child.index = i;
            child.ordered = listNode.ordered;
          }
          listNode.depth = depth;
        });
        return ast;
      };
    }

    var mdastAddListMetadata = addListMetadata$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var convert_1 = convert$1;

    function convert$1(test) {
      if (test == null) {
        return ok
      }

      if (typeof test === 'string') {
        return typeFactory(test)
      }

      if (typeof test === 'object') {
        return 'length' in test ? anyFactory(test) : allFactory(test)
      }

      if (typeof test === 'function') {
        return test
      }

      throw new Error('Expected function, string, or object as test')
    }

    // Utility assert each property in `test` is represented in `node`, and each
    // values are strictly equal.
    function allFactory(test) {
      return all

      function all(node) {
        var key;

        for (key in test) {
          if (node[key] !== test[key]) return false
        }

        return true
      }
    }

    function anyFactory(tests) {
      var checks = [];
      var index = -1;

      while (++index < tests.length) {
        checks[index] = convert$1(tests[index]);
      }

      return any

      function any() {
        var index = -1;

        while (++index < checks.length) {
          if (checks[index].apply(this, arguments)) {
            return true
          }
        }

        return false
      }
    }

    // Utility to convert a string into a function which checks a given node’s type
    // for said string.
    function typeFactory(test) {
      return type

      function type(node) {
        return Boolean(node && node.type === test)
      }
    }

    // Utility to return true.
    function ok() {
      return true
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var color_1 = color$1;
    function color$1(d) {
      return '\u001B[33m' + d + '\u001B[39m'
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unistUtilVisitParents = visitParents$1;

    var convert = convert_1;
    var color = color_1;

    var CONTINUE$1 = true;
    var SKIP$1 = 'skip';
    var EXIT$1 = false;

    visitParents$1.CONTINUE = CONTINUE$1;
    visitParents$1.SKIP = SKIP$1;
    visitParents$1.EXIT = EXIT$1;

    function visitParents$1(tree, test, visitor, reverse) {
      var step;
      var is;

      if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
      }

      is = convert(test);
      step = reverse ? -1 : 1;

      factory(tree, null, [])();

      function factory(node, index, parents) {
        var value = typeof node === 'object' && node !== null ? node : {};
        var name;

        if (typeof value.type === 'string') {
          name =
            typeof value.tagName === 'string'
              ? value.tagName
              : typeof value.name === 'string'
              ? value.name
              : undefined;

          visit.displayName =
            'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')';
        }

        return visit

        function visit() {
          var grandparents = parents.concat(node);
          var result = [];
          var subresult;
          var offset;

          if (!test || is(node, index, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node, parents));

            if (result[0] === EXIT$1) {
              return result
            }
          }

          if (node.children && result[0] !== SKIP$1) {
            offset = (reverse ? node.children.length : -1) + step;

            while (offset > -1 && offset < node.children.length) {
              subresult = factory(node.children[offset], offset, grandparents)();

              if (subresult[0] === EXIT$1) {
                return subresult
              }

              offset =
                typeof subresult[1] === 'number' ? subresult[1] : offset + step;
            }
          }

          return result
        }
      }
    }

    function toResult(value) {
      if (value !== null && typeof value === 'object' && 'length' in value) {
        return value
      }

      if (typeof value === 'number') {
        return [CONTINUE$1, value]
      }

      return [value]
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var unistUtilVisit = visit$4;

    var visitParents = unistUtilVisitParents;

    var CONTINUE = visitParents.CONTINUE;
    var SKIP = visitParents.SKIP;
    var EXIT = visitParents.EXIT;

    visit$4.CONTINUE = CONTINUE;
    visit$4.SKIP = SKIP;
    visit$4.EXIT = EXIT;

    function visit$4(tree, test, visitor, reverse) {
      if (typeof test === 'function' && typeof visitor !== 'function') {
        reverse = visitor;
        visitor = test;
        test = null;
      }

      visitParents(tree, test, overload, reverse);

      function overload(node, parents) {
        var parent = parents[parents.length - 1];
        var index = parent ? parent.children.indexOf(node) : null;
        return visitor(node, index, parent)
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    /**
     * Naive, simple plugin to match inline nodes without attributes
     * This allows say <strong>foo</strong>, but not <strong class="very">foo</strong>
     * For proper HTML support, you'll want a different plugin
     **/
    var visit$3 = unistUtilVisit;

    var type = 'virtualHtml';
    var selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
    var simpleTagRe = /^<(\/?)([a-z]+)\s*>$/;

    var naiveHtml$1 = function (tree) {
      var open;
      var currentParent;
      visit$3(tree, 'html', function (node, index, parent) {
        if (currentParent !== parent) {
          open = [];
          currentParent = parent;
        }

        var selfClosing = getSelfClosing(node);

        if (selfClosing) {
          parent.children.splice(index, 1, {
            type: type,
            tag: selfClosing,
            position: node.position
          });
          return true;
        }

        var current = getSimpleTag(node);

        if (!current) {
          return true;
        }

        var matching = findAndPull(open, current.tag);

        if (matching) {
          parent.children.splice(index, 0, virtual(current, matching, parent));
        } else if (!current.opening) {
          open.push(current);
        }

        return true;
      }, true // Iterate in reverse
      );
      return tree;
    };

    function findAndPull(open, matchingTag) {
      var i = open.length;

      while (i--) {
        if (open[i].tag === matchingTag) {
          return open.splice(i, 1)[0];
        }
      }

      return false;
    }

    function getSimpleTag(node, parent) {
      var match = node.value.match(simpleTagRe);
      return match ? {
        tag: match[2],
        opening: !match[1],
        node: node
      } : false;
    }

    function getSelfClosing(node) {
      var match = node.value.match(selfClosingRe);
      return match ? match[1] : false;
    }

    function virtual(fromNode, toNode, parent) {
      var fromIndex = parent.children.indexOf(fromNode.node);
      var toIndex = parent.children.indexOf(toNode.node);
      var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
      var children = extracted.slice(1, -1);
      return {
        type: type,
        children: children,
        tag: fromNode.tag,
        position: {
          start: fromNode.node.position.start,
          end: toNode.node.position.end,
          indent: []
        }
      };
    }

    var disallowNode$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var visit$2 = unistUtilVisit;

    var splice = [].splice;

    disallowNode$1.ofType = function (types, mode) {
      return ifNotMatch(allow, mode);

      function allow(node, index, parent) {
        return !types.includes(node.type);
      }
    };

    disallowNode$1.ifNotMatch = ifNotMatch;

    function ifNotMatch(allow, mode) {
      return transform;

      function transform(tree) {
        visit$2(tree, filter);
        return tree;
      } // eslint-disable-next-line consistent-return


      function filter(node, index, parent) {
        if (parent && !allow(node, index, parent)) {
          var parameters = [index, 1];

          if (mode === 'unwrap' && node.children) {
            parameters = parameters.concat(node.children);
          }

          splice.apply(parent.children, parameters);
          return index;
        }
      }
    }

    var reactIs = {exports: {}};

    var reactIs_production_min = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
    Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
    function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
    reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
    reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
    reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {

    	{
    	  module.exports = reactIs_production_min;
    	}
    } (reactIs));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var React$1 = React__default["default"];

    var xtend$2 = immutable;

    var ReactIs = reactIs.exports;

    function astToReact$1(node, options) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var renderer = options.renderers[node.type]; // Nodes created by plugins do not have positional info, in which case we set
      // an object that matches the positon interface.

      if (!node.position) {
        node.position = {
          start: {
            line: null,
            column: null,
            offset: null
          },
          end: {
            line: null,
            column: null,
            offset: null
          }
        };
      }

      var pos = node.position.start;
      var key = [node.type, pos.line, pos.column, index].join('-');

      if (!ReactIs.isValidElementType(renderer)) {
        throw new Error("Renderer for type `".concat(node.type, "` not defined or is not renderable"));
      }

      var nodeProps = getNodeProps(node, key, options, renderer, parent, index);
      return React$1.createElement(renderer, nodeProps, nodeProps.children || resolveChildren() || undefined);

      function resolveChildren() {
        return node.children && node.children.map(function (childNode, i) {
          return astToReact$1(childNode, options, {
            node: node,
            props: nodeProps
          }, i);
        });
      }
    } // eslint-disable-next-line max-params, complexity


    function getNodeProps(node, key, opts, renderer, parent, index) {
      var props = {
        key: key
      };
      var isSimpleRenderer = typeof renderer === 'string' || renderer === React$1.Fragment; // `sourcePos` is true if the user wants source information (line/column info from markdown source)

      if (opts.sourcePos && node.position) {
        props['data-sourcepos'] = flattenPosition(node.position);
      }

      if (opts.rawSourcePos && !isSimpleRenderer) {
        props.sourcePosition = node.position;
      } // If `includeNodeIndex` is true, pass node index info to all non-tag renderers


      if (opts.includeNodeIndex && parent.node && parent.node.children && !isSimpleRenderer) {
        props.index = parent.node.children.indexOf(node);
        props.parentChildCount = parent.node.children.length;
      }

      var ref = node.identifier !== null && node.identifier !== undefined ?
      /* istanbul ignore next - plugins could inject an undefined reference. */
      opts.definitions[node.identifier.toUpperCase()] || {} : null;

      switch (node.type) {
        case 'root':
          assignDefined(props, {
            className: opts.className
          });
          break;

        case 'text':
          props.nodeKey = key;
          props.children = node.value;
          break;

        case 'heading':
          props.level = node.depth;
          break;

        case 'list':
          props.start = node.start;
          props.ordered = node.ordered;
          props.spread = node.spread;
          props.depth = node.depth;
          break;

        case 'listItem':
          props.checked = node.checked;
          props.spread = node.spread;
          props.ordered = node.ordered;
          props.index = node.index;
          props.children = getListItemChildren(node, parent).map(function (childNode, i) {
            return astToReact$1(childNode, opts, {
              node: node,
              props: props
            }, i);
          });
          break;

        case 'definition':
          assignDefined(props, {
            identifier: node.identifier,
            title: node.title,
            url: node.url
          });
          break;

        case 'code':
          assignDefined(props, {
            language: node.lang && node.lang.split(/\s/, 1)[0]
          });
          break;

        case 'inlineCode':
          props.children = node.value;
          props.inline = true;
          break;

        case 'link':
          assignDefined(props, {
            title: node.title || undefined,
            target: typeof opts.linkTarget === 'function' ? opts.linkTarget(node.url, node.children, node.title) : opts.linkTarget,
            href: opts.transformLinkUri ? opts.transformLinkUri(node.url, node.children, node.title) : node.url
          });
          break;

        case 'image':
          assignDefined(props, {
            src: opts.transformImageUri ? opts.transformImageUri(node.url, node.children, node.title, node.alt) : node.url,
            alt: node.alt || '',
            title: node.title || undefined
          });
          break;

        case 'linkReference':
          assignDefined(props, xtend$2(ref, {
            href: opts.transformLinkUri ? opts.transformLinkUri(ref.href) : ref.href
          }));
          break;

        case 'imageReference':
          assignDefined(props, {
            src: opts.transformImageUri && ref.href ? opts.transformImageUri(ref.href, node.children, ref.title, node.alt) : ref.href,
            alt: node.alt || '',
            title: ref.title || undefined
          });
          break;

        case 'table':
        case 'tableHead':
        case 'tableBody':
          props.columnAlignment = node.align;
          break;

        case 'tableRow':
          props.isHeader = parent.node.type === 'tableHead';
          props.columnAlignment = parent.props.columnAlignment;
          break;

        case 'tableCell':
          assignDefined(props, {
            isHeader: parent.props.isHeader,
            align: parent.props.columnAlignment[index]
          });
          break;

        case 'virtualHtml':
          props.tag = node.tag;
          break;

        case 'html':
          // @todo find a better way than this
          props.isBlock = node.position.start.line !== node.position.end.line;
          props.allowDangerousHtml = opts.allowDangerousHtml;
          props.escapeHtml = opts.escapeHtml;
          props.skipHtml = opts.skipHtml;
          break;

        case 'parsedHtml':
          {
            var parsedChildren;

            if (node.children) {
              parsedChildren = node.children.map(function (child, i) {
                return astToReact$1(child, opts, {
                  node: node,
                  props: props
                }, i);
              });
            }

            props.allowDangerousHtml = opts.allowDangerousHtml;
            props.escapeHtml = opts.escapeHtml;
            props.skipHtml = opts.skipHtml;
            props.element = node.element ? mergeNodeChildren(node, parsedChildren) : null;
            break;
          }

        default:
          assignDefined(props, xtend$2(node, {
            type: undefined,
            position: undefined,
            children: undefined
          }));
      }

      if (!isSimpleRenderer && node.value) {
        props.value = node.value;
      }

      if (!isSimpleRenderer) {
        props.node = node;
      }

      return props;
    }

    function assignDefined(target, attrs) {
      for (var key in attrs) {
        if (typeof attrs[key] !== 'undefined') {
          target[key] = attrs[key];
        }
      }
    }

    function mergeNodeChildren(node, parsedChildren) {
      var el = node.element;

      if (Array.isArray(el)) {
        /* istanbul ignore next - `div` fallback for old React. */
        var Fragment = React$1.Fragment || 'div';
        return React$1.createElement(Fragment, null, el);
      }

      if (el.props.children || parsedChildren) {
        var children = React$1.Children.toArray(el.props.children).concat(parsedChildren);
        return React$1.cloneElement(el, null, children);
      }

      return React$1.cloneElement(el, null);
    }

    function flattenPosition(pos) {
      return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');
    }

    function getListItemChildren(node, parent) {
      /* istanbul ignore next - list items are always in a list, but best to be sure. */
      var loose = parent && parent.node ? listLoose(parent.node) : listItemLoose(node);
      return loose ? node.children : unwrapParagraphs(node);
    }

    function unwrapParagraphs(node) {
      return node.children.reduce(function (array, child) {
        return array.concat(child.type === 'paragraph' ? child.children : [child]);
      }, []);
    }

    function listLoose(node) {
      var children = node.children;
      var loose = node.spread;
      var index = -1;

      while (!loose && ++index < children.length) {
        loose = listItemLoose(children[index]);
      }

      return loose;
    }

    function listItemLoose(node) {
      var spread = node.spread;
      /* istanbul ignore next - spread is present from remark-parse, but maybe plugins don’t set it. */

      return spread === undefined || spread === null ? node.children.length > 1 : spread;
    }

    var astToReact_1 = astToReact$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var visit$1 = unistUtilVisit;

    var wrapTableRows$1 = function (node) {
      visit$1(node, 'table', wrap);
      return node;
    };

    function wrap(table) {
      var children = table.children;
      table.children = [{
        type: 'tableHead',
        align: table.align,
        children: [children[0]],
        position: children[0].position
      }];

      if (children.length > 1) {
        table.children.push({
          type: 'tableBody',
          align: table.align,
          children: children.slice(1),
          position: {
            start: children[1].position.start,
            end: children[children.length - 1].position.end
          }
        });
      }
    }

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var visit = unistUtilVisit;

    var getDefinitions$1 = function getDefinitions(tree) {
      var definitions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      visit(tree, 'definition', function (node) {
        var identifier = node.identifier.toUpperCase();
        if (identifier in definitions) return;
        definitions[identifier] = {
          href: node.url,
          title: node.title
        };
      });
      return definitions;
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var protocols = ['http', 'https', 'mailto', 'tel'];

    var uriTransformer$1 = function uriTransformer(uri) {
      var url = (uri || '').trim();
      var first = url.charAt(0);

      if (first === '#' || first === '/') {
        return url;
      }

      var colon = url.indexOf(':');

      if (colon === -1) {
        return url;
      }

      var length = protocols.length;
      var index = -1;

      while (++index < length) {
        var protocol = protocols[index];

        if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
          return url;
        }
      }

      index = url.indexOf('?');

      if (index !== -1 && colon > index) {
        return url;
      }

      index = url.indexOf('#');

      if (index !== -1 && colon > index) {
        return url;
      } // eslint-disable-next-line no-script-url


      return 'javascript:void(0)';
    };

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* eslint-disable react/prop-types, react/no-multi-comp */

    var xtend$1 = immutable;

    var React = React__default["default"];
    /* istanbul ignore next - Don’t crash on old React. */


    var supportsStringRender = parseInt((React.version || '16').slice(0, 2), 10) >= 16;
    var createElement = React.createElement;
    var renderers = {
      break: 'br',
      paragraph: 'p',
      emphasis: 'em',
      strong: 'strong',
      thematicBreak: 'hr',
      blockquote: 'blockquote',
      delete: 'del',
      link: 'a',
      image: 'img',
      linkReference: 'a',
      imageReference: 'img',
      table: SimpleRenderer.bind(null, 'table'),
      tableHead: SimpleRenderer.bind(null, 'thead'),
      tableBody: SimpleRenderer.bind(null, 'tbody'),
      tableRow: SimpleRenderer.bind(null, 'tr'),
      tableCell: TableCell,
      root: Root,
      text: TextRenderer,
      list: List,
      listItem: ListItem,
      definition: NullRenderer,
      heading: Heading,
      inlineCode: InlineCode,
      code: CodeBlock,
      html: Html,
      virtualHtml: VirtualHtml,
      parsedHtml: ParsedHtml
    };

    function TextRenderer(props) {
      /* istanbul ignore next - a text node w/o a value could be injected by plugins */
      var children = props.children || '';
      /* istanbul ignore next - `span` is a fallback for old React. */

      return supportsStringRender ? children : createElement('span', null, children);
    }

    function Root(props) {
      var className = props.className;
      var root = !className && React.Fragment || 'div';
      return createElement(root, className ? {
        className: className
      } : null, props.children);
    }

    function SimpleRenderer(tag, props) {
      return createElement(tag, getCoreProps(props), props.children);
    }

    function TableCell(props) {
      var style = props.align ? {
        textAlign: props.align
      } : undefined;
      var coreProps = getCoreProps(props);
      return createElement(props.isHeader ? 'th' : 'td', style ? xtend$1({
        style: style
      }, coreProps) : coreProps, props.children);
    }

    function Heading(props) {
      return createElement("h".concat(props.level), getCoreProps(props), props.children);
    }

    function List(props) {
      var attrs = getCoreProps(props);

      if (props.start !== null && props.start !== 1 && props.start !== undefined) {
        attrs.start = props.start.toString();
      }

      return createElement(props.ordered ? 'ol' : 'ul', attrs, props.children);
    }

    function ListItem(props) {
      var checkbox = null;

      if (props.checked !== null && props.checked !== undefined) {
        var checked = props.checked;
        checkbox = createElement('input', {
          type: 'checkbox',
          checked: checked,
          readOnly: true
        });
      }

      return createElement('li', getCoreProps(props), checkbox, props.children);
    }

    function CodeBlock(props) {
      var className = props.language && "language-".concat(props.language);
      var code = createElement('code', className ? {
        className: className
      } : null, props.value);
      return createElement('pre', getCoreProps(props), code);
    }

    function InlineCode(props) {
      return createElement('code', getCoreProps(props), props.children);
    }

    function Html(props) {
      if (props.skipHtml) {
        return null;
      }

      var dangerous = props.allowDangerousHtml || props.escapeHtml === false;
      var tag = props.isBlock ? 'div' : 'span';

      if (!dangerous) {
        /* istanbul ignore next - `tag` is a fallback for old React. */
        return createElement(React.Fragment || tag, null, props.value);
      }

      var nodeProps = {
        dangerouslySetInnerHTML: {
          __html: props.value
        }
      };
      return createElement(tag, nodeProps);
    }

    function ParsedHtml(props) {
      /* To do: `React.cloneElement` is slow, is it really needed? */
      return props['data-sourcepos'] ? React.cloneElement(props.element, {
        'data-sourcepos': props['data-sourcepos']
      }) : props.element;
    }

    function VirtualHtml(props) {
      return createElement(props.tag, getCoreProps(props), props.children);
    }

    function NullRenderer() {
      return null;
    }

    function getCoreProps(props) {
      var source = props['data-sourcepos'];
      /* istanbul ignore next - nodes from plugins w/o position */

      return source ? {
        'data-sourcepos': source
      } : {};
    }

    var symbols$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var HtmlParser = '__RMD_HTML_PARSER__';
    /* istanbul ignore next - Fallback for `Symbol`. */

    symbols$1.HtmlParser = typeof Symbol === 'undefined' ? HtmlParser : Symbol(HtmlParser);

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    var xtend = immutable;

    var unified = unified_1;

    var parse = remarkParse;

    var PropTypes = propTypes$1.exports;

    var addListMetadata = mdastAddListMetadata;

    var naiveHtml = naiveHtml$1;

    var disallowNode = disallowNode$1;

    var astToReact = astToReact_1;

    var wrapTableRows = wrapTableRows$1;

    var getDefinitions = getDefinitions$1;

    var uriTransformer = uriTransformer$1;

    var defaultRenderers = renderers;

    var symbols = symbols$1;

    var allTypes = Object.keys(defaultRenderers);

    var ReactMarkdown = function ReactMarkdown(props) {
      // To do in next major: remove `source`.
      var src = props.source || props.children || '';

      if (props.allowedTypes && props.disallowedTypes) {
        throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');
      }

      var renderers = xtend(defaultRenderers, props.renderers);
      var processor = unified().use(parse).use(props.plugins || []); // eslint-disable-next-line no-sync

      var tree = processor.runSync(processor.parse(src));
      var renderProps = xtend(props, {
        renderers: renderers,
        definitions: getDefinitions(tree)
      });
      determineAstToReactTransforms(props).forEach(function (transform) {
        tree = transform(tree, renderProps);
      });
      return tree;
    };

    function determineAstToReactTransforms(props) {
      var transforms = [wrapTableRows, addListMetadata()];
      var disallowedTypes = props.disallowedTypes;

      if (props.allowedTypes) {
        disallowedTypes = allTypes.filter(function (type) {
          return type !== 'root' && props.allowedTypes.indexOf(type) === -1;
        });
      }

      var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';

      if (disallowedTypes && disallowedTypes.length > 0) {
        transforms.push(disallowNode.ofType(disallowedTypes, removalMethod));
      }

      if (props.allowNode) {
        transforms.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));
      } // To do in next major: remove `escapeHtml`.


      var renderHtml = (props.allowDangerousHtml || props.escapeHtml === false) && !props.skipHtml;
      var hasHtmlParser = (props.astPlugins || []).some(function (transform) {
        return transform.identity === symbols.HtmlParser;
      });

      if (renderHtml && !hasHtmlParser) {
        transforms.push(naiveHtml);
      }

      if (props.astPlugins) {
        transforms = transforms.concat(props.astPlugins);
      } // Add the final transform to turn everything into React.


      transforms.push(astToReact);
      return transforms;
    }

    ReactMarkdown.defaultProps = {
      transformLinkUri: uriTransformer
    };
    ReactMarkdown.propTypes = {
      className: PropTypes.string,
      source: PropTypes.string,
      children: PropTypes.string,
      sourcePos: PropTypes.bool,
      rawSourcePos: PropTypes.bool,
      escapeHtml: PropTypes.bool,
      allowDangerousHtml: PropTypes.bool,
      skipHtml: PropTypes.bool,
      allowNode: PropTypes.func,
      allowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
      disallowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),
      transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
      linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
      transformImageUri: PropTypes.func,
      astPlugins: PropTypes.arrayOf(PropTypes.func),
      unwrapDisallowed: PropTypes.bool,
      renderers: PropTypes.object,
      plugins: PropTypes.array
    };
    ReactMarkdown.types = allTypes;
    ReactMarkdown.renderers = defaultRenderers;
    ReactMarkdown.uriTransformer = uriTransformer;
    var reactMarkdown = ReactMarkdown;

    var linkifyjs = {exports: {}};

    var linkify = {};

    var _class$4 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    _class$4.__esModule = true;
    _class$4.inherits = inherits;
    function inherits(parent, child) {
    	var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    	var extended = Object.create(parent.prototype);
    	for (var p in props) {
    		extended[p] = props[p];
    	}
    	extended.constructor = child;
    	child.prototype = extended;
    	return child;
    }

    var options$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    options$1.__esModule = true;

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    var defaults = {
    	defaultProtocol: 'http',
    	events: null,
    	format: noop,
    	formatHref: noop,
    	nl2br: false,
    	tagName: 'a',
    	target: typeToTarget,
    	validate: true,
    	ignoreTags: [],
    	attributes: null,
    	className: 'linkified' // Deprecated value - no default class will be provided in the future
    };

    options$1.defaults = defaults;
    options$1.Options = Options;
    options$1.contains = contains;


    function Options(opts) {
    	opts = opts || {};

    	this.defaultProtocol = opts.hasOwnProperty('defaultProtocol') ? opts.defaultProtocol : defaults.defaultProtocol;
    	this.events = opts.hasOwnProperty('events') ? opts.events : defaults.events;
    	this.format = opts.hasOwnProperty('format') ? opts.format : defaults.format;
    	this.formatHref = opts.hasOwnProperty('formatHref') ? opts.formatHref : defaults.formatHref;
    	this.nl2br = opts.hasOwnProperty('nl2br') ? opts.nl2br : defaults.nl2br;
    	this.tagName = opts.hasOwnProperty('tagName') ? opts.tagName : defaults.tagName;
    	this.target = opts.hasOwnProperty('target') ? opts.target : defaults.target;
    	this.validate = opts.hasOwnProperty('validate') ? opts.validate : defaults.validate;
    	this.ignoreTags = [];

    	// linkAttributes and linkClass is deprecated
    	this.attributes = opts.attributes || opts.linkAttributes || defaults.attributes;
    	this.className = opts.hasOwnProperty('className') ? opts.className : opts.linkClass || defaults.className;

    	// Make all tags names upper case
    	var ignoredTags = opts.hasOwnProperty('ignoreTags') ? opts.ignoreTags : defaults.ignoreTags;
    	for (var i = 0; i < ignoredTags.length; i++) {
    		this.ignoreTags.push(ignoredTags[i].toUpperCase());
    	}
    }

    Options.prototype = {
    	/**
      * Given the token, return all options for how it should be displayed
      */
    	resolve: function resolve(token) {
    		var href = token.toHref(this.defaultProtocol);
    		return {
    			formatted: this.get('format', token.toString(), token),
    			formattedHref: this.get('formatHref', href, token),
    			tagName: this.get('tagName', href, token),
    			className: this.get('className', href, token),
    			target: this.get('target', href, token),
    			events: this.getObject('events', href, token),
    			attributes: this.getObject('attributes', href, token)
    		};
    	},


    	/**
      * Returns true or false based on whether a token should be displayed as a
      * link based on the user options. By default,
      */
    	check: function check(token) {
    		return this.get('validate', token.toString(), token);
    	},


    	// Private methods

    	/**
      * Resolve an option's value based on the value of the option and the given
      * params.
      * @param {String} key Name of option to use
      * @param operator will be passed to the target option if it's method
      * @param {MultiToken} token The token from linkify.tokenize
      */
    	get: function get(key, operator, token) {
    		var optionValue = void 0,
    		    option = this[key];
    		if (!option) {
    			return option;
    		}

    		switch (typeof option === 'undefined' ? 'undefined' : _typeof(option)) {
    			case 'function':
    				return option(operator, token.type);
    			case 'object':
    				optionValue = option.hasOwnProperty(token.type) ? option[token.type] : defaults[key];
    				return typeof optionValue === 'function' ? optionValue(operator, token.type) : optionValue;
    		}

    		return option;
    	},
    	getObject: function getObject(key, operator, token) {
    		var option = this[key];
    		return typeof option === 'function' ? option(operator, token.type) : option;
    	}
    };

    /**
     * Quick indexOf replacement for checking the ignoreTags option
     */
    function contains(arr, value) {
    	for (var i = 0; i < arr.length; i++) {
    		if (arr[i] === value) {
    			return true;
    		}
    	}
    	return false;
    }

    function noop(val) {
    	return val;
    }

    function typeToTarget(href, type) {
    	return type === 'url' ? '_blank' : null;
    }

    var scanner$1 = {};

    var state = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    state.__esModule = true;
    state.stateify = state.TokenState = state.CharacterState = undefined;

    var _class$3 = _class$4;

    function createStateClass() {
    	return function (tClass) {
    		this.j = [];
    		this.T = tClass || null;
    	};
    }

    /**
    	A simple state machine that can emit token classes

    	The `j` property in this class refers to state jumps. It's a
    	multidimensional array where for each element:

    	* index [0] is a symbol or class of symbols to transition to.
    	* index [1] is a State instance which matches

    	The type of symbol will depend on the target implementation for this class.
    	In Linkify, we have a two-stage scanner. Each stage uses this state machine
    	but with a slighly different (polymorphic) implementation.

    	The `T` property refers to the token class.

    	TODO: Can the `on` and `next` methods be combined?

    	@class BaseState
    */
    var BaseState = createStateClass();
    BaseState.prototype = {
    	defaultTransition: false,

    	/**
     	@method constructor
     	@param {Class} tClass Pass in the kind of token to emit if there are
     		no jumps after this state and the state is accepting.
     */

    	/**
     	On the given symbol(s), this machine should go to the given state
     		@method on
     	@param {Array|Mixed} symbol
     	@param {BaseState} state Note that the type of this state should be the
     		same as the current instance (i.e., don't pass in a different
     		subclass)
     */
    	on: function on(symbol, state) {
    		if (symbol instanceof Array) {
    			for (var i = 0; i < symbol.length; i++) {
    				this.j.push([symbol[i], state]);
    			}
    			return this;
    		}
    		this.j.push([symbol, state]);
    		return this;
    	},


    	/**
     	Given the next item, returns next state for that item
     	@method next
     	@param {Mixed} item Should be an instance of the symbols handled by
     		this particular machine.
     	@return {State} state Returns false if no jumps are available
     */
    	next: function next(item) {
    		for (var i = 0; i < this.j.length; i++) {
    			var jump = this.j[i];
    			var symbol = jump[0]; // Next item to check for
    			var state = jump[1]; // State to jump to if items match

    			// compare item with symbol
    			if (this.test(item, symbol)) {
    				return state;
    			}
    		}

    		// Nowhere left to jump!
    		return this.defaultTransition;
    	},


    	/**
     	Does this state accept?
     	`true` only of `this.T` exists
     		@method accepts
     	@return {Boolean}
     */
    	accepts: function accepts() {
    		return !!this.T;
    	},


    	/**
     	Determine whether a given item "symbolizes" the symbol, where symbol is
     	a class of items handled by this state machine.
     		This method should be overriden in extended classes.
     		@method test
     	@param {Mixed} item Does this item match the given symbol?
     	@param {Mixed} symbol
     	@return {Boolean}
     */
    	test: function test(item, symbol) {
    		return item === symbol;
    	},


    	/**
     	Emit the token for this State (just return it in this case)
     	If this emits a token, this instance is an accepting state
     	@method emit
     	@return {Class} T
     */
    	emit: function emit() {
    		return this.T;
    	}
    };

    /**
    	State machine for string-based input

    	@class CharacterState
    	@extends BaseState
    */
    var CharacterState = (0, _class$3.inherits)(BaseState, createStateClass(), {
    	/**
     	Does the given character match the given character or regular
     	expression?
     		@method test
     	@param {String} char
     	@param {String|RegExp} charOrRegExp
     	@return {Boolean}
     */
    	test: function test(character, charOrRegExp) {
    		return character === charOrRegExp || charOrRegExp instanceof RegExp && charOrRegExp.test(character);
    	}
    });

    /**
    	State machine for input in the form of TextTokens

    	@class TokenState
    	@extends BaseState
    */
    var TokenState = (0, _class$3.inherits)(BaseState, createStateClass(), {

    	/**
      * Similar to `on`, but returns the state the results in the transition from
      * the given item
      * @method jump
      * @param {Mixed} item
      * @param {Token} [token]
      * @return state
      */
    	jump: function jump(token) {
    		var tClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    		var state = this.next(new token('')); // dummy temp token
    		if (state === this.defaultTransition) {
    			// Make a new state!
    			state = new this.constructor(tClass);
    			this.on(token, state);
    		} else if (tClass) {
    			state.T = tClass;
    		}
    		return state;
    	},


    	/**
     	Is the given token an instance of the given token class?
     		@method test
     	@param {TextToken} token
     	@param {Class} tokenClass
     	@return {Boolean}
     */
    	test: function test(token, tokenClass) {
    		return token instanceof tokenClass;
    	}
    });

    /**
    	Given a non-empty target string, generates states (if required) for each
    	consecutive substring of characters in str starting from the beginning of
    	the string. The final state will have a special value, as specified in
    	options. All other "in between" substrings will have a default end state.

    	This turns the state machine into a Trie-like data structure (rather than a
    	intelligently-designed DFA).

    	Note that I haven't really tried these with any strings other than
    	DOMAIN.

    	@param {String} str
    	@param {CharacterState} start State to jump from the first character
    	@param {Class} endToken Token class to emit when the given string has been
    		matched and no more jumps exist.
    	@param {Class} defaultToken "Filler token", or which token type to emit when
    		we don't have a full match
    	@return {Array} list of newly-created states
    */
    function stateify(str, start, endToken, defaultToken) {
    	var i = 0,
    	    len = str.length,
    	    state = start,
    	    newStates = [],
    	    nextState = void 0;

    	// Find the next state without a jump to the next character
    	while (i < len && (nextState = state.next(str[i]))) {
    		state = nextState;
    		i++;
    	}

    	if (i >= len) {
    		return [];
    	} // no new tokens were added

    	while (i < len - 1) {
    		nextState = new CharacterState(defaultToken);
    		newStates.push(nextState);
    		state.on(str[i], nextState);
    		state = nextState;
    		i++;
    	}

    	nextState = new CharacterState(endToken);
    	newStates.push(nextState);
    	state.on(str[len - 1], nextState);

    	return newStates;
    }

    state.CharacterState = CharacterState;
    state.TokenState = TokenState;
    state.stateify = stateify;

    var text = {};

    var createTokenClass$1 = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    createTokenClass$1.__esModule = true;
    function createTokenClass() {
    	return function (value) {
    		if (value) {
    			this.v = value;
    		}
    	};
    }

    createTokenClass$1.createTokenClass = createTokenClass;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    text.__esModule = true;
    text.AMPERSAND = text.CLOSEPAREN = text.CLOSEANGLEBRACKET = text.CLOSEBRACKET = text.CLOSEBRACE = text.OPENPAREN = text.OPENANGLEBRACKET = text.OPENBRACKET = text.OPENBRACE = text.WS = text.TLD = text.SYM = text.UNDERSCORE = text.SLASH = text.MAILTO = text.PROTOCOL = text.QUERY = text.POUND = text.PLUS = text.NUM = text.NL = text.LOCALHOST = text.PUNCTUATION = text.DOT = text.COLON = text.AT = text.DOMAIN = text.Base = undefined;

    var _createTokenClass$1 = createTokenClass$1;

    var _class$2 = _class$4;

    /******************************************************************************
    	Text Tokens
    	Tokens composed of strings
    ******************************************************************************/

    /**
    	Abstract class used for manufacturing text tokens.
    	Pass in the value this token represents

    	@class TextToken
    	@abstract
    */
    var TextToken = (0, _createTokenClass$1.createTokenClass)();
    TextToken.prototype = {
    	toString: function toString() {
    		return this.v + '';
    	}
    };

    function inheritsToken(value) {
    	var props = value ? { v: value } : {};
    	return (0, _class$2.inherits)(TextToken, (0, _createTokenClass$1.createTokenClass)(), props);
    }

    /**
    	A valid domain token
    	@class DOMAIN
    	@extends TextToken
    */
    var DOMAIN = inheritsToken();

    /**
    	@class AT
    	@extends TextToken
    */
    var AT = inheritsToken('@');

    /**
    	Represents a single colon `:` character

    	@class COLON
    	@extends TextToken
    */
    var COLON = inheritsToken(':');

    /**
    	@class DOT
    	@extends TextToken
    */
    var DOT = inheritsToken('.');

    /**
    	A character class that can surround the URL, but which the URL cannot begin
    	or end with. Does not include certain English punctuation like parentheses.

    	@class PUNCTUATION
    	@extends TextToken
    */
    var PUNCTUATION = inheritsToken();

    /**
    	The word localhost (by itself)
    	@class LOCALHOST
    	@extends TextToken
    */
    var LOCALHOST = inheritsToken();

    /**
    	Newline token
    	@class NL
    	@extends TextToken
    */
    var NL$1 = inheritsToken('\n');

    /**
    	@class NUM
    	@extends TextToken
    */
    var NUM = inheritsToken();

    /**
    	@class PLUS
    	@extends TextToken
    */
    var PLUS = inheritsToken('+');

    /**
    	@class POUND
    	@extends TextToken
    */
    var POUND = inheritsToken('#');

    /**
    	Represents a web URL protocol. Supported types include

    	* `http:`
    	* `https:`
    	* `ftp:`
    	* `ftps:`

    	@class PROTOCOL
    	@extends TextToken
    */
    var PROTOCOL = inheritsToken();

    /**
    	Represents the start of the email URI protocol

    	@class MAILTO
    	@extends TextToken
    */
    var MAILTO = inheritsToken('mailto:');

    /**
    	@class QUERY
    	@extends TextToken
    */
    var QUERY = inheritsToken('?');

    /**
    	@class SLASH
    	@extends TextToken
    */
    var SLASH = inheritsToken('/');

    /**
    	@class UNDERSCORE
    	@extends TextToken
    */
    var UNDERSCORE = inheritsToken('_');

    /**
    	One ore more non-whitespace symbol.
    	@class SYM
    	@extends TextToken
    */
    var SYM = inheritsToken();

    /**
    	@class TLD
    	@extends TextToken
    */
    var TLD = inheritsToken();

    /**
    	Represents a string of consecutive whitespace characters

    	@class WS
    	@extends TextToken
    */
    var WS = inheritsToken();

    /**
    	Opening/closing bracket classes
    */

    var OPENBRACE = inheritsToken('{');
    var OPENBRACKET = inheritsToken('[');
    var OPENANGLEBRACKET = inheritsToken('<');
    var OPENPAREN = inheritsToken('(');
    var CLOSEBRACE = inheritsToken('}');
    var CLOSEBRACKET = inheritsToken(']');
    var CLOSEANGLEBRACKET = inheritsToken('>');
    var CLOSEPAREN = inheritsToken(')');

    var AMPERSAND = inheritsToken('&');

    text.Base = TextToken;
    text.DOMAIN = DOMAIN;
    text.AT = AT;
    text.COLON = COLON;
    text.DOT = DOT;
    text.PUNCTUATION = PUNCTUATION;
    text.LOCALHOST = LOCALHOST;
    text.NL = NL$1;
    text.NUM = NUM;
    text.PLUS = PLUS;
    text.POUND = POUND;
    text.QUERY = QUERY;
    text.PROTOCOL = PROTOCOL;
    text.MAILTO = MAILTO;
    text.SLASH = SLASH;
    text.UNDERSCORE = UNDERSCORE;
    text.SYM = SYM;
    text.TLD = TLD;
    text.WS = WS;
    text.OPENBRACE = OPENBRACE;
    text.OPENBRACKET = OPENBRACKET;
    text.OPENANGLEBRACKET = OPENANGLEBRACKET;
    text.OPENPAREN = OPENPAREN;
    text.CLOSEBRACE = CLOSEBRACE;
    text.CLOSEBRACKET = CLOSEBRACKET;
    text.CLOSEANGLEBRACKET = CLOSEANGLEBRACKET;
    text.CLOSEPAREN = CLOSEPAREN;
    text.AMPERSAND = AMPERSAND;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    scanner$1.__esModule = true;
    scanner$1.start = scanner$1.run = scanner$1.TOKENS = scanner$1.State = undefined;

    var _state$1 = state;

    var _text$2 = text;

    var TOKENS = _interopRequireWildcard$2(_text$2);

    function _interopRequireWildcard$2(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    var tlds = 'aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|ac|academy|accenture|accountant|accountants|aco|active|actor|ad|adac|ads|adult|ae|aeg|aero|aetna|af|afamilycompany|afl|africa|ag|agakhan|agency|ai|aig|aigo|airbus|airforce|airtel|akdn|al|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|am|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|ao|aol|apartments|app|apple|aq|aquarelle|ar|arab|aramco|archi|army|arpa|art|arte|as|asda|asia|associates|at|athleta|attorney|au|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aw|aws|ax|axa|az|azure|ba|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bb|bbc|bbt|bbva|bcg|bcn|bd|be|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bf|bg|bh|bharti|bi|bible|bid|bike|bing|bingo|bio|biz|bj|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bm|bms|bmw|bn|bnl|bnpparibas|bo|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|br|bradesco|bridgestone|broadway|broker|brother|brussels|bs|bt|budapest|bugatti|build|builders|business|buy|buzz|bv|bw|by|bz|bzh|ca|cab|cafe|cal|call|calvinklein|cam|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|cat|catering|catholic|cba|cbn|cbre|cbs|cc|cd|ceb|center|ceo|cern|cf|cfa|cfd|cg|ch|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|ci|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|ck|cl|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|cm|cn|co|coach|codes|coffee|college|cologne|com|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|coop|corsica|country|coupon|coupons|courses|cr|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cu|cuisinella|cv|cw|cx|cy|cymru|cyou|cz|dabur|dad|dance|data|date|dating|datsun|day|dclk|dds|de|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dj|dk|dm|dnp|do|docs|doctor|dodge|dog|doha|domains|dot|download|drive|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dvr|dz|earth|eat|ec|eco|edeka|edu|education|ee|eg|email|emerck|energy|engineer|engineering|enterprises|epost|epson|equipment|er|ericsson|erni|es|esq|estate|esurance|et|etisalat|eu|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fi|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|fj|fk|flickr|flights|flir|florist|flowers|fly|fm|fo|foo|food|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|fr|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|ga|gal|gallery|gallo|gallup|game|games|gap|garden|gb|gbiz|gd|gdn|ge|gea|gent|genting|george|gf|gg|ggee|gh|gi|gift|gifts|gives|giving|gl|glade|glass|gle|global|globo|gm|gmail|gmbh|gmo|gmx|gn|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|gov|gp|gq|gr|grainger|graphics|gratis|green|gripe|grocery|group|gs|gt|gu|guardian|gucci|guge|guide|guitars|guru|gw|gy|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hk|hkt|hm|hn|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|hospital|host|hosting|hot|hoteles|hotels|hotmail|house|how|hr|hsbc|ht|htc|hu|hughes|hyatt|hyundai|ibm|icbc|ice|icu|id|ie|ieee|ifm|ikano|il|im|imamat|imdb|immo|immobilien|in|industries|infiniti|info|ing|ink|institute|insurance|insure|int|intel|international|intuit|investments|io|ipiranga|iq|ir|irish|is|iselect|ismaili|ist|istanbul|it|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|je|jeep|jetzt|jewelry|jio|jlc|jll|jm|jmp|jnj|jo|jobs|joburg|jot|joy|jp|jpmorgan|jprs|juegos|juniper|kaufen|kddi|ke|kerryhotels|kerrylogistics|kerryproperties|kfh|kg|kh|ki|kia|kim|kinder|kindle|kitchen|kiwi|km|kn|koeln|komatsu|kosher|kp|kpmg|kpn|kr|krd|kred|kuokgroup|kw|ky|kyoto|kz|la|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lb|lc|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|li|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|lk|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|lr|ls|lt|ltd|ltda|lu|lundbeck|lupin|luxe|luxury|lv|ly|ma|macys|madrid|maif|maison|makeup|man|management|mango|map|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mc|mckinsey|md|me|med|media|meet|melbourne|meme|memorial|men|menu|meo|merckmsd|metlife|mg|mh|miami|microsoft|mil|mini|mint|mit|mitsubishi|mk|ml|mlb|mls|mm|mma|mn|mo|mobi|mobile|mobily|moda|moe|moi|mom|monash|money|monster|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|mp|mq|mr|ms|msd|mt|mtn|mtr|mu|museum|mutual|mv|mw|mx|my|mz|na|nab|nadex|nagoya|name|nationwide|natura|navy|nba|nc|ne|nec|net|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nf|nfl|ng|ngo|nhk|ni|nico|nike|nikon|ninja|nissan|nissay|nl|no|nokia|northwesternmutual|norton|now|nowruz|nowtv|np|nr|nra|nrw|ntt|nu|nyc|nz|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|om|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|org|organic|origins|osaka|otsuka|ott|ovh|pa|page|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|pccw|pe|pet|pf|pfizer|pg|ph|pharmacy|phd|philips|phone|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|pk|pl|place|play|playstation|plumbing|plus|pm|pn|pnc|pohl|poker|politie|porn|post|pr|pramerica|praxi|press|prime|pro|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|ps|pt|pub|pw|pwc|py|qa|qpon|quebec|quest|qvc|racing|radio|raid|re|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|ro|rocher|rocks|rodeo|rogers|room|rs|rsvp|ru|rugby|ruhr|run|rw|rwe|ryukyu|sa|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sb|sbi|sbs|sc|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|sd|se|search|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|sg|sh|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shop|shopping|shouji|show|showtime|shriram|si|silk|sina|singles|site|sj|sk|ski|skin|sky|skype|sl|sling|sm|smart|smile|sn|sncf|so|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|sr|srl|srt|st|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|su|sucks|supplies|supply|support|surf|surgery|suzuki|sv|swatch|swiftcover|swiss|sx|sy|sydney|symantec|systems|sz|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tc|tci|td|tdk|team|tech|technology|tel|telecity|telefonica|temasek|tennis|teva|tf|tg|th|thd|theater|theatre|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tj|tjmaxx|tjx|tk|tkmaxx|tl|tm|tmall|tn|to|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|tr|trade|trading|training|travel|travelchannel|travelers|travelersinsurance|trust|trv|tt|tube|tui|tunes|tushu|tv|tvs|tw|tz|ua|ubank|ubs|uconnect|ug|uk|unicom|university|uno|uol|ups|us|uy|uz|va|vacations|vana|vanguard|vc|ve|vegas|ventures|verisign|versicherung|vet|vg|vi|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vn|vodka|volkswagen|volvo|vote|voting|voto|voyage|vu|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|wf|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|ws|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|xn--11b4c3d|xn--1ck2e1b|xn--1qqw23a|xn--2scrj9c|xn--30rr7y|xn--3bst00m|xn--3ds443g|xn--3e0b707e|xn--3hcrj9c|xn--3oq18vl8pn36a|xn--3pxu8k|xn--42c2d9a|xn--45br5cyl|xn--45brj9c|xn--45q11c|xn--4gbrim|xn--54b7fta0cc|xn--55qw42g|xn--55qx5d|xn--5su34j936bgsg|xn--5tzm5g|xn--6frz82g|xn--6qq986b3xl|xn--80adxhks|xn--80ao21a|xn--80aqecdr1a|xn--80asehdb|xn--80aswg|xn--8y0a063a|xn--90a3ac|xn--90ae|xn--90ais|xn--9dbq2a|xn--9et52u|xn--9krt00a|xn--b4w605ferd|xn--bck1b9a5dre4c|xn--c1avg|xn--c2br7g|xn--cck2b3b|xn--cg4bki|xn--clchc0ea0b2g2a9gcd|xn--czr694b|xn--czrs0t|xn--czru2d|xn--d1acj3b|xn--d1alf|xn--e1a4c|xn--eckvdtc9d|xn--efvy88h|xn--estv75g|xn--fct429k|xn--fhbei|xn--fiq228c5hs|xn--fiq64b|xn--fiqs8s|xn--fiqz9s|xn--fjq720a|xn--flw351e|xn--fpcrj9c3d|xn--fzc2c9e2c|xn--fzys8d69uvgm|xn--g2xx48c|xn--gckr3f0f|xn--gecrj9c|xn--gk3at1e|xn--h2breg3eve|xn--h2brj9c|xn--h2brj9c8c|xn--hxt814e|xn--i1b6b1a6a2e|xn--imr513n|xn--io0a7i|xn--j1aef|xn--j1amh|xn--j6w193g|xn--jlq61u9w7b|xn--jvr189m|xn--kcrx77d1x4a|xn--kprw13d|xn--kpry57d|xn--kpu716f|xn--kput3i|xn--l1acc|xn--lgbbat1ad8j|xn--mgb9awbf|xn--mgba3a3ejt|xn--mgba3a4f16a|xn--mgba7c0bbn0a|xn--mgbaakc7dvf|xn--mgbaam7a8h|xn--mgbab2bd|xn--mgbai9azgqp6j|xn--mgbayh7gpa|xn--mgbb9fbpob|xn--mgbbh1a|xn--mgbbh1a71e|xn--mgbc0a9azcg|xn--mgbca7dzdo|xn--mgberp4a5d4ar|xn--mgbgu82a|xn--mgbi4ecexp|xn--mgbpl2fh|xn--mgbt3dhd|xn--mgbtx2b|xn--mgbx4cd0ab|xn--mix891f|xn--mk1bu44c|xn--mxtq1m|xn--ngbc5azd|xn--ngbe9e0a|xn--ngbrx|xn--node|xn--nqv7f|xn--nqv7fs00ema|xn--nyqy26a|xn--o3cw4h|xn--ogbpf8fl|xn--p1acf|xn--p1ai|xn--pbt977c|xn--pgbs0dh|xn--pssy2u|xn--q9jyb4c|xn--qcka1pmc|xn--qxam|xn--rhqv96g|xn--rovu88b|xn--rvc1e0am3e|xn--s9brj9c|xn--ses554g|xn--t60b56a|xn--tckwe|xn--tiq49xqyj|xn--unup4y|xn--vermgensberater-ctb|xn--vermgensberatung-pwb|xn--vhquv|xn--vuq861b|xn--w4r85el8fhu5dnra|xn--w4rs40l|xn--wgbh1c|xn--wgbl6a|xn--xhq521b|xn--xkc2al3hye2a|xn--xkc2dl3a5ee0h|xn--y9a3aq|xn--yfro4i67o|xn--ygbi2ammx|xn--zfr164b|xperia|xxx|xyz|yachts|yahoo|yamaxun|yandex|ye|yodobashi|yoga|yokohama|you|youtube|yt|yun|za|zappos|zara|zero|zip|zippo|zm|zone|zuerich|zw'.split('|'); // macro, see gulpfile.js

    /**
    	The scanner provides an interface that takes a string of text as input, and
    	outputs an array of tokens instances that can be used for easy URL parsing.

    	@module linkify
    	@submodule scanner
    	@main scanner
    */

    var NUMBERS = '0123456789'.split('');
    var ALPHANUM = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');
    var WHITESPACE = [' ', '\f', '\r', '\t', '\v', '\xA0', '\u1680', '\u180E']; // excluding line breaks

    var domainStates = []; // states that jump to DOMAIN on /[a-z0-9]/
    var makeState$1 = function makeState(tokenClass) {
    	return new _state$1.CharacterState(tokenClass);
    };

    // Frequently used states
    var S_START$1 = makeState$1();
    var S_NUM = makeState$1(_text$2.NUM);
    var S_DOMAIN$1 = makeState$1(_text$2.DOMAIN);
    var S_DOMAIN_HYPHEN = makeState$1(); // domain followed by 1 or more hyphen characters
    var S_WS = makeState$1(_text$2.WS);

    // States for special URL symbols
    S_START$1.on('@', makeState$1(_text$2.AT)).on('.', makeState$1(_text$2.DOT)).on('+', makeState$1(_text$2.PLUS)).on('#', makeState$1(_text$2.POUND)).on('?', makeState$1(_text$2.QUERY)).on('/', makeState$1(_text$2.SLASH)).on('_', makeState$1(_text$2.UNDERSCORE)).on(':', makeState$1(_text$2.COLON)).on('{', makeState$1(_text$2.OPENBRACE)).on('[', makeState$1(_text$2.OPENBRACKET)).on('<', makeState$1(_text$2.OPENANGLEBRACKET)).on('(', makeState$1(_text$2.OPENPAREN)).on('}', makeState$1(_text$2.CLOSEBRACE)).on(']', makeState$1(_text$2.CLOSEBRACKET)).on('>', makeState$1(_text$2.CLOSEANGLEBRACKET)).on(')', makeState$1(_text$2.CLOSEPAREN)).on('&', makeState$1(_text$2.AMPERSAND)).on([',', ';', '!', '"', '\''], makeState$1(_text$2.PUNCTUATION));

    // Whitespace jumps
    // Tokens of only non-newline whitespace are arbitrarily long
    S_START$1.on('\n', makeState$1(_text$2.NL)).on(WHITESPACE, S_WS);

    // If any whitespace except newline, more whitespace!
    S_WS.on(WHITESPACE, S_WS);

    // Generates states for top-level domains
    // Note that this is most accurate when tlds are in alphabetical order
    for (var i = 0; i < tlds.length; i++) {
    	var newStates = (0, _state$1.stateify)(tlds[i], S_START$1, _text$2.TLD, _text$2.DOMAIN);
    	domainStates.push.apply(domainStates, newStates);
    }

    // Collect the states generated by different protocls
    var partialProtocolFileStates = (0, _state$1.stateify)('file', S_START$1, _text$2.DOMAIN, _text$2.DOMAIN);
    var partialProtocolFtpStates = (0, _state$1.stateify)('ftp', S_START$1, _text$2.DOMAIN, _text$2.DOMAIN);
    var partialProtocolHttpStates = (0, _state$1.stateify)('http', S_START$1, _text$2.DOMAIN, _text$2.DOMAIN);
    var partialProtocolMailtoStates = (0, _state$1.stateify)('mailto', S_START$1, _text$2.DOMAIN, _text$2.DOMAIN);

    // Add the states to the array of DOMAINeric states
    domainStates.push.apply(domainStates, partialProtocolFileStates);
    domainStates.push.apply(domainStates, partialProtocolFtpStates);
    domainStates.push.apply(domainStates, partialProtocolHttpStates);
    domainStates.push.apply(domainStates, partialProtocolMailtoStates);

    // Protocol states
    var S_PROTOCOL_FILE = partialProtocolFileStates.pop();
    var S_PROTOCOL_FTP = partialProtocolFtpStates.pop();
    var S_PROTOCOL_HTTP = partialProtocolHttpStates.pop();
    var S_MAILTO$1 = partialProtocolMailtoStates.pop();
    var S_PROTOCOL_SECURE = makeState$1(_text$2.DOMAIN);
    var S_FULL_PROTOCOL = makeState$1(_text$2.PROTOCOL); // Full protocol ends with COLON
    var S_FULL_MAILTO = makeState$1(_text$2.MAILTO); // Mailto ends with COLON

    // Secure protocols (end with 's')
    S_PROTOCOL_FTP.on('s', S_PROTOCOL_SECURE).on(':', S_FULL_PROTOCOL);

    S_PROTOCOL_HTTP.on('s', S_PROTOCOL_SECURE).on(':', S_FULL_PROTOCOL);

    domainStates.push(S_PROTOCOL_SECURE);

    // Become protocol tokens after a COLON
    S_PROTOCOL_FILE.on(':', S_FULL_PROTOCOL);
    S_PROTOCOL_SECURE.on(':', S_FULL_PROTOCOL);
    S_MAILTO$1.on(':', S_FULL_MAILTO);

    // Localhost
    var partialLocalhostStates = (0, _state$1.stateify)('localhost', S_START$1, _text$2.LOCALHOST, _text$2.DOMAIN);
    domainStates.push.apply(domainStates, partialLocalhostStates);

    // Everything else
    // DOMAINs make more DOMAINs
    // Number and character transitions
    S_START$1.on(NUMBERS, S_NUM);
    S_NUM.on('-', S_DOMAIN_HYPHEN).on(NUMBERS, S_NUM).on(ALPHANUM, S_DOMAIN$1); // number becomes DOMAIN

    S_DOMAIN$1.on('-', S_DOMAIN_HYPHEN).on(ALPHANUM, S_DOMAIN$1);

    // All the generated states should have a jump to DOMAIN
    for (var _i = 0; _i < domainStates.length; _i++) {
    	domainStates[_i].on('-', S_DOMAIN_HYPHEN).on(ALPHANUM, S_DOMAIN$1);
    }

    S_DOMAIN_HYPHEN.on('-', S_DOMAIN_HYPHEN).on(NUMBERS, S_DOMAIN$1).on(ALPHANUM, S_DOMAIN$1);

    // Set default transition
    S_START$1.defaultTransition = makeState$1(_text$2.SYM);

    /**
    	Given a string, returns an array of TOKEN instances representing the
    	composition of that string.

    	@method run
    	@param {String} str Input string to scan
    	@return {Array} Array of TOKEN instances
    */
    var run$1 = function run(str) {

    	// The state machine only looks at lowercase strings.
    	// This selective `toLowerCase` is used because lowercasing the entire
    	// string causes the length and character position to vary in some in some
    	// non-English strings. This happens only on V8-based runtimes.
    	var lowerStr = str.replace(/[A-Z]/g, function (c) {
    		return c.toLowerCase();
    	});
    	var len = str.length;
    	var tokens = []; // return value

    	var cursor = 0;

    	// Tokenize the string
    	while (cursor < len) {
    		var state = S_START$1;
    		var nextState = null;
    		var tokenLength = 0;
    		var latestAccepting = null;
    		var sinceAccepts = -1;

    		while (cursor < len && (nextState = state.next(lowerStr[cursor]))) {
    			state = nextState;

    			// Keep track of the latest accepting state
    			if (state.accepts()) {
    				sinceAccepts = 0;
    				latestAccepting = state;
    			} else if (sinceAccepts >= 0) {
    				sinceAccepts++;
    			}

    			tokenLength++;
    			cursor++;
    		}

    		if (sinceAccepts < 0) {
    			continue;
    		} // Should never happen

    		// Roll back to the latest accepting state
    		cursor -= sinceAccepts;
    		tokenLength -= sinceAccepts;

    		// Get the class for the new token
    		var TOKEN = latestAccepting.emit(); // Current token class

    		// No more jumps, just make a new token
    		tokens.push(new TOKEN(str.substr(cursor - tokenLength, tokenLength)));
    	}

    	return tokens;
    };

    var start = S_START$1;
    scanner$1.State = _state$1.CharacterState;
    scanner$1.TOKENS = TOKENS;
    scanner$1.run = run$1;
    scanner$1.start = start;

    var parser$1 = {};

    var multi = {};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    multi.__esModule = true;
    multi.URL = multi.TEXT = multi.NL = multi.EMAIL = multi.MAILTOEMAIL = multi.Base = undefined;

    var _createTokenClass = createTokenClass$1;

    var _class$1 = _class$4;

    var _text$1 = text;

    /******************************************************************************
    	Multi-Tokens
    	Tokens composed of arrays of TextTokens
    ******************************************************************************/

    // Is the given token a valid domain token?
    // Should nums be included here?
    function isDomainToken(token) {
    	return token instanceof _text$1.DOMAIN || token instanceof _text$1.TLD;
    }

    /**
    	Abstract class used for manufacturing tokens of text tokens. That is rather
    	than the value for a token being a small string of text, it's value an array
    	of text tokens.

    	Used for grouping together URLs, emails, hashtags, and other potential
    	creations.

    	@class MultiToken
    	@abstract
    */
    var MultiToken = (0, _createTokenClass.createTokenClass)();

    MultiToken.prototype = {
    	/**
     	String representing the type for this token
     	@property type
     	@default 'TOKEN'
     */
    	type: 'token',

    	/**
     	Is this multitoken a link?
     	@property isLink
     	@default false
     */
    	isLink: false,

    	/**
     	Return the string this token represents.
     	@method toString
     	@return {String}
     */
    	toString: function toString() {
    		var result = [];
    		for (var i = 0; i < this.v.length; i++) {
    			result.push(this.v[i].toString());
    		}
    		return result.join('');
    	},


    	/**
     	What should the value for this token be in the `href` HTML attribute?
     	Returns the `.toString` value by default.
     		@method toHref
     	@return {String}
     */
    	toHref: function toHref() {
    		return this.toString();
    	},


    	/**
     	Returns a hash of relevant values for this token, which includes keys
     	* type - Kind of token ('url', 'email', etc.)
     	* value - Original text
     	* href - The value that should be added to the anchor tag's href
     		attribute
     		@method toObject
     	@param {String} [protocol] `'http'` by default
     	@return {Object}
     */
    	toObject: function toObject() {
    		var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';

    		return {
    			type: this.type,
    			value: this.toString(),
    			href: this.toHref(protocol)
    		};
    	}
    };

    /**
    	Represents an arbitrarily mailto email address with the prefix included
    	@class MAILTO
    	@extends MultiToken
    */
    var MAILTOEMAIL = (0, _class$1.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {
    	type: 'email',
    	isLink: true
    });

    /**
    	Represents a list of tokens making up a valid email address
    	@class EMAIL
    	@extends MultiToken
    */
    var EMAIL = (0, _class$1.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {
    	type: 'email',
    	isLink: true,
    	toHref: function toHref() {
    		return 'mailto:' + this.toString();
    	}
    });

    /**
    	Represents some plain text
    	@class TEXT
    	@extends MultiToken
    */
    var TEXT = (0, _class$1.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'text' });

    /**
    	Multi-linebreak token - represents a line break
    	@class NL
    	@extends MultiToken
    */
    var NL = (0, _class$1.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'nl' });

    /**
    	Represents a list of tokens making up a valid URL
    	@class URL
    	@extends MultiToken
    */
    var URL$1 = (0, _class$1.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {
    	type: 'url',
    	isLink: true,

    	/**
     	Lowercases relevant parts of the domain and adds the protocol if
     	required. Note that this will not escape unsafe HTML characters in the
     	URL.
     		@method href
     	@param {String} protocol
     	@return {String}
     */
    	toHref: function toHref() {
    		var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';

    		var hasProtocol = false;
    		var hasSlashSlash = false;
    		var tokens = this.v;
    		var result = [];
    		var i = 0;

    		// Make the first part of the domain lowercase
    		// Lowercase protocol
    		while (tokens[i] instanceof _text$1.PROTOCOL) {
    			hasProtocol = true;
    			result.push(tokens[i].toString().toLowerCase());
    			i++;
    		}

    		// Skip slash-slash
    		while (tokens[i] instanceof _text$1.SLASH) {
    			hasSlashSlash = true;
    			result.push(tokens[i].toString());
    			i++;
    		}

    		// Lowercase all other characters in the domain
    		while (isDomainToken(tokens[i])) {
    			result.push(tokens[i].toString().toLowerCase());
    			i++;
    		}

    		// Leave all other characters as they were written
    		for (; i < tokens.length; i++) {
    			result.push(tokens[i].toString());
    		}

    		result = result.join('');

    		if (!(hasProtocol || hasSlashSlash)) {
    			result = protocol + '://' + result;
    		}

    		return result;
    	},
    	hasProtocol: function hasProtocol() {
    		return this.v[0] instanceof _text$1.PROTOCOL;
    	}
    });

    multi.Base = MultiToken;
    multi.MAILTOEMAIL = MAILTOEMAIL;
    multi.EMAIL = EMAIL;
    multi.NL = NL;
    multi.TEXT = TEXT;
    multi.URL = URL$1;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    parser$1.__esModule = true;
    parser$1.start = parser$1.run = parser$1.TOKENS = parser$1.State = undefined;

    var _state = state;

    var _multi = multi;

    var MULTI_TOKENS = _interopRequireWildcard$1(_multi);

    var _text = text;

    function _interopRequireWildcard$1(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    /**
    	Not exactly parser, more like the second-stage scanner (although we can
    	theoretically hotswap the code here with a real parser in the future... but
    	for a little URL-finding utility abstract syntax trees may be a little
    	overkill).

    	URL format: http://en.wikipedia.org/wiki/URI_scheme
    	Email format: http://en.wikipedia.org/wiki/Email_address (links to RFC in
    	reference)

    	@module linkify
    	@submodule parser
    	@main parser
    */

    var makeState = function makeState(tokenClass) {
    	return new _state.TokenState(tokenClass);
    };

    // The universal starting state.
    var S_START = makeState();

    // Intermediate states for URLs. Note that domains that begin with a protocol
    // are treated slighly differently from those that don't.
    var S_PROTOCOL = makeState(); // e.g., 'http:'
    var S_MAILTO = makeState(); // 'mailto:'
    var S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''
    var S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'
    var S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)
    var S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT
    var S_TLD = makeState(_multi.URL); // (A) Simplest possible URL with no query string
    var S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)
    var S_TLD_PORT = makeState(_multi.URL); // TLD followed by a port number
    var S_URL = makeState(_multi.URL); // Long URL with optional port and maybe query string
    var S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)
    var S_URL_OPENBRACE = makeState(); // URL followed by {
    var S_URL_OPENBRACKET = makeState(); // URL followed by [
    var S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <
    var S_URL_OPENPAREN = makeState(); // URL followed by (
    var S_URL_OPENBRACE_Q = makeState(_multi.URL); // URL followed by { and some symbols that the URL can end it
    var S_URL_OPENBRACKET_Q = makeState(_multi.URL); // URL followed by [ and some symbols that the URL can end it
    var S_URL_OPENANGLEBRACKET_Q = makeState(_multi.URL); // URL followed by < and some symbols that the URL can end it
    var S_URL_OPENPAREN_Q = makeState(_multi.URL); // URL followed by ( and some symbols that the URL can end it
    var S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it
    var S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it
    var S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it
    var S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it
    var S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)
    var S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT
    var S_EMAIL = makeState(_multi.EMAIL); // (C) Possible email address (could have more tlds)
    var S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)
    var S_EMAIL_PORT = makeState(_multi.EMAIL); // (C) Email address with a port
    var S_MAILTO_EMAIL = makeState(_multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)
    var S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars
    var S_LOCALPART = makeState(); // Local part of the email address
    var S_LOCALPART_AT = makeState(); // Local part of the email address plus @
    var S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)
    var S_NL = makeState(_multi.NL); // single new line

    // Make path from start to protocol (with '//')
    S_START.on(_text.NL, S_NL).on(_text.PROTOCOL, S_PROTOCOL).on(_text.MAILTO, S_MAILTO).on(_text.SLASH, S_PROTOCOL_SLASH);

    S_PROTOCOL.on(_text.SLASH, S_PROTOCOL_SLASH);
    S_PROTOCOL_SLASH.on(_text.SLASH, S_PROTOCOL_SLASH_SLASH);

    // The very first potential domain name
    S_START.on(_text.TLD, S_DOMAIN).on(_text.DOMAIN, S_DOMAIN).on(_text.LOCALHOST, S_TLD).on(_text.NUM, S_DOMAIN);

    // Force URL for protocol followed by anything sane
    S_PROTOCOL_SLASH_SLASH.on(_text.TLD, S_URL).on(_text.DOMAIN, S_URL).on(_text.NUM, S_URL).on(_text.LOCALHOST, S_URL);

    // Account for dots and hyphens
    // hyphens are usually parts of domain names
    S_DOMAIN.on(_text.DOT, S_DOMAIN_DOT);
    S_EMAIL_DOMAIN.on(_text.DOT, S_EMAIL_DOMAIN_DOT);

    // Hyphen can jump back to a domain name

    // After the first domain and a dot, we can find either a URL or another domain
    S_DOMAIN_DOT.on(_text.TLD, S_TLD).on(_text.DOMAIN, S_DOMAIN).on(_text.NUM, S_DOMAIN).on(_text.LOCALHOST, S_DOMAIN);

    S_EMAIL_DOMAIN_DOT.on(_text.TLD, S_EMAIL).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.NUM, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL_DOMAIN);

    // S_TLD accepts! But the URL could be longer, try to find a match greedily
    // The `run` function should be able to "rollback" to the accepting state
    S_TLD.on(_text.DOT, S_DOMAIN_DOT);
    S_EMAIL.on(_text.DOT, S_EMAIL_DOMAIN_DOT);

    // Become real URLs after `SLASH` or `COLON NUM SLASH`
    // Here PSS and non-PSS converge
    S_TLD.on(_text.COLON, S_TLD_COLON).on(_text.SLASH, S_URL);
    S_TLD_COLON.on(_text.NUM, S_TLD_PORT);
    S_TLD_PORT.on(_text.SLASH, S_URL);
    S_EMAIL.on(_text.COLON, S_EMAIL_COLON);
    S_EMAIL_COLON.on(_text.NUM, S_EMAIL_PORT);

    // Types of characters the URL can definitely end in
    var qsAccepting = [_text.DOMAIN, _text.AT, _text.LOCALHOST, _text.NUM, _text.PLUS, _text.POUND, _text.PROTOCOL, _text.SLASH, _text.TLD, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND];

    // Types of tokens that can follow a URL and be part of the query string
    // but cannot be the very last characters
    // Characters that cannot appear in the URL at all should be excluded
    var qsNonAccepting = [_text.COLON, _text.DOT, _text.QUERY, _text.PUNCTUATION, _text.CLOSEBRACE, _text.CLOSEBRACKET, _text.CLOSEANGLEBRACKET, _text.CLOSEPAREN, _text.OPENBRACE, _text.OPENBRACKET, _text.OPENANGLEBRACKET, _text.OPENPAREN];

    // These states are responsible primarily for determining whether or not to
    // include the final round bracket.

    // URL, followed by an opening bracket
    S_URL.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);

    // URL with extra symbols at the end, followed by an opening bracket
    S_URL_NON_ACCEPTING.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);

    // Closing bracket component. This character WILL be included in the URL
    S_URL_OPENBRACE.on(_text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET.on(_text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET.on(_text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN.on(_text.CLOSEPAREN, S_URL);
    S_URL_OPENBRACE_Q.on(_text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET_Q.on(_text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET_Q.on(_text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN_Q.on(_text.CLOSEPAREN, S_URL);
    S_URL_OPENBRACE_SYMS.on(_text.CLOSEBRACE, S_URL);
    S_URL_OPENBRACKET_SYMS.on(_text.CLOSEBRACKET, S_URL);
    S_URL_OPENANGLEBRACKET_SYMS.on(_text.CLOSEANGLEBRACKET, S_URL);
    S_URL_OPENPAREN_SYMS.on(_text.CLOSEPAREN, S_URL);

    // URL that beings with an opening bracket, followed by a symbols.
    // Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only
    // has a single opening bracket for some reason).
    S_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);
    S_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);
    S_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);
    S_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);

    // URL that begins with an opening bracket, followed by some symbols
    S_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);

    S_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);
    S_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);
    S_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);
    S_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);
    S_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);
    S_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);
    S_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);
    S_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);

    // Account for the query string
    S_URL.on(qsAccepting, S_URL);
    S_URL_NON_ACCEPTING.on(qsAccepting, S_URL);

    S_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);
    S_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING);

    // Email address-specific state definitions
    // Note: We are not allowing '/' in email addresses since this would interfere
    // with real URLs

    // For addresses with the mailto prefix
    // 'mailto:' followed by anything sane is a valid email
    S_MAILTO.on(_text.TLD, S_MAILTO_EMAIL).on(_text.DOMAIN, S_MAILTO_EMAIL).on(_text.NUM, S_MAILTO_EMAIL).on(_text.LOCALHOST, S_MAILTO_EMAIL);

    // Greedily get more potential valid email values
    S_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);
    S_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);

    // For addresses without the mailto prefix
    // Tokens allowed in the localpart of the email
    var localpartAccepting = [_text.DOMAIN, _text.NUM, _text.PLUS, _text.POUND, _text.QUERY, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND, _text.TLD];

    // Some of the tokens in `localpartAccepting` are already accounted for here and
    // will not be overwritten (don't worry)
    S_DOMAIN.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);
    S_TLD.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);
    S_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART);

    // Okay we're on a localpart. Now what?
    // TODO: IP addresses and what if the email starts with numbers?
    S_LOCALPART.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT) // close to an email address now
    .on(_text.DOT, S_LOCALPART_DOT);
    S_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);
    S_LOCALPART_AT.on(_text.TLD, S_EMAIL_DOMAIN).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL);
    // States following `@` defined above

    var run = function run(tokens) {
    	var len = tokens.length;
    	var cursor = 0;
    	var multis = [];
    	var textTokens = [];

    	while (cursor < len) {
    		var state = S_START;
    		var secondState = null;
    		var nextState = null;
    		var multiLength = 0;
    		var latestAccepting = null;
    		var sinceAccepts = -1;

    		while (cursor < len && !(secondState = state.next(tokens[cursor]))) {
    			// Starting tokens with nowhere to jump to.
    			// Consider these to be just plain text
    			textTokens.push(tokens[cursor++]);
    		}

    		while (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {

    			// Get the next state
    			secondState = null;
    			state = nextState;

    			// Keep track of the latest accepting state
    			if (state.accepts()) {
    				sinceAccepts = 0;
    				latestAccepting = state;
    			} else if (sinceAccepts >= 0) {
    				sinceAccepts++;
    			}

    			cursor++;
    			multiLength++;
    		}

    		if (sinceAccepts < 0) {

    			// No accepting state was found, part of a regular text token
    			// Add all the tokens we looked at to the text tokens array
    			for (var i = cursor - multiLength; i < cursor; i++) {
    				textTokens.push(tokens[i]);
    			}
    		} else {

    			// Accepting state!

    			// First close off the textTokens (if available)
    			if (textTokens.length > 0) {
    				multis.push(new _multi.TEXT(textTokens));
    				textTokens = [];
    			}

    			// Roll back to the latest accepting state
    			cursor -= sinceAccepts;
    			multiLength -= sinceAccepts;

    			// Create a new multitoken
    			var MULTI = latestAccepting.emit();
    			multis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));
    		}
    	}

    	// Finally close off the textTokens (if available)
    	if (textTokens.length > 0) {
    		multis.push(new _multi.TEXT(textTokens));
    	}

    	return multis;
    };

    parser$1.State = _state.TokenState;
    parser$1.TOKENS = MULTI_TOKENS;
    parser$1.run = run;
    parser$1.start = S_START;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    linkify.__esModule = true;
    linkify.tokenize = linkify.test = linkify.scanner = linkify.parser = linkify.options = linkify.inherits = linkify.find = undefined;

    var _class = _class$4;

    var _options = options$1;

    var options = _interopRequireWildcard(_options);

    var _scanner = scanner$1;

    var scanner = _interopRequireWildcard(_scanner);

    var _parser = parser$1;

    var parser = _interopRequireWildcard(_parser);

    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

    if (!Array.isArray) {
    	Array.isArray = function (arg) {
    		return Object.prototype.toString.call(arg) === '[object Array]';
    	};
    }

    /**
    	Converts a string into tokens that represent linkable and non-linkable bits
    	@method tokenize
    	@param {String} str
    	@return {Array} tokens
    */
    var tokenize = function tokenize(str) {
    	return parser.run(scanner.run(str));
    };

    /**
    	Returns a list of linkable items in the given string.
    */
    var find = function find(str) {
    	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	var tokens = tokenize(str);
    	var filtered = [];

    	for (var i = 0; i < tokens.length; i++) {
    		var token = tokens[i];
    		if (token.isLink && (!type || token.type === type)) {
    			filtered.push(token.toObject());
    		}
    	}

    	return filtered;
    };

    /**
    	Is the given string valid linkable text of some sort
    	Note that this does not trim the text for you.

    	Optionally pass in a second `type` param, which is the type of link to test
    	for.

    	For example,

    		test(str, 'email');

    	Will return `true` if str is a valid email.
    */
    var test = function test(str) {
    	var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    	var tokens = tokenize(str);
    	return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].type === type);
    };

    // Scanner and parser provide states and tokens for the lexicographic stage
    // (will be used to add additional link types)
    linkify.find = find;
    linkify.inherits = _class.inherits;
    linkify.options = options;
    linkify.parser = parser;
    linkify.scanner = scanner;
    linkify.test = test;
    linkify.tokenize = tokenize;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module) {
    	module.exports = linkify;
    } (linkifyjs));

    var ical = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};/* This Source Code Form is subject to the terms of the Mozilla Public
     * License, v. 2.0. If a copy of the MPL was not distributed with this
     * file, You can obtain one at http://mozilla.org/MPL/2.0/.
     * Portions Copyright (C) Philipp Kewisch, 2011-2015 */

    (function (module) {
    	/* istanbul ignore next */
    	/* jshint ignore:start */
    	{
    	  // CommonJS, where exports may be different each time.
    	  ICAL = module.exports;
    	}
    	/* jshint ignore:end */


    	/**
    	 * The number of characters before iCalendar line folding should occur
    	 * @type {Number}
    	 * @default 75
    	 */
    	ICAL.foldLength = 75;


    	/**
    	 * The character(s) to be used for a newline. The default value is provided by
    	 * rfc5545.
    	 * @type {String}
    	 * @default "\r\n"
    	 */
    	ICAL.newLineChar = '\r\n';


    	/**
    	 * Helper functions used in various places within ical.js
    	 * @namespace
    	 */
    	ICAL.helpers = {
    	  /**
    	   * Compiles a list of all referenced TZIDs in all subcomponents and
    	   * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs
    	   * are referenced by a component, but a VTIMEZONE does not exist,
    	   * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.
    	   *
    	   * @param {ICAL.Component} vcal     The top-level VCALENDAR component.
    	   * @return {ICAL.Component}         The ICAL.Component that was passed in.
    	   */
    	  updateTimezones: function(vcal) {
    	    var allsubs, properties, vtimezones, reqTzid, i, tzid;

    	    if (!vcal || vcal.name !== "vcalendar") {
    	      //not a top-level vcalendar component
    	      return vcal;
    	    }

    	    //Store vtimezone subcomponents in an object reference by tzid.
    	    //Store properties from everything else in another array
    	    allsubs = vcal.getAllSubcomponents();
    	    properties = [];
    	    vtimezones = {};
    	    for (i = 0; i < allsubs.length; i++) {
    	      if (allsubs[i].name === "vtimezone") {
    	        tzid = allsubs[i].getFirstProperty("tzid").getFirstValue();
    	        vtimezones[tzid] = allsubs[i];
    	      } else {
    	        properties = properties.concat(allsubs[i].getAllProperties());
    	      }
    	    }

    	    //create an object with one entry for each required tz
    	    reqTzid = {};
    	    for (i = 0; i < properties.length; i++) {
    	      if ((tzid = properties[i].getParameter("tzid"))) {
    	        reqTzid[tzid] = true;
    	      }
    	    }

    	    //delete any vtimezones that are not on the reqTzid list.
    	    for (i in vtimezones) {
    	      if (vtimezones.hasOwnProperty(i) && !reqTzid[i]) {
    	        vcal.removeSubcomponent(vtimezones[i]);
    	      }
    	    }

    	    //create any missing, but registered timezones
    	    for (i in reqTzid) {
    	      if (
    	        reqTzid.hasOwnProperty(i) &&
    	        !vtimezones[i] &&
    	        ICAL.TimezoneService.has(i)
    	      ) {
    	        vcal.addSubcomponent(ICAL.TimezoneService.get(i).component);
    	      }
    	    }

    	    return vcal;
    	  },

    	  /**
    	   * Checks if the given type is of the number type and also NaN.
    	   *
    	   * @param {Number} number     The number to check
    	   * @return {Boolean}          True, if the number is strictly NaN
    	   */
    	  isStrictlyNaN: function(number) {
    	    return typeof(number) === 'number' && isNaN(number);
    	  },

    	  /**
    	   * Parses a string value that is expected to be an integer, when the valid is
    	   * not an integer throws a decoration error.
    	   *
    	   * @param {String} string     Raw string input
    	   * @return {Number}           Parsed integer
    	   */
    	  strictParseInt: function(string) {
    	    var result = parseInt(string, 10);

    	    if (ICAL.helpers.isStrictlyNaN(result)) {
    	      throw new Error(
    	        'Could not extract integer from "' + string + '"'
    	      );
    	    }

    	    return result;
    	  },

    	  /**
    	   * Creates or returns a class instance of a given type with the initialization
    	   * data if the data is not already an instance of the given type.
    	   *
    	   * @example
    	   * var time = new ICAL.Time(...);
    	   * var result = ICAL.helpers.formatClassType(time, ICAL.Time);
    	   *
    	   * (result instanceof ICAL.Time)
    	   * // => true
    	   *
    	   * result = ICAL.helpers.formatClassType({}, ICAL.Time);
    	   * (result isntanceof ICAL.Time)
    	   * // => true
    	   *
    	   *
    	   * @param {Object} data       object initialization data
    	   * @param {Object} type       object type (like ICAL.Time)
    	   * @return {?}                An instance of the found type.
    	   */
    	  formatClassType: function formatClassType(data, type) {
    	    if (typeof(data) === 'undefined') {
    	      return undefined;
    	    }

    	    if (data instanceof type) {
    	      return data;
    	    }
    	    return new type(data);
    	  },

    	  /**
    	   * Identical to indexOf but will only match values when they are not preceded
    	   * by a backslash character.
    	   *
    	   * @param {String} buffer         String to search
    	   * @param {String} search         Value to look for
    	   * @param {Number} pos            Start position
    	   * @return {Number}               The position, or -1 if not found
    	   */
    	  unescapedIndexOf: function(buffer, search, pos) {
    	    while ((pos = buffer.indexOf(search, pos)) !== -1) {
    	      if (pos > 0 && buffer[pos - 1] === '\\') {
    	        pos += 1;
    	      } else {
    	        return pos;
    	      }
    	    }
    	    return -1;
    	  },

    	  /**
    	   * Find the index for insertion using binary search.
    	   *
    	   * @param {Array} list            The list to search
    	   * @param {?} seekVal             The value to insert
    	   * @param {function(?,?)} cmpfunc The comparison func, that can
    	   *                                  compare two seekVals
    	   * @return {Number}               The insert position
    	   */
    	  binsearchInsert: function(list, seekVal, cmpfunc) {
    	    if (!list.length)
    	      return 0;

    	    var low = 0, high = list.length - 1,
    	        mid, cmpval;

    	    while (low <= high) {
    	      mid = low + Math.floor((high - low) / 2);
    	      cmpval = cmpfunc(seekVal, list[mid]);

    	      if (cmpval < 0)
    	        high = mid - 1;
    	      else if (cmpval > 0)
    	        low = mid + 1;
    	      else
    	        break;
    	    }

    	    if (cmpval < 0)
    	      return mid; // insertion is displacing, so use mid outright.
    	    else if (cmpval > 0)
    	      return mid + 1;
    	    else
    	      return mid;
    	  },

    	  /**
    	   * Convenience function for debug output
    	   * @private
    	   */
    	  dumpn: /* istanbul ignore next */ function() {
    	    if (!ICAL.debug) {
    	      return;
    	    }

    	    if (typeof (console) !== 'undefined' && 'log' in console) {
    	      ICAL.helpers.dumpn = function consoleDumpn(input) {
    	        console.log(input);
    	      };
    	    } else {
    	      ICAL.helpers.dumpn = function geckoDumpn(input) {
    	        dump(input + '\n');
    	      };
    	    }

    	    ICAL.helpers.dumpn(arguments[0]);
    	  },

    	  /**
    	   * Clone the passed object or primitive. By default a shallow clone will be
    	   * executed.
    	   *
    	   * @param {*} aSrc            The thing to clone
    	   * @param {Boolean=} aDeep    If true, a deep clone will be performed
    	   * @return {*}                The copy of the thing
    	   */
    	  clone: function(aSrc, aDeep) {
    	    if (!aSrc || typeof aSrc != "object") {
    	      return aSrc;
    	    } else if (aSrc instanceof Date) {
    	      return new Date(aSrc.getTime());
    	    } else if ("clone" in aSrc) {
    	      return aSrc.clone();
    	    } else if (Array.isArray(aSrc)) {
    	      var arr = [];
    	      for (var i = 0; i < aSrc.length; i++) {
    	        arr.push(aDeep ? ICAL.helpers.clone(aSrc[i], true) : aSrc[i]);
    	      }
    	      return arr;
    	    } else {
    	      var obj = {};
    	      for (var name in aSrc) {
    	        // uses prototype method to allow use of Object.create(null);
    	        /* istanbul ignore else */
    	        if (Object.prototype.hasOwnProperty.call(aSrc, name)) {
    	          if (aDeep) {
    	            obj[name] = ICAL.helpers.clone(aSrc[name], true);
    	          } else {
    	            obj[name] = aSrc[name];
    	          }
    	        }
    	      }
    	      return obj;
    	    }
    	  },

    	  /**
    	   * Performs iCalendar line folding. A line ending character is inserted and
    	   * the next line begins with a whitespace.
    	   *
    	   * @example
    	   * SUMMARY:This line will be fold
    	   *  ed right in the middle of a word.
    	   *
    	   * @param {String} aLine      The line to fold
    	   * @return {String}           The folded line
    	   */
    	  foldline: function foldline(aLine) {
    	    var result = "";
    	    var line = aLine || "";

    	    while (line.length) {
    	      result += ICAL.newLineChar + " " + line.substr(0, ICAL.foldLength);
    	      line = line.substr(ICAL.foldLength);
    	    }
    	    return result.substr(ICAL.newLineChar.length + 1);
    	  },

    	  /**
    	   * Pads the given string or number with zeros so it will have at least two
    	   * characters.
    	   *
    	   * @param {String|Number} data    The string or number to pad
    	   * @return {String}               The number padded as a string
    	   */
    	  pad2: function pad(data) {
    	    if (typeof(data) !== 'string') {
    	      // handle fractions.
    	      if (typeof(data) === 'number') {
    	        data = parseInt(data);
    	      }
    	      data = String(data);
    	    }

    	    var len = data.length;

    	    switch (len) {
    	      case 0:
    	        return '00';
    	      case 1:
    	        return '0' + data;
    	      default:
    	        return data;
    	    }
    	  },

    	  /**
    	   * Truncates the given number, correctly handling negative numbers.
    	   *
    	   * @param {Number} number     The number to truncate
    	   * @return {Number}           The truncated number
    	   */
    	  trunc: function trunc(number) {
    	    return (number < 0 ? Math.ceil(number) : Math.floor(number));
    	  },

    	  /**
    	   * Poor-man's cross-browser inheritance for JavaScript. Doesn't support all
    	   * the features, but enough for our usage.
    	   *
    	   * @param {Function} base     The base class constructor function.
    	   * @param {Function} child    The child class constructor function.
    	   * @param {Object} extra      Extends the prototype with extra properties
    	   *                              and methods
    	   */
    	  inherits: function(base, child, extra) {
    	    function F() {}
    	    F.prototype = base.prototype;
    	    child.prototype = new F();

    	    if (extra) {
    	      ICAL.helpers.extend(extra, child.prototype);
    	    }
    	  },

    	  /**
    	   * Poor-man's cross-browser object extension. Doesn't support all the
    	   * features, but enough for our usage. Note that the target's properties are
    	   * not overwritten with the source properties.
    	   *
    	   * @example
    	   * var child = ICAL.helpers.extend(parent, {
    	   *   "bar": 123
    	   * });
    	   *
    	   * @param {Object} source     The object to extend
    	   * @param {Object} target     The object to extend with
    	   * @return {Object}           Returns the target.
    	   */
    	  extend: function(source, target) {
    	    for (var key in source) {
    	      var descr = Object.getOwnPropertyDescriptor(source, key);
    	      if (descr && !Object.getOwnPropertyDescriptor(target, key)) {
    	        Object.defineProperty(target, key, descr);
    	      }
    	    }
    	    return target;
    	  }
    	};
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */

    	/** @namespace ICAL */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.design = (function() {

    	  var FROM_ICAL_NEWLINE = /\\\\|\\;|\\,|\\[Nn]/g;
    	  var TO_ICAL_NEWLINE = /\\|;|,|\n/g;
    	  var FROM_VCARD_NEWLINE = /\\\\|\\,|\\[Nn]/g;
    	  var TO_VCARD_NEWLINE = /\\|,|\n/g;

    	  function createTextType(fromNewline, toNewline) {
    	    var result = {
    	      matches: /.*/,

    	      fromICAL: function(aValue, structuredEscape) {
    	        return replaceNewline(aValue, fromNewline, structuredEscape);
    	      },

    	      toICAL: function(aValue, structuredEscape) {
    	        var regEx = toNewline;
    	        if (structuredEscape)
    	          regEx = new RegExp(regEx.source + '|' + structuredEscape);
    	        return aValue.replace(regEx, function(str) {
    	          switch (str) {
    	          case "\\":
    	            return "\\\\";
    	          case ";":
    	            return "\\;";
    	          case ",":
    	            return "\\,";
    	          case "\n":
    	            return "\\n";
    	          /* istanbul ignore next */
    	          default:
    	            return str;
    	          }
    	        });
    	      }
    	    };
    	    return result;
    	  }

    	  // default types used multiple times
    	  var DEFAULT_TYPE_TEXT = { defaultType: "text" };
    	  var DEFAULT_TYPE_TEXT_MULTI = { defaultType: "text", multiValue: "," };
    	  var DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: "text", structuredValue: ";" };
    	  var DEFAULT_TYPE_INTEGER = { defaultType: "integer" };
    	  var DEFAULT_TYPE_DATETIME_DATE = { defaultType: "date-time", allowedTypes: ["date-time", "date"] };
    	  var DEFAULT_TYPE_DATETIME = { defaultType: "date-time" };
    	  var DEFAULT_TYPE_URI = { defaultType: "uri" };
    	  var DEFAULT_TYPE_UTCOFFSET = { defaultType: "utc-offset" };
    	  var DEFAULT_TYPE_RECUR = { defaultType: "recur" };
    	  var DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: "date-and-or-time", allowedTypes: ["date-time", "date", "text"] };

    	  function replaceNewlineReplace(string) {
    	    switch (string) {
    	      case "\\\\":
    	        return "\\";
    	      case "\\;":
    	        return ";";
    	      case "\\,":
    	        return ",";
    	      case "\\n":
    	      case "\\N":
    	        return "\n";
    	      /* istanbul ignore next */
    	      default:
    	        return string;
    	    }
    	  }

    	  function replaceNewline(value, newline, structuredEscape) {
    	    // avoid regex when possible.
    	    if (value.indexOf('\\') === -1) {
    	      return value;
    	    }
    	    if (structuredEscape)
    	      newline = new RegExp(newline.source + '|\\\\' + structuredEscape);
    	    return value.replace(newline, replaceNewlineReplace);
    	  }

    	  var commonProperties = {
    	    "categories": DEFAULT_TYPE_TEXT_MULTI,
    	    "url": DEFAULT_TYPE_URI,
    	    "version": DEFAULT_TYPE_TEXT,
    	    "uid": DEFAULT_TYPE_TEXT
    	  };

    	  var commonValues = {
    	    "boolean": {
    	      values: ["TRUE", "FALSE"],

    	      fromICAL: function(aValue) {
    	        switch (aValue) {
    	          case 'TRUE':
    	            return true;
    	          case 'FALSE':
    	            return false;
    	          default:
    	            //TODO: parser warning
    	            return false;
    	        }
    	      },

    	      toICAL: function(aValue) {
    	        if (aValue) {
    	          return 'TRUE';
    	        }
    	        return 'FALSE';
    	      }

    	    },
    	    float: {
    	      matches: /^[+-]?\d+\.\d+$/,

    	      fromICAL: function(aValue) {
    	        var parsed = parseFloat(aValue);
    	        if (ICAL.helpers.isStrictlyNaN(parsed)) {
    	          // TODO: parser warning
    	          return 0.0;
    	        }
    	        return parsed;
    	      },

    	      toICAL: function(aValue) {
    	        return String(aValue);
    	      }
    	    },
    	    integer: {
    	      fromICAL: function(aValue) {
    	        var parsed = parseInt(aValue);
    	        if (ICAL.helpers.isStrictlyNaN(parsed)) {
    	          return 0;
    	        }
    	        return parsed;
    	      },

    	      toICAL: function(aValue) {
    	        return String(aValue);
    	      }
    	    },
    	    "utc-offset": {
    	      toICAL: function(aValue) {
    	        if (aValue.length < 7) {
    	          // no seconds
    	          // -0500
    	          return aValue.substr(0, 3) +
    	                 aValue.substr(4, 2);
    	        } else {
    	          // seconds
    	          // -050000
    	          return aValue.substr(0, 3) +
    	                 aValue.substr(4, 2) +
    	                 aValue.substr(7, 2);
    	        }
    	      },

    	      fromICAL: function(aValue) {
    	        if (aValue.length < 6) {
    	          // no seconds
    	          // -05:00
    	          return aValue.substr(0, 3) + ':' +
    	                 aValue.substr(3, 2);
    	        } else {
    	          // seconds
    	          // -05:00:00
    	          return aValue.substr(0, 3) + ':' +
    	                 aValue.substr(3, 2) + ':' +
    	                 aValue.substr(5, 2);
    	        }
    	      },

    	      decorate: function(aValue) {
    	        return ICAL.UtcOffset.fromString(aValue);
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      }
    	    }
    	  };

    	  var icalParams = {
    	    // Although the syntax is DQUOTE uri DQUOTE, I don't think we should
    	    // enfoce anything aside from it being a valid content line.
    	    //
    	    // At least some params require - if multi values are used - DQUOTEs
    	    // for each of its values - e.g. delegated-from="uri1","uri2"
    	    // To indicate this, I introduced the new k/v pair
    	    // multiValueSeparateDQuote: true
    	    //
    	    // "ALTREP": { ... },

    	    // CN just wants a param-value
    	    // "CN": { ... }

    	    "cutype": {
    	      values: ["INDIVIDUAL", "GROUP", "RESOURCE", "ROOM", "UNKNOWN"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    },

    	    "delegated-from": {
    	      valueType: "cal-address",
    	      multiValue: ",",
    	      multiValueSeparateDQuote: true
    	    },
    	    "delegated-to": {
    	      valueType: "cal-address",
    	      multiValue: ",",
    	      multiValueSeparateDQuote: true
    	    },
    	    // "DIR": { ... }, // See ALTREP
    	    "encoding": {
    	      values: ["8BIT", "BASE64"]
    	    },
    	    // "FMTTYPE": { ... }, // See ALTREP
    	    "fbtype": {
    	      values: ["FREE", "BUSY", "BUSY-UNAVAILABLE", "BUSY-TENTATIVE"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    },
    	    // "LANGUAGE": { ... }, // See ALTREP
    	    "member": {
    	      valueType: "cal-address",
    	      multiValue: ",",
    	      multiValueSeparateDQuote: true
    	    },
    	    "partstat": {
    	      // TODO These values are actually different per-component
    	      values: ["NEEDS-ACTION", "ACCEPTED", "DECLINED", "TENTATIVE",
    	               "DELEGATED", "COMPLETED", "IN-PROCESS"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    },
    	    "range": {
    	      values: ["THISLANDFUTURE"]
    	    },
    	    "related": {
    	      values: ["START", "END"]
    	    },
    	    "reltype": {
    	      values: ["PARENT", "CHILD", "SIBLING"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    },
    	    "role": {
    	      values: ["REQ-PARTICIPANT", "CHAIR",
    	               "OPT-PARTICIPANT", "NON-PARTICIPANT"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    },
    	    "rsvp": {
    	      values: ["TRUE", "FALSE"]
    	    },
    	    "sent-by": {
    	      valueType: "cal-address"
    	    },
    	    "tzid": {
    	      matches: /^\//
    	    },
    	    "value": {
    	      // since the value here is a 'type' lowercase is used.
    	      values: ["binary", "boolean", "cal-address", "date", "date-time",
    	               "duration", "float", "integer", "period", "recur", "text",
    	               "time", "uri", "utc-offset"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    }
    	  };

    	  // When adding a value here, be sure to add it to the parameter types!
    	  var icalValues = ICAL.helpers.extend(commonValues, {
    	    text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),

    	    uri: {
    	      // TODO
    	      /* ... */
    	    },

    	    "binary": {
    	      decorate: function(aString) {
    	        return ICAL.Binary.fromString(aString);
    	      },

    	      undecorate: function(aBinary) {
    	        return aBinary.toString();
    	      }
    	    },
    	    "cal-address": {
    	      // needs to be an uri
    	    },
    	    "date": {
    	      decorate: function(aValue, aProp) {
    	        if (design.strict) {
    	          return ICAL.Time.fromDateString(aValue, aProp);
    	        } else {
    	          return ICAL.Time.fromString(aValue, aProp);
    	        }
    	      },

    	      /**
    	       * undecorates a time object.
    	       */
    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      },

    	      fromICAL: function(aValue) {
    	        // from: 20120901
    	        // to: 2012-09-01
    	        if (!design.strict && aValue.length >= 15) {
    	          // This is probably a date-time, e.g. 20120901T130000Z
    	          return icalValues["date-time"].fromICAL(aValue);
    	        } else {
    	          return aValue.substr(0, 4) + '-' +
    	                 aValue.substr(4, 2) + '-' +
    	                 aValue.substr(6, 2);
    	        }
    	      },

    	      toICAL: function(aValue) {
    	        // from: 2012-09-01
    	        // to: 20120901
    	        var len = aValue.length;

    	        if (len == 10) {
    	          return aValue.substr(0, 4) +
    	                 aValue.substr(5, 2) +
    	                 aValue.substr(8, 2);
    	        } else if (len >= 19) {
    	          return icalValues["date-time"].toICAL(aValue);
    	        } else {
    	          //TODO: serialize warning?
    	          return aValue;
    	        }

    	      }
    	    },
    	    "date-time": {
    	      fromICAL: function(aValue) {
    	        // from: 20120901T130000
    	        // to: 2012-09-01T13:00:00
    	        if (!design.strict && aValue.length == 8) {
    	          // This is probably a date, e.g. 20120901
    	          return icalValues.date.fromICAL(aValue);
    	        } else {
    	          var result = aValue.substr(0, 4) + '-' +
    	                       aValue.substr(4, 2) + '-' +
    	                       aValue.substr(6, 2) + 'T' +
    	                       aValue.substr(9, 2) + ':' +
    	                       aValue.substr(11, 2) + ':' +
    	                       aValue.substr(13, 2);

    	          if (aValue[15] && aValue[15] === 'Z') {
    	            result += 'Z';
    	          }

    	          return result;
    	        }
    	      },

    	      toICAL: function(aValue) {
    	        // from: 2012-09-01T13:00:00
    	        // to: 20120901T130000
    	        var len = aValue.length;

    	        if (len == 10 && !design.strict) {
    	          return icalValues.date.toICAL(aValue);
    	        } else if (len >= 19) {
    	          var result = aValue.substr(0, 4) +
    	                       aValue.substr(5, 2) +
    	                       // grab the (DDTHH) segment
    	                       aValue.substr(8, 5) +
    	                       // MM
    	                       aValue.substr(14, 2) +
    	                       // SS
    	                       aValue.substr(17, 2);

    	          if (aValue[19] && aValue[19] === 'Z') {
    	            result += 'Z';
    	          }
    	          return result;
    	        } else {
    	          // TODO: error
    	          return aValue;
    	        }
    	      },

    	      decorate: function(aValue, aProp) {
    	        if (design.strict) {
    	          return ICAL.Time.fromDateTimeString(aValue, aProp);
    	        } else {
    	          return ICAL.Time.fromString(aValue, aProp);
    	        }
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      }
    	    },
    	    duration: {
    	      decorate: function(aValue) {
    	        return ICAL.Duration.fromString(aValue);
    	      },
    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      }
    	    },
    	    period: {

    	      fromICAL: function(string) {
    	        var parts = string.split('/');
    	        parts[0] = icalValues['date-time'].fromICAL(parts[0]);

    	        if (!ICAL.Duration.isValueString(parts[1])) {
    	          parts[1] = icalValues['date-time'].fromICAL(parts[1]);
    	        }

    	        return parts;
    	      },

    	      toICAL: function(parts) {
    	        if (!design.strict && parts[0].length == 10) {
    	          parts[0] = icalValues.date.toICAL(parts[0]);
    	        } else {
    	          parts[0] = icalValues['date-time'].toICAL(parts[0]);
    	        }

    	        if (!ICAL.Duration.isValueString(parts[1])) {
    	          if (!design.strict && parts[1].length == 10) {
    	            parts[1] = icalValues.date.toICAL(parts[1]);
    	          } else {
    	            parts[1] = icalValues['date-time'].toICAL(parts[1]);
    	          }
    	        }

    	        return parts.join("/");
    	      },

    	      decorate: function(aValue, aProp) {
    	        return ICAL.Period.fromJSON(aValue, aProp, !design.strict);
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toJSON();
    	      }
    	    },
    	    recur: {
    	      fromICAL: function(string) {
    	        return ICAL.Recur._stringToData(string, true);
    	      },

    	      toICAL: function(data) {
    	        var str = "";
    	        for (var k in data) {
    	          /* istanbul ignore if */
    	          if (!Object.prototype.hasOwnProperty.call(data, k)) {
    	            continue;
    	          }
    	          var val = data[k];
    	          if (k == "until") {
    	            if (val.length > 10) {
    	              val = icalValues['date-time'].toICAL(val);
    	            } else {
    	              val = icalValues.date.toICAL(val);
    	            }
    	          } else if (k == "wkst") {
    	            if (typeof val === 'number') {
    	              val = ICAL.Recur.numericDayToIcalDay(val);
    	            }
    	          } else if (Array.isArray(val)) {
    	            val = val.join(",");
    	          }
    	          str += k.toUpperCase() + "=" + val + ";";
    	        }
    	        return str.substr(0, str.length - 1);
    	      },

    	      decorate: function decorate(aValue) {
    	        return ICAL.Recur.fromData(aValue);
    	      },

    	      undecorate: function(aRecur) {
    	        return aRecur.toJSON();
    	      }
    	    },

    	    time: {
    	      fromICAL: function(aValue) {
    	        // from: MMHHSS(Z)?
    	        // to: HH:MM:SS(Z)?
    	        if (aValue.length < 6) {
    	          // TODO: parser exception?
    	          return aValue;
    	        }

    	        // HH::MM::SSZ?
    	        var result = aValue.substr(0, 2) + ':' +
    	                     aValue.substr(2, 2) + ':' +
    	                     aValue.substr(4, 2);

    	        if (aValue[6] === 'Z') {
    	          result += 'Z';
    	        }

    	        return result;
    	      },

    	      toICAL: function(aValue) {
    	        // from: HH:MM:SS(Z)?
    	        // to: MMHHSS(Z)?
    	        if (aValue.length < 8) {
    	          //TODO: error
    	          return aValue;
    	        }

    	        var result = aValue.substr(0, 2) +
    	                     aValue.substr(3, 2) +
    	                     aValue.substr(6, 2);

    	        if (aValue[8] === 'Z') {
    	          result += 'Z';
    	        }

    	        return result;
    	      }
    	    }
    	  });

    	  var icalProperties = ICAL.helpers.extend(commonProperties, {

    	    "action": DEFAULT_TYPE_TEXT,
    	    "attach": { defaultType: "uri" },
    	    "attendee": { defaultType: "cal-address" },
    	    "calscale": DEFAULT_TYPE_TEXT,
    	    "class": DEFAULT_TYPE_TEXT,
    	    "comment": DEFAULT_TYPE_TEXT,
    	    "completed": DEFAULT_TYPE_DATETIME,
    	    "contact": DEFAULT_TYPE_TEXT,
    	    "created": DEFAULT_TYPE_DATETIME,
    	    "description": DEFAULT_TYPE_TEXT,
    	    "dtend": DEFAULT_TYPE_DATETIME_DATE,
    	    "dtstamp": DEFAULT_TYPE_DATETIME,
    	    "dtstart": DEFAULT_TYPE_DATETIME_DATE,
    	    "due": DEFAULT_TYPE_DATETIME_DATE,
    	    "duration": { defaultType: "duration" },
    	    "exdate": {
    	      defaultType: "date-time",
    	      allowedTypes: ["date-time", "date"],
    	      multiValue: ','
    	    },
    	    "exrule": DEFAULT_TYPE_RECUR,
    	    "freebusy": { defaultType: "period", multiValue: "," },
    	    "geo": { defaultType: "float", structuredValue: ";" },
    	    "last-modified": DEFAULT_TYPE_DATETIME,
    	    "location": DEFAULT_TYPE_TEXT,
    	    "method": DEFAULT_TYPE_TEXT,
    	    "organizer": { defaultType: "cal-address" },
    	    "percent-complete": DEFAULT_TYPE_INTEGER,
    	    "priority": DEFAULT_TYPE_INTEGER,
    	    "prodid": DEFAULT_TYPE_TEXT,
    	    "related-to": DEFAULT_TYPE_TEXT,
    	    "repeat": DEFAULT_TYPE_INTEGER,
    	    "rdate": {
    	      defaultType: "date-time",
    	      allowedTypes: ["date-time", "date", "period"],
    	      multiValue: ',',
    	      detectType: function(string) {
    	        if (string.indexOf('/') !== -1) {
    	          return 'period';
    	        }
    	        return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    	      }
    	    },
    	    "recurrence-id": DEFAULT_TYPE_DATETIME_DATE,
    	    "resources": DEFAULT_TYPE_TEXT_MULTI,
    	    "request-status": DEFAULT_TYPE_TEXT_STRUCTURED,
    	    "rrule": DEFAULT_TYPE_RECUR,
    	    "sequence": DEFAULT_TYPE_INTEGER,
    	    "status": DEFAULT_TYPE_TEXT,
    	    "summary": DEFAULT_TYPE_TEXT,
    	    "transp": DEFAULT_TYPE_TEXT,
    	    "trigger": { defaultType: "duration", allowedTypes: ["duration", "date-time"] },
    	    "tzoffsetfrom": DEFAULT_TYPE_UTCOFFSET,
    	    "tzoffsetto": DEFAULT_TYPE_UTCOFFSET,
    	    "tzurl": DEFAULT_TYPE_URI,
    	    "tzid": DEFAULT_TYPE_TEXT,
    	    "tzname": DEFAULT_TYPE_TEXT
    	  });

    	  // When adding a value here, be sure to add it to the parameter types!
    	  var vcardValues = ICAL.helpers.extend(commonValues, {
    	    text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
    	    uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),

    	    date: {
    	      decorate: function(aValue) {
    	        return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date");
    	      },
    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      },
    	      fromICAL: function(aValue) {
    	        if (aValue.length == 8) {
    	          return icalValues.date.fromICAL(aValue);
    	        } else if (aValue[0] == '-' && aValue.length == 6) {
    	          return aValue.substr(0, 4) + '-' + aValue.substr(4);
    	        } else {
    	          return aValue;
    	        }
    	      },
    	      toICAL: function(aValue) {
    	        if (aValue.length == 10) {
    	          return icalValues.date.toICAL(aValue);
    	        } else if (aValue[0] == '-' && aValue.length == 7) {
    	          return aValue.substr(0, 4) + aValue.substr(5);
    	        } else {
    	          return aValue;
    	        }
    	      }
    	    },

    	    time: {
    	      decorate: function(aValue) {
    	        return ICAL.VCardTime.fromDateAndOrTimeString("T" + aValue, "time");
    	      },
    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      },
    	      fromICAL: function(aValue) {
    	        var splitzone = vcardValues.time._splitZone(aValue, true);
    	        var zone = splitzone[0], value = splitzone[1];

    	        //console.log("SPLIT: ",splitzone);

    	        if (value.length == 6) {
    	          value = value.substr(0, 2) + ':' +
    	                  value.substr(2, 2) + ':' +
    	                  value.substr(4, 2);
    	        } else if (value.length == 4 && value[0] != '-') {
    	          value = value.substr(0, 2) + ':' + value.substr(2, 2);
    	        } else if (value.length == 5) {
    	          value = value.substr(0, 3) + ':' + value.substr(3, 2);
    	        }

    	        if (zone.length == 5 && (zone[0] == '-' || zone[0] == '+')) {
    	          zone = zone.substr(0, 3) + ':' + zone.substr(3);
    	        }

    	        return value + zone;
    	      },

    	      toICAL: function(aValue) {
    	        var splitzone = vcardValues.time._splitZone(aValue);
    	        var zone = splitzone[0], value = splitzone[1];

    	        if (value.length == 8) {
    	          value = value.substr(0, 2) +
    	                  value.substr(3, 2) +
    	                  value.substr(6, 2);
    	        } else if (value.length == 5 && value[0] != '-') {
    	          value = value.substr(0, 2) + value.substr(3, 2);
    	        } else if (value.length == 6) {
    	          value = value.substr(0, 3) + value.substr(4, 2);
    	        }

    	        if (zone.length == 6 && (zone[0] == '-' || zone[0] == '+')) {
    	          zone = zone.substr(0, 3) + zone.substr(4);
    	        }

    	        return value + zone;
    	      },

    	      _splitZone: function(aValue, isFromIcal) {
    	        var lastChar = aValue.length - 1;
    	        var signChar = aValue.length - (isFromIcal ? 5 : 6);
    	        var sign = aValue[signChar];
    	        var zone, value;

    	        if (aValue[lastChar] == 'Z') {
    	          zone = aValue[lastChar];
    	          value = aValue.substr(0, lastChar);
    	        } else if (aValue.length > 6 && (sign == '-' || sign == '+')) {
    	          zone = aValue.substr(signChar);
    	          value = aValue.substr(0, signChar);
    	        } else {
    	          zone = "";
    	          value = aValue;
    	        }

    	        return [zone, value];
    	      }
    	    },

    	    "date-time": {
    	      decorate: function(aValue) {
    	        return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-time");
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      },

    	      fromICAL: function(aValue) {
    	        return vcardValues['date-and-or-time'].fromICAL(aValue);
    	      },

    	      toICAL: function(aValue) {
    	        return vcardValues['date-and-or-time'].toICAL(aValue);
    	      }
    	    },

    	    "date-and-or-time": {
    	      decorate: function(aValue) {
    	        return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-and-or-time");
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      },

    	      fromICAL: function(aValue) {
    	        var parts = aValue.split('T');
    	        return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : '') +
    	               (parts[1] ? 'T' + vcardValues.time.fromICAL(parts[1]) : '');
    	      },

    	      toICAL: function(aValue) {
    	        var parts = aValue.split('T');
    	        return vcardValues.date.toICAL(parts[0]) +
    	               (parts[1] ? 'T' + vcardValues.time.toICAL(parts[1]) : '');

    	      }
    	    },
    	    timestamp: icalValues['date-time'],
    	    "language-tag": {
    	      matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here
    	    }
    	  });

    	  var vcardParams = {
    	    "type": {
    	      valueType: "text",
    	      multiValue: ","
    	    },
    	    "value": {
    	      // since the value here is a 'type' lowercase is used.
    	      values: ["text", "uri", "date", "time", "date-time", "date-and-or-time",
    	               "timestamp", "boolean", "integer", "float", "utc-offset",
    	               "language-tag"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    }
    	  };

    	  var vcardProperties = ICAL.helpers.extend(commonProperties, {
    	    "adr": { defaultType: "text", structuredValue: ";", multiValue: "," },
    	    "anniversary": DEFAULT_TYPE_DATE_ANDOR_TIME,
    	    "bday": DEFAULT_TYPE_DATE_ANDOR_TIME,
    	    "caladruri": DEFAULT_TYPE_URI,
    	    "caluri": DEFAULT_TYPE_URI,
    	    "clientpidmap": DEFAULT_TYPE_TEXT_STRUCTURED,
    	    "email": DEFAULT_TYPE_TEXT,
    	    "fburl": DEFAULT_TYPE_URI,
    	    "fn": DEFAULT_TYPE_TEXT,
    	    "gender": DEFAULT_TYPE_TEXT_STRUCTURED,
    	    "geo": DEFAULT_TYPE_URI,
    	    "impp": DEFAULT_TYPE_URI,
    	    "key": DEFAULT_TYPE_URI,
    	    "kind": DEFAULT_TYPE_TEXT,
    	    "lang": { defaultType: "language-tag" },
    	    "logo": DEFAULT_TYPE_URI,
    	    "member": DEFAULT_TYPE_URI,
    	    "n": { defaultType: "text", structuredValue: ";", multiValue: "," },
    	    "nickname": DEFAULT_TYPE_TEXT_MULTI,
    	    "note": DEFAULT_TYPE_TEXT,
    	    "org": { defaultType: "text", structuredValue: ";" },
    	    "photo": DEFAULT_TYPE_URI,
    	    "related": DEFAULT_TYPE_URI,
    	    "rev": { defaultType: "timestamp" },
    	    "role": DEFAULT_TYPE_TEXT,
    	    "sound": DEFAULT_TYPE_URI,
    	    "source": DEFAULT_TYPE_URI,
    	    "tel": { defaultType: "uri", allowedTypes: ["uri", "text"] },
    	    "title": DEFAULT_TYPE_TEXT,
    	    "tz": { defaultType: "text", allowedTypes: ["text", "utc-offset", "uri"] },
    	    "xml": DEFAULT_TYPE_TEXT
    	  });

    	  var vcard3Values = ICAL.helpers.extend(commonValues, {
    	    binary: icalValues.binary,
    	    date: vcardValues.date,
    	    "date-time": vcardValues["date-time"],
    	    "phone-number": {
    	      // TODO
    	      /* ... */
    	    },
    	    uri: icalValues.uri,
    	    text: icalValues.text,
    	    time: icalValues.time,
    	    vcard: icalValues.text,
    	    "utc-offset": {
    	      toICAL: function(aValue) {
    	        return aValue.substr(0, 7);
    	      },

    	      fromICAL: function(aValue) {
    	        return aValue.substr(0, 7);
    	      },

    	      decorate: function(aValue) {
    	        return ICAL.UtcOffset.fromString(aValue);
    	      },

    	      undecorate: function(aValue) {
    	        return aValue.toString();
    	      }
    	    }
    	  });

    	  var vcard3Params = {
    	    "type": {
    	      valueType: "text",
    	      multiValue: ","
    	    },
    	    "value": {
    	      // since the value here is a 'type' lowercase is used.
    	      values: ["text", "uri", "date", "date-time", "phone-number", "time",
    	               "boolean", "integer", "float", "utc-offset", "vcard", "binary"],
    	      allowXName: true,
    	      allowIanaToken: true
    	    }
    	  };

    	  var vcard3Properties = ICAL.helpers.extend(commonProperties, {
    	    fn: DEFAULT_TYPE_TEXT,
    	    n: { defaultType: "text", structuredValue: ";", multiValue: "," },
    	    nickname: DEFAULT_TYPE_TEXT_MULTI,
    	    photo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
    	    bday: {
    	      defaultType: "date-time",
    	      allowedTypes: ["date-time", "date"],
    	      detectType: function(string) {
    	        return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    	      }
    	    },

    	    adr: { defaultType: "text", structuredValue: ";", multiValue: "," },
    	    label: DEFAULT_TYPE_TEXT,

    	    tel: { defaultType: "phone-number" },
    	    email: DEFAULT_TYPE_TEXT,
    	    mailer: DEFAULT_TYPE_TEXT,

    	    tz: { defaultType: "utc-offset", allowedTypes: ["utc-offset", "text"] },
    	    geo: { defaultType: "float", structuredValue: ";" },

    	    title: DEFAULT_TYPE_TEXT,
    	    role: DEFAULT_TYPE_TEXT,
    	    logo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
    	    agent: { defaultType: "vcard", allowedTypes: ["vcard", "text", "uri"] },
    	    org: DEFAULT_TYPE_TEXT_STRUCTURED,

    	    note: DEFAULT_TYPE_TEXT_MULTI,
    	    prodid: DEFAULT_TYPE_TEXT,
    	    rev: {
    	      defaultType: "date-time",
    	      allowedTypes: ["date-time", "date"],
    	      detectType: function(string) {
    	        return (string.indexOf('T') === -1) ? 'date' : 'date-time';
    	      }
    	    },
    	    "sort-string": DEFAULT_TYPE_TEXT,
    	    sound: { defaultType: "binary", allowedTypes: ["binary", "uri"] },

    	    class: DEFAULT_TYPE_TEXT,
    	    key: { defaultType: "binary", allowedTypes: ["binary", "text"] }
    	  });

    	  /**
    	   * iCalendar design set
    	   * @type {ICAL.design.designSet}
    	   */
    	  var icalSet = {
    	    value: icalValues,
    	    param: icalParams,
    	    property: icalProperties
    	  };

    	  /**
    	   * vCard 4.0 design set
    	   * @type {ICAL.design.designSet}
    	   */
    	  var vcardSet = {
    	    value: vcardValues,
    	    param: vcardParams,
    	    property: vcardProperties
    	  };

    	  /**
    	   * vCard 3.0 design set
    	   * @type {ICAL.design.designSet}
    	   */
    	  var vcard3Set = {
    	    value: vcard3Values,
    	    param: vcard3Params,
    	    property: vcard3Properties
    	  };

    	  /**
    	   * The design data, used by the parser to determine types for properties and
    	   * other metadata needed to produce correct jCard/jCal data.
    	   *
    	   * @alias ICAL.design
    	   * @namespace
    	   */
    	  var design = {
    	    /**
    	     * A designSet describes value, parameter and property data. It is used by
    	     * ther parser and stringifier in components and properties to determine they
    	     * should be represented.
    	     *
    	     * @typedef {Object} designSet
    	     * @memberOf ICAL.design
    	     * @property {Object} value       Definitions for value types, keys are type names
    	     * @property {Object} param       Definitions for params, keys are param names
    	     * @property {Object} property    Defintions for properties, keys are property names
    	     */

    	    /**
    	     * Can be set to false to make the parser more lenient.
    	     */
    	    strict: true,

    	    /**
    	     * The default set for new properties and components if none is specified.
    	     * @type {ICAL.design.designSet}
    	     */
    	    defaultSet: icalSet,

    	    /**
    	     * The default type for unknown properties
    	     * @type {String}
    	     */
    	    defaultType: 'unknown',

    	    /**
    	     * Holds the design set for known top-level components
    	     *
    	     * @type {Object}
    	     * @property {ICAL.design.designSet} vcard       vCard VCARD
    	     * @property {ICAL.design.designSet} vevent      iCalendar VEVENT
    	     * @property {ICAL.design.designSet} vtodo       iCalendar VTODO
    	     * @property {ICAL.design.designSet} vjournal    iCalendar VJOURNAL
    	     * @property {ICAL.design.designSet} valarm      iCalendar VALARM
    	     * @property {ICAL.design.designSet} vtimezone   iCalendar VTIMEZONE
    	     * @property {ICAL.design.designSet} daylight    iCalendar DAYLIGHT
    	     * @property {ICAL.design.designSet} standard    iCalendar STANDARD
    	     *
    	     * @example
    	     * var propertyName = 'fn';
    	     * var componentDesign = ICAL.design.components.vcard;
    	     * var propertyDetails = componentDesign.property[propertyName];
    	     * if (propertyDetails.defaultType == 'text') {
    	     *   // Yep, sure is...
    	     * }
    	     */
    	    components: {
    	      vcard: vcardSet,
    	      vcard3: vcard3Set,
    	      vevent: icalSet,
    	      vtodo: icalSet,
    	      vjournal: icalSet,
    	      valarm: icalSet,
    	      vtimezone: icalSet,
    	      daylight: icalSet,
    	      standard: icalSet
    	    },


    	    /**
    	     * The design set for iCalendar (rfc5545/rfc7265) components.
    	     * @type {ICAL.design.designSet}
    	     */
    	    icalendar: icalSet,

    	    /**
    	     * The design set for vCard (rfc6350/rfc7095) components.
    	     * @type {ICAL.design.designSet}
    	     */
    	    vcard: vcardSet,

    	    /**
    	     * The design set for vCard (rfc2425/rfc2426/rfc7095) components.
    	     * @type {ICAL.design.designSet}
    	     */
    	    vcard3: vcard3Set,

    	    /**
    	     * Gets the design set for the given component name.
    	     *
    	     * @param {String} componentName        The name of the component
    	     * @return {ICAL.design.designSet}      The design set for the component
    	     */
    	    getDesignSet: function(componentName) {
    	      var isInDesign = componentName && componentName in design.components;
    	      return isInDesign ? design.components[componentName] : design.defaultSet;
    	    }
    	  };

    	  return design;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * Contains various functions to convert jCal and jCard data back into
    	 * iCalendar and vCard.
    	 * @namespace
    	 */
    	ICAL.stringify = (function() {

    	  var LINE_ENDING = '\r\n';
    	  var DEFAULT_VALUE_TYPE = 'unknown';

    	  var design = ICAL.design;
    	  var helpers = ICAL.helpers;

    	  /**
    	   * Convert a full jCal/jCard array into a iCalendar/vCard string.
    	   *
    	   * @function ICAL.stringify
    	   * @variation function
    	   * @param {Array} jCal    The jCal/jCard document
    	   * @return {String}       The stringified iCalendar/vCard document
    	   */
    	  function stringify(jCal) {
    	    if (typeof jCal[0] == "string") {
    	      // This is a single component
    	      jCal = [jCal];
    	    }

    	    var i = 0;
    	    var len = jCal.length;
    	    var result = '';

    	    for (; i < len; i++) {
    	      result += stringify.component(jCal[i]) + LINE_ENDING;
    	    }

    	    return result;
    	  }

    	  /**
    	   * Converts an jCal component array into a ICAL string.
    	   * Recursive will resolve sub-components.
    	   *
    	   * Exact component/property order is not saved all
    	   * properties will come before subcomponents.
    	   *
    	   * @function ICAL.stringify.component
    	   * @param {Array} component
    	   *        jCal/jCard fragment of a component
    	   * @param {ICAL.design.designSet} designSet
    	   *        The design data to use for this component
    	   * @return {String}       The iCalendar/vCard string
    	   */
    	  stringify.component = function(component, designSet) {
    	    var name = component[0].toUpperCase();
    	    var result = 'BEGIN:' + name + LINE_ENDING;

    	    var props = component[1];
    	    var propIdx = 0;
    	    var propLen = props.length;

    	    var designSetName = component[0];
    	    // rfc6350 requires that in vCard 4.0 the first component is the VERSION
    	    // component with as value 4.0, note that 3.0 does not have this requirement.
    	    if (designSetName === 'vcard' && component[1].length > 0 &&
    	            !(component[1][0][0] === "version" && component[1][0][3] === "4.0")) {
    	      designSetName = "vcard3";
    	    }
    	    designSet = designSet || design.getDesignSet(designSetName);

    	    for (; propIdx < propLen; propIdx++) {
    	      result += stringify.property(props[propIdx], designSet) + LINE_ENDING;
    	    }

    	    // Ignore subcomponents if none exist, e.g. in vCard.
    	    var comps = component[2] || [];
    	    var compIdx = 0;
    	    var compLen = comps.length;

    	    for (; compIdx < compLen; compIdx++) {
    	      result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;
    	    }

    	    result += 'END:' + name;
    	    return result;
    	  };

    	  /**
    	   * Converts a single jCal/jCard property to a iCalendar/vCard string.
    	   *
    	   * @function ICAL.stringify.property
    	   * @param {Array} property
    	   *        jCal/jCard property array
    	   * @param {ICAL.design.designSet} designSet
    	   *        The design data to use for this property
    	   * @param {Boolean} noFold
    	   *        If true, the line is not folded
    	   * @return {String}       The iCalendar/vCard string
    	   */
    	  stringify.property = function(property, designSet, noFold) {
    	    var name = property[0].toUpperCase();
    	    var jsName = property[0];
    	    var params = property[1];

    	    var line = name;

    	    var paramName;
    	    for (paramName in params) {
    	      var value = params[paramName];

    	      /* istanbul ignore else */
    	      if (params.hasOwnProperty(paramName)) {
    	        var multiValue = (paramName in designSet.param) && designSet.param[paramName].multiValue;
    	        if (multiValue && Array.isArray(value)) {
    	          if (designSet.param[paramName].multiValueSeparateDQuote) {
    	            multiValue = '"' + multiValue + '"';
    	          }
    	          value = value.map(stringify._rfc6868Unescape);
    	          value = stringify.multiValue(value, multiValue, "unknown", null, designSet);
    	        } else {
    	          value = stringify._rfc6868Unescape(value);
    	        }


    	        line += ';' + paramName.toUpperCase();
    	        line += '=' + stringify.propertyValue(value);
    	      }
    	    }

    	    if (property.length === 3) {
    	      // If there are no values, we must assume a blank value
    	      return line + ':';
    	    }

    	    var valueType = property[2];

    	    if (!designSet) {
    	      designSet = design.defaultSet;
    	    }

    	    var propDetails;
    	    var multiValue = false;
    	    var structuredValue = false;
    	    var isDefault = false;

    	    if (jsName in designSet.property) {
    	      propDetails = designSet.property[jsName];

    	      if ('multiValue' in propDetails) {
    	        multiValue = propDetails.multiValue;
    	      }

    	      if (('structuredValue' in propDetails) && Array.isArray(property[3])) {
    	        structuredValue = propDetails.structuredValue;
    	      }

    	      if ('defaultType' in propDetails) {
    	        if (valueType === propDetails.defaultType) {
    	          isDefault = true;
    	        }
    	      } else {
    	        if (valueType === DEFAULT_VALUE_TYPE) {
    	          isDefault = true;
    	        }
    	      }
    	    } else {
    	      if (valueType === DEFAULT_VALUE_TYPE) {
    	        isDefault = true;
    	      }
    	    }

    	    // push the VALUE property if type is not the default
    	    // for the current property.
    	    if (!isDefault) {
    	      // value will never contain ;/:/, so we don't escape it here.
    	      line += ';VALUE=' + valueType.toUpperCase();
    	    }

    	    line += ':';

    	    if (multiValue && structuredValue) {
    	      line += stringify.multiValue(
    	        property[3], structuredValue, valueType, multiValue, designSet, structuredValue
    	      );
    	    } else if (multiValue) {
    	      line += stringify.multiValue(
    	        property.slice(3), multiValue, valueType, null, designSet, false
    	      );
    	    } else if (structuredValue) {
    	      line += stringify.multiValue(
    	        property[3], structuredValue, valueType, null, designSet, structuredValue
    	      );
    	    } else {
    	      line += stringify.value(property[3], valueType, designSet, false);
    	    }

    	    return noFold ? line : ICAL.helpers.foldline(line);
    	  };

    	  /**
    	   * Handles escaping of property values that may contain:
    	   *
    	   *    COLON (:), SEMICOLON (;), or COMMA (,)
    	   *
    	   * If any of the above are present the result is wrapped
    	   * in double quotes.
    	   *
    	   * @function ICAL.stringify.propertyValue
    	   * @param {String} value      Raw property value
    	   * @return {String}           Given or escaped value when needed
    	   */
    	  stringify.propertyValue = function(value) {

    	    if ((helpers.unescapedIndexOf(value, ',') === -1) &&
    	        (helpers.unescapedIndexOf(value, ':') === -1) &&
    	        (helpers.unescapedIndexOf(value, ';') === -1)) {

    	      return value;
    	    }

    	    return '"' + value + '"';
    	  };

    	  /**
    	   * Converts an array of ical values into a single
    	   * string based on a type and a delimiter value (like ",").
    	   *
    	   * @function ICAL.stringify.multiValue
    	   * @param {Array} values      List of values to convert
    	   * @param {String} delim      Used to join the values (",", ";", ":")
    	   * @param {String} type       Lowecase ical value type
    	   *        (like boolean, date-time, etc..)
    	   * @param {?String} innerMulti If set, each value will again be processed
    	   *        Used for structured values
    	   * @param {ICAL.design.designSet} designSet
    	   *        The design data to use for this property
    	   *
    	   * @return {String}           iCalendar/vCard string for value
    	   */
    	  stringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {
    	    var result = '';
    	    var len = values.length;
    	    var i = 0;

    	    for (; i < len; i++) {
    	      if (innerMulti && Array.isArray(values[i])) {
    	        result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);
    	      } else {
    	        result += stringify.value(values[i], type, designSet, structuredValue);
    	      }

    	      if (i !== (len - 1)) {
    	        result += delim;
    	      }
    	    }

    	    return result;
    	  };

    	  /**
    	   * Processes a single ical value runs the associated "toICAL" method from the
    	   * design value type if available to convert the value.
    	   *
    	   * @function ICAL.stringify.value
    	   * @param {String|Number} value       A formatted value
    	   * @param {String} type               Lowercase iCalendar/vCard value type
    	   *  (like boolean, date-time, etc..)
    	   * @return {String}                   iCalendar/vCard value for single value
    	   */
    	  stringify.value = function(value, type, designSet, structuredValue) {
    	    if (type in designSet.value && 'toICAL' in designSet.value[type]) {
    	      return designSet.value[type].toICAL(value, structuredValue);
    	    }
    	    return value;
    	  };

    	  /**
    	   * Internal helper for rfc6868. Exposing this on ICAL.stringify so that
    	   * hackers can disable the rfc6868 parsing if the really need to.
    	   *
    	   * @param {String} val        The value to unescape
    	   * @return {String}           The escaped value
    	   */
    	  stringify._rfc6868Unescape = function(val) {
    	    return val.replace(/[\n^"]/g, function(x) {
    	      return RFC6868_REPLACE_MAP[x];
    	    });
    	  };
    	  var RFC6868_REPLACE_MAP = { '"': "^'", "\n": "^n", "^": "^^" };

    	  return stringify;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * Contains various functions to parse iCalendar and vCard data.
    	 * @namespace
    	 */
    	ICAL.parse = (function() {

    	  var CHAR = /[^ \t]/;
    	  var VALUE_DELIMITER = ':';
    	  var PARAM_DELIMITER = ';';
    	  var PARAM_NAME_DELIMITER = '=';
    	  var DEFAULT_VALUE_TYPE = 'unknown';
    	  var DEFAULT_PARAM_TYPE = 'text';

    	  var design = ICAL.design;
    	  var helpers = ICAL.helpers;

    	  /**
    	   * An error that occurred during parsing.
    	   *
    	   * @param {String} message        The error message
    	   * @memberof ICAL.parse
    	   * @extends {Error}
    	   * @class
    	   */
    	  function ParserError(message) {
    	    this.message = message;
    	    this.name = 'ParserError';

    	    try {
    	      throw new Error();
    	    } catch (e) {
    	      if (e.stack) {
    	        var split = e.stack.split('\n');
    	        split.shift();
    	        this.stack = split.join('\n');
    	      }
    	    }
    	  }

    	  ParserError.prototype = Error.prototype;

    	  /**
    	   * Parses iCalendar or vCard data into a raw jCal object. Consult
    	   * documentation on the {@tutorial layers|layers of parsing} for more
    	   * details.
    	   *
    	   * @function ICAL.parse
    	   * @variation function
    	   * @todo Fix the API to be more clear on the return type
    	   * @param {String} input      The string data to parse
    	   * @return {Object|Object[]}  A single jCal object, or an array thereof
    	   */
    	  function parser(input) {
    	    var state = {};
    	    var root = state.component = [];

    	    state.stack = [root];

    	    parser._eachLine(input, function(err, line) {
    	      parser._handleContentLine(line, state);
    	    });


    	    // when there are still items on the stack
    	    // throw a fatal error, a component was not closed
    	    // correctly in that case.
    	    if (state.stack.length > 1) {
    	      throw new ParserError(
    	        'invalid ical body. component began but did not end'
    	      );
    	    }

    	    state = null;

    	    return (root.length == 1 ? root[0] : root);
    	  }

    	  /**
    	   * Parse an iCalendar property value into the jCal for a single property
    	   *
    	   * @function ICAL.parse.property
    	   * @param {String} str
    	   *   The iCalendar property string to parse
    	   * @param {ICAL.design.designSet=} designSet
    	   *   The design data to use for this property
    	   * @return {Object}
    	   *   The jCal Object containing the property
    	   */
    	  parser.property = function(str, designSet) {
    	    var state = {
    	      component: [[], []],
    	      designSet: designSet || design.defaultSet
    	    };
    	    parser._handleContentLine(str, state);
    	    return state.component[1][0];
    	  };

    	  /**
    	   * Convenience method to parse a component. You can use ICAL.parse() directly
    	   * instead.
    	   *
    	   * @function ICAL.parse.component
    	   * @see ICAL.parse(function)
    	   * @param {String} str    The iCalendar component string to parse
    	   * @return {Object}       The jCal Object containing the component
    	   */
    	  parser.component = function(str) {
    	    return parser(str);
    	  };

    	  // classes & constants
    	  parser.ParserError = ParserError;

    	  /**
    	   * The state for parsing content lines from an iCalendar/vCard string.
    	   *
    	   * @private
    	   * @memberof ICAL.parse
    	   * @typedef {Object} parserState
    	   * @property {ICAL.design.designSet} designSet    The design set to use for parsing
    	   * @property {ICAL.Component[]} stack             The stack of components being processed
    	   * @property {ICAL.Component} component           The currently active component
    	   */


    	  /**
    	   * Handles a single line of iCalendar/vCard, updating the state.
    	   *
    	   * @private
    	   * @function ICAL.parse._handleContentLine
    	   * @param {String} line               The content line to process
    	   * @param {ICAL.parse.parserState}    The current state of the line parsing
    	   */
    	  parser._handleContentLine = function(line, state) {
    	    // break up the parts of the line
    	    var valuePos = line.indexOf(VALUE_DELIMITER);
    	    var paramPos = line.indexOf(PARAM_DELIMITER);

    	    var lastParamIndex;
    	    var lastValuePos;

    	    // name of property or begin/end
    	    var name;
    	    var value;
    	    // params is only overridden if paramPos !== -1.
    	    // we can't do params = params || {} later on
    	    // because it sacrifices ops.
    	    var params = {};

    	    /**
    	     * Different property cases
    	     *
    	     *
    	     * 1. RRULE:FREQ=foo
    	     *    // FREQ= is not a param but the value
    	     *
    	     * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;
    	     *    // ROLE= is a param because : has not happened yet
    	     */
    	      // when the parameter delimiter is after the
    	      // value delimiter then its not a parameter.

    	    if ((paramPos !== -1 && valuePos !== -1)) {
    	      // when the parameter delimiter is after the
    	      // value delimiter then its not a parameter.
    	      if (paramPos > valuePos) {
    	        paramPos = -1;
    	      }
    	    }

    	    var parsedParams;
    	    if (paramPos !== -1) {
    	      name = line.substring(0, paramPos).toLowerCase();
    	      parsedParams = parser._parseParameters(line.substring(paramPos), 0, state.designSet);
    	      if (parsedParams[2] == -1) {
    	        throw new ParserError("Invalid parameters in '" + line + "'");
    	      }
    	      params = parsedParams[0];
    	      lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;
    	      if ((lastValuePos =
    	        line.substring(lastParamIndex).indexOf(VALUE_DELIMITER)) !== -1) {
    	        value = line.substring(lastParamIndex + lastValuePos + 1);
    	      } else {
    	        throw new ParserError("Missing parameter value in '" + line + "'");
    	      }
    	    } else if (valuePos !== -1) {
    	      // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)
    	      name = line.substring(0, valuePos).toLowerCase();
    	      value = line.substring(valuePos + 1);

    	      if (name === 'begin') {
    	        var newComponent = [value.toLowerCase(), [], []];
    	        if (state.stack.length === 1) {
    	          state.component.push(newComponent);
    	        } else {
    	          state.component[2].push(newComponent);
    	        }
    	        state.stack.push(state.component);
    	        state.component = newComponent;
    	        if (!state.designSet) {
    	          state.designSet = design.getDesignSet(state.component[0]);
    	        }
    	        return;
    	      } else if (name === 'end') {
    	        state.component = state.stack.pop();
    	        return;
    	      }
    	      // If its not begin/end, then this is a property with an empty value,
    	      // which should be considered valid.
    	    } else {
    	      /**
    	       * Invalid line.
    	       * The rational to throw an error is we will
    	       * never be certain that the rest of the file
    	       * is sane and its unlikely that we can serialize
    	       * the result correctly either.
    	       */
    	      throw new ParserError(
    	        'invalid line (no token ";" or ":") "' + line + '"'
    	      );
    	    }

    	    var valueType;
    	    var multiValue = false;
    	    var structuredValue = false;
    	    var propertyDetails;

    	    if (name in state.designSet.property) {
    	      propertyDetails = state.designSet.property[name];

    	      if ('multiValue' in propertyDetails) {
    	        multiValue = propertyDetails.multiValue;
    	      }

    	      if ('structuredValue' in propertyDetails) {
    	        structuredValue = propertyDetails.structuredValue;
    	      }

    	      if (value && 'detectType' in propertyDetails) {
    	        valueType = propertyDetails.detectType(value);
    	      }
    	    }

    	    // attempt to determine value
    	    if (!valueType) {
    	      if (!('value' in params)) {
    	        if (propertyDetails) {
    	          valueType = propertyDetails.defaultType;
    	        } else {
    	          valueType = DEFAULT_VALUE_TYPE;
    	        }
    	      } else {
    	        // possible to avoid this?
    	        valueType = params.value.toLowerCase();
    	      }
    	    }

    	    delete params.value;

    	    /**
    	     * Note on `var result` juggling:
    	     *
    	     * I observed that building the array in pieces has adverse
    	     * effects on performance, so where possible we inline the creation.
    	     * Its a little ugly but resulted in ~2000 additional ops/sec.
    	     */

    	    var result;
    	    if (multiValue && structuredValue) {
    	      value = parser._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);
    	      result = [name, params, valueType, value];
    	    } else if (multiValue) {
    	      result = [name, params, valueType];
    	      parser._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);
    	    } else if (structuredValue) {
    	      value = parser._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);
    	      result = [name, params, valueType, value];
    	    } else {
    	      value = parser._parseValue(value, valueType, state.designSet, false);
    	      result = [name, params, valueType, value];
    	    }
    	    // rfc6350 requires that in vCard 4.0 the first component is the VERSION
    	    // component with as value 4.0, note that 3.0 does not have this requirement.
    	    if (state.component[0] === 'vcard' && state.component[1].length === 0 &&
    	            !(name === 'version' && value === '4.0')) {
    	      state.designSet = design.getDesignSet("vcard3");
    	    }
    	    state.component[1].push(result);
    	  };

    	  /**
    	   * Parse a value from the raw value into the jCard/jCal value.
    	   *
    	   * @private
    	   * @function ICAL.parse._parseValue
    	   * @param {String} value          Original value
    	   * @param {String} type           Type of value
    	   * @param {Object} designSet      The design data to use for this value
    	   * @return {Object} varies on type
    	   */
    	  parser._parseValue = function(value, type, designSet, structuredValue) {
    	    if (type in designSet.value && 'fromICAL' in designSet.value[type]) {
    	      return designSet.value[type].fromICAL(value, structuredValue);
    	    }
    	    return value;
    	  };

    	  /**
    	   * Parse parameters from a string to object.
    	   *
    	   * @function ICAL.parse._parseParameters
    	   * @private
    	   * @param {String} line           A single unfolded line
    	   * @param {Numeric} start         Position to start looking for properties
    	   * @param {Object} designSet      The design data to use for this property
    	   * @return {Object} key/value pairs
    	   */
    	  parser._parseParameters = function(line, start, designSet) {
    	    var lastParam = start;
    	    var pos = 0;
    	    var delim = PARAM_NAME_DELIMITER;
    	    var result = {};
    	    var name, lcname;
    	    var value, valuePos = -1;
    	    var type, multiValue, mvdelim;

    	    // find the next '=' sign
    	    // use lastParam and pos to find name
    	    // check if " is used if so get value from "->"
    	    // then increment pos to find next ;

    	    while ((pos !== false) &&
    	           (pos = helpers.unescapedIndexOf(line, delim, pos + 1)) !== -1) {

    	      name = line.substr(lastParam + 1, pos - lastParam - 1);
    	      if (name.length == 0) {
    	        throw new ParserError("Empty parameter name in '" + line + "'");
    	      }
    	      lcname = name.toLowerCase();
    	      mvdelim = false;
    	      multiValue = false;

    	      if (lcname in designSet.param && designSet.param[lcname].valueType) {
    	        type = designSet.param[lcname].valueType;
    	      } else {
    	        type = DEFAULT_PARAM_TYPE;
    	      }

    	      if (lcname in designSet.param) {
    	        multiValue = designSet.param[lcname].multiValue;
    	        if (designSet.param[lcname].multiValueSeparateDQuote) {
    	          mvdelim = parser._rfc6868Escape('"' + multiValue + '"');
    	        }
    	      }

    	      var nextChar = line[pos + 1];
    	      if (nextChar === '"') {
    	        valuePos = pos + 2;
    	        pos = helpers.unescapedIndexOf(line, '"', valuePos);
    	        if (multiValue && pos != -1) {
    	            var extendedValue = true;
    	            while (extendedValue) {
    	              if (line[pos + 1] == multiValue && line[pos + 2] == '"') {
    	                pos = helpers.unescapedIndexOf(line, '"', pos + 3);
    	              } else {
    	                extendedValue = false;
    	              }
    	            }
    	          }
    	        if (pos === -1) {
    	          throw new ParserError(
    	            'invalid line (no matching double quote) "' + line + '"'
    	          );
    	        }
    	        value = line.substr(valuePos, pos - valuePos);
    	        lastParam = helpers.unescapedIndexOf(line, PARAM_DELIMITER, pos);
    	        if (lastParam === -1) {
    	          pos = false;
    	        }
    	      } else {
    	        valuePos = pos + 1;

    	        // move to next ";"
    	        var nextPos = helpers.unescapedIndexOf(line, PARAM_DELIMITER, valuePos);
    	        var propValuePos = helpers.unescapedIndexOf(line, VALUE_DELIMITER, valuePos);
    	        if (propValuePos !== -1 && nextPos > propValuePos) {
    	          // this is a delimiter in the property value, let's stop here
    	          nextPos = propValuePos;
    	          pos = false;
    	        } else if (nextPos === -1) {
    	          // no ";"
    	          if (propValuePos === -1) {
    	            nextPos = line.length;
    	          } else {
    	            nextPos = propValuePos;
    	          }
    	          pos = false;
    	        } else {
    	          lastParam = nextPos;
    	          pos = nextPos;
    	        }

    	        value = line.substr(valuePos, nextPos - valuePos);
    	      }

    	      value = parser._rfc6868Escape(value);
    	      if (multiValue) {
    	        var delimiter = mvdelim || multiValue;
    	        value = parser._parseMultiValue(value, delimiter, type, [], null, designSet);
    	      } else {
    	        value = parser._parseValue(value, type, designSet);
    	      }

    	      if (multiValue && (lcname in result)) {
    	        if (Array.isArray(result[lcname])) {
    	          result[lcname].push(value);
    	        } else {
    	          result[lcname] = [
    	            result[lcname],
    	            value
    	          ];
    	        }
    	      } else {
    	        result[lcname] = value;
    	      }
    	    }
    	    return [result, value, valuePos];
    	  };

    	  /**
    	   * Internal helper for rfc6868. Exposing this on ICAL.parse so that
    	   * hackers can disable the rfc6868 parsing if the really need to.
    	   *
    	   * @function ICAL.parse._rfc6868Escape
    	   * @param {String} val        The value to escape
    	   * @return {String}           The escaped value
    	   */
    	  parser._rfc6868Escape = function(val) {
    	    return val.replace(/\^['n^]/g, function(x) {
    	      return RFC6868_REPLACE_MAP[x];
    	    });
    	  };
    	  var RFC6868_REPLACE_MAP = { "^'": '"', "^n": "\n", "^^": "^" };

    	  /**
    	   * Parse a multi value string. This function is used either for parsing
    	   * actual multi-value property's values, or for handling parameter values. It
    	   * can be used for both multi-value properties and structured value properties.
    	   *
    	   * @private
    	   * @function ICAL.parse._parseMultiValue
    	   * @param {String} buffer     The buffer containing the full value
    	   * @param {String} delim      The multi-value delimiter
    	   * @param {String} type       The value type to be parsed
    	   * @param {Array.<?>} result        The array to append results to, varies on value type
    	   * @param {String} innerMulti The inner delimiter to split each value with
    	   * @param {ICAL.design.designSet} designSet   The design data for this value
    	   * @return {?|Array.<?>}            Either an array of results, or the first result
    	   */
    	  parser._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {
    	    var pos = 0;
    	    var lastPos = 0;
    	    var value;
    	    if (delim.length === 0) {
    	      return buffer;
    	    }

    	    // split each piece
    	    while ((pos = helpers.unescapedIndexOf(buffer, delim, lastPos)) !== -1) {
    	      value = buffer.substr(lastPos, pos - lastPos);
    	      if (innerMulti) {
    	        value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
    	      } else {
    	        value = parser._parseValue(value, type, designSet, structuredValue);
    	      }
    	      result.push(value);
    	      lastPos = pos + delim.length;
    	    }

    	    // on the last piece take the rest of string
    	    value = buffer.substr(lastPos);
    	    if (innerMulti) {
    	      value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
    	    } else {
    	      value = parser._parseValue(value, type, designSet, structuredValue);
    	    }
    	    result.push(value);

    	    return result.length == 1 ? result[0] : result;
    	  };

    	  /**
    	   * Process a complete buffer of iCalendar/vCard data line by line, correctly
    	   * unfolding content. Each line will be processed with the given callback
    	   *
    	   * @private
    	   * @function ICAL.parse._eachLine
    	   * @param {String} buffer                         The buffer to process
    	   * @param {function(?String, String)} callback    The callback for each line
    	   */
    	  parser._eachLine = function(buffer, callback) {
    	    var len = buffer.length;
    	    var lastPos = buffer.search(CHAR);
    	    var pos = lastPos;
    	    var line;
    	    var firstChar;

    	    var newlineOffset;

    	    do {
    	      pos = buffer.indexOf('\n', lastPos) + 1;

    	      if (pos > 1 && buffer[pos - 2] === '\r') {
    	        newlineOffset = 2;
    	      } else {
    	        newlineOffset = 1;
    	      }

    	      if (pos === 0) {
    	        pos = len;
    	        newlineOffset = 0;
    	      }

    	      firstChar = buffer[lastPos];

    	      if (firstChar === ' ' || firstChar === '\t') {
    	        // add to line
    	        line += buffer.substr(
    	          lastPos + 1,
    	          pos - lastPos - (newlineOffset + 1)
    	        );
    	      } else {
    	        if (line)
    	          callback(null, line);
    	        // push line
    	        line = buffer.substr(
    	          lastPos,
    	          pos - lastPos - newlineOffset
    	        );
    	      }

    	      lastPos = pos;
    	    } while (pos !== len);

    	    // extra ending line
    	    line = line.trim();

    	    if (line.length)
    	      callback(null, line);
    	  };

    	  return parser;

    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.Component = (function() {

    	  var PROPERTY_INDEX = 1;
    	  var COMPONENT_INDEX = 2;
    	  var NAME_INDEX = 0;

    	  /**
    	   * @classdesc
    	   * Wraps a jCal component, adding convenience methods to add, remove and
    	   * update subcomponents and properties.
    	   *
    	   * @class
    	   * @alias ICAL.Component
    	   * @param {Array|String} jCal         Raw jCal component data OR name of new
    	   *                                      component
    	   * @param {ICAL.Component} parent     Parent component to associate
    	   */
    	  function Component(jCal, parent) {
    	    if (typeof(jCal) === 'string') {
    	      // jCal spec (name, properties, components)
    	      jCal = [jCal, [], []];
    	    }

    	    // mostly for legacy reasons.
    	    this.jCal = jCal;

    	    this.parent = parent || null;
    	  }

    	  Component.prototype = {
    	    /**
    	     * Hydrated properties are inserted into the _properties array at the same
    	     * position as in the jCal array, so its possible the array contains
    	     * undefined values for unhydrdated properties. To avoid iterating the
    	     * array when checking if all properties have been hydrated, we save the
    	     * count here.
    	     *
    	     * @type {Number}
    	     * @private
    	     */
    	    _hydratedPropertyCount: 0,

    	    /**
    	     * The same count as for _hydratedPropertyCount, but for subcomponents
    	     *
    	     * @type {Number}
    	     * @private
    	     */
    	    _hydratedComponentCount: 0,

    	    /**
    	     * The name of this component
    	     * @readonly
    	     */
    	    get name() {
    	      return this.jCal[NAME_INDEX];
    	    },

    	    /**
    	     * The design set for this component, e.g. icalendar vs vcard
    	     *
    	     * @type {ICAL.design.designSet}
    	     * @private
    	     */
    	    get _designSet() {
    	      var parentDesign = this.parent && this.parent._designSet;
    	      return parentDesign || ICAL.design.getDesignSet(this.name);
    	    },

    	    _hydrateComponent: function(index) {
    	      if (!this._components) {
    	        this._components = [];
    	        this._hydratedComponentCount = 0;
    	      }

    	      if (this._components[index]) {
    	        return this._components[index];
    	      }

    	      var comp = new Component(
    	        this.jCal[COMPONENT_INDEX][index],
    	        this
    	      );

    	      this._hydratedComponentCount++;
    	      return (this._components[index] = comp);
    	    },

    	    _hydrateProperty: function(index) {
    	      if (!this._properties) {
    	        this._properties = [];
    	        this._hydratedPropertyCount = 0;
    	      }

    	      if (this._properties[index]) {
    	        return this._properties[index];
    	      }

    	      var prop = new ICAL.Property(
    	        this.jCal[PROPERTY_INDEX][index],
    	        this
    	      );

    	      this._hydratedPropertyCount++;
    	      return (this._properties[index] = prop);
    	    },

    	    /**
    	     * Finds first sub component, optionally filtered by name.
    	     *
    	     * @param {String=} name        Optional name to filter by
    	     * @return {?ICAL.Component}     The found subcomponent
    	     */
    	    getFirstSubcomponent: function(name) {
    	      if (name) {
    	        var i = 0;
    	        var comps = this.jCal[COMPONENT_INDEX];
    	        var len = comps.length;

    	        for (; i < len; i++) {
    	          if (comps[i][NAME_INDEX] === name) {
    	            var result = this._hydrateComponent(i);
    	            return result;
    	          }
    	        }
    	      } else {
    	        if (this.jCal[COMPONENT_INDEX].length) {
    	          return this._hydrateComponent(0);
    	        }
    	      }

    	      // ensure we return a value (strict mode)
    	      return null;
    	    },

    	    /**
    	     * Finds all sub components, optionally filtering by name.
    	     *
    	     * @param {String=} name            Optional name to filter by
    	     * @return {ICAL.Component[]}       The found sub components
    	     */
    	    getAllSubcomponents: function(name) {
    	      var jCalLen = this.jCal[COMPONENT_INDEX].length;
    	      var i = 0;

    	      if (name) {
    	        var comps = this.jCal[COMPONENT_INDEX];
    	        var result = [];

    	        for (; i < jCalLen; i++) {
    	          if (name === comps[i][NAME_INDEX]) {
    	            result.push(
    	              this._hydrateComponent(i)
    	            );
    	          }
    	        }
    	        return result;
    	      } else {
    	        if (!this._components ||
    	            (this._hydratedComponentCount !== jCalLen)) {
    	          for (; i < jCalLen; i++) {
    	            this._hydrateComponent(i);
    	          }
    	        }

    	        return this._components || [];
    	      }
    	    },

    	    /**
    	     * Returns true when a named property exists.
    	     *
    	     * @param {String} name     The property name
    	     * @return {Boolean}        True, when property is found
    	     */
    	    hasProperty: function(name) {
    	      var props = this.jCal[PROPERTY_INDEX];
    	      var len = props.length;

    	      var i = 0;
    	      for (; i < len; i++) {
    	        // 0 is property name
    	        if (props[i][NAME_INDEX] === name) {
    	          return true;
    	        }
    	      }

    	      return false;
    	    },

    	    /**
    	     * Finds the first property, optionally with the given name.
    	     *
    	     * @param {String=} name        Lowercase property name
    	     * @return {?ICAL.Property}     The found property
    	     */
    	    getFirstProperty: function(name) {
    	      if (name) {
    	        var i = 0;
    	        var props = this.jCal[PROPERTY_INDEX];
    	        var len = props.length;

    	        for (; i < len; i++) {
    	          if (props[i][NAME_INDEX] === name) {
    	            var result = this._hydrateProperty(i);
    	            return result;
    	          }
    	        }
    	      } else {
    	        if (this.jCal[PROPERTY_INDEX].length) {
    	          return this._hydrateProperty(0);
    	        }
    	      }

    	      return null;
    	    },

    	    /**
    	     * Returns first property's value, if available.
    	     *
    	     * @param {String=} name    Lowercase property name
    	     * @return {?String}        The found property value.
    	     */
    	    getFirstPropertyValue: function(name) {
    	      var prop = this.getFirstProperty(name);
    	      if (prop) {
    	        return prop.getFirstValue();
    	      }

    	      return null;
    	    },

    	    /**
    	     * Get all properties in the component, optionally filtered by name.
    	     *
    	     * @param {String=} name        Lowercase property name
    	     * @return {ICAL.Property[]}    List of properties
    	     */
    	    getAllProperties: function(name) {
    	      var jCalLen = this.jCal[PROPERTY_INDEX].length;
    	      var i = 0;

    	      if (name) {
    	        var props = this.jCal[PROPERTY_INDEX];
    	        var result = [];

    	        for (; i < jCalLen; i++) {
    	          if (name === props[i][NAME_INDEX]) {
    	            result.push(
    	              this._hydrateProperty(i)
    	            );
    	          }
    	        }
    	        return result;
    	      } else {
    	        if (!this._properties ||
    	            (this._hydratedPropertyCount !== jCalLen)) {
    	          for (; i < jCalLen; i++) {
    	            this._hydrateProperty(i);
    	          }
    	        }

    	        return this._properties || [];
    	      }
    	    },

    	    _removeObjectByIndex: function(jCalIndex, cache, index) {
    	      cache = cache || [];
    	      // remove cached version
    	      if (cache[index]) {
    	        var obj = cache[index];
    	        if ("parent" in obj) {
    	            obj.parent = null;
    	        }
    	      }

    	      cache.splice(index, 1);

    	      // remove it from the jCal
    	      this.jCal[jCalIndex].splice(index, 1);
    	    },

    	    _removeObject: function(jCalIndex, cache, nameOrObject) {
    	      var i = 0;
    	      var objects = this.jCal[jCalIndex];
    	      var len = objects.length;
    	      var cached = this[cache];

    	      if (typeof(nameOrObject) === 'string') {
    	        for (; i < len; i++) {
    	          if (objects[i][NAME_INDEX] === nameOrObject) {
    	            this._removeObjectByIndex(jCalIndex, cached, i);
    	            return true;
    	          }
    	        }
    	      } else if (cached) {
    	        for (; i < len; i++) {
    	          if (cached[i] && cached[i] === nameOrObject) {
    	            this._removeObjectByIndex(jCalIndex, cached, i);
    	            return true;
    	          }
    	        }
    	      }

    	      return false;
    	    },

    	    _removeAllObjects: function(jCalIndex, cache, name) {
    	      var cached = this[cache];

    	      // Unfortunately we have to run through all children to reset their
    	      // parent property.
    	      var objects = this.jCal[jCalIndex];
    	      var i = objects.length - 1;

    	      // descending search required because splice
    	      // is used and will effect the indices.
    	      for (; i >= 0; i--) {
    	        if (!name || objects[i][NAME_INDEX] === name) {
    	          this._removeObjectByIndex(jCalIndex, cached, i);
    	        }
    	      }
    	    },

    	    /**
    	     * Adds a single sub component.
    	     *
    	     * @param {ICAL.Component} component        The component to add
    	     * @return {ICAL.Component}                 The passed in component
    	     */
    	    addSubcomponent: function(component) {
    	      if (!this._components) {
    	        this._components = [];
    	        this._hydratedComponentCount = 0;
    	      }

    	      if (component.parent) {
    	        component.parent.removeSubcomponent(component);
    	      }

    	      var idx = this.jCal[COMPONENT_INDEX].push(component.jCal);
    	      this._components[idx - 1] = component;
    	      this._hydratedComponentCount++;
    	      component.parent = this;
    	      return component;
    	    },

    	    /**
    	     * Removes a single component by name or the instance of a specific
    	     * component.
    	     *
    	     * @param {ICAL.Component|String} nameOrComp    Name of component, or component
    	     * @return {Boolean}                            True when comp is removed
    	     */
    	    removeSubcomponent: function(nameOrComp) {
    	      var removed = this._removeObject(COMPONENT_INDEX, '_components', nameOrComp);
    	      if (removed) {
    	        this._hydratedComponentCount--;
    	      }
    	      return removed;
    	    },

    	    /**
    	     * Removes all components or (if given) all components by a particular
    	     * name.
    	     *
    	     * @param {String=} name            Lowercase component name
    	     */
    	    removeAllSubcomponents: function(name) {
    	      var removed = this._removeAllObjects(COMPONENT_INDEX, '_components', name);
    	      this._hydratedComponentCount = 0;
    	      return removed;
    	    },

    	    /**
    	     * Adds an {@link ICAL.Property} to the component.
    	     *
    	     * @param {ICAL.Property} property      The property to add
    	     * @return {ICAL.Property}              The passed in property
    	     */
    	    addProperty: function(property) {
    	      if (!(property instanceof ICAL.Property)) {
    	        throw new TypeError('must instance of ICAL.Property');
    	      }

    	      if (!this._properties) {
    	        this._properties = [];
    	        this._hydratedPropertyCount = 0;
    	      }

    	      if (property.parent) {
    	        property.parent.removeProperty(property);
    	      }

    	      var idx = this.jCal[PROPERTY_INDEX].push(property.jCal);
    	      this._properties[idx - 1] = property;
    	      this._hydratedPropertyCount++;
    	      property.parent = this;
    	      return property;
    	    },

    	    /**
    	     * Helper method to add a property with a value to the component.
    	     *
    	     * @param {String}               name         Property name to add
    	     * @param {String|Number|Object} value        Property value
    	     * @return {ICAL.Property}                    The created property
    	     */
    	    addPropertyWithValue: function(name, value) {
    	      var prop = new ICAL.Property(name);
    	      prop.setValue(value);

    	      this.addProperty(prop);

    	      return prop;
    	    },

    	    /**
    	     * Helper method that will update or create a property of the given name
    	     * and sets its value. If multiple properties with the given name exist,
    	     * only the first is updated.
    	     *
    	     * @param {String}               name         Property name to update
    	     * @param {String|Number|Object} value        Property value
    	     * @return {ICAL.Property}                    The created property
    	     */
    	    updatePropertyWithValue: function(name, value) {
    	      var prop = this.getFirstProperty(name);

    	      if (prop) {
    	        prop.setValue(value);
    	      } else {
    	        prop = this.addPropertyWithValue(name, value);
    	      }

    	      return prop;
    	    },

    	    /**
    	     * Removes a single property by name or the instance of the specific
    	     * property.
    	     *
    	     * @param {String|ICAL.Property} nameOrProp     Property name or instance to remove
    	     * @return {Boolean}                            True, when deleted
    	     */
    	    removeProperty: function(nameOrProp) {
    	      var removed = this._removeObject(PROPERTY_INDEX, '_properties', nameOrProp);
    	      if (removed) {
    	        this._hydratedPropertyCount--;
    	      }
    	      return removed;
    	    },

    	    /**
    	     * Removes all properties associated with this component, optionally
    	     * filtered by name.
    	     *
    	     * @param {String=} name        Lowercase property name
    	     * @return {Boolean}            True, when deleted
    	     */
    	    removeAllProperties: function(name) {
    	      var removed = this._removeAllObjects(PROPERTY_INDEX, '_properties', name);
    	      this._hydratedPropertyCount = 0;
    	      return removed;
    	    },

    	    /**
    	     * Returns the Object representation of this component. The returned object
    	     * is a live jCal object and should be cloned if modified.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      return this.jCal;
    	    },

    	    /**
    	     * The string representation of this component.
    	     * @return {String}
    	     */
    	    toString: function() {
    	      return ICAL.stringify.component(
    	        this.jCal, this._designSet
    	      );
    	    }
    	  };

    	  /**
    	   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.
    	   *
    	   * @param {String} str        The iCalendar string to parse
    	   */
    	  Component.fromString = function(str) {
    	    return new Component(ICAL.parse.component(str));
    	  };

    	  return Component;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.Property = (function() {

    	  var NAME_INDEX = 0;
    	  var PROP_INDEX = 1;
    	  var TYPE_INDEX = 2;
    	  var VALUE_INDEX = 3;

    	  var design = ICAL.design;

    	  /**
    	   * @classdesc
    	   * Provides a layer on top of the raw jCal object for manipulating a single
    	   * property, with its parameters and value.
    	   *
    	   * @description
    	   * Its important to note that mutations done in the wrapper
    	   * directly mutate the jCal object used to initialize.
    	   *
    	   * Can also be used to create new properties by passing
    	   * the name of the property (as a String).
    	   *
    	   * @class
    	   * @alias ICAL.Property
    	   * @param {Array|String} jCal         Raw jCal representation OR
    	   *  the new name of the property
    	   *
    	   * @param {ICAL.Component=} parent    Parent component
    	   */
    	  function Property(jCal, parent) {
    	    this._parent = parent || null;

    	    if (typeof(jCal) === 'string') {
    	      // We are creating the property by name and need to detect the type
    	      this.jCal = [jCal, {}, design.defaultType];
    	      this.jCal[TYPE_INDEX] = this.getDefaultType();
    	    } else {
    	      this.jCal = jCal;
    	    }
    	    this._updateType();
    	  }

    	  Property.prototype = {

    	    /**
    	     * The value type for this property
    	     * @readonly
    	     * @type {String}
    	     */
    	    get type() {
    	      return this.jCal[TYPE_INDEX];
    	    },

    	    /**
    	     * The name of this property, in lowercase.
    	     * @readonly
    	     * @type {String}
    	     */
    	    get name() {
    	      return this.jCal[NAME_INDEX];
    	    },

    	    /**
    	     * The parent component for this property.
    	     * @type {ICAL.Component}
    	     */
    	    get parent() {
    	      return this._parent;
    	    },

    	    set parent(p) {
    	      // Before setting the parent, check if the design set has changed. If it
    	      // has, we later need to update the type if it was unknown before.
    	      var designSetChanged = !this._parent || (p && p._designSet != this._parent._designSet);

    	      this._parent = p;

    	      if (this.type == design.defaultType && designSetChanged) {
    	        this.jCal[TYPE_INDEX] = this.getDefaultType();
    	        this._updateType();
    	      }

    	      return p;
    	    },

    	    /**
    	     * The design set for this property, e.g. icalendar vs vcard
    	     *
    	     * @type {ICAL.design.designSet}
    	     * @private
    	     */
    	    get _designSet() {
    	      return this.parent ? this.parent._designSet : design.defaultSet;
    	    },

    	    /**
    	     * Updates the type metadata from the current jCal type and design set.
    	     *
    	     * @private
    	     */
    	    _updateType: function() {
    	      var designSet = this._designSet;

    	      if (this.type in designSet.value) {
    	        designSet.value[this.type];

    	        if ('decorate' in designSet.value[this.type]) {
    	          this.isDecorated = true;
    	        } else {
    	          this.isDecorated = false;
    	        }

    	        if (this.name in designSet.property) {
    	          this.isMultiValue = ('multiValue' in designSet.property[this.name]);
    	          this.isStructuredValue = ('structuredValue' in designSet.property[this.name]);
    	        }
    	      }
    	    },

    	    /**
    	     * Hydrate a single value. The act of hydrating means turning the raw jCal
    	     * value into a potentially wrapped object, for example {@link ICAL.Time}.
    	     *
    	     * @private
    	     * @param {Number} index        The index of the value to hydrate
    	     * @return {Object}             The decorated value.
    	     */
    	    _hydrateValue: function(index) {
    	      if (this._values && this._values[index]) {
    	        return this._values[index];
    	      }

    	      // for the case where there is no value.
    	      if (this.jCal.length <= (VALUE_INDEX + index)) {
    	        return null;
    	      }

    	      if (this.isDecorated) {
    	        if (!this._values) {
    	          this._values = [];
    	        }
    	        return (this._values[index] = this._decorate(
    	          this.jCal[VALUE_INDEX + index]
    	        ));
    	      } else {
    	        return this.jCal[VALUE_INDEX + index];
    	      }
    	    },

    	    /**
    	     * Decorate a single value, returning its wrapped object. This is used by
    	     * the hydrate function to actually wrap the value.
    	     *
    	     * @private
    	     * @param {?} value         The value to decorate
    	     * @return {Object}         The decorated value
    	     */
    	    _decorate: function(value) {
    	      return this._designSet.value[this.type].decorate(value, this);
    	    },

    	    /**
    	     * Undecorate a single value, returning its raw jCal data.
    	     *
    	     * @private
    	     * @param {Object} value         The value to undecorate
    	     * @return {?}                   The undecorated value
    	     */
    	    _undecorate: function(value) {
    	      return this._designSet.value[this.type].undecorate(value, this);
    	    },

    	    /**
    	     * Sets the value at the given index while also hydrating it. The passed
    	     * value can either be a decorated or undecorated value.
    	     *
    	     * @private
    	     * @param {?} value             The value to set
    	     * @param {Number} index        The index to set it at
    	     */
    	    _setDecoratedValue: function(value, index) {
    	      if (!this._values) {
    	        this._values = [];
    	      }

    	      if (typeof(value) === 'object' && 'icaltype' in value) {
    	        // decorated value
    	        this.jCal[VALUE_INDEX + index] = this._undecorate(value);
    	        this._values[index] = value;
    	      } else {
    	        // undecorated value
    	        this.jCal[VALUE_INDEX + index] = value;
    	        this._values[index] = this._decorate(value);
    	      }
    	    },

    	    /**
    	     * Gets a parameter on the property.
    	     *
    	     * @param {String}        name   Property name (lowercase)
    	     * @return {Array|String}        Property value
    	     */
    	    getParameter: function(name) {
    	      if (name in this.jCal[PROP_INDEX]) {
    	        return this.jCal[PROP_INDEX][name];
    	      } else {
    	        return undefined;
    	      }
    	    },

    	    /**
    	     * Gets first parameter on the property.
    	     *
    	     * @param {String}        name   Property name (lowercase)
    	     * @return {String}        Property value
    	     */
    	    getFirstParameter: function(name) {
    	      var parameters = this.getParameter(name);

    	      if (Array.isArray(parameters)) {
    	        return parameters[0];
    	      }

    	      return parameters;
    	    },

    	    /**
    	     * Sets a parameter on the property.
    	     *
    	     * @param {String}       name     The parameter name
    	     * @param {Array|String} value    The parameter value
    	     */
    	    setParameter: function(name, value) {
    	      var lcname = name.toLowerCase();
    	      if (typeof value === "string" &&
    	          lcname in this._designSet.param &&
    	          'multiValue' in this._designSet.param[lcname]) {
    	          value = [value];
    	      }
    	      this.jCal[PROP_INDEX][name] = value;
    	    },

    	    /**
    	     * Removes a parameter
    	     *
    	     * @param {String} name     The parameter name
    	     */
    	    removeParameter: function(name) {
    	      delete this.jCal[PROP_INDEX][name];
    	    },

    	    /**
    	     * Get the default type based on this property's name.
    	     *
    	     * @return {String}     The default type for this property
    	     */
    	    getDefaultType: function() {
    	      var name = this.jCal[NAME_INDEX];
    	      var designSet = this._designSet;

    	      if (name in designSet.property) {
    	        var details = designSet.property[name];
    	        if ('defaultType' in details) {
    	          return details.defaultType;
    	        }
    	      }
    	      return design.defaultType;
    	    },

    	    /**
    	     * Sets type of property and clears out any existing values of the current
    	     * type.
    	     *
    	     * @param {String} type     New iCAL type (see design.*.values)
    	     */
    	    resetType: function(type) {
    	      this.removeAllValues();
    	      this.jCal[TYPE_INDEX] = type;
    	      this._updateType();
    	    },

    	    /**
    	     * Finds the first property value.
    	     *
    	     * @return {String}         First property value
    	     */
    	    getFirstValue: function() {
    	      return this._hydrateValue(0);
    	    },

    	    /**
    	     * Gets all values on the property.
    	     *
    	     * NOTE: this creates an array during each call.
    	     *
    	     * @return {Array}          List of values
    	     */
    	    getValues: function() {
    	      var len = this.jCal.length - VALUE_INDEX;

    	      if (len < 1) {
    	        // its possible for a property to have no value.
    	        return [];
    	      }

    	      var i = 0;
    	      var result = [];

    	      for (; i < len; i++) {
    	        result[i] = this._hydrateValue(i);
    	      }

    	      return result;
    	    },

    	    /**
    	     * Removes all values from this property
    	     */
    	    removeAllValues: function() {
    	      if (this._values) {
    	        this._values.length = 0;
    	      }
    	      this.jCal.length = 3;
    	    },

    	    /**
    	     * Sets the values of the property.  Will overwrite the existing values.
    	     * This can only be used for multi-value properties.
    	     *
    	     * @param {Array} values    An array of values
    	     */
    	    setValues: function(values) {
    	      if (!this.isMultiValue) {
    	        throw new Error(
    	          this.name + ': does not not support mulitValue.\n' +
    	          'override isMultiValue'
    	        );
    	      }

    	      var len = values.length;
    	      var i = 0;
    	      this.removeAllValues();

    	      if (len > 0 &&
    	          typeof(values[0]) === 'object' &&
    	          'icaltype' in values[0]) {
    	        this.resetType(values[0].icaltype);
    	      }

    	      if (this.isDecorated) {
    	        for (; i < len; i++) {
    	          this._setDecoratedValue(values[i], i);
    	        }
    	      } else {
    	        for (; i < len; i++) {
    	          this.jCal[VALUE_INDEX + i] = values[i];
    	        }
    	      }
    	    },

    	    /**
    	     * Sets the current value of the property. If this is a multi-value
    	     * property, all other values will be removed.
    	     *
    	     * @param {String|Object} value     New property value.
    	     */
    	    setValue: function(value) {
    	      this.removeAllValues();
    	      if (typeof(value) === 'object' && 'icaltype' in value) {
    	        this.resetType(value.icaltype);
    	      }

    	      if (this.isDecorated) {
    	        this._setDecoratedValue(value, 0);
    	      } else {
    	        this.jCal[VALUE_INDEX] = value;
    	      }
    	    },

    	    /**
    	     * Returns the Object representation of this component. The returned object
    	     * is a live jCal object and should be cloned if modified.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      return this.jCal;
    	    },

    	    /**
    	     * The string representation of this component.
    	     * @return {String}
    	     */
    	    toICALString: function() {
    	      return ICAL.stringify.property(
    	        this.jCal, this._designSet, true
    	      );
    	    }
    	  };

    	  /**
    	   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.
    	   *
    	   * @param {String} str                        The iCalendar string to parse
    	   * @param {ICAL.design.designSet=} designSet  The design data to use for this property
    	   * @return {ICAL.Property}                    The created iCalendar property
    	   */
    	  Property.fromString = function(str, designSet) {
    	    return new Property(ICAL.parse.property(str, designSet));
    	  };

    	  return Property;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.UtcOffset = (function() {

    	  /**
    	   * @classdesc
    	   * This class represents the "duration" value type, with various calculation
    	   * and manipulation methods.
    	   *
    	   * @class
    	   * @alias ICAL.UtcOffset
    	   * @param {Object} aData          An object with members of the utc offset
    	   * @param {Number=} aData.hours   The hours for the utc offset
    	   * @param {Number=} aData.minutes The minutes in the utc offset
    	   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
    	   */
    	  function UtcOffset(aData) {
    	    this.fromData(aData);
    	  }

    	  UtcOffset.prototype = {

    	    /**
    	     * The hours in the utc-offset
    	     * @type {Number}
    	     */
    	    hours: 0,

    	    /**
    	     * The minutes in the utc-offset
    	     * @type {Number}
    	     */
    	    minutes: 0,

    	    /**
    	     * The sign of the utc offset, 1 for positive offset, -1 for negative
    	     * offsets.
    	     * @type {Number}
    	     */
    	    factor: 1,

    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @constant
    	     * @type {String}
    	     * @default "utc-offset"
    	     */
    	    icaltype: "utc-offset",

    	    /**
    	     * Returns a clone of the utc offset object.
    	     *
    	     * @return {ICAL.UtcOffset}     The cloned object
    	     */
    	    clone: function() {
    	      return ICAL.UtcOffset.fromSeconds(this.toSeconds());
    	    },

    	    /**
    	     * Sets up the current instance using members from the passed data object.
    	     *
    	     * @param {Object} aData          An object with members of the utc offset
    	     * @param {Number=} aData.hours   The hours for the utc offset
    	     * @param {Number=} aData.minutes The minutes in the utc offset
    	     * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
    	     */
    	    fromData: function(aData) {
    	      if (aData) {
    	        for (var key in aData) {
    	          /* istanbul ignore else */
    	          if (aData.hasOwnProperty(key)) {
    	            this[key] = aData[key];
    	          }
    	        }
    	      }
    	      this._normalize();
    	    },

    	    /**
    	     * Sets up the current instance from the given seconds value. The seconds
    	     * value is truncated to the minute. Offsets are wrapped when the world
    	     * ends, the hour after UTC+14:00 is UTC-12:00.
    	     *
    	     * @param {Number} aSeconds         The seconds to convert into an offset
    	     */
    	    fromSeconds: function(aSeconds) {
    	      var secs = Math.abs(aSeconds);

    	      this.factor = aSeconds < 0 ? -1 : 1;
    	      this.hours = ICAL.helpers.trunc(secs / 3600);

    	      secs -= (this.hours * 3600);
    	      this.minutes = ICAL.helpers.trunc(secs / 60);
    	      return this;
    	    },

    	    /**
    	     * Convert the current offset to a value in seconds
    	     *
    	     * @return {Number}                 The offset in seconds
    	     */
    	    toSeconds: function() {
    	      return this.factor * (60 * this.minutes + 3600 * this.hours);
    	    },

    	    /**
    	     * Compare this utc offset with another one.
    	     *
    	     * @param {ICAL.UtcOffset} other        The other offset to compare with
    	     * @return {Number}                     -1, 0 or 1 for less/equal/greater
    	     */
    	    compare: function icaltime_compare(other) {
    	      var a = this.toSeconds();
    	      var b = other.toSeconds();
    	      return (a > b) - (b > a);
    	    },

    	    _normalize: function() {
    	      // Range: 97200 seconds (with 1 hour inbetween)
    	      var secs = this.toSeconds();
    	      var factor = this.factor;
    	      while (secs < -43200) { // = UTC-12:00
    	        secs += 97200;
    	      }
    	      while (secs > 50400) { // = UTC+14:00
    	        secs -= 97200;
    	      }

    	      this.fromSeconds(secs);

    	      // Avoid changing the factor when on zero seconds
    	      if (secs == 0) {
    	        this.factor = factor;
    	      }
    	    },

    	    /**
    	     * The iCalendar string representation of this utc-offset.
    	     * @return {String}
    	     */
    	    toICALString: function() {
    	      return ICAL.design.icalendar.value['utc-offset'].toICAL(this.toString());
    	    },

    	    /**
    	     * The string representation of this utc-offset.
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      return (this.factor == 1 ? "+" : "-") +
    	              ICAL.helpers.pad2(this.hours) + ':' +
    	              ICAL.helpers.pad2(this.minutes);
    	    }
    	  };

    	  /**
    	   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.
    	   *
    	   * @param {String} aString    The string to parse
    	   * @return {ICAL.Duration}    The created utc-offset instance
    	   */
    	  UtcOffset.fromString = function(aString) {
    	    // -05:00
    	    var options = {};
    	    //TODO: support seconds per rfc5545 ?
    	    options.factor = (aString[0] === '+') ? 1 : -1;
    	    options.hours = ICAL.helpers.strictParseInt(aString.substr(1, 2));
    	    options.minutes = ICAL.helpers.strictParseInt(aString.substr(4, 2));

    	    return new ICAL.UtcOffset(options);
    	  };

    	  /**
    	   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds
    	   * value.
    	   *
    	   * @param {Number} aSeconds       The number of seconds to convert
    	   */
    	  UtcOffset.fromSeconds = function(aSeconds) {
    	    var instance = new UtcOffset();
    	    instance.fromSeconds(aSeconds);
    	    return instance;
    	  };

    	  return UtcOffset;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.Binary = (function() {

    	  /**
    	   * @classdesc
    	   * Represents the BINARY value type, which contains extra methods for
    	   * encoding and decoding.
    	   *
    	   * @class
    	   * @alias ICAL.Binary
    	   * @param {String} aValue     The binary data for this value
    	   */
    	  function Binary(aValue) {
    	    this.value = aValue;
    	  }

    	  Binary.prototype = {
    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @default "binary"
    	     * @constant
    	     */
    	    icaltype: "binary",

    	    /**
    	     * Base64 decode the current value
    	     *
    	     * @return {String}         The base64-decoded value
    	     */
    	    decodeValue: function decodeValue() {
    	      return this._b64_decode(this.value);
    	    },

    	    /**
    	     * Encodes the passed parameter with base64 and sets the internal
    	     * value to the result.
    	     *
    	     * @param {String} aValue      The raw binary value to encode
    	     */
    	    setEncodedValue: function setEncodedValue(aValue) {
    	      this.value = this._b64_encode(aValue);
    	    },

    	    _b64_encode: function base64_encode(data) {
    	      // http://kevin.vanzonneveld.net
    	      // +   original by: Tyler Akins (http://rumkin.com)
    	      // +   improved by: Bayron Guevara
    	      // +   improved by: Thunder.m
    	      // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    	      // +   bugfixed by: Pellentesque Malesuada
    	      // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    	      // +   improved by: Rafał Kukawski (http://kukawski.pl)
    	      // *     example 1: base64_encode('Kevin van Zonneveld');
    	      // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
    	      // mozilla has this native
    	      // - but breaks in 2.0.0.12!
    	      //if (typeof this.window['atob'] == 'function') {
    	      //    return atob(data);
    	      //}
    	      var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
    	                "abcdefghijklmnopqrstuvwxyz0123456789+/=";
    	      var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    	        ac = 0,
    	        enc = "",
    	        tmp_arr = [];

    	      if (!data) {
    	        return data;
    	      }

    	      do { // pack three octets into four hexets
    	        o1 = data.charCodeAt(i++);
    	        o2 = data.charCodeAt(i++);
    	        o3 = data.charCodeAt(i++);

    	        bits = o1 << 16 | o2 << 8 | o3;

    	        h1 = bits >> 18 & 0x3f;
    	        h2 = bits >> 12 & 0x3f;
    	        h3 = bits >> 6 & 0x3f;
    	        h4 = bits & 0x3f;

    	        // use hexets to index into b64, and append result to encoded string
    	        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    	      } while (i < data.length);

    	      enc = tmp_arr.join('');

    	      var r = data.length % 3;

    	      return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);

    	    },

    	    _b64_decode: function base64_decode(data) {
    	      // http://kevin.vanzonneveld.net
    	      // +   original by: Tyler Akins (http://rumkin.com)
    	      // +   improved by: Thunder.m
    	      // +      input by: Aman Gupta
    	      // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    	      // +   bugfixed by: Onno Marsman
    	      // +   bugfixed by: Pellentesque Malesuada
    	      // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    	      // +      input by: Brett Zamir (http://brett-zamir.me)
    	      // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    	      // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
    	      // *     returns 1: 'Kevin van Zonneveld'
    	      // mozilla has this native
    	      // - but breaks in 2.0.0.12!
    	      //if (typeof this.window['btoa'] == 'function') {
    	      //    return btoa(data);
    	      //}
    	      var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
    	                "abcdefghijklmnopqrstuvwxyz0123456789+/=";
    	      var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
    	        ac = 0,
    	        dec = "",
    	        tmp_arr = [];

    	      if (!data) {
    	        return data;
    	      }

    	      data += '';

    	      do { // unpack four hexets into three octets using index points in b64
    	        h1 = b64.indexOf(data.charAt(i++));
    	        h2 = b64.indexOf(data.charAt(i++));
    	        h3 = b64.indexOf(data.charAt(i++));
    	        h4 = b64.indexOf(data.charAt(i++));

    	        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

    	        o1 = bits >> 16 & 0xff;
    	        o2 = bits >> 8 & 0xff;
    	        o3 = bits & 0xff;

    	        if (h3 == 64) {
    	          tmp_arr[ac++] = String.fromCharCode(o1);
    	        } else if (h4 == 64) {
    	          tmp_arr[ac++] = String.fromCharCode(o1, o2);
    	        } else {
    	          tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    	        }
    	      } while (i < data.length);

    	      dec = tmp_arr.join('');

    	      return dec;
    	    },

    	    /**
    	     * The string representation of this value
    	     * @return {String}
    	     */
    	    toString: function() {
    	      return this.value;
    	    }
    	  };

    	  /**
    	   * Creates a binary value from the given string.
    	   *
    	   * @param {String} aString        The binary value string
    	   * @return {ICAL.Binary}          The binary value instance
    	   */
    	  Binary.fromString = function(aString) {
    	    return new Binary(aString);
    	  };

    	  return Binary;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    	(function() {
    	  /**
    	   * @classdesc
    	   * This class represents the "period" value type, with various calculation
    	   * and manipulation methods.
    	   *
    	   * @description
    	   * The passed data object cannot contain both and end date and a duration.
    	   *
    	   * @class
    	   * @param {Object} aData                  An object with members of the period
    	   * @param {ICAL.Time=} aData.start        The start of the period
    	   * @param {ICAL.Time=} aData.end          The end of the period
    	   * @param {ICAL.Duration=} aData.duration The duration of the period
    	   */
    	  ICAL.Period = function icalperiod(aData) {
    	    this.wrappedJSObject = this;

    	    if (aData && 'start' in aData) {
    	      if (aData.start && !(aData.start instanceof ICAL.Time)) {
    	        throw new TypeError('.start must be an instance of ICAL.Time');
    	      }
    	      this.start = aData.start;
    	    }

    	    if (aData && aData.end && aData.duration) {
    	      throw new Error('cannot accept both end and duration');
    	    }

    	    if (aData && 'end' in aData) {
    	      if (aData.end && !(aData.end instanceof ICAL.Time)) {
    	        throw new TypeError('.end must be an instance of ICAL.Time');
    	      }
    	      this.end = aData.end;
    	    }

    	    if (aData && 'duration' in aData) {
    	      if (aData.duration && !(aData.duration instanceof ICAL.Duration)) {
    	        throw new TypeError('.duration must be an instance of ICAL.Duration');
    	      }
    	      this.duration = aData.duration;
    	    }
    	  };

    	  ICAL.Period.prototype = {

    	    /**
    	     * The start of the period
    	     * @type {ICAL.Time}
    	     */
    	    start: null,

    	    /**
    	     * The end of the period
    	     * @type {ICAL.Time}
    	     */
    	    end: null,

    	    /**
    	     * The duration of the period
    	     * @type {ICAL.Duration}
    	     */
    	    duration: null,

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "icalperiod"
    	     */
    	    icalclass: "icalperiod",

    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @constant
    	     * @type {String}
    	     * @default "period"
    	     */
    	    icaltype: "period",

    	    /**
    	     * Returns a clone of the duration object.
    	     *
    	     * @return {ICAL.Period}      The cloned object
    	     */
    	    clone: function() {
    	      return ICAL.Period.fromData({
    	        start: this.start ? this.start.clone() : null,
    	        end: this.end ? this.end.clone() : null,
    	        duration: this.duration ? this.duration.clone() : null
    	      });
    	    },

    	    /**
    	     * Calculates the duration of the period, either directly or by subtracting
    	     * start from end date.
    	     *
    	     * @return {ICAL.Duration}      The calculated duration
    	     */
    	    getDuration: function duration() {
    	      if (this.duration) {
    	        return this.duration;
    	      } else {
    	        return this.end.subtractDate(this.start);
    	      }
    	    },

    	    /**
    	     * Calculates the end date of the period, either directly or by adding
    	     * duration to start date.
    	     *
    	     * @return {ICAL.Time}          The calculated end date
    	     */
    	    getEnd: function() {
    	      if (this.end) {
    	        return this.end;
    	      } else {
    	        var end = this.start.clone();
    	        end.addDuration(this.duration);
    	        return end;
    	      }
    	    },

    	    /**
    	     * The string representation of this period.
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      return this.start + "/" + (this.end || this.duration);
    	    },

    	    /**
    	     * The jCal representation of this period type.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      return [this.start.toString(), (this.end || this.duration).toString()];
    	    },

    	    /**
    	     * The iCalendar string representation of this period.
    	     * @return {String}
    	     */
    	    toICALString: function() {
    	      return this.start.toICALString() + "/" +
    	             (this.end || this.duration).toICALString();
    	    }
    	  };

    	  /**
    	   * Creates a new {@link ICAL.Period} instance from the passed string.
    	   *
    	   * @param {String} str            The string to parse
    	   * @param {ICAL.Property} prop    The property this period will be on
    	   * @return {ICAL.Period}          The created period instance
    	   */
    	  ICAL.Period.fromString = function fromString(str, prop) {
    	    var parts = str.split('/');

    	    if (parts.length !== 2) {
    	      throw new Error(
    	        'Invalid string value: "' + str + '" must contain a "/" char.'
    	      );
    	    }

    	    var options = {
    	      start: ICAL.Time.fromDateTimeString(parts[0], prop)
    	    };

    	    var end = parts[1];

    	    if (ICAL.Duration.isValueString(end)) {
    	      options.duration = ICAL.Duration.fromString(end);
    	    } else {
    	      options.end = ICAL.Time.fromDateTimeString(end, prop);
    	    }

    	    return new ICAL.Period(options);
    	  };

    	  /**
    	   * Creates a new {@link ICAL.Period} instance from the given data object.
    	   * The passed data object cannot contain both and end date and a duration.
    	   *
    	   * @param {Object} aData                  An object with members of the period
    	   * @param {ICAL.Time=} aData.start        The start of the period
    	   * @param {ICAL.Time=} aData.end          The end of the period
    	   * @param {ICAL.Duration=} aData.duration The duration of the period
    	   * @return {ICAL.Period}                  The period instance
    	   */
    	  ICAL.Period.fromData = function fromData(aData) {
    	    return new ICAL.Period(aData);
    	  };

    	  /**
    	   * Returns a new period instance from the given jCal data array. The first
    	   * member is always the start date string, the second member is either a
    	   * duration or end date string.
    	   *
    	   * @param {Array<String,String>} aData    The jCal data array
    	   * @param {ICAL.Property} aProp           The property this jCal data is on
    	   * @param {Boolean} aLenient              If true, data value can be both date and date-time
    	   * @return {ICAL.Period}                  The period instance
    	   */
    	  ICAL.Period.fromJSON = function(aData, aProp, aLenient) {
    	    function fromDateOrDateTimeString(aValue, aProp) {
    	      if (aLenient) {
    	        return ICAL.Time.fromString(aValue, aProp);
    	      } else {
    	        return ICAL.Time.fromDateTimeString(aValue, aProp);
    	      }
    	    }

    	    if (ICAL.Duration.isValueString(aData[1])) {
    	      return ICAL.Period.fromData({
    	        start: fromDateOrDateTimeString(aData[0], aProp),
    	        duration: ICAL.Duration.fromString(aData[1])
    	      });
    	    } else {
    	      return ICAL.Period.fromData({
    	        start: fromDateOrDateTimeString(aData[0], aProp),
    	        end: fromDateOrDateTimeString(aData[1], aProp)
    	      });
    	    }
    	  };
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    	(function() {
    	  var DURATION_LETTERS = /([PDWHMTS]{1,1})/;

    	  /**
    	   * @classdesc
    	   * This class represents the "duration" value type, with various calculation
    	   * and manipulation methods.
    	   *
    	   * @class
    	   * @alias ICAL.Duration
    	   * @param {Object} data               An object with members of the duration
    	   * @param {Number} data.weeks         Duration in weeks
    	   * @param {Number} data.days          Duration in days
    	   * @param {Number} data.hours         Duration in hours
    	   * @param {Number} data.minutes       Duration in minutes
    	   * @param {Number} data.seconds       Duration in seconds
    	   * @param {Boolean} data.isNegative   If true, the duration is negative
    	   */
    	  ICAL.Duration = function icalduration(data) {
    	    this.wrappedJSObject = this;
    	    this.fromData(data);
    	  };

    	  ICAL.Duration.prototype = {
    	    /**
    	     * The weeks in this duration
    	     * @type {Number}
    	     * @default 0
    	     */
    	    weeks: 0,

    	    /**
    	     * The days in this duration
    	     * @type {Number}
    	     * @default 0
    	     */
    	    days: 0,

    	    /**
    	     * The days in this duration
    	     * @type {Number}
    	     * @default 0
    	     */
    	    hours: 0,

    	    /**
    	     * The minutes in this duration
    	     * @type {Number}
    	     * @default 0
    	     */
    	    minutes: 0,

    	    /**
    	     * The seconds in this duration
    	     * @type {Number}
    	     * @default 0
    	     */
    	    seconds: 0,

    	    /**
    	     * The seconds in this duration
    	     * @type {Boolean}
    	     * @default false
    	     */
    	    isNegative: false,

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "icalduration"
    	     */
    	    icalclass: "icalduration",

    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @constant
    	     * @type {String}
    	     * @default "duration"
    	     */
    	    icaltype: "duration",

    	    /**
    	     * Returns a clone of the duration object.
    	     *
    	     * @return {ICAL.Duration}      The cloned object
    	     */
    	    clone: function clone() {
    	      return ICAL.Duration.fromData(this);
    	    },

    	    /**
    	     * The duration value expressed as a number of seconds.
    	     *
    	     * @return {Number}             The duration value in seconds
    	     */
    	    toSeconds: function toSeconds() {
    	      var seconds = this.seconds + 60 * this.minutes + 3600 * this.hours +
    	                    86400 * this.days + 7 * 86400 * this.weeks;
    	      return (this.isNegative ? -seconds : seconds);
    	    },

    	    /**
    	     * Reads the passed seconds value into this duration object. Afterwards,
    	     * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up
    	     * accordingly.
    	     *
    	     * @param {Number} aSeconds     The duration value in seconds
    	     * @return {ICAL.Duration}      Returns this instance
    	     */
    	    fromSeconds: function fromSeconds(aSeconds) {
    	      var secs = Math.abs(aSeconds);

    	      this.isNegative = (aSeconds < 0);
    	      this.days = ICAL.helpers.trunc(secs / 86400);

    	      // If we have a flat number of weeks, use them.
    	      if (this.days % 7 == 0) {
    	        this.weeks = this.days / 7;
    	        this.days = 0;
    	      } else {
    	        this.weeks = 0;
    	      }

    	      secs -= (this.days + 7 * this.weeks) * 86400;

    	      this.hours = ICAL.helpers.trunc(secs / 3600);
    	      secs -= this.hours * 3600;

    	      this.minutes = ICAL.helpers.trunc(secs / 60);
    	      secs -= this.minutes * 60;

    	      this.seconds = secs;
    	      return this;
    	    },

    	    /**
    	     * Sets up the current instance using members from the passed data object.
    	     *
    	     * @param {Object} aData               An object with members of the duration
    	     * @param {Number} aData.weeks         Duration in weeks
    	     * @param {Number} aData.days          Duration in days
    	     * @param {Number} aData.hours         Duration in hours
    	     * @param {Number} aData.minutes       Duration in minutes
    	     * @param {Number} aData.seconds       Duration in seconds
    	     * @param {Boolean} aData.isNegative   If true, the duration is negative
    	     */
    	    fromData: function fromData(aData) {
    	      var propsToCopy = ["weeks", "days", "hours",
    	                         "minutes", "seconds", "isNegative"];
    	      for (var key in propsToCopy) {
    	        /* istanbul ignore if */
    	        if (!propsToCopy.hasOwnProperty(key)) {
    	          continue;
    	        }
    	        var prop = propsToCopy[key];
    	        if (aData && prop in aData) {
    	          this[prop] = aData[prop];
    	        } else {
    	          this[prop] = 0;
    	        }
    	      }
    	    },

    	    /**
    	     * Resets the duration instance to the default values, i.e. PT0S
    	     */
    	    reset: function reset() {
    	      this.isNegative = false;
    	      this.weeks = 0;
    	      this.days = 0;
    	      this.hours = 0;
    	      this.minutes = 0;
    	      this.seconds = 0;
    	    },

    	    /**
    	     * Compares the duration instance with another one.
    	     *
    	     * @param {ICAL.Duration} aOther        The instance to compare with
    	     * @return {Number}                     -1, 0 or 1 for less/equal/greater
    	     */
    	    compare: function compare(aOther) {
    	      var thisSeconds = this.toSeconds();
    	      var otherSeconds = aOther.toSeconds();
    	      return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);
    	    },

    	    /**
    	     * Normalizes the duration instance. For example, a duration with a value
    	     * of 61 seconds will be normalized to 1 minute and 1 second.
    	     */
    	    normalize: function normalize() {
    	      this.fromSeconds(this.toSeconds());
    	    },

    	    /**
    	     * The string representation of this duration.
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      if (this.toSeconds() == 0) {
    	        return "PT0S";
    	      } else {
    	        var str = "";
    	        if (this.isNegative) str += "-";
    	        str += "P";
    	        if (this.weeks) str += this.weeks + "W";
    	        if (this.days) str += this.days + "D";

    	        if (this.hours || this.minutes || this.seconds) {
    	          str += "T";
    	          if (this.hours) str += this.hours + "H";
    	          if (this.minutes) str += this.minutes + "M";
    	          if (this.seconds) str += this.seconds + "S";
    	        }
    	        return str;
    	      }
    	    },

    	    /**
    	     * The iCalendar string representation of this duration.
    	     * @return {String}
    	     */
    	    toICALString: function() {
    	      return this.toString();
    	    }
    	  };

    	  /**
    	   * Returns a new ICAL.Duration instance from the passed seconds value.
    	   *
    	   * @param {Number} aSeconds       The seconds to create the instance from
    	   * @return {ICAL.Duration}        The newly created duration instance
    	   */
    	  ICAL.Duration.fromSeconds = function icalduration_from_seconds(aSeconds) {
    	    return (new ICAL.Duration()).fromSeconds(aSeconds);
    	  };

    	  /**
    	   * Internal helper function to handle a chunk of a duration.
    	   *
    	   * @param {String} letter type of duration chunk
    	   * @param {String} number numeric value or -/+
    	   * @param {Object} dict target to assign values to
    	   */
    	  function parseDurationChunk(letter, number, object) {
    	    var type;
    	    switch (letter) {
    	      case 'P':
    	        if (number && number === '-') {
    	          object.isNegative = true;
    	        } else {
    	          object.isNegative = false;
    	        }
    	        // period
    	        break;
    	      case 'D':
    	        type = 'days';
    	        break;
    	      case 'W':
    	        type = 'weeks';
    	        break;
    	      case 'H':
    	        type = 'hours';
    	        break;
    	      case 'M':
    	        type = 'minutes';
    	        break;
    	      case 'S':
    	        type = 'seconds';
    	        break;
    	      default:
    	        // Not a valid chunk
    	        return 0;
    	    }

    	    if (type) {
    	      if (!number && number !== 0) {
    	        throw new Error(
    	          'invalid duration value: Missing number before "' + letter + '"'
    	        );
    	      }
    	      var num = parseInt(number, 10);
    	      if (ICAL.helpers.isStrictlyNaN(num)) {
    	        throw new Error(
    	          'invalid duration value: Invalid number "' + number + '" before "' + letter + '"'
    	        );
    	      }
    	      object[type] = num;
    	    }

    	    return 1;
    	  }

    	  /**
    	   * Checks if the given string is an iCalendar duration value.
    	   *
    	   * @param {String} value      The raw ical value
    	   * @return {Boolean}          True, if the given value is of the
    	   *                              duration ical type
    	   */
    	  ICAL.Duration.isValueString = function(string) {
    	    return (string[0] === 'P' || string[1] === 'P');
    	  };

    	  /**
    	   * Creates a new {@link ICAL.Duration} instance from the passed string.
    	   *
    	   * @param {String} aStr       The string to parse
    	   * @return {ICAL.Duration}    The created duration instance
    	   */
    	  ICAL.Duration.fromString = function icalduration_from_string(aStr) {
    	    var pos = 0;
    	    var dict = Object.create(null);
    	    var chunks = 0;

    	    while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {
    	      var type = aStr[pos];
    	      var numeric = aStr.substr(0, pos);
    	      aStr = aStr.substr(pos + 1);

    	      chunks += parseDurationChunk(type, numeric, dict);
    	    }

    	    if (chunks < 2) {
    	      // There must be at least a chunk with "P" and some unit chunk
    	      throw new Error(
    	        'invalid duration value: Not enough duration components in "' + aStr + '"'
    	      );
    	    }

    	    return new ICAL.Duration(dict);
    	  };

    	  /**
    	   * Creates a new ICAL.Duration instance from the given data object.
    	   *
    	   * @param {Object} aData               An object with members of the duration
    	   * @param {Number} aData.weeks         Duration in weeks
    	   * @param {Number} aData.days          Duration in days
    	   * @param {Number} aData.hours         Duration in hours
    	   * @param {Number} aData.minutes       Duration in minutes
    	   * @param {Number} aData.seconds       Duration in seconds
    	   * @param {Boolean} aData.isNegative   If true, the duration is negative
    	   * @return {ICAL.Duration}             The createad duration instance
    	   */
    	  ICAL.Duration.fromData = function icalduration_from_data(aData) {
    	    return new ICAL.Duration(aData);
    	  };
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2012 */



    	(function() {
    	  var OPTIONS = ["tzid", "location", "tznames",
    	                 "latitude", "longitude"];

    	  /**
    	   * @classdesc
    	   * Timezone representation, created by passing in a tzid and component.
    	   *
    	   * @example
    	   * var vcalendar;
    	   * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');
    	   * var tzid = timezoneComp.getFirstPropertyValue('tzid');
    	   *
    	   * var timezone = new ICAL.Timezone({
    	   *   component: timezoneComp,
    	   *   tzid
    	   * });
    	   *
    	   * @class
    	   * @param {ICAL.Component|Object} data options for class
    	   * @param {String|ICAL.Component} data.component
    	   *        If data is a simple object, then this member can be set to either a
    	   *        string containing the component data, or an already parsed
    	   *        ICAL.Component
    	   * @param {String} data.tzid      The timezone identifier
    	   * @param {String} data.location  The timezone locationw
    	   * @param {String} data.tznames   An alternative string representation of the
    	   *                                  timezone
    	   * @param {Number} data.latitude  The latitude of the timezone
    	   * @param {Number} data.longitude The longitude of the timezone
    	   */
    	  ICAL.Timezone = function icaltimezone(data) {
    	    this.wrappedJSObject = this;
    	    this.fromData(data);
    	  };

    	  ICAL.Timezone.prototype = {

    	    /**
    	     * Timezone identifier
    	     * @type {String}
    	     */
    	    tzid: "",

    	    /**
    	     * Timezone location
    	     * @type {String}
    	     */
    	    location: "",

    	    /**
    	     * Alternative timezone name, for the string representation
    	     * @type {String}
    	     */
    	    tznames: "",

    	    /**
    	     * The primary latitude for the timezone.
    	     * @type {Number}
    	     */
    	    latitude: 0.0,

    	    /**
    	     * The primary longitude for the timezone.
    	     * @type {Number}
    	     */
    	    longitude: 0.0,

    	    /**
    	     * The vtimezone component for this timezone.
    	     * @type {ICAL.Component}
    	     */
    	    component: null,

    	    /**
    	     * The year this timezone has been expanded to. All timezone transition
    	     * dates until this year are known and can be used for calculation
    	     *
    	     * @private
    	     * @type {Number}
    	     */
    	    expandedUntilYear: 0,

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "icaltimezone"
    	     */
    	    icalclass: "icaltimezone",

    	    /**
    	     * Sets up the current instance using members from the passed data object.
    	     *
    	     * @param {ICAL.Component|Object} aData options for class
    	     * @param {String|ICAL.Component} aData.component
    	     *        If aData is a simple object, then this member can be set to either a
    	     *        string containing the component data, or an already parsed
    	     *        ICAL.Component
    	     * @param {String} aData.tzid      The timezone identifier
    	     * @param {String} aData.location  The timezone locationw
    	     * @param {String} aData.tznames   An alternative string representation of the
    	     *                                  timezone
    	     * @param {Number} aData.latitude  The latitude of the timezone
    	     * @param {Number} aData.longitude The longitude of the timezone
    	     */
    	    fromData: function fromData(aData) {
    	      this.expandedUntilYear = 0;
    	      this.changes = [];

    	      if (aData instanceof ICAL.Component) {
    	        // Either a component is passed directly
    	        this.component = aData;
    	      } else {
    	        // Otherwise the component may be in the data object
    	        if (aData && "component" in aData) {
    	          if (typeof aData.component == "string") {
    	            // If a string was passed, parse it as a component
    	            var jCal = ICAL.parse(aData.component);
    	            this.component = new ICAL.Component(jCal);
    	          } else if (aData.component instanceof ICAL.Component) {
    	            // If it was a component already, then just set it
    	            this.component = aData.component;
    	          } else {
    	            // Otherwise just null out the component
    	            this.component = null;
    	          }
    	        }

    	        // Copy remaining passed properties
    	        for (var key in OPTIONS) {
    	          /* istanbul ignore else */
    	          if (OPTIONS.hasOwnProperty(key)) {
    	            var prop = OPTIONS[key];
    	            if (aData && prop in aData) {
    	              this[prop] = aData[prop];
    	            }
    	          }
    	        }
    	      }

    	      // If we have a component but no TZID, attempt to get it from the
    	      // component's properties.
    	      if (this.component instanceof ICAL.Component && !this.tzid) {
    	        this.tzid = this.component.getFirstPropertyValue('tzid');
    	      }

    	      return this;
    	    },

    	    /**
    	     * Finds the utcOffset the given time would occur in this timezone.
    	     *
    	     * @param {ICAL.Time} tt        The time to check for
    	     * @return {Number} utc offset in seconds
    	     */
    	    utcOffset: function utcOffset(tt) {
    	      if (this == ICAL.Timezone.utcTimezone || this == ICAL.Timezone.localTimezone) {
    	        return 0;
    	      }

    	      this._ensureCoverage(tt.year);

    	      if (!this.changes.length) {
    	        return 0;
    	      }

    	      var tt_change = {
    	        year: tt.year,
    	        month: tt.month,
    	        day: tt.day,
    	        hour: tt.hour,
    	        minute: tt.minute,
    	        second: tt.second
    	      };

    	      var change_num = this._findNearbyChange(tt_change);
    	      var change_num_to_use = -1;
    	      var step = 1;

    	      // TODO: replace with bin search?
    	      for (;;) {
    	        var change = ICAL.helpers.clone(this.changes[change_num], true);
    	        if (change.utcOffset < change.prevUtcOffset) {
    	          ICAL.Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);
    	        } else {
    	          ICAL.Timezone.adjust_change(change, 0, 0, 0,
    	                                          change.prevUtcOffset);
    	        }

    	        var cmp = ICAL.Timezone._compare_change_fn(tt_change, change);

    	        if (cmp >= 0) {
    	          change_num_to_use = change_num;
    	        } else {
    	          step = -1;
    	        }

    	        if (step == -1 && change_num_to_use != -1) {
    	          break;
    	        }

    	        change_num += step;

    	        if (change_num < 0) {
    	          return 0;
    	        }

    	        if (change_num >= this.changes.length) {
    	          break;
    	        }
    	      }

    	      var zone_change = this.changes[change_num_to_use];
    	      var utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;

    	      if (utcOffset_change < 0 && change_num_to_use > 0) {
    	        var tmp_change = ICAL.helpers.clone(zone_change, true);
    	        ICAL.Timezone.adjust_change(tmp_change, 0, 0, 0,
    	                                        tmp_change.prevUtcOffset);

    	        if (ICAL.Timezone._compare_change_fn(tt_change, tmp_change) < 0) {
    	          var prev_zone_change = this.changes[change_num_to_use - 1];

    	          var want_daylight = false; // TODO

    	          if (zone_change.is_daylight != want_daylight &&
    	              prev_zone_change.is_daylight == want_daylight) {
    	            zone_change = prev_zone_change;
    	          }
    	        }
    	      }

    	      // TODO return is_daylight?
    	      return zone_change.utcOffset;
    	    },

    	    _findNearbyChange: function icaltimezone_find_nearby_change(change) {
    	      // find the closest match
    	      var idx = ICAL.helpers.binsearchInsert(
    	        this.changes,
    	        change,
    	        ICAL.Timezone._compare_change_fn
    	      );

    	      if (idx >= this.changes.length) {
    	        return this.changes.length - 1;
    	      }

    	      return idx;
    	    },

    	    _ensureCoverage: function(aYear) {
    	      if (ICAL.Timezone._minimumExpansionYear == -1) {
    	        var today = ICAL.Time.now();
    	        ICAL.Timezone._minimumExpansionYear = today.year;
    	      }

    	      var changesEndYear = aYear;
    	      if (changesEndYear < ICAL.Timezone._minimumExpansionYear) {
    	        changesEndYear = ICAL.Timezone._minimumExpansionYear;
    	      }

    	      changesEndYear += ICAL.Timezone.EXTRA_COVERAGE;

    	      if (changesEndYear > ICAL.Timezone.MAX_YEAR) {
    	        changesEndYear = ICAL.Timezone.MAX_YEAR;
    	      }

    	      if (!this.changes.length || this.expandedUntilYear < aYear) {
    	        var subcomps = this.component.getAllSubcomponents();
    	        var compLen = subcomps.length;
    	        var compIdx = 0;

    	        for (; compIdx < compLen; compIdx++) {
    	          this._expandComponent(
    	            subcomps[compIdx], changesEndYear, this.changes
    	          );
    	        }

    	        this.changes.sort(ICAL.Timezone._compare_change_fn);
    	        this.expandedUntilYear = changesEndYear;
    	      }
    	    },

    	    _expandComponent: function(aComponent, aYear, changes) {
    	      if (!aComponent.hasProperty("dtstart") ||
    	          !aComponent.hasProperty("tzoffsetto") ||
    	          !aComponent.hasProperty("tzoffsetfrom")) {
    	        return null;
    	      }

    	      var dtstart = aComponent.getFirstProperty("dtstart").getFirstValue();
    	      var change;

    	      function convert_tzoffset(offset) {
    	        return offset.factor * (offset.hours * 3600 + offset.minutes * 60);
    	      }

    	      function init_changes() {
    	        var changebase = {};
    	        changebase.is_daylight = (aComponent.name == "daylight");
    	        changebase.utcOffset = convert_tzoffset(
    	          aComponent.getFirstProperty("tzoffsetto").getFirstValue()
    	        );

    	        changebase.prevUtcOffset = convert_tzoffset(
    	          aComponent.getFirstProperty("tzoffsetfrom").getFirstValue()
    	        );

    	        return changebase;
    	      }

    	      if (!aComponent.hasProperty("rrule") && !aComponent.hasProperty("rdate")) {
    	        change = init_changes();
    	        change.year = dtstart.year;
    	        change.month = dtstart.month;
    	        change.day = dtstart.day;
    	        change.hour = dtstart.hour;
    	        change.minute = dtstart.minute;
    	        change.second = dtstart.second;

    	        ICAL.Timezone.adjust_change(change, 0, 0, 0,
    	                                        -change.prevUtcOffset);
    	        changes.push(change);
    	      } else {
    	        var props = aComponent.getAllProperties("rdate");
    	        for (var rdatekey in props) {
    	          /* istanbul ignore if */
    	          if (!props.hasOwnProperty(rdatekey)) {
    	            continue;
    	          }
    	          var rdate = props[rdatekey];
    	          var time = rdate.getFirstValue();
    	          change = init_changes();

    	          change.year = time.year;
    	          change.month = time.month;
    	          change.day = time.day;

    	          if (time.isDate) {
    	            change.hour = dtstart.hour;
    	            change.minute = dtstart.minute;
    	            change.second = dtstart.second;

    	            if (dtstart.zone != ICAL.Timezone.utcTimezone) {
    	              ICAL.Timezone.adjust_change(change, 0, 0, 0,
    	                                              -change.prevUtcOffset);
    	            }
    	          } else {
    	            change.hour = time.hour;
    	            change.minute = time.minute;
    	            change.second = time.second;

    	            if (time.zone != ICAL.Timezone.utcTimezone) {
    	              ICAL.Timezone.adjust_change(change, 0, 0, 0,
    	                                              -change.prevUtcOffset);
    	            }
    	          }

    	          changes.push(change);
    	        }

    	        var rrule = aComponent.getFirstProperty("rrule");

    	        if (rrule) {
    	          rrule = rrule.getFirstValue();
    	          change = init_changes();

    	          if (rrule.until && rrule.until.zone == ICAL.Timezone.utcTimezone) {
    	            rrule.until.adjust(0, 0, 0, change.prevUtcOffset);
    	            rrule.until.zone = ICAL.Timezone.localTimezone;
    	          }

    	          var iterator = rrule.iterator(dtstart);

    	          var occ;
    	          while ((occ = iterator.next())) {
    	            change = init_changes();
    	            if (occ.year > aYear || !occ) {
    	              break;
    	            }

    	            change.year = occ.year;
    	            change.month = occ.month;
    	            change.day = occ.day;
    	            change.hour = occ.hour;
    	            change.minute = occ.minute;
    	            change.second = occ.second;
    	            change.isDate = occ.isDate;

    	            ICAL.Timezone.adjust_change(change, 0, 0, 0,
    	                                            -change.prevUtcOffset);
    	            changes.push(change);
    	          }
    	        }
    	      }

    	      return changes;
    	    },

    	    /**
    	     * The string representation of this timezone.
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      return (this.tznames ? this.tznames : this.tzid);
    	    }
    	  };

    	  ICAL.Timezone._compare_change_fn = function icaltimezone_compare_change_fn(a, b) {
    	    if (a.year < b.year) return -1;
    	    else if (a.year > b.year) return 1;

    	    if (a.month < b.month) return -1;
    	    else if (a.month > b.month) return 1;

    	    if (a.day < b.day) return -1;
    	    else if (a.day > b.day) return 1;

    	    if (a.hour < b.hour) return -1;
    	    else if (a.hour > b.hour) return 1;

    	    if (a.minute < b.minute) return -1;
    	    else if (a.minute > b.minute) return 1;

    	    if (a.second < b.second) return -1;
    	    else if (a.second > b.second) return 1;

    	    return 0;
    	  };

    	  /**
    	   * Convert the date/time from one zone to the next.
    	   *
    	   * @param {ICAL.Time} tt                  The time to convert
    	   * @param {ICAL.Timezone} from_zone       The source zone to convert from
    	   * @param {ICAL.Timezone} to_zone         The target zone to convert to
    	   * @return {ICAL.Time}                    The converted date/time object
    	   */
    	  ICAL.Timezone.convert_time = function icaltimezone_convert_time(tt, from_zone, to_zone) {
    	    if (tt.isDate ||
    	        from_zone.tzid == to_zone.tzid ||
    	        from_zone == ICAL.Timezone.localTimezone ||
    	        to_zone == ICAL.Timezone.localTimezone) {
    	      tt.zone = to_zone;
    	      return tt;
    	    }

    	    var utcOffset = from_zone.utcOffset(tt);
    	    tt.adjust(0, 0, 0, - utcOffset);

    	    utcOffset = to_zone.utcOffset(tt);
    	    tt.adjust(0, 0, 0, utcOffset);

    	    return null;
    	  };

    	  /**
    	   * Creates a new ICAL.Timezone instance from the passed data object.
    	   *
    	   * @param {ICAL.Component|Object} aData options for class
    	   * @param {String|ICAL.Component} aData.component
    	   *        If aData is a simple object, then this member can be set to either a
    	   *        string containing the component data, or an already parsed
    	   *        ICAL.Component
    	   * @param {String} aData.tzid      The timezone identifier
    	   * @param {String} aData.location  The timezone locationw
    	   * @param {String} aData.tznames   An alternative string representation of the
    	   *                                  timezone
    	   * @param {Number} aData.latitude  The latitude of the timezone
    	   * @param {Number} aData.longitude The longitude of the timezone
    	   */
    	  ICAL.Timezone.fromData = function icaltimezone_fromData(aData) {
    	    var tt = new ICAL.Timezone();
    	    return tt.fromData(aData);
    	  };

    	  /**
    	   * The instance describing the UTC timezone
    	   * @type {ICAL.Timezone}
    	   * @constant
    	   * @instance
    	   */
    	  ICAL.Timezone.utcTimezone = ICAL.Timezone.fromData({
    	    tzid: "UTC"
    	  });

    	  /**
    	   * The instance describing the local timezone
    	   * @type {ICAL.Timezone}
    	   * @constant
    	   * @instance
    	   */
    	  ICAL.Timezone.localTimezone = ICAL.Timezone.fromData({
    	    tzid: "floating"
    	  });

    	  /**
    	   * Adjust a timezone change object.
    	   * @private
    	   * @param {Object} change     The timezone change object
    	   * @param {Number} days       The extra amount of days
    	   * @param {Number} hours      The extra amount of hours
    	   * @param {Number} minutes    The extra amount of minutes
    	   * @param {Number} seconds    The extra amount of seconds
    	   */
    	  ICAL.Timezone.adjust_change = function icaltimezone_adjust_change(change, days, hours, minutes, seconds) {
    	    return ICAL.Time.prototype.adjust.call(
    	      change,
    	      days,
    	      hours,
    	      minutes,
    	      seconds,
    	      change
    	    );
    	  };

    	  ICAL.Timezone._minimumExpansionYear = -1;
    	  ICAL.Timezone.MAX_YEAR = 2035; // TODO this is because of time_t, which we don't need. Still usefull?
    	  ICAL.Timezone.EXTRA_COVERAGE = 5;
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.TimezoneService = (function() {
    	  var zones;

    	  /**
    	   * @classdesc
    	   * Singleton class to contain timezones.  Right now its all manual registry in
    	   * the future we may use this class to download timezone information or handle
    	   * loading pre-expanded timezones.
    	   *
    	   * @namespace
    	   * @alias ICAL.TimezoneService
    	   */
    	  var TimezoneService = {
    	    get count() {
    	      return Object.keys(zones).length;
    	    },

    	    reset: function() {
    	      zones = Object.create(null);
    	      var utc = ICAL.Timezone.utcTimezone;

    	      zones.Z = utc;
    	      zones.UTC = utc;
    	      zones.GMT = utc;
    	    },

    	    /**
    	     * Checks if timezone id has been registered.
    	     *
    	     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
    	     * @return {Boolean}        False, when not present
    	     */
    	    has: function(tzid) {
    	      return !!zones[tzid];
    	    },

    	    /**
    	     * Returns a timezone by its tzid if present.
    	     *
    	     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
    	     * @return {?ICAL.Timezone} The timezone, or null if not found
    	     */
    	    get: function(tzid) {
    	      return zones[tzid];
    	    },

    	    /**
    	     * Registers a timezone object or component.
    	     *
    	     * @param {String=} name
    	     *        The name of the timezone. Defaults to the component's TZID if not
    	     *        passed.
    	     * @param {ICAL.Component|ICAL.Timezone} zone
    	     *        The initialized zone or vtimezone.
    	     */
    	    register: function(name, timezone) {
    	      if (name instanceof ICAL.Component) {
    	        if (name.name === 'vtimezone') {
    	          timezone = new ICAL.Timezone(name);
    	          name = timezone.tzid;
    	        }
    	      }

    	      if (timezone instanceof ICAL.Timezone) {
    	        zones[name] = timezone;
    	      } else {
    	        throw new TypeError('timezone must be ICAL.Timezone or ICAL.Component');
    	      }
    	    },

    	    /**
    	     * Removes a timezone by its tzid from the list.
    	     *
    	     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
    	     * @return {?ICAL.Timezone} The removed timezone, or null if not registered
    	     */
    	    remove: function(tzid) {
    	      return (delete zones[tzid]);
    	    }
    	  };

    	  // initialize defaults
    	  TimezoneService.reset();

    	  return TimezoneService;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    	(function() {

    	  /**
    	   * @classdesc
    	   * iCalendar Time representation (similar to JS Date object).  Fully
    	   * independent of system (OS) timezone / time.  Unlike JS Date, the month
    	   * January is 1, not zero.
    	   *
    	   * @example
    	   * var time = new ICAL.Time({
    	   *   year: 2012,
    	   *   month: 10,
    	   *   day: 11
    	   *   minute: 0,
    	   *   second: 0,
    	   *   isDate: false
    	   * });
    	   *
    	   *
    	   * @alias ICAL.Time
    	   * @class
    	   * @param {Object} data           Time initialization
    	   * @param {Number=} data.year     The year for this date
    	   * @param {Number=} data.month    The month for this date
    	   * @param {Number=} data.day      The day for this date
    	   * @param {Number=} data.hour     The hour for this date
    	   * @param {Number=} data.minute   The minute for this date
    	   * @param {Number=} data.second   The second for this date
    	   * @param {Boolean=} data.isDate  If true, the instance represents a date (as
    	   *                                  opposed to a date-time)
    	   * @param {ICAL.Timezone} zone timezone this position occurs in
    	   */
    	  ICAL.Time = function icaltime(data, zone) {
    	    this.wrappedJSObject = this;
    	    var time = this._time = Object.create(null);

    	    /* time defaults */
    	    time.year = 0;
    	    time.month = 1;
    	    time.day = 1;
    	    time.hour = 0;
    	    time.minute = 0;
    	    time.second = 0;
    	    time.isDate = false;

    	    this.fromData(data, zone);
    	  };

    	  ICAL.Time._dowCache = {};
    	  ICAL.Time._wnCache = {};

    	  ICAL.Time.prototype = {

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "icaltime"
    	     */
    	    icalclass: "icaltime",
    	    _cachedUnixTime: null,

    	    /**
    	     * The type name, to be used in the jCal object. This value may change and
    	     * is strictly defined by the {@link ICAL.Time#isDate isDate} member.
    	     * @readonly
    	     * @type {String}
    	     * @default "date-time"
    	     */
    	    get icaltype() {
    	      return this.isDate ? 'date' : 'date-time';
    	    },

    	    /**
    	     * The timezone for this time.
    	     * @type {ICAL.Timezone}
    	     */
    	    zone: null,

    	    /**
    	     * Internal uses to indicate that a change has been made and the next read
    	     * operation must attempt to normalize the value (for example changing the
    	     * day to 33).
    	     *
    	     * @type {Boolean}
    	     * @private
    	     */
    	    _pendingNormalization: false,

    	    /**
    	     * Returns a clone of the time object.
    	     *
    	     * @return {ICAL.Time}              The cloned object
    	     */
    	    clone: function() {
    	      return new ICAL.Time(this._time, this.zone);
    	    },

    	    /**
    	     * Reset the time instance to epoch time
    	     */
    	    reset: function icaltime_reset() {
    	      this.fromData(ICAL.Time.epochTime);
    	      this.zone = ICAL.Timezone.utcTimezone;
    	    },

    	    /**
    	     * Reset the time instance to the given date/time values.
    	     *
    	     * @param {Number} year             The year to set
    	     * @param {Number} month            The month to set
    	     * @param {Number} day              The day to set
    	     * @param {Number} hour             The hour to set
    	     * @param {Number} minute           The minute to set
    	     * @param {Number} second           The second to set
    	     * @param {ICAL.Timezone} timezone  The timezone to set
    	     */
    	    resetTo: function icaltime_resetTo(year, month, day,
    	                                       hour, minute, second, timezone) {
    	      this.fromData({
    	        year: year,
    	        month: month,
    	        day: day,
    	        hour: hour,
    	        minute: minute,
    	        second: second,
    	        zone: timezone
    	      });
    	    },

    	    /**
    	     * Set up the current instance from the Javascript date value.
    	     *
    	     * @param {?Date} aDate     The Javascript Date to read, or null to reset
    	     * @param {Boolean} useUTC  If true, the UTC values of the date will be used
    	     */
    	    fromJSDate: function icaltime_fromJSDate(aDate, useUTC) {
    	      if (!aDate) {
    	        this.reset();
    	      } else {
    	        if (useUTC) {
    	          this.zone = ICAL.Timezone.utcTimezone;
    	          this.year = aDate.getUTCFullYear();
    	          this.month = aDate.getUTCMonth() + 1;
    	          this.day = aDate.getUTCDate();
    	          this.hour = aDate.getUTCHours();
    	          this.minute = aDate.getUTCMinutes();
    	          this.second = aDate.getUTCSeconds();
    	        } else {
    	          this.zone = ICAL.Timezone.localTimezone;
    	          this.year = aDate.getFullYear();
    	          this.month = aDate.getMonth() + 1;
    	          this.day = aDate.getDate();
    	          this.hour = aDate.getHours();
    	          this.minute = aDate.getMinutes();
    	          this.second = aDate.getSeconds();
    	        }
    	      }
    	      this._cachedUnixTime = null;
    	      return this;
    	    },

    	    /**
    	     * Sets up the current instance using members from the passed data object.
    	     *
    	     * @param {Object} aData            Time initialization
    	     * @param {Number=} aData.year      The year for this date
    	     * @param {Number=} aData.month     The month for this date
    	     * @param {Number=} aData.day       The day for this date
    	     * @param {Number=} aData.hour      The hour for this date
    	     * @param {Number=} aData.minute    The minute for this date
    	     * @param {Number=} aData.second    The second for this date
    	     * @param {Boolean=} aData.isDate   If true, the instance represents a date
    	     *                                    (as opposed to a date-time)
    	     * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
    	     */
    	    fromData: function fromData(aData, aZone) {
    	      if (aData) {
    	        for (var key in aData) {
    	          /* istanbul ignore else */
    	          if (Object.prototype.hasOwnProperty.call(aData, key)) {
    	            // ical type cannot be set
    	            if (key === 'icaltype') continue;
    	            this[key] = aData[key];
    	          }
    	        }
    	      }

    	      if (aZone) {
    	        this.zone = aZone;
    	      }

    	      if (aData && !("isDate" in aData)) {
    	        this.isDate = !("hour" in aData);
    	      } else if (aData && ("isDate" in aData)) {
    	        this.isDate = aData.isDate;
    	      }

    	      if (aData && "timezone" in aData) {
    	        var zone = ICAL.TimezoneService.get(
    	          aData.timezone
    	        );

    	        this.zone = zone || ICAL.Timezone.localTimezone;
    	      }

    	      if (aData && "zone" in aData) {
    	        this.zone = aData.zone;
    	      }

    	      if (!this.zone) {
    	        this.zone = ICAL.Timezone.localTimezone;
    	      }

    	      this._cachedUnixTime = null;
    	      return this;
    	    },

    	    /**
    	     * Calculate the day of week.
    	     * @param {ICAL.Time.weekDay=} aWeekStart
    	     *        The week start weekday, defaults to SUNDAY
    	     * @return {ICAL.Time.weekDay}
    	     */
    	    dayOfWeek: function icaltime_dayOfWeek(aWeekStart) {
    	      var firstDow = aWeekStart || ICAL.Time.SUNDAY;
    	      var dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;
    	      if (dowCacheKey in ICAL.Time._dowCache) {
    	        return ICAL.Time._dowCache[dowCacheKey];
    	      }

    	      // Using Zeller's algorithm
    	      var q = this.day;
    	      var m = this.month + (this.month < 3 ? 12 : 0);
    	      var Y = this.year - (this.month < 3 ? 1 : 0);

    	      var h = (q + Y + ICAL.helpers.trunc(((m + 1) * 26) / 10) + ICAL.helpers.trunc(Y / 4));
    	      /* istanbul ignore else */
    	      {
    	        h += ICAL.helpers.trunc(Y / 100) * 6 + ICAL.helpers.trunc(Y / 400);
    	      }

    	      // Normalize to 1 = wkst
    	      h = ((h + 7 - firstDow) % 7) + 1;
    	      ICAL.Time._dowCache[dowCacheKey] = h;
    	      return h;
    	    },

    	    /**
    	     * Calculate the day of year.
    	     * @return {Number}
    	     */
    	    dayOfYear: function dayOfYear() {
    	      var is_leap = (ICAL.Time.isLeapYear(this.year) ? 1 : 0);
    	      var diypm = ICAL.Time.daysInYearPassedMonth;
    	      return diypm[is_leap][this.month - 1] + this.day;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, rewound to the start of the
    	     * week. The resulting ICAL.Time instance is of icaltype date, even if this
    	     * is a date-time.
    	     *
    	     * @param {ICAL.Time.weekDay=} aWeekStart
    	     *        The week start weekday, defaults to SUNDAY
    	     * @return {ICAL.Time}      The start of the week (cloned)
    	     */
    	    startOfWeek: function startOfWeek(aWeekStart) {
    	      var firstDow = aWeekStart || ICAL.Time.SUNDAY;
    	      var result = this.clone();
    	      result.day -= ((this.dayOfWeek() + 7 - firstDow) % 7);
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, shifted to the end of the week.
    	     * The resulting ICAL.Time instance is of icaltype date, even if this is a
    	     * date-time.
    	     *
    	     * @param {ICAL.Time.weekDay=} aWeekStart
    	     *        The week start weekday, defaults to SUNDAY
    	     * @return {ICAL.Time}      The end of the week (cloned)
    	     */
    	    endOfWeek: function endOfWeek(aWeekStart) {
    	      var firstDow = aWeekStart || ICAL.Time.SUNDAY;
    	      var result = this.clone();
    	      result.day += (7 - this.dayOfWeek() + firstDow - ICAL.Time.SUNDAY) % 7;
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, rewound to the start of the
    	     * month. The resulting ICAL.Time instance is of icaltype date, even if
    	     * this is a date-time.
    	     *
    	     * @return {ICAL.Time}      The start of the month (cloned)
    	     */
    	    startOfMonth: function startOfMonth() {
    	      var result = this.clone();
    	      result.day = 1;
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, shifted to the end of the
    	     * month.  The resulting ICAL.Time instance is of icaltype date, even if
    	     * this is a date-time.
    	     *
    	     * @return {ICAL.Time}      The end of the month (cloned)
    	     */
    	    endOfMonth: function endOfMonth() {
    	      var result = this.clone();
    	      result.day = ICAL.Time.daysInMonth(result.month, result.year);
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, rewound to the start of the
    	     * year. The resulting ICAL.Time instance is of icaltype date, even if
    	     * this is a date-time.
    	     *
    	     * @return {ICAL.Time}      The start of the year (cloned)
    	     */
    	    startOfYear: function startOfYear() {
    	      var result = this.clone();
    	      result.day = 1;
    	      result.month = 1;
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * Returns a copy of the current date/time, shifted to the end of the
    	     * year.  The resulting ICAL.Time instance is of icaltype date, even if
    	     * this is a date-time.
    	     *
    	     * @return {ICAL.Time}      The end of the year (cloned)
    	     */
    	    endOfYear: function endOfYear() {
    	      var result = this.clone();
    	      result.day = 31;
    	      result.month = 12;
    	      result.isDate = true;
    	      result.hour = 0;
    	      result.minute = 0;
    	      result.second = 0;
    	      return result;
    	    },

    	    /**
    	     * First calculates the start of the week, then returns the day of year for
    	     * this date. If the day falls into the previous year, the day is zero or negative.
    	     *
    	     * @param {ICAL.Time.weekDay=} aFirstDayOfWeek
    	     *        The week start weekday, defaults to SUNDAY
    	     * @return {Number}     The calculated day of year
    	     */
    	    startDoyWeek: function startDoyWeek(aFirstDayOfWeek) {
    	      var firstDow = aFirstDayOfWeek || ICAL.Time.SUNDAY;
    	      var delta = this.dayOfWeek() - firstDow;
    	      if (delta < 0) delta += 7;
    	      return this.dayOfYear() - delta;
    	    },

    	    /**
    	     * Get the dominical letter for the current year. Letters range from A - G
    	     * for common years, and AG to GF for leap years.
    	     *
    	     * @param {Number} yr           The year to retrieve the letter for
    	     * @return {String}             The dominical letter.
    	     */
    	    getDominicalLetter: function() {
    	      return ICAL.Time.getDominicalLetter(this.year);
    	    },

    	    /**
    	     * Finds the nthWeekDay relative to the current month (not day).  The
    	     * returned value is a day relative the month that this month belongs to so
    	     * 1 would indicate the first of the month and 40 would indicate a day in
    	     * the following month.
    	     *
    	     * @param {Number} aDayOfWeek   Day of the week see the day name constants
    	     * @param {Number} aPos         Nth occurrence of a given week day values
    	     *        of 1 and 0 both indicate the first weekday of that type. aPos may
    	     *        be either positive or negative
    	     *
    	     * @return {Number} numeric value indicating a day relative
    	     *                   to the current month of this time object
    	     */
    	    nthWeekDay: function icaltime_nthWeekDay(aDayOfWeek, aPos) {
    	      var daysInMonth = ICAL.Time.daysInMonth(this.month, this.year);
    	      var weekday;
    	      var pos = aPos;

    	      var start = 0;

    	      var otherDay = this.clone();

    	      if (pos >= 0) {
    	        otherDay.day = 1;

    	        // because 0 means no position has been given
    	        // 1 and 0 indicate the same day.
    	        if (pos != 0) {
    	          // remove the extra numeric value
    	          pos--;
    	        }

    	        // set current start offset to current day.
    	        start = otherDay.day;

    	        // find the current day of week
    	        var startDow = otherDay.dayOfWeek();

    	        // calculate the difference between current
    	        // day of the week and desired day of the week
    	        var offset = aDayOfWeek - startDow;


    	        // if the offset goes into the past
    	        // week we add 7 so its goes into the next
    	        // week. We only want to go forward in time here.
    	        if (offset < 0)
    	          // this is really important otherwise we would
    	          // end up with dates from in the past.
    	          offset += 7;

    	        // add offset to start so start is the same
    	        // day of the week as the desired day of week.
    	        start += offset;

    	        // because we are going to add (and multiply)
    	        // the numeric value of the day we subtract it
    	        // from the start position so not to add it twice.
    	        start -= aDayOfWeek;

    	        // set week day
    	        weekday = aDayOfWeek;
    	      } else {

    	        // then we set it to the last day in the current month
    	        otherDay.day = daysInMonth;

    	        // find the ends weekday
    	        var endDow = otherDay.dayOfWeek();

    	        pos++;

    	        weekday = (endDow - aDayOfWeek);

    	        if (weekday < 0) {
    	          weekday += 7;
    	        }

    	        weekday = daysInMonth - weekday;
    	      }

    	      weekday += pos * 7;

    	      return start + weekday;
    	    },

    	    /**
    	     * Checks if current time is the nth weekday, relative to the current
    	     * month.  Will always return false when rule resolves outside of current
    	     * month.
    	     *
    	     * @param {ICAL.Time.weekDay} aDayOfWeek       Day of week to check
    	     * @param {Number} aPos                        Relative position
    	     * @return {Boolean}                           True, if its the nth weekday
    	     */
    	    isNthWeekDay: function(aDayOfWeek, aPos) {
    	      var dow = this.dayOfWeek();

    	      if (aPos === 0 && dow === aDayOfWeek) {
    	        return true;
    	      }

    	      // get pos
    	      var day = this.nthWeekDay(aDayOfWeek, aPos);

    	      if (day === this.day) {
    	        return true;
    	      }

    	      return false;
    	    },

    	    /**
    	     * Calculates the ISO 8601 week number. The first week of a year is the
    	     * week that contains the first Thursday. The year can have 53 weeks, if
    	     * January 1st is a Friday.
    	     *
    	     * Note there are regions where the first week of the year is the one that
    	     * starts on January 1st, which may offset the week number. Also, if a
    	     * different week start is specified, this will also affect the week
    	     * number.
    	     *
    	     * @see ICAL.Time.weekOneStarts
    	     * @param {ICAL.Time.weekDay} aWeekStart        The weekday the week starts with
    	     * @return {Number}                             The ISO week number
    	     */
    	    weekNumber: function weekNumber(aWeekStart) {
    	      var wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;
    	      if (wnCacheKey in ICAL.Time._wnCache) {
    	        return ICAL.Time._wnCache[wnCacheKey];
    	      }
    	      // This function courtesty of Julian Bucknall, published under the MIT license
    	      // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html
    	      // plus some fixes to be able to use different week starts.
    	      var week1;

    	      var dt = this.clone();
    	      dt.isDate = true;
    	      var isoyear = this.year;

    	      if (dt.month == 12 && dt.day > 25) {
    	        week1 = ICAL.Time.weekOneStarts(isoyear + 1, aWeekStart);
    	        if (dt.compare(week1) < 0) {
    	          week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
    	        } else {
    	          isoyear++;
    	        }
    	      } else {
    	        week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
    	        if (dt.compare(week1) < 0) {
    	          week1 = ICAL.Time.weekOneStarts(--isoyear, aWeekStart);
    	        }
    	      }

    	      var daysBetween = (dt.subtractDate(week1).toSeconds() / 86400);
    	      var answer = ICAL.helpers.trunc(daysBetween / 7) + 1;
    	      ICAL.Time._wnCache[wnCacheKey] = answer;
    	      return answer;
    	    },

    	    /**
    	     * Adds the duration to the current time. The instance is modified in
    	     * place.
    	     *
    	     * @param {ICAL.Duration} aDuration         The duration to add
    	     */
    	    addDuration: function icaltime_add(aDuration) {
    	      var mult = (aDuration.isNegative ? -1 : 1);

    	      // because of the duration optimizations it is much
    	      // more efficient to grab all the values up front
    	      // then set them directly (which will avoid a normalization call).
    	      // So we don't actually normalize until we need it.
    	      var second = this.second;
    	      var minute = this.minute;
    	      var hour = this.hour;
    	      var day = this.day;

    	      second += mult * aDuration.seconds;
    	      minute += mult * aDuration.minutes;
    	      hour += mult * aDuration.hours;
    	      day += mult * aDuration.days;
    	      day += mult * 7 * aDuration.weeks;

    	      this.second = second;
    	      this.minute = minute;
    	      this.hour = hour;
    	      this.day = day;

    	      this._cachedUnixTime = null;
    	    },

    	    /**
    	     * Subtract the date details (_excluding_ timezone).  Useful for finding
    	     * the relative difference between two time objects excluding their
    	     * timezone differences.
    	     *
    	     * @param {ICAL.Time} aDate     The date to substract
    	     * @return {ICAL.Duration}      The difference as a duration
    	     */
    	    subtractDate: function icaltime_subtract(aDate) {
    	      var unixTime = this.toUnixTime() + this.utcOffset();
    	      var other = aDate.toUnixTime() + aDate.utcOffset();
    	      return ICAL.Duration.fromSeconds(unixTime - other);
    	    },

    	    /**
    	     * Subtract the date details, taking timezones into account.
    	     *
    	     * @param {ICAL.Time} aDate  The date to subtract
    	     * @return {ICAL.Duration}  The difference in duration
    	     */
    	    subtractDateTz: function icaltime_subtract_abs(aDate) {
    	      var unixTime = this.toUnixTime();
    	      var other = aDate.toUnixTime();
    	      return ICAL.Duration.fromSeconds(unixTime - other);
    	    },

    	    /**
    	     * Compares the ICAL.Time instance with another one.
    	     *
    	     * @param {ICAL.Duration} aOther        The instance to compare with
    	     * @return {Number}                     -1, 0 or 1 for less/equal/greater
    	     */
    	    compare: function icaltime_compare(other) {
    	      var a = this.toUnixTime();
    	      var b = other.toUnixTime();

    	      if (a > b) return 1;
    	      if (b > a) return -1;
    	      return 0;
    	    },

    	    /**
    	     * Compares only the date part of this instance with another one.
    	     *
    	     * @param {ICAL.Duration} other         The instance to compare with
    	     * @param {ICAL.Timezone} tz            The timezone to compare in
    	     * @return {Number}                     -1, 0 or 1 for less/equal/greater
    	     */
    	    compareDateOnlyTz: function icaltime_compareDateOnlyTz(other, tz) {
    	      function cmp(attr) {
    	        return ICAL.Time._cmp_attr(a, b, attr);
    	      }
    	      var a = this.convertToZone(tz);
    	      var b = other.convertToZone(tz);
    	      var rc = 0;

    	      if ((rc = cmp("year")) != 0) return rc;
    	      if ((rc = cmp("month")) != 0) return rc;
    	      if ((rc = cmp("day")) != 0) return rc;

    	      return rc;
    	    },

    	    /**
    	     * Convert the instance into another timzone. The returned ICAL.Time
    	     * instance is always a copy.
    	     *
    	     * @param {ICAL.Timezone} zone      The zone to convert to
    	     * @return {ICAL.Time}              The copy, converted to the zone
    	     */
    	    convertToZone: function convertToZone(zone) {
    	      var copy = this.clone();
    	      var zone_equals = (this.zone.tzid == zone.tzid);

    	      if (!this.isDate && !zone_equals) {
    	        ICAL.Timezone.convert_time(copy, this.zone, zone);
    	      }

    	      copy.zone = zone;
    	      return copy;
    	    },

    	    /**
    	     * Calculates the UTC offset of the current date/time in the timezone it is
    	     * in.
    	     *
    	     * @return {Number}     UTC offset in seconds
    	     */
    	    utcOffset: function utc_offset() {
    	      if (this.zone == ICAL.Timezone.localTimezone ||
    	          this.zone == ICAL.Timezone.utcTimezone) {
    	        return 0;
    	      } else {
    	        return this.zone.utcOffset(this);
    	      }
    	    },

    	    /**
    	     * Returns an RFC 5545 compliant ical representation of this object.
    	     *
    	     * @return {String} ical date/date-time
    	     */
    	    toICALString: function() {
    	      var string = this.toString();

    	      if (string.length > 10) {
    	        return ICAL.design.icalendar.value['date-time'].toICAL(string);
    	      } else {
    	        return ICAL.design.icalendar.value.date.toICAL(string);
    	      }
    	    },

    	    /**
    	     * The string representation of this date/time, in jCal form
    	     * (including : and - separators).
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      var result = this.year + '-' +
    	                   ICAL.helpers.pad2(this.month) + '-' +
    	                   ICAL.helpers.pad2(this.day);

    	      if (!this.isDate) {
    	          result += 'T' + ICAL.helpers.pad2(this.hour) + ':' +
    	                    ICAL.helpers.pad2(this.minute) + ':' +
    	                    ICAL.helpers.pad2(this.second);

    	        if (this.zone === ICAL.Timezone.utcTimezone) {
    	          result += 'Z';
    	        }
    	      }

    	      return result;
    	    },

    	    /**
    	     * Converts the current instance to a Javascript date
    	     * @return {Date}
    	     */
    	    toJSDate: function toJSDate() {
    	      if (this.zone == ICAL.Timezone.localTimezone) {
    	        if (this.isDate) {
    	          return new Date(this.year, this.month - 1, this.day);
    	        } else {
    	          return new Date(this.year, this.month - 1, this.day,
    	                          this.hour, this.minute, this.second, 0);
    	        }
    	      } else {
    	        return new Date(this.toUnixTime() * 1000);
    	      }
    	    },

    	    _normalize: function icaltime_normalize() {
    	      this._time.isDate;
    	      if (this._time.isDate) {
    	        this._time.hour = 0;
    	        this._time.minute = 0;
    	        this._time.second = 0;
    	      }
    	      this.adjust(0, 0, 0, 0);

    	      return this;
    	    },

    	    /**
    	     * Adjust the date/time by the given offset
    	     *
    	     * @param {Number} aExtraDays       The extra amount of days
    	     * @param {Number} aExtraHours      The extra amount of hours
    	     * @param {Number} aExtraMinutes    The extra amount of minutes
    	     * @param {Number} aExtraSeconds    The extra amount of seconds
    	     * @param {Number=} aTime           The time to adjust, defaults to the
    	     *                                    current instance.
    	     */
    	    adjust: function icaltime_adjust(aExtraDays, aExtraHours,
    	                                     aExtraMinutes, aExtraSeconds, aTime) {

    	      var minutesOverflow, hoursOverflow,
    	          daysOverflow = 0, yearsOverflow = 0;

    	      var second, minute, hour, day;
    	      var daysInMonth;

    	      var time = aTime || this._time;

    	      if (!time.isDate) {
    	        second = time.second + aExtraSeconds;
    	        time.second = second % 60;
    	        minutesOverflow = ICAL.helpers.trunc(second / 60);
    	        if (time.second < 0) {
    	          time.second += 60;
    	          minutesOverflow--;
    	        }

    	        minute = time.minute + aExtraMinutes + minutesOverflow;
    	        time.minute = minute % 60;
    	        hoursOverflow = ICAL.helpers.trunc(minute / 60);
    	        if (time.minute < 0) {
    	          time.minute += 60;
    	          hoursOverflow--;
    	        }

    	        hour = time.hour + aExtraHours + hoursOverflow;

    	        time.hour = hour % 24;
    	        daysOverflow = ICAL.helpers.trunc(hour / 24);
    	        if (time.hour < 0) {
    	          time.hour += 24;
    	          daysOverflow--;
    	        }
    	      }


    	      // Adjust month and year first, because we need to know what month the day
    	      // is in before adjusting it.
    	      if (time.month > 12) {
    	        yearsOverflow = ICAL.helpers.trunc((time.month - 1) / 12);
    	      } else if (time.month < 1) {
    	        yearsOverflow = ICAL.helpers.trunc(time.month / 12) - 1;
    	      }

    	      time.year += yearsOverflow;
    	      time.month -= 12 * yearsOverflow;

    	      // Now take care of the days (and adjust month if needed)
    	      day = time.day + aExtraDays + daysOverflow;

    	      if (day > 0) {
    	        for (;;) {
    	          daysInMonth = ICAL.Time.daysInMonth(time.month, time.year);
    	          if (day <= daysInMonth) {
    	            break;
    	          }

    	          time.month++;
    	          if (time.month > 12) {
    	            time.year++;
    	            time.month = 1;
    	          }

    	          day -= daysInMonth;
    	        }
    	      } else {
    	        while (day <= 0) {
    	          if (time.month == 1) {
    	            time.year--;
    	            time.month = 12;
    	          } else {
    	            time.month--;
    	          }

    	          day += ICAL.Time.daysInMonth(time.month, time.year);
    	        }
    	      }

    	      time.day = day;

    	      this._cachedUnixTime = null;
    	      return this;
    	    },

    	    /**
    	     * Sets up the current instance from unix time, the number of seconds since
    	     * January 1st, 1970.
    	     *
    	     * @param {Number} seconds      The seconds to set up with
    	     */
    	    fromUnixTime: function fromUnixTime(seconds) {
    	      this.zone = ICAL.Timezone.utcTimezone;
    	      var epoch = ICAL.Time.epochTime.clone();
    	      epoch.adjust(0, 0, 0, seconds);

    	      this.year = epoch.year;
    	      this.month = epoch.month;
    	      this.day = epoch.day;
    	      this.hour = epoch.hour;
    	      this.minute = epoch.minute;
    	      this.second = Math.floor(epoch.second);

    	      this._cachedUnixTime = null;
    	    },

    	    /**
    	     * Converts the current instance to seconds since January 1st 1970.
    	     *
    	     * @return {Number}         Seconds since 1970
    	     */
    	    toUnixTime: function toUnixTime() {
    	      if (this._cachedUnixTime !== null) {
    	        return this._cachedUnixTime;
    	      }
    	      var offset = this.utcOffset();

    	      // we use the offset trick to ensure
    	      // that we are getting the actual UTC time
    	      var ms = Date.UTC(
    	        this.year,
    	        this.month - 1,
    	        this.day,
    	        this.hour,
    	        this.minute,
    	        this.second - offset
    	      );

    	      // seconds
    	      this._cachedUnixTime = ms / 1000;
    	      return this._cachedUnixTime;
    	    },

    	    /**
    	     * Converts time to into Object which can be serialized then re-created
    	     * using the constructor.
    	     *
    	     * @example
    	     * // toJSON will automatically be called
    	     * var json = JSON.stringify(mytime);
    	     *
    	     * var deserialized = JSON.parse(json);
    	     *
    	     * var time = new ICAL.Time(deserialized);
    	     *
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      var copy = [
    	        'year',
    	        'month',
    	        'day',
    	        'hour',
    	        'minute',
    	        'second',
    	        'isDate'
    	      ];

    	      var result = Object.create(null);

    	      var i = 0;
    	      var len = copy.length;
    	      var prop;

    	      for (; i < len; i++) {
    	        prop = copy[i];
    	        result[prop] = this[prop];
    	      }

    	      if (this.zone) {
    	        result.timezone = this.zone.tzid;
    	      }

    	      return result;
    	    }

    	  };

    	  (function setupNormalizeAttributes() {
    	    // This needs to run before any instances are created!
    	    function defineAttr(attr) {
    	      Object.defineProperty(ICAL.Time.prototype, attr, {
    	        get: function getTimeAttr() {
    	          if (this._pendingNormalization) {
    	            this._normalize();
    	            this._pendingNormalization = false;
    	          }

    	          return this._time[attr];
    	        },
    	        set: function setTimeAttr(val) {
    	          // Check if isDate will be set and if was not set to normalize date.
    	          // This avoids losing days when seconds, minutes and hours are zeroed
    	          // what normalize will do when time is a date.
    	          if (attr === "isDate" && val && !this._time.isDate) {
    	            this.adjust(0, 0, 0, 0);
    	          }
    	          this._cachedUnixTime = null;
    	          this._pendingNormalization = true;
    	          this._time[attr] = val;

    	          return val;
    	        }
    	      });

    	    }

    	    /* istanbul ignore else */
    	    if ("defineProperty" in Object) {
    	      defineAttr("year");
    	      defineAttr("month");
    	      defineAttr("day");
    	      defineAttr("hour");
    	      defineAttr("minute");
    	      defineAttr("second");
    	      defineAttr("isDate");
    	    }
    	  })();

    	  /**
    	   * Returns the days in the given month
    	   *
    	   * @param {Number} month      The month to check
    	   * @param {Number} year       The year to check
    	   * @return {Number}           The number of days in the month
    	   */
    	  ICAL.Time.daysInMonth = function icaltime_daysInMonth(month, year) {
    	    var _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    	    var days = 30;

    	    if (month < 1 || month > 12) return days;

    	    days = _daysInMonth[month];

    	    if (month == 2) {
    	      days += ICAL.Time.isLeapYear(year);
    	    }

    	    return days;
    	  };

    	  /**
    	   * Checks if the year is a leap year
    	   *
    	   * @param {Number} year       The year to check
    	   * @return {Boolean}          True, if the year is a leap year
    	   */
    	  ICAL.Time.isLeapYear = function isLeapYear(year) {
    	    if (year <= 1752) {
    	      return ((year % 4) == 0);
    	    } else {
    	      return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));
    	    }
    	  };

    	  /**
    	   * Create a new ICAL.Time from the day of year and year. The date is returned
    	   * in floating timezone.
    	   *
    	   * @param {Number} aDayOfYear     The day of year
    	   * @param {Number} aYear          The year to create the instance in
    	   * @return {ICAL.Time}            The created instance with the calculated date
    	   */
    	  ICAL.Time.fromDayOfYear = function icaltime_fromDayOfYear(aDayOfYear, aYear) {
    	    var year = aYear;
    	    var doy = aDayOfYear;
    	    var tt = new ICAL.Time();
    	    tt.auto_normalize = false;
    	    var is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);

    	    if (doy < 1) {
    	      year--;
    	      is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);
    	      doy += ICAL.Time.daysInYearPassedMonth[is_leap][12];
    	      return ICAL.Time.fromDayOfYear(doy, year);
    	    } else if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][12]) {
    	      is_leap = (ICAL.Time.isLeapYear(year) ? 1 : 0);
    	      doy -= ICAL.Time.daysInYearPassedMonth[is_leap][12];
    	      year++;
    	      return ICAL.Time.fromDayOfYear(doy, year);
    	    }

    	    tt.year = year;
    	    tt.isDate = true;

    	    for (var month = 11; month >= 0; month--) {
    	      if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][month]) {
    	        tt.month = month + 1;
    	        tt.day = doy - ICAL.Time.daysInYearPassedMonth[is_leap][month];
    	        break;
    	      }
    	    }

    	    tt.auto_normalize = true;
    	    return tt;
    	  };

    	  /**
    	   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
    	   *
    	   * @deprecated                Use {@link ICAL.Time.fromDateString} instead
    	   * @param {String} str        The string to create from
    	   * @return {ICAL.Time}        The date/time instance
    	   */
    	  ICAL.Time.fromStringv2 = function fromString(str) {
    	    return new ICAL.Time({
    	      year: parseInt(str.substr(0, 4), 10),
    	      month: parseInt(str.substr(5, 2), 10),
    	      day: parseInt(str.substr(8, 2), 10),
    	      isDate: true
    	    });
    	  };

    	  /**
    	   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
    	   *
    	   * @param {String} aValue     The string to create from
    	   * @return {ICAL.Time}        The date/time instance
    	   */
    	  ICAL.Time.fromDateString = function(aValue) {
    	    // Dates should have no timezone.
    	    // Google likes to sometimes specify Z on dates
    	    // we specifically ignore that to avoid issues.

    	    // YYYY-MM-DD
    	    // 2012-10-10
    	    return new ICAL.Time({
    	      year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
    	      month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
    	      day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
    	      isDate: true
    	    });
    	  };

    	  /**
    	   * Returns a new ICAL.Time instance from a date-time string, e.g
    	   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up
    	   * from the property's TZID parameter.
    	   *
    	   * @param {String} aValue         The string to create from
    	   * @param {ICAL.Property=} prop   The property the date belongs to
    	   * @return {ICAL.Time}            The date/time instance
    	   */
    	  ICAL.Time.fromDateTimeString = function(aValue, prop) {
    	    if (aValue.length < 19) {
    	      throw new Error(
    	        'invalid date-time value: "' + aValue + '"'
    	      );
    	    }

    	    var zone;

    	    if (aValue[19] && aValue[19] === 'Z') {
    	      zone = 'Z';
    	    } else if (prop) {
    	      zone = prop.getParameter('tzid');
    	    }

    	    // 2012-10-10T10:10:10(Z)?
    	    var time = new ICAL.Time({
    	      year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
    	      month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
    	      day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
    	      hour: ICAL.helpers.strictParseInt(aValue.substr(11, 2)),
    	      minute: ICAL.helpers.strictParseInt(aValue.substr(14, 2)),
    	      second: ICAL.helpers.strictParseInt(aValue.substr(17, 2)),
    	      timezone: zone
    	    });

    	    return time;
    	  };

    	  /**
    	   * Returns a new ICAL.Time instance from a date or date-time string,
    	   *
    	   * @param {String} aValue         The string to create from
    	   * @param {ICAL.Property=} prop   The property the date belongs to
    	   * @return {ICAL.Time}            The date/time instance
    	   */
    	  ICAL.Time.fromString = function fromString(aValue, aProperty) {
    	    if (aValue.length > 10) {
    	      return ICAL.Time.fromDateTimeString(aValue, aProperty);
    	    } else {
    	      return ICAL.Time.fromDateString(aValue);
    	    }
    	  };

    	  /**
    	   * Creates a new ICAL.Time instance from the given Javascript Date.
    	   *
    	   * @param {?Date} aDate     The Javascript Date to read, or null to reset
    	   * @param {Boolean} useUTC  If true, the UTC values of the date will be used
    	   */
    	  ICAL.Time.fromJSDate = function fromJSDate(aDate, useUTC) {
    	    var tt = new ICAL.Time();
    	    return tt.fromJSDate(aDate, useUTC);
    	  };

    	  /**
    	   * Creates a new ICAL.Time instance from the the passed data object.
    	   *
    	   * @param {Object} aData            Time initialization
    	   * @param {Number=} aData.year      The year for this date
    	   * @param {Number=} aData.month     The month for this date
    	   * @param {Number=} aData.day       The day for this date
    	   * @param {Number=} aData.hour      The hour for this date
    	   * @param {Number=} aData.minute    The minute for this date
    	   * @param {Number=} aData.second    The second for this date
    	   * @param {Boolean=} aData.isDate   If true, the instance represents a date
    	   *                                    (as opposed to a date-time)
    	   * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
    	   */
    	  ICAL.Time.fromData = function fromData(aData, aZone) {
    	    var t = new ICAL.Time();
    	    return t.fromData(aData, aZone);
    	  };

    	  /**
    	   * Creates a new ICAL.Time instance from the current moment.
    	   * @return {ICAL.Time}
    	   */
    	  ICAL.Time.now = function icaltime_now() {
    	    return ICAL.Time.fromJSDate(new Date(), false);
    	  };

    	  /**
    	   * Returns the date on which ISO week number 1 starts.
    	   *
    	   * @see ICAL.Time#weekNumber
    	   * @param {Number} aYear                  The year to search in
    	   * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday, used for calculation.
    	   * @return {ICAL.Time}                    The date on which week number 1 starts
    	   */
    	  ICAL.Time.weekOneStarts = function weekOneStarts(aYear, aWeekStart) {
    	    var t = ICAL.Time.fromData({
    	      year: aYear,
    	      month: 1,
    	      day: 1,
    	      isDate: true
    	    });

    	    var dow = t.dayOfWeek();
    	    var wkst = aWeekStart || ICAL.Time.DEFAULT_WEEK_START;
    	    if (dow > ICAL.Time.THURSDAY) {
    	      t.day += 7;
    	    }
    	    if (wkst > ICAL.Time.THURSDAY) {
    	      t.day -= 7;
    	    }

    	    t.day -= dow - wkst;

    	    return t;
    	  };

    	  /**
    	   * Get the dominical letter for the given year. Letters range from A - G for
    	   * common years, and AG to GF for leap years.
    	   *
    	   * @param {Number} yr           The year to retrieve the letter for
    	   * @return {String}             The dominical letter.
    	   */
    	  ICAL.Time.getDominicalLetter = function(yr) {
    	    var LTRS = "GFEDCBA";
    	    var dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;
    	    var isLeap = ICAL.Time.isLeapYear(yr);
    	    if (isLeap) {
    	      return LTRS[(dom + 6) % 7] + LTRS[dom];
    	    } else {
    	      return LTRS[dom];
    	    }
    	  };

    	  /**
    	   * January 1st, 1970 as an ICAL.Time.
    	   * @type {ICAL.Time}
    	   * @constant
    	   * @instance
    	   */
    	  ICAL.Time.epochTime = ICAL.Time.fromData({
    	    year: 1970,
    	    month: 1,
    	    day: 1,
    	    hour: 0,
    	    minute: 0,
    	    second: 0,
    	    isDate: false,
    	    timezone: "Z"
    	  });

    	  ICAL.Time._cmp_attr = function _cmp_attr(a, b, attr) {
    	    if (a[attr] > b[attr]) return 1;
    	    if (a[attr] < b[attr]) return -1;
    	    return 0;
    	  };

    	  /**
    	   * The days that have passed in the year after a given month. The array has
    	   * two members, one being an array of passed days for non-leap years, the
    	   * other analog for leap years.
    	   * @example
    	   * var isLeapYear = ICAL.Time.isLeapYear(year);
    	   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];
    	   * @type {Array.<Array.<Number>>}
    	   */
    	  ICAL.Time.daysInYearPassedMonth = [
    	    [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],
    	    [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]
    	  ];

    	  /**
    	   * The weekday, 1 = SUNDAY, 7 = SATURDAY. Access via
    	   * ICAL.Time.MONDAY, ICAL.Time.TUESDAY, ...
    	   *
    	   * @typedef {Number} weekDay
    	   * @memberof ICAL.Time
    	   */

    	  ICAL.Time.SUNDAY = 1;
    	  ICAL.Time.MONDAY = 2;
    	  ICAL.Time.TUESDAY = 3;
    	  ICAL.Time.WEDNESDAY = 4;
    	  ICAL.Time.THURSDAY = 5;
    	  ICAL.Time.FRIDAY = 6;
    	  ICAL.Time.SATURDAY = 7;

    	  /**
    	   * The default weekday for the WKST part.
    	   * @constant
    	   * @default ICAL.Time.MONDAY
    	   */
    	  ICAL.Time.DEFAULT_WEEK_START = ICAL.Time.MONDAY;
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2015 */



    	(function() {

    	  /**
    	   * Describes a vCard time, which has slight differences to the ICAL.Time.
    	   * Properties can be null if not specified, for example for dates with
    	   * reduced accuracy or truncation.
    	   *
    	   * Note that currently not all methods are correctly re-implemented for
    	   * VCardTime. For example, comparison will have undefined results when some
    	   * members are null.
    	   *
    	   * Also, normalization is not yet implemented for this class!
    	   *
    	   * @alias ICAL.VCardTime
    	   * @class
    	   * @extends {ICAL.Time}
    	   * @param {Object} data                           The data for the time instance
    	   * @param {Number=} data.year                     The year for this date
    	   * @param {Number=} data.month                    The month for this date
    	   * @param {Number=} data.day                      The day for this date
    	   * @param {Number=} data.hour                     The hour for this date
    	   * @param {Number=} data.minute                   The minute for this date
    	   * @param {Number=} data.second                   The second for this date
    	   * @param {ICAL.Timezone|ICAL.UtcOffset} zone     The timezone to use
    	   * @param {String} icaltype                       The type for this date/time object
    	   */
    	  ICAL.VCardTime = function(data, zone, icaltype) {
    	    this.wrappedJSObject = this;
    	    var time = this._time = Object.create(null);

    	    time.year = null;
    	    time.month = null;
    	    time.day = null;
    	    time.hour = null;
    	    time.minute = null;
    	    time.second = null;

    	    this.icaltype = icaltype || "date-and-or-time";

    	    this.fromData(data, zone);
    	  };
    	  ICAL.helpers.inherits(ICAL.Time, ICAL.VCardTime, /** @lends ICAL.VCardTime */ {

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "vcardtime"
    	     */
    	    icalclass: "vcardtime",

    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @type {String}
    	     * @default "date-and-or-time"
    	     */
    	    icaltype: "date-and-or-time",

    	    /**
    	     * The timezone. This can either be floating, UTC, or an instance of
    	     * ICAL.UtcOffset.
    	     * @type {ICAL.Timezone|ICAL.UtcOFfset}
    	     */
    	    zone: null,

    	    /**
    	     * Returns a clone of the vcard date/time object.
    	     *
    	     * @return {ICAL.VCardTime}     The cloned object
    	     */
    	    clone: function() {
    	      return new ICAL.VCardTime(this._time, this.zone, this.icaltype);
    	    },

    	    _normalize: function() {
    	      return this;
    	    },

    	    /**
    	     * @inheritdoc
    	     */
    	    utcOffset: function() {
    	      if (this.zone instanceof ICAL.UtcOffset) {
    	        return this.zone.toSeconds();
    	      } else {
    	        return ICAL.Time.prototype.utcOffset.apply(this, arguments);
    	      }
    	    },

    	    /**
    	     * Returns an RFC 6350 compliant representation of this object.
    	     *
    	     * @return {String}         vcard date/time string
    	     */
    	    toICALString: function() {
    	      return ICAL.design.vcard.value[this.icaltype].toICAL(this.toString());
    	    },

    	    /**
    	     * The string representation of this date/time, in jCard form
    	     * (including : and - separators).
    	     * @return {String}
    	     */
    	    toString: function toString() {
    	      var p2 = ICAL.helpers.pad2;
    	      var y = this.year, m = this.month, d = this.day;
    	      var h = this.hour, mm = this.minute, s = this.second;

    	      var hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;
    	      var hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;

    	      var datepart = (hasYear ? p2(y) + (hasMonth || hasDay ? '-' : '') : (hasMonth || hasDay ? '--' : '')) +
    	                     (hasMonth ? p2(m) : '') +
    	                     (hasDay ? '-' + p2(d) : '');
    	      var timepart = (hasHour ? p2(h) : '-') + (hasHour && hasMinute ? ':' : '') +
    	                     (hasMinute ? p2(mm) : '') + (!hasHour && !hasMinute ? '-' : '') +
    	                     (hasMinute && hasSecond ? ':' : '') +
    	                     (hasSecond ? p2(s) : '');

    	      var zone;
    	      if (this.zone === ICAL.Timezone.utcTimezone) {
    	        zone = 'Z';
    	      } else if (this.zone instanceof ICAL.UtcOffset) {
    	        zone = this.zone.toString();
    	      } else if (this.zone === ICAL.Timezone.localTimezone) {
    	        zone = '';
    	      } else if (this.zone instanceof ICAL.Timezone) {
    	        var offset = ICAL.UtcOffset.fromSeconds(this.zone.utcOffset(this));
    	        zone = offset.toString();
    	      } else {
    	        zone = '';
    	      }

    	      switch (this.icaltype) {
    	        case "time":
    	          return timepart + zone;
    	        case "date-and-or-time":
    	        case "date-time":
    	          return datepart + (timepart == '--' ? '' : 'T' + timepart + zone);
    	        case "date":
    	          return datepart;
    	      }
    	      return null;
    	    }
    	  });

    	  /**
    	   * Returns a new ICAL.VCardTime instance from a date and/or time string.
    	   *
    	   * @param {String} aValue     The string to create from
    	   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time
    	   * @return {ICAL.VCardTime}   The date/time instance
    	   */
    	  ICAL.VCardTime.fromDateAndOrTimeString = function(aValue, aIcalType) {
    	    function part(v, s, e) {
    	      return v ? ICAL.helpers.strictParseInt(v.substr(s, e)) : null;
    	    }
    	    var parts = aValue.split('T');
    	    var dt = parts[0], tmz = parts[1];
    	    var splitzone = tmz ? ICAL.design.vcard.value.time._splitZone(tmz) : [];
    	    var zone = splitzone[0], tm = splitzone[1];

    	    ICAL.helpers.strictParseInt;
    	    var dtlen = dt ? dt.length : 0;
    	    var tmlen = tm ? tm.length : 0;

    	    var hasDashDate = dt && dt[0] == '-' && dt[1] == '-';
    	    var hasDashTime = tm && tm[0] == '-';

    	    var o = {
    	      year: hasDashDate ? null : part(dt, 0, 4),
    	      month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,
    	      day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,

    	      hour: hasDashTime ? null : part(tm, 0, 2),
    	      minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,
    	      second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null
    	    };

    	    if (zone == 'Z') {
    	      zone = ICAL.Timezone.utcTimezone;
    	    } else if (zone && zone[3] == ':') {
    	      zone = ICAL.UtcOffset.fromString(zone);
    	    } else {
    	      zone = null;
    	    }

    	    return new ICAL.VCardTime(o, zone, aIcalType);
    	  };
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */



    	(function() {
    	  var DOW_MAP = {
    	    SU: ICAL.Time.SUNDAY,
    	    MO: ICAL.Time.MONDAY,
    	    TU: ICAL.Time.TUESDAY,
    	    WE: ICAL.Time.WEDNESDAY,
    	    TH: ICAL.Time.THURSDAY,
    	    FR: ICAL.Time.FRIDAY,
    	    SA: ICAL.Time.SATURDAY
    	  };

    	  var REVERSE_DOW_MAP = {};
    	  for (var key in DOW_MAP) {
    	    /* istanbul ignore else */
    	    if (DOW_MAP.hasOwnProperty(key)) {
    	      REVERSE_DOW_MAP[DOW_MAP[key]] = key;
    	    }
    	  }

    	  /**
    	   * @classdesc
    	   * This class represents the "recur" value type, with various calculation
    	   * and manipulation methods.
    	   *
    	   * @class
    	   * @alias ICAL.Recur
    	   * @param {Object} data                               An object with members of the recurrence
    	   * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
    	   * @param {Number=} data.interval                     The INTERVAL value
    	   * @param {ICAL.Time.weekDay=} data.wkst              The week start value
    	   * @param {ICAL.Time=} data.until                     The end of the recurrence set
    	   * @param {Number=} data.count                        The number of occurrences
    	   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
    	   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
    	   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
    	   * @param {Array.<String>=} data.byday                The BYDAY values
    	   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
    	   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
    	   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
    	   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
    	   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
    	   */
    	  ICAL.Recur = function icalrecur(data) {
    	    this.wrappedJSObject = this;
    	    this.parts = {};

    	    if (data && typeof(data) === 'object') {
    	      this.fromData(data);
    	    }
    	  };

    	  ICAL.Recur.prototype = {
    	    /**
    	     * An object holding the BY-parts of the recurrence rule
    	     * @type {Object}
    	     */
    	    parts: null,

    	    /**
    	     * The interval value for the recurrence rule.
    	     * @type {Number}
    	     */
    	    interval: 1,

    	    /**
    	     * The week start day
    	     *
    	     * @type {ICAL.Time.weekDay}
    	     * @default ICAL.Time.MONDAY
    	     */
    	    wkst: ICAL.Time.MONDAY,

    	    /**
    	     * The end of the recurrence
    	     * @type {?ICAL.Time}
    	     */
    	    until: null,

    	    /**
    	     * The maximum number of occurrences
    	     * @type {?Number}
    	     */
    	    count: null,

    	    /**
    	     * The frequency value.
    	     * @type {ICAL.Recur.frequencyValues}
    	     */
    	    freq: null,

    	    /**
    	     * The class identifier.
    	     * @constant
    	     * @type {String}
    	     * @default "icalrecur"
    	     */
    	    icalclass: "icalrecur",

    	    /**
    	     * The type name, to be used in the jCal object.
    	     * @constant
    	     * @type {String}
    	     * @default "recur"
    	     */
    	    icaltype: "recur",

    	    /**
    	     * Create a new iterator for this recurrence rule. The passed start date
    	     * must be the start date of the event, not the start of the range to
    	     * search in.
    	     *
    	     * @example
    	     * var recur = comp.getFirstPropertyValue('rrule');
    	     * var dtstart = comp.getFirstPropertyValue('dtstart');
    	     * var iter = recur.iterator(dtstart);
    	     * for (var next = iter.next(); next; next = iter.next()) {
    	     *   if (next.compare(rangeStart) < 0) {
    	     *     continue;
    	     *   }
    	     *   console.log(next.toString());
    	     * }
    	     *
    	     * @param {ICAL.Time} aStart        The item's start date
    	     * @return {ICAL.RecurIterator}     The recurrence iterator
    	     */
    	    iterator: function(aStart) {
    	      return new ICAL.RecurIterator({
    	        rule: this,
    	        dtstart: aStart
    	      });
    	    },

    	    /**
    	     * Returns a clone of the recurrence object.
    	     *
    	     * @return {ICAL.Recur}      The cloned object
    	     */
    	    clone: function clone() {
    	      return new ICAL.Recur(this.toJSON());
    	    },

    	    /**
    	     * Checks if the current rule is finite, i.e. has a count or until part.
    	     *
    	     * @return {Boolean}        True, if the rule is finite
    	     */
    	    isFinite: function isfinite() {
    	      return !!(this.count || this.until);
    	    },

    	    /**
    	     * Checks if the current rule has a count part, and not limited by an until
    	     * part.
    	     *
    	     * @return {Boolean}        True, if the rule is by count
    	     */
    	    isByCount: function isbycount() {
    	      return !!(this.count && !this.until);
    	    },

    	    /**
    	     * Adds a component (part) to the recurrence rule. This is not a component
    	     * in the sense of {@link ICAL.Component}, but a part of the recurrence
    	     * rule, i.e. BYMONTH.
    	     *
    	     * @param {String} aType            The name of the component part
    	     * @param {Array|String} aValue     The component value
    	     */
    	    addComponent: function addPart(aType, aValue) {
    	      var ucname = aType.toUpperCase();
    	      if (ucname in this.parts) {
    	        this.parts[ucname].push(aValue);
    	      } else {
    	        this.parts[ucname] = [aValue];
    	      }
    	    },

    	    /**
    	     * Sets the component value for the given by-part.
    	     *
    	     * @param {String} aType        The component part name
    	     * @param {Array} aValues       The component values
    	     */
    	    setComponent: function setComponent(aType, aValues) {
    	      this.parts[aType.toUpperCase()] = aValues.slice();
    	    },

    	    /**
    	     * Gets (a copy) of the requested component value.
    	     *
    	     * @param {String} aType        The component part name
    	     * @return {Array}              The component part value
    	     */
    	    getComponent: function getComponent(aType) {
    	      var ucname = aType.toUpperCase();
    	      return (ucname in this.parts ? this.parts[ucname].slice() : []);
    	    },

    	    /**
    	     * Retrieves the next occurrence after the given recurrence id. See the
    	     * guide on {@tutorial terminology} for more details.
    	     *
    	     * NOTE: Currently, this method iterates all occurrences from the start
    	     * date. It should not be called in a loop for performance reasons. If you
    	     * would like to get more than one occurrence, you can iterate the
    	     * occurrences manually, see the example on the
    	     * {@link ICAL.Recur#iterator iterator} method.
    	     *
    	     * @param {ICAL.Time} aStartTime        The start of the event series
    	     * @param {ICAL.Time} aRecurrenceId     The date of the last occurrence
    	     * @return {ICAL.Time}                  The next occurrence after
    	     */
    	    getNextOccurrence: function getNextOccurrence(aStartTime, aRecurrenceId) {
    	      var iter = this.iterator(aStartTime);
    	      var next;

    	      do {
    	        next = iter.next();
    	      } while (next && next.compare(aRecurrenceId) <= 0);

    	      if (next && aRecurrenceId.zone) {
    	        next.zone = aRecurrenceId.zone;
    	      }

    	      return next;
    	    },

    	    /**
    	     * Sets up the current instance using members from the passed data object.
    	     *
    	     * @param {Object} data                               An object with members of the recurrence
    	     * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
    	     * @param {Number=} data.interval                     The INTERVAL value
    	     * @param {ICAL.Time.weekDay=} data.wkst              The week start value
    	     * @param {ICAL.Time=} data.until                     The end of the recurrence set
    	     * @param {Number=} data.count                        The number of occurrences
    	     * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
    	     * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
    	     * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
    	     * @param {Array.<String>=} data.byday                The BYDAY values
    	     * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
    	     * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
    	     * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
    	     * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
    	     * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
    	     */
    	    fromData: function(data) {
    	      for (var key in data) {
    	        var uckey = key.toUpperCase();

    	        if (uckey in partDesign) {
    	          if (Array.isArray(data[key])) {
    	            this.parts[uckey] = data[key];
    	          } else {
    	            this.parts[uckey] = [data[key]];
    	          }
    	        } else {
    	          this[key] = data[key];
    	        }
    	      }

    	      if (this.interval && typeof this.interval != "number") {
    	        optionDesign.INTERVAL(this.interval, this);
    	      }

    	      if (this.wkst && typeof this.wkst != "number") {
    	        this.wkst = ICAL.Recur.icalDayToNumericDay(this.wkst);
    	      }

    	      if (this.until && !(this.until instanceof ICAL.Time)) {
    	        this.until = ICAL.Time.fromString(this.until);
    	      }
    	    },

    	    /**
    	     * The jCal representation of this recurrence type.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      var res = Object.create(null);
    	      res.freq = this.freq;

    	      if (this.count) {
    	        res.count = this.count;
    	      }

    	      if (this.interval > 1) {
    	        res.interval = this.interval;
    	      }

    	      for (var k in this.parts) {
    	        /* istanbul ignore if */
    	        if (!this.parts.hasOwnProperty(k)) {
    	          continue;
    	        }
    	        var kparts = this.parts[k];
    	        if (Array.isArray(kparts) && kparts.length == 1) {
    	          res[k.toLowerCase()] = kparts[0];
    	        } else {
    	          res[k.toLowerCase()] = ICAL.helpers.clone(this.parts[k]);
    	        }
    	      }

    	      if (this.until) {
    	        res.until = this.until.toString();
    	      }
    	      if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
    	        res.wkst = ICAL.Recur.numericDayToIcalDay(this.wkst);
    	      }
    	      return res;
    	    },

    	    /**
    	     * The string representation of this recurrence rule.
    	     * @return {String}
    	     */
    	    toString: function icalrecur_toString() {
    	      // TODO retain order
    	      var str = "FREQ=" + this.freq;
    	      if (this.count) {
    	        str += ";COUNT=" + this.count;
    	      }
    	      if (this.interval > 1) {
    	        str += ";INTERVAL=" + this.interval;
    	      }
    	      for (var k in this.parts) {
    	        /* istanbul ignore else */
    	        if (this.parts.hasOwnProperty(k)) {
    	          str += ";" + k + "=" + this.parts[k];
    	        }
    	      }
    	      if (this.until) {
    	        str += ';UNTIL=' + this.until.toICALString();
    	      }
    	      if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
    	        str += ';WKST=' + ICAL.Recur.numericDayToIcalDay(this.wkst);
    	      }
    	      return str;
    	    }
    	  };

    	  function parseNumericValue(type, min, max, value) {
    	    var result = value;

    	    if (value[0] === '+') {
    	      result = value.substr(1);
    	    }

    	    result = ICAL.helpers.strictParseInt(result);

    	    if (min !== undefined && value < min) {
    	      throw new Error(
    	        type + ': invalid value "' + value + '" must be > ' + min
    	      );
    	    }

    	    if (max !== undefined && value > max) {
    	      throw new Error(
    	        type + ': invalid value "' + value + '" must be < ' + min
    	      );
    	    }

    	    return result;
    	  }

    	  /**
    	   * Convert an ical representation of a day (SU, MO, etc..)
    	   * into a numeric value of that day.
    	   *
    	   * @param {String} string     The iCalendar day name
    	   * @param {ICAL.Time.weekDay=} aWeekStart
    	   *        The week start weekday, defaults to SUNDAY
    	   * @return {Number}           Numeric value of given day
    	   */
    	  ICAL.Recur.icalDayToNumericDay = function toNumericDay(string, aWeekStart) {
    	    //XXX: this is here so we can deal
    	    //     with possibly invalid string values.
    	    var firstDow = aWeekStart || ICAL.Time.SUNDAY;
    	    return ((DOW_MAP[string] - firstDow + 7) % 7) + 1;
    	  };

    	  /**
    	   * Convert a numeric day value into its ical representation (SU, MO, etc..)
    	   *
    	   * @param {Number} num        Numeric value of given day
    	   * @param {ICAL.Time.weekDay=} aWeekStart
    	   *        The week start weekday, defaults to SUNDAY
    	   * @return {String}           The ICAL day value, e.g SU,MO,...
    	   */
    	  ICAL.Recur.numericDayToIcalDay = function toIcalDay(num, aWeekStart) {
    	    //XXX: this is here so we can deal with possibly invalid number values.
    	    //     Also, this allows consistent mapping between day numbers and day
    	    //     names for external users.
    	    var firstDow = aWeekStart || ICAL.Time.SUNDAY;
    	    var dow = (num + firstDow - ICAL.Time.SUNDAY);
    	    if (dow > 7) {
    	      dow -= 7;
    	    }
    	    return REVERSE_DOW_MAP[dow];
    	  };

    	  var VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;
    	  var VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;

    	  /**
    	   * Possible frequency values for the FREQ part
    	   * (YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY)
    	   *
    	   * @typedef {String} frequencyValues
    	   * @memberof ICAL.Recur
    	   */

    	  var ALLOWED_FREQ = ['SECONDLY', 'MINUTELY', 'HOURLY',
    	                      'DAILY', 'WEEKLY', 'MONTHLY', 'YEARLY'];

    	  var optionDesign = {
    	    FREQ: function(value, dict, fmtIcal) {
    	      // yes this is actually equal or faster then regex.
    	      // upside here is we can enumerate the valid values.
    	      if (ALLOWED_FREQ.indexOf(value) !== -1) {
    	        dict.freq = value;
    	      } else {
    	        throw new Error(
    	          'invalid frequency "' + value + '" expected: "' +
    	          ALLOWED_FREQ.join(', ') + '"'
    	        );
    	      }
    	    },

    	    COUNT: function(value, dict, fmtIcal) {
    	      dict.count = ICAL.helpers.strictParseInt(value);
    	    },

    	    INTERVAL: function(value, dict, fmtIcal) {
    	      dict.interval = ICAL.helpers.strictParseInt(value);
    	      if (dict.interval < 1) {
    	        // 0 or negative values are not allowed, some engines seem to generate
    	        // it though. Assume 1 instead.
    	        dict.interval = 1;
    	      }
    	    },

    	    UNTIL: function(value, dict, fmtIcal) {
    	      if (value.length > 10) {
    	        dict.until = ICAL.design.icalendar.value['date-time'].fromICAL(value);
    	      } else {
    	        dict.until = ICAL.design.icalendar.value.date.fromICAL(value);
    	      }
    	      if (!fmtIcal) {
    	        dict.until = ICAL.Time.fromString(dict.until);
    	      }
    	    },

    	    WKST: function(value, dict, fmtIcal) {
    	      if (VALID_DAY_NAMES.test(value)) {
    	        dict.wkst = ICAL.Recur.icalDayToNumericDay(value);
    	      } else {
    	        throw new Error('invalid WKST value "' + value + '"');
    	      }
    	    }
    	  };

    	  var partDesign = {
    	    BYSECOND: parseNumericValue.bind(this, 'BYSECOND', 0, 60),
    	    BYMINUTE: parseNumericValue.bind(this, 'BYMINUTE', 0, 59),
    	    BYHOUR: parseNumericValue.bind(this, 'BYHOUR', 0, 23),
    	    BYDAY: function(value) {
    	      if (VALID_BYDAY_PART.test(value)) {
    	        return value;
    	      } else {
    	        throw new Error('invalid BYDAY value "' + value + '"');
    	      }
    	    },
    	    BYMONTHDAY: parseNumericValue.bind(this, 'BYMONTHDAY', -31, 31),
    	    BYYEARDAY: parseNumericValue.bind(this, 'BYYEARDAY', -366, 366),
    	    BYWEEKNO: parseNumericValue.bind(this, 'BYWEEKNO', -53, 53),
    	    BYMONTH: parseNumericValue.bind(this, 'BYMONTH', 0, 12),
    	    BYSETPOS: parseNumericValue.bind(this, 'BYSETPOS', -366, 366)
    	  };


    	  /**
    	   * Creates a new {@link ICAL.Recur} instance from the passed string.
    	   *
    	   * @param {String} string         The string to parse
    	   * @return {ICAL.Recur}           The created recurrence instance
    	   */
    	  ICAL.Recur.fromString = function(string) {
    	    var data = ICAL.Recur._stringToData(string, false);
    	    return new ICAL.Recur(data);
    	  };

    	  /**
    	   * Creates a new {@link ICAL.Recur} instance using members from the passed
    	   * data object.
    	   *
    	   * @param {Object} aData                              An object with members of the recurrence
    	   * @param {ICAL.Recur.frequencyValues=} aData.freq    The frequency value
    	   * @param {Number=} aData.interval                    The INTERVAL value
    	   * @param {ICAL.Time.weekDay=} aData.wkst             The week start value
    	   * @param {ICAL.Time=} aData.until                    The end of the recurrence set
    	   * @param {Number=} aData.count                       The number of occurrences
    	   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part
    	   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part
    	   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part
    	   * @param {Array.<String>=} aData.byday               The BYDAY values
    	   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part
    	   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part
    	   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part
    	   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part
    	   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part
    	   */
    	  ICAL.Recur.fromData = function(aData) {
    	    return new ICAL.Recur(aData);
    	  };

    	  /**
    	   * Converts a recurrence string to a data object, suitable for the fromData
    	   * method.
    	   *
    	   * @param {String} string     The string to parse
    	   * @param {Boolean} fmtIcal   If true, the string is considered to be an
    	   *                              iCalendar string
    	   * @return {ICAL.Recur}       The recurrence instance
    	   */
    	  ICAL.Recur._stringToData = function(string, fmtIcal) {
    	    var dict = Object.create(null);

    	    // split is slower in FF but fast enough.
    	    // v8 however this is faster then manual split?
    	    var values = string.split(';');
    	    var len = values.length;

    	    for (var i = 0; i < len; i++) {
    	      var parts = values[i].split('=');
    	      var ucname = parts[0].toUpperCase();
    	      var lcname = parts[0].toLowerCase();
    	      var name = (fmtIcal ? lcname : ucname);
    	      var value = parts[1];

    	      if (ucname in partDesign) {
    	        var partArr = value.split(',');
    	        var partArrIdx = 0;
    	        var partArrLen = partArr.length;

    	        for (; partArrIdx < partArrLen; partArrIdx++) {
    	          partArr[partArrIdx] = partDesign[ucname](partArr[partArrIdx]);
    	        }
    	        dict[name] = (partArr.length == 1 ? partArr[0] : partArr);
    	      } else if (ucname in optionDesign) {
    	        optionDesign[ucname](value, dict, fmtIcal);
    	      } else {
    	        // Don't swallow unknown values. Just set them as they are.
    	        dict[lcname] = value;
    	      }
    	    }

    	    return dict;
    	  };
    	})();
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.RecurIterator = (function() {

    	  /**
    	   * @classdesc
    	   * An iterator for a single recurrence rule. This class usually doesn't have
    	   * to be instanciated directly, the convenience method
    	   * {@link ICAL.Recur#iterator} can be used.
    	   *
    	   * @description
    	   * The options object may contain additional members when resuming iteration from a previous run
    	   *
    	   * @description
    	   * The options object may contain additional members when resuming iteration
    	   * from a previous run.
    	   *
    	   * @class
    	   * @alias ICAL.RecurIterator
    	   * @param {Object} options                The iterator options
    	   * @param {ICAL.Recur} options.rule       The rule to iterate.
    	   * @param {ICAL.Time} options.dtstart     The start date of the event.
    	   * @param {Boolean=} options.initialized  When true, assume that options are
    	   *        from a previously constructed iterator. Initialization will not be
    	   *        repeated.
    	   */
    	  function icalrecur_iterator(options) {
    	    this.fromData(options);
    	  }

    	  icalrecur_iterator.prototype = {

    	    /**
    	     * True when iteration is finished.
    	     * @type {Boolean}
    	     */
    	    completed: false,

    	    /**
    	     * The rule that is being iterated
    	     * @type {ICAL.Recur}
    	     */
    	    rule: null,

    	    /**
    	     * The start date of the event being iterated.
    	     * @type {ICAL.Time}
    	     */
    	    dtstart: null,

    	    /**
    	     * The last occurrence that was returned from the
    	     * {@link ICAL.RecurIterator#next} method.
    	     * @type {ICAL.Time}
    	     */
    	    last: null,

    	    /**
    	     * The sequence number from the occurrence
    	     * @type {Number}
    	     */
    	    occurrence_number: 0,

    	    /**
    	     * The indices used for the {@link ICAL.RecurIterator#by_data} object.
    	     * @type {Object}
    	     * @private
    	     */
    	    by_indices: null,

    	    /**
    	     * If true, the iterator has already been initialized
    	     * @type {Boolean}
    	     * @private
    	     */
    	    initialized: false,

    	    /**
    	     * The initializd by-data.
    	     * @type {Object}
    	     * @private
    	     */
    	    by_data: null,

    	    /**
    	     * The expanded yeardays
    	     * @type {Array}
    	     * @private
    	     */
    	    days: null,

    	    /**
    	     * The index in the {@link ICAL.RecurIterator#days} array.
    	     * @type {Number}
    	     * @private
    	     */
    	    days_index: 0,

    	    /**
    	     * Initialize the recurrence iterator from the passed data object. This
    	     * method is usually not called directly, you can initialize the iterator
    	     * through the constructor.
    	     *
    	     * @param {Object} options                The iterator options
    	     * @param {ICAL.Recur} options.rule       The rule to iterate.
    	     * @param {ICAL.Time} options.dtstart     The start date of the event.
    	     * @param {Boolean=} options.initialized  When true, assume that options are
    	     *        from a previously constructed iterator. Initialization will not be
    	     *        repeated.
    	     */
    	    fromData: function(options) {
    	      this.rule = ICAL.helpers.formatClassType(options.rule, ICAL.Recur);

    	      if (!this.rule) {
    	        throw new Error('iterator requires a (ICAL.Recur) rule');
    	      }

    	      this.dtstart = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);

    	      if (!this.dtstart) {
    	        throw new Error('iterator requires a (ICAL.Time) dtstart');
    	      }

    	      if (options.by_data) {
    	        this.by_data = options.by_data;
    	      } else {
    	        this.by_data = ICAL.helpers.clone(this.rule.parts, true);
    	      }

    	      if (options.occurrence_number)
    	        this.occurrence_number = options.occurrence_number;

    	      this.days = options.days || [];
    	      if (options.last) {
    	        this.last = ICAL.helpers.formatClassType(options.last, ICAL.Time);
    	      }

    	      this.by_indices = options.by_indices;

    	      if (!this.by_indices) {
    	        this.by_indices = {
    	          "BYSECOND": 0,
    	          "BYMINUTE": 0,
    	          "BYHOUR": 0,
    	          "BYDAY": 0,
    	          "BYMONTH": 0,
    	          "BYWEEKNO": 0,
    	          "BYMONTHDAY": 0
    	        };
    	      }

    	      this.initialized = options.initialized || false;

    	      if (!this.initialized) {
    	        this.init();
    	      }
    	    },

    	    /**
    	     * Intialize the iterator
    	     * @private
    	     */
    	    init: function icalrecur_iterator_init() {
    	      this.initialized = true;
    	      this.last = this.dtstart.clone();
    	      var parts = this.by_data;

    	      if ("BYDAY" in parts) {
    	        // libical does this earlier when the rule is loaded, but we postpone to
    	        // now so we can preserve the original order.
    	        this.sort_byday_rules(parts.BYDAY);
    	      }

    	      // If the BYYEARDAY appares, no other date rule part may appear
    	      if ("BYYEARDAY" in parts) {
    	        if ("BYMONTH" in parts || "BYWEEKNO" in parts ||
    	            "BYMONTHDAY" in parts || "BYDAY" in parts) {
    	          throw new Error("Invalid BYYEARDAY rule");
    	        }
    	      }

    	      // BYWEEKNO and BYMONTHDAY rule parts may not both appear
    	      if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
    	        throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
    	      }

    	      // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor
    	      // BYWEEKNO may appear.
    	      if (this.rule.freq == "MONTHLY" &&
    	          ("BYYEARDAY" in parts || "BYWEEKNO" in parts)) {
    	        throw new Error("For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear");
    	      }

    	      // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor
    	      // BYYEARDAY may appear.
    	      if (this.rule.freq == "WEEKLY" &&
    	          ("BYYEARDAY" in parts || "BYMONTHDAY" in parts)) {
    	        throw new Error("For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear");
    	      }

    	      // BYYEARDAY may only appear in YEARLY rules
    	      if (this.rule.freq != "YEARLY" && "BYYEARDAY" in parts) {
    	        throw new Error("BYYEARDAY may only appear in YEARLY rules");
    	      }

    	      this.last.second = this.setup_defaults("BYSECOND", "SECONDLY", this.dtstart.second);
    	      this.last.minute = this.setup_defaults("BYMINUTE", "MINUTELY", this.dtstart.minute);
    	      this.last.hour = this.setup_defaults("BYHOUR", "HOURLY", this.dtstart.hour);
    	      this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
    	      this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);

    	      if (this.rule.freq == "WEEKLY") {
    	        if ("BYDAY" in parts) {
    	          var bydayParts = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);
    	          var pos = bydayParts[0];
    	          var dow = bydayParts[1];
    	          var wkdy = dow - this.last.dayOfWeek(this.rule.wkst);
    	          if ((this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0) || wkdy < 0) {
    	            // Initial time is after first day of BYDAY data
    	            this.last.day += wkdy;
    	          }
    	        } else {
    	          var dayName = ICAL.Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());
    	          parts.BYDAY = [dayName];
    	        }
    	      }

    	      if (this.rule.freq == "YEARLY") {
    	        for (;;) {
    	          this.expand_year_days(this.last.year);
    	          if (this.days.length > 0) {
    	            break;
    	          }
    	          this.increment_year(this.rule.interval);
    	        }

    	        this._nextByYearDay();
    	      }

    	      if (this.rule.freq == "MONTHLY" && this.has_by_data("BYDAY")) {
    	        var tempLast = null;
    	        var initLast = this.last.clone();
    	        var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);

    	        // Check every weekday in BYDAY with relative dow and pos.
    	        for (var i in this.by_data.BYDAY) {
    	          /* istanbul ignore if */
    	          if (!this.by_data.BYDAY.hasOwnProperty(i)) {
    	            continue;
    	          }
    	          this.last = initLast.clone();
    	          var bydayParts = this.ruleDayOfWeek(this.by_data.BYDAY[i]);
    	          var pos = bydayParts[0];
    	          var dow = bydayParts[1];
    	          var dayOfMonth = this.last.nthWeekDay(dow, pos);

    	          // If |pos| >= 6, the byday is invalid for a monthly rule.
    	          if (pos >= 6 || pos <= -6) {
    	            throw new Error("Malformed values in BYDAY part");
    	          }

    	          // If a Byday with pos=+/-5 is not in the current month it
    	          // must be searched in the next months.
    	          if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
    	            // Skip if we have already found a "last" in this month.
    	            if (tempLast && tempLast.month == initLast.month) {
    	              continue;
    	            }
    	            while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
    	              this.increment_month();
    	              daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	              dayOfMonth = this.last.nthWeekDay(dow, pos);
    	            }
    	          }

    	          this.last.day = dayOfMonth;
    	          if (!tempLast || this.last.compare(tempLast) < 0) {
    	            tempLast = this.last.clone();
    	          }
    	        }
    	        this.last = tempLast.clone();

    	        //XXX: This feels like a hack, but we need to initialize
    	        //     the BYMONTHDAY case correctly and byDayAndMonthDay handles
    	        //     this case. It accepts a special flag which will avoid incrementing
    	        //     the initial value without the flag days that match the start time
    	        //     would be missed.
    	        if (this.has_by_data('BYMONTHDAY')) {
    	          this._byDayAndMonthDay(true);
    	        }

    	        if (this.last.day > daysInMonth || this.last.day == 0) {
    	          throw new Error("Malformed values in BYDAY part");
    	        }

    	      } else if (this.has_by_data("BYMONTHDAY")) {
    	        if (this.last.day < 0) {
    	          var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	          this.last.day = daysInMonth + this.last.day + 1;
    	        }
    	      }

    	    },

    	    /**
    	     * Retrieve the next occurrence from the iterator.
    	     * @return {ICAL.Time}
    	     */
    	    next: function icalrecur_iterator_next() {
    	      var before = (this.last ? this.last.clone() : null);

    	      if ((this.rule.count && this.occurrence_number >= this.rule.count) ||
    	          (this.rule.until && this.last.compare(this.rule.until) > 0)) {

    	        //XXX: right now this is just a flag and has no impact
    	        //     we can simplify the above case to check for completed later.
    	        this.completed = true;

    	        return null;
    	      }

    	      if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {
    	        // First of all, give the instance that was initialized
    	        this.occurrence_number++;
    	        return this.last;
    	      }


    	      var valid;
    	      do {
    	        valid = 1;

    	        switch (this.rule.freq) {
    	        case "SECONDLY":
    	          this.next_second();
    	          break;
    	        case "MINUTELY":
    	          this.next_minute();
    	          break;
    	        case "HOURLY":
    	          this.next_hour();
    	          break;
    	        case "DAILY":
    	          this.next_day();
    	          break;
    	        case "WEEKLY":
    	          this.next_week();
    	          break;
    	        case "MONTHLY":
    	          valid = this.next_month();
    	          break;
    	        case "YEARLY":
    	          this.next_year();
    	          break;

    	        default:
    	          return null;
    	        }
    	      } while (!this.check_contracting_rules() ||
    	               this.last.compare(this.dtstart) < 0 ||
    	               !valid);

    	      // TODO is this valid?
    	      if (this.last.compare(before) == 0) {
    	        throw new Error("Same occurrence found twice, protecting " +
    	                        "you from death by recursion");
    	      }

    	      if (this.rule.until && this.last.compare(this.rule.until) > 0) {
    	        this.completed = true;
    	        return null;
    	      } else {
    	        this.occurrence_number++;
    	        return this.last;
    	      }
    	    },

    	    next_second: function next_second() {
    	      return this.next_generic("BYSECOND", "SECONDLY", "second", "minute");
    	    },

    	    increment_second: function increment_second(inc) {
    	      return this.increment_generic(inc, "second", 60, "minute");
    	    },

    	    next_minute: function next_minute() {
    	      return this.next_generic("BYMINUTE", "MINUTELY",
    	                               "minute", "hour", "next_second");
    	    },

    	    increment_minute: function increment_minute(inc) {
    	      return this.increment_generic(inc, "minute", 60, "hour");
    	    },

    	    next_hour: function next_hour() {
    	      return this.next_generic("BYHOUR", "HOURLY", "hour",
    	                               "monthday", "next_minute");
    	    },

    	    increment_hour: function increment_hour(inc) {
    	      this.increment_generic(inc, "hour", 24, "monthday");
    	    },

    	    next_day: function next_day() {
    	      ("BYDAY" in this.by_data);
    	      var this_freq = (this.rule.freq == "DAILY");

    	      if (this.next_hour() == 0) {
    	        return 0;
    	      }

    	      if (this_freq) {
    	        this.increment_monthday(this.rule.interval);
    	      } else {
    	        this.increment_monthday(1);
    	      }

    	      return 0;
    	    },

    	    next_week: function next_week() {
    	      var end_of_data = 0;

    	      if (this.next_weekday_by_week() == 0) {
    	        return end_of_data;
    	      }

    	      if (this.has_by_data("BYWEEKNO")) {
    	        ++this.by_indices.BYWEEKNO;

    	        if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {
    	          this.by_indices.BYWEEKNO = 0;
    	          end_of_data = 1;
    	        }

    	        // HACK should be first month of the year
    	        this.last.month = 1;
    	        this.last.day = 1;

    	        var week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];

    	        this.last.day += 7 * week_no;

    	        if (end_of_data) {
    	          this.increment_year(1);
    	        }
    	      } else {
    	        // Jump to the next week
    	        this.increment_monthday(7 * this.rule.interval);
    	      }

    	      return end_of_data;
    	    },

    	    /**
    	     * Normalize each by day rule for a given year/month.
    	     * Takes into account ordering and negative rules
    	     *
    	     * @private
    	     * @param {Number} year         Current year.
    	     * @param {Number} month        Current month.
    	     * @param {Array}  rules        Array of rules.
    	     *
    	     * @return {Array} sorted and normalized rules.
    	     *                 Negative rules will be expanded to their
    	     *                 correct positive values for easier processing.
    	     */
    	    normalizeByMonthDayRules: function(year, month, rules) {
    	      var daysInMonth = ICAL.Time.daysInMonth(month, year);

    	      // XXX: This is probably bad for performance to allocate
    	      //      a new array for each month we scan, if possible
    	      //      we should try to optimize this...
    	      var newRules = [];

    	      var ruleIdx = 0;
    	      var len = rules.length;
    	      var rule;

    	      for (; ruleIdx < len; ruleIdx++) {
    	        rule = rules[ruleIdx];

    	        // if this rule falls outside of given
    	        // month discard it.
    	        if (Math.abs(rule) > daysInMonth) {
    	          continue;
    	        }

    	        // negative case
    	        if (rule < 0) {
    	          // we add (not subtract its a negative number)
    	          // one from the rule because 1 === last day of month
    	          rule = daysInMonth + (rule + 1);
    	        } else if (rule === 0) {
    	          // skip zero its invalid.
    	          continue;
    	        }

    	        // only add unique items...
    	        if (newRules.indexOf(rule) === -1) {
    	          newRules.push(rule);
    	        }

    	      }

    	      // unique and sort
    	      return newRules.sort(function(a, b) { return a - b; });
    	    },

    	    /**
    	     * NOTES:
    	     * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)
    	     * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when
    	     * both conditions match a given date (this.last.day) iteration stops.
    	     *
    	     * @private
    	     * @param {Boolean=} isInit     When given true will not increment the
    	     *                                current day (this.last).
    	     */
    	    _byDayAndMonthDay: function(isInit) {
    	      var byMonthDay; // setup in initMonth
    	      var byDay = this.by_data.BYDAY;

    	      var date;
    	      var dateIdx = 0;
    	      var dateLen; // setup in initMonth
    	      var dayLen = byDay.length;

    	      // we are not valid by default
    	      var dataIsValid = 0;

    	      var daysInMonth;
    	      var self = this;
    	      // we need a copy of this, because a DateTime gets normalized
    	      // automatically if the day is out of range. At some points we
    	      // set the last day to 0 to start counting.
    	      var lastDay = this.last.day;

    	      function initMonth() {
    	        daysInMonth = ICAL.Time.daysInMonth(
    	          self.last.month, self.last.year
    	        );

    	        byMonthDay = self.normalizeByMonthDayRules(
    	          self.last.year,
    	          self.last.month,
    	          self.by_data.BYMONTHDAY
    	        );

    	        dateLen = byMonthDay.length;

    	        // For the case of more than one occurrence in one month
    	        // we have to be sure to start searching after the last
    	        // found date or at the last BYMONTHDAY, unless we are
    	        // initializing the iterator because in this case we have
    	        // to consider the last found date too.
    	        while (byMonthDay[dateIdx] <= lastDay &&
    	               !(isInit && byMonthDay[dateIdx] == lastDay) &&
    	               dateIdx < dateLen - 1) {
    	          dateIdx++;
    	        }
    	      }

    	      function nextMonth() {
    	        // since the day is incremented at the start
    	        // of the loop below, we need to start at 0
    	        lastDay = 0;
    	        self.increment_month();
    	        dateIdx = 0;
    	        initMonth();
    	      }

    	      initMonth();

    	      // should come after initMonth
    	      if (isInit) {
    	        lastDay -= 1;
    	      }

    	      // Use a counter to avoid an infinite loop with malformed rules.
    	      // Stop checking after 4 years so we consider also a leap year.
    	      var monthsCounter = 48;

    	      while (!dataIsValid && monthsCounter) {
    	        monthsCounter--;
    	        // increment the current date. This is really
    	        // important otherwise we may fall into the infinite
    	        // loop trap. The initial date takes care of the case
    	        // where the current date is the date we are looking
    	        // for.
    	        date = lastDay + 1;

    	        if (date > daysInMonth) {
    	          nextMonth();
    	          continue;
    	        }

    	        // find next date
    	        var next = byMonthDay[dateIdx++];

    	        // this logic is dependant on the BYMONTHDAYS
    	        // being in order (which is done by #normalizeByMonthDayRules)
    	        if (next >= date) {
    	          // if the next month day is in the future jump to it.
    	          lastDay = next;
    	        } else {
    	          // in this case the 'next' monthday has past
    	          // we must move to the month.
    	          nextMonth();
    	          continue;
    	        }

    	        // Now we can loop through the day rules to see
    	        // if one matches the current month date.
    	        for (var dayIdx = 0; dayIdx < dayLen; dayIdx++) {
    	          var parts = this.ruleDayOfWeek(byDay[dayIdx]);
    	          var pos = parts[0];
    	          var dow = parts[1];

    	          this.last.day = lastDay;
    	          if (this.last.isNthWeekDay(dow, pos)) {
    	            // when we find the valid one we can mark
    	            // the conditions as met and break the loop.
    	            // (Because we have this condition above
    	            //  it will also break the parent loop).
    	            dataIsValid = 1;
    	            break;
    	          }
    	        }

    	        // Its completely possible that the combination
    	        // cannot be matched in the current month.
    	        // When we reach the end of possible combinations
    	        // in the current month we iterate to the next one.
    	        // since dateIdx is incremented right after getting
    	        // "next", we don't need dateLen -1 here.
    	        if (!dataIsValid && dateIdx === dateLen) {
    	          nextMonth();
    	          continue;
    	        }
    	      }

    	      if (monthsCounter <= 0) {
    	        // Checked 4 years without finding a Byday that matches
    	        // a Bymonthday. Maybe the rule is not correct.
    	        throw new Error("Malformed values in BYDAY combined with BYMONTHDAY parts");
    	      }


    	      return dataIsValid;
    	    },

    	    next_month: function next_month() {
    	      (this.rule.freq == "MONTHLY");
    	      var data_valid = 1;

    	      if (this.next_hour() == 0) {
    	        return data_valid;
    	      }

    	      if (this.has_by_data("BYDAY") && this.has_by_data("BYMONTHDAY")) {
    	        data_valid = this._byDayAndMonthDay();
    	      } else if (this.has_by_data("BYDAY")) {
    	        var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	        var setpos = 0;
    	        var setpos_total = 0;

    	        if (this.has_by_data("BYSETPOS")) {
    	          var last_day = this.last.day;
    	          for (var day = 1; day <= daysInMonth; day++) {
    	            this.last.day = day;
    	            if (this.is_day_in_byday(this.last)) {
    	              setpos_total++;
    	              if (day <= last_day) {
    	                setpos++;
    	              }
    	            }
    	          }
    	          this.last.day = last_day;
    	        }

    	        data_valid = 0;
    	        for (var day = this.last.day + 1; day <= daysInMonth; day++) {
    	          this.last.day = day;

    	          if (this.is_day_in_byday(this.last)) {
    	            if (!this.has_by_data("BYSETPOS") ||
    	                this.check_set_position(++setpos) ||
    	                this.check_set_position(setpos - setpos_total - 1)) {

    	              data_valid = 1;
    	              break;
    	            }
    	          }
    	        }

    	        if (day > daysInMonth) {
    	          this.last.day = 1;
    	          this.increment_month();

    	          if (this.is_day_in_byday(this.last)) {
    	            if (!this.has_by_data("BYSETPOS") || this.check_set_position(1)) {
    	              data_valid = 1;
    	            }
    	          } else {
    	            data_valid = 0;
    	          }
    	        }
    	      } else if (this.has_by_data("BYMONTHDAY")) {
    	        this.by_indices.BYMONTHDAY++;

    	        if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
    	          this.by_indices.BYMONTHDAY = 0;
    	          this.increment_month();
    	        }

    	        var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	        var day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];

    	        if (day < 0) {
    	          day = daysInMonth + day + 1;
    	        }

    	        if (day > daysInMonth) {
    	          this.last.day = 1;
    	          data_valid = this.is_day_in_byday(this.last);
    	        } else {
    	          this.last.day = day;
    	        }

    	      } else {
    	        this.increment_month();
    	        var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	        if (this.by_data.BYMONTHDAY[0] > daysInMonth) {
    	          data_valid = 0;
    	        } else {
    	          this.last.day = this.by_data.BYMONTHDAY[0];
    	        }
    	      }

    	      return data_valid;
    	    },

    	    next_weekday_by_week: function next_weekday_by_week() {
    	      var end_of_data = 0;

    	      if (this.next_hour() == 0) {
    	        return end_of_data;
    	      }

    	      if (!this.has_by_data("BYDAY")) {
    	        return 1;
    	      }

    	      for (;;) {
    	        var tt = new ICAL.Time();
    	        this.by_indices.BYDAY++;

    	        if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {
    	          this.by_indices.BYDAY = 0;
    	          end_of_data = 1;
    	        }

    	        var coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];
    	        var parts = this.ruleDayOfWeek(coded_day);
    	        var dow = parts[1];

    	        dow -= this.rule.wkst;

    	        if (dow < 0) {
    	          dow += 7;
    	        }

    	        tt.year = this.last.year;
    	        tt.month = this.last.month;
    	        tt.day = this.last.day;

    	        var startOfWeek = tt.startDoyWeek(this.rule.wkst);

    	        if (dow + startOfWeek < 1) {
    	          // The selected date is in the previous year
    	          if (!end_of_data) {
    	            continue;
    	          }
    	        }

    	        var next = ICAL.Time.fromDayOfYear(startOfWeek + dow,
    	                                                  this.last.year);

    	        /**
    	         * The normalization horrors below are due to
    	         * the fact that when the year/month/day changes
    	         * it can effect the other operations that come after.
    	         */
    	        this.last.year = next.year;
    	        this.last.month = next.month;
    	        this.last.day = next.day;

    	        return end_of_data;
    	      }
    	    },

    	    next_year: function next_year() {

    	      if (this.next_hour() == 0) {
    	        return 0;
    	      }

    	      if (++this.days_index == this.days.length) {
    	        this.days_index = 0;
    	        do {
    	          this.increment_year(this.rule.interval);
    	          this.expand_year_days(this.last.year);
    	        } while (this.days.length == 0);
    	      }

    	      this._nextByYearDay();

    	      return 1;
    	    },

    	    _nextByYearDay: function _nextByYearDay() {
    	        var doy = this.days[this.days_index];
    	        var year = this.last.year;
    	        if (doy < 1) {
    	            // Time.fromDayOfYear(doy, year) indexes relative to the
    	            // start of the given year. That is different from the
    	            // semantics of BYYEARDAY where negative indexes are an
    	            // offset from the end of the given year.
    	            doy += 1;
    	            year += 1;
    	        }
    	        var next = ICAL.Time.fromDayOfYear(doy, year);
    	        this.last.day = next.day;
    	        this.last.month = next.month;
    	    },

    	    /**
    	     * @param dow (eg: '1TU', '-1MO')
    	     * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday
    	     * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart
    	     */
    	    ruleDayOfWeek: function ruleDayOfWeek(dow, aWeekStart) {
    	      var matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
    	      if (matches) {
    	        var pos = parseInt(matches[1] || 0, 10);
    	        dow = ICAL.Recur.icalDayToNumericDay(matches[2], aWeekStart);
    	        return [pos, dow];
    	      } else {
    	        return [0, 0];
    	      }
    	    },

    	    next_generic: function next_generic(aRuleType, aInterval, aDateAttr,
    	                                        aFollowingAttr, aPreviousIncr) {
    	      var has_by_rule = (aRuleType in this.by_data);
    	      var this_freq = (this.rule.freq == aInterval);
    	      var end_of_data = 0;

    	      if (aPreviousIncr && this[aPreviousIncr]() == 0) {
    	        return end_of_data;
    	      }

    	      if (has_by_rule) {
    	        this.by_indices[aRuleType]++;
    	        this.by_indices[aRuleType];
    	        var dta = this.by_data[aRuleType];

    	        if (this.by_indices[aRuleType] == dta.length) {
    	          this.by_indices[aRuleType] = 0;
    	          end_of_data = 1;
    	        }
    	        this.last[aDateAttr] = dta[this.by_indices[aRuleType]];
    	      } else if (this_freq) {
    	        this["increment_" + aDateAttr](this.rule.interval);
    	      }

    	      if (has_by_rule && end_of_data && this_freq) {
    	        this["increment_" + aFollowingAttr](1);
    	      }

    	      return end_of_data;
    	    },

    	    increment_monthday: function increment_monthday(inc) {
    	      for (var i = 0; i < inc; i++) {
    	        var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
    	        this.last.day++;

    	        if (this.last.day > daysInMonth) {
    	          this.last.day -= daysInMonth;
    	          this.increment_month();
    	        }
    	      }
    	    },

    	    increment_month: function increment_month() {
    	      this.last.day = 1;
    	      if (this.has_by_data("BYMONTH")) {
    	        this.by_indices.BYMONTH++;

    	        if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {
    	          this.by_indices.BYMONTH = 0;
    	          this.increment_year(1);
    	        }

    	        this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];
    	      } else {
    	        if (this.rule.freq == "MONTHLY") {
    	          this.last.month += this.rule.interval;
    	        } else {
    	          this.last.month++;
    	        }

    	        this.last.month--;
    	        var years = ICAL.helpers.trunc(this.last.month / 12);
    	        this.last.month %= 12;
    	        this.last.month++;

    	        if (years != 0) {
    	          this.increment_year(years);
    	        }
    	      }
    	    },

    	    increment_year: function increment_year(inc) {
    	      this.last.year += inc;
    	    },

    	    increment_generic: function increment_generic(inc, aDateAttr,
    	                                                  aFactor, aNextIncrement) {
    	      this.last[aDateAttr] += inc;
    	      var nextunit = ICAL.helpers.trunc(this.last[aDateAttr] / aFactor);
    	      this.last[aDateAttr] %= aFactor;
    	      if (nextunit != 0) {
    	        this["increment_" + aNextIncrement](nextunit);
    	      }
    	    },

    	    has_by_data: function has_by_data(aRuleType) {
    	      return (aRuleType in this.rule.parts);
    	    },

    	    expand_year_days: function expand_year_days(aYear) {
    	      var t = new ICAL.Time();
    	      this.days = [];

    	      // We need our own copy with a few keys set
    	      var parts = {};
    	      var rules = ["BYDAY", "BYWEEKNO", "BYMONTHDAY", "BYMONTH", "BYYEARDAY"];
    	      for (var p in rules) {
    	        /* istanbul ignore else */
    	        if (rules.hasOwnProperty(p)) {
    	          var part = rules[p];
    	          if (part in this.rule.parts) {
    	            parts[part] = this.rule.parts[part];
    	          }
    	        }
    	      }

    	      if ("BYMONTH" in parts && "BYWEEKNO" in parts) {
    	        var valid = 1;
    	        var validWeeks = {};
    	        t.year = aYear;
    	        t.isDate = true;

    	        for (var monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {
    	          var month = this.by_data.BYMONTH[monthIdx];
    	          t.month = month;
    	          t.day = 1;
    	          var first_week = t.weekNumber(this.rule.wkst);
    	          t.day = ICAL.Time.daysInMonth(month, aYear);
    	          var last_week = t.weekNumber(this.rule.wkst);
    	          for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {
    	            validWeeks[monthIdx] = 1;
    	          }
    	        }

    	        for (var weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++) {
    	          var weekno = this.by_data.BYWEEKNO[weekIdx];
    	          if (weekno < 52) {
    	            valid &= validWeeks[weekIdx];
    	          } else {
    	            valid = 0;
    	          }
    	        }

    	        if (valid) {
    	          delete parts.BYMONTH;
    	        } else {
    	          delete parts.BYWEEKNO;
    	        }
    	      }

    	      var partCount = Object.keys(parts).length;

    	      if (partCount == 0) {
    	        var t1 = this.dtstart.clone();
    	        t1.year = this.last.year;
    	        this.days.push(t1.dayOfYear());
    	      } else if (partCount == 1 && "BYMONTH" in parts) {
    	        for (var monthkey in this.by_data.BYMONTH) {
    	          /* istanbul ignore if */
    	          if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
    	            continue;
    	          }
    	          var t2 = this.dtstart.clone();
    	          t2.year = aYear;
    	          t2.month = this.by_data.BYMONTH[monthkey];
    	          t2.isDate = true;
    	          this.days.push(t2.dayOfYear());
    	        }
    	      } else if (partCount == 1 && "BYMONTHDAY" in parts) {
    	        for (var monthdaykey in this.by_data.BYMONTHDAY) {
    	          /* istanbul ignore if */
    	          if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
    	            continue;
    	          }
    	          var t3 = this.dtstart.clone();
    	          var day_ = this.by_data.BYMONTHDAY[monthdaykey];
    	          if (day_ < 0) {
    	            var daysInMonth = ICAL.Time.daysInMonth(t3.month, aYear);
    	            day_ = day_ + daysInMonth + 1;
    	          }
    	          t3.day = day_;
    	          t3.year = aYear;
    	          t3.isDate = true;
    	          this.days.push(t3.dayOfYear());
    	        }
    	      } else if (partCount == 2 &&
    	                 "BYMONTHDAY" in parts &&
    	                 "BYMONTH" in parts) {
    	        for (var monthkey in this.by_data.BYMONTH) {
    	          /* istanbul ignore if */
    	          if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
    	            continue;
    	          }
    	          var month_ = this.by_data.BYMONTH[monthkey];
    	          var daysInMonth = ICAL.Time.daysInMonth(month_, aYear);
    	          for (var monthdaykey in this.by_data.BYMONTHDAY) {
    	            /* istanbul ignore if */
    	            if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
    	              continue;
    	            }
    	            var day_ = this.by_data.BYMONTHDAY[monthdaykey];
    	            if (day_ < 0) {
    	              day_ = day_ + daysInMonth + 1;
    	            }
    	            t.day = day_;
    	            t.month = month_;
    	            t.year = aYear;
    	            t.isDate = true;

    	            this.days.push(t.dayOfYear());
    	          }
    	        }
    	      } else if (partCount == 1 && "BYWEEKNO" in parts) ; else if (partCount == 2 &&
    	                 "BYWEEKNO" in parts &&
    	                 "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYDAY" in parts) {
    	        this.days = this.days.concat(this.expand_by_day(aYear));
    	      } else if (partCount == 2 && "BYDAY" in parts && "BYMONTH" in parts) {
    	        for (var monthkey in this.by_data.BYMONTH) {
    	          /* istanbul ignore if */
    	          if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
    	            continue;
    	          }
    	          var month = this.by_data.BYMONTH[monthkey];
    	          var daysInMonth = ICAL.Time.daysInMonth(month, aYear);

    	          t.year = aYear;
    	          t.month = this.by_data.BYMONTH[monthkey];
    	          t.day = 1;
    	          t.isDate = true;

    	          var first_dow = t.dayOfWeek();
    	          var doy_offset = t.dayOfYear() - 1;

    	          t.day = daysInMonth;
    	          var last_dow = t.dayOfWeek();

    	          if (this.has_by_data("BYSETPOS")) {
    	            var by_month_day = [];
    	            for (var day = 1; day <= daysInMonth; day++) {
    	              t.day = day;
    	              if (this.is_day_in_byday(t)) {
    	                by_month_day.push(day);
    	              }
    	            }

    	            for (var spIndex = 0; spIndex < by_month_day.length; spIndex++) {
    	              if (this.check_set_position(spIndex + 1) ||
    	                  this.check_set_position(spIndex - by_month_day.length)) {
    	                this.days.push(doy_offset + by_month_day[spIndex]);
    	              }
    	            }
    	          } else {
    	            for (var daycodedkey in this.by_data.BYDAY) {
    	              /* istanbul ignore if */
    	              if (!this.by_data.BYDAY.hasOwnProperty(daycodedkey)) {
    	                continue;
    	              }
    	              var coded_day = this.by_data.BYDAY[daycodedkey];
    	              var bydayParts = this.ruleDayOfWeek(coded_day);
    	              var pos = bydayParts[0];
    	              var dow = bydayParts[1];
    	              var month_day;

    	              var first_matching_day = ((dow + 7 - first_dow) % 7) + 1;
    	              var last_matching_day = daysInMonth - ((last_dow + 7 - dow) % 7);

    	              if (pos == 0) {
    	                for (var day = first_matching_day; day <= daysInMonth; day += 7) {
    	                  this.days.push(doy_offset + day);
    	                }
    	              } else if (pos > 0) {
    	                month_day = first_matching_day + (pos - 1) * 7;

    	                if (month_day <= daysInMonth) {
    	                  this.days.push(doy_offset + month_day);
    	                }
    	              } else {
    	                month_day = last_matching_day + (pos + 1) * 7;

    	                if (month_day > 0) {
    	                  this.days.push(doy_offset + month_day);
    	                }
    	              }
    	            }
    	          }
    	        }
    	        // Return dates in order of occurrence (1,2,3,...) instead
    	        // of by groups of weekdays (1,8,15,...,2,9,16,...).
    	        this.days.sort(function(a, b) { return a - b; }); // Comparator function allows to sort numbers.
    	      } else if (partCount == 2 && "BYDAY" in parts && "BYMONTHDAY" in parts) {
    	        var expandedDays = this.expand_by_day(aYear);

    	        for (var daykey in expandedDays) {
    	          /* istanbul ignore if */
    	          if (!expandedDays.hasOwnProperty(daykey)) {
    	            continue;
    	          }
    	          var day = expandedDays[daykey];
    	          var tt = ICAL.Time.fromDayOfYear(day, aYear);
    	          if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
    	            this.days.push(day);
    	          }
    	        }
    	      } else if (partCount == 3 &&
    	                 "BYDAY" in parts &&
    	                 "BYMONTHDAY" in parts &&
    	                 "BYMONTH" in parts) {
    	        var expandedDays = this.expand_by_day(aYear);

    	        for (var daykey in expandedDays) {
    	          /* istanbul ignore if */
    	          if (!expandedDays.hasOwnProperty(daykey)) {
    	            continue;
    	          }
    	          var day = expandedDays[daykey];
    	          var tt = ICAL.Time.fromDayOfYear(day, aYear);

    	          if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 &&
    	              this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
    	            this.days.push(day);
    	          }
    	        }
    	      } else if (partCount == 2 && "BYDAY" in parts && "BYWEEKNO" in parts) {
    	        var expandedDays = this.expand_by_day(aYear);

    	        for (var daykey in expandedDays) {
    	          /* istanbul ignore if */
    	          if (!expandedDays.hasOwnProperty(daykey)) {
    	            continue;
    	          }
    	          var day = expandedDays[daykey];
    	          var tt = ICAL.Time.fromDayOfYear(day, aYear);
    	          var weekno = tt.weekNumber(this.rule.wkst);

    	          if (this.by_data.BYWEEKNO.indexOf(weekno)) {
    	            this.days.push(day);
    	          }
    	        }
    	      } else if (partCount == 3 &&
    	                 "BYDAY" in parts &&
    	                 "BYWEEKNO" in parts &&
    	                 "BYMONTHDAY" in parts) ; else if (partCount == 1 && "BYYEARDAY" in parts) {
    	        this.days = this.days.concat(this.by_data.BYYEARDAY);
    	      } else {
    	        this.days = [];
    	      }
    	      return 0;
    	    },

    	    expand_by_day: function expand_by_day(aYear) {

    	      var days_list = [];
    	      var tmp = this.last.clone();

    	      tmp.year = aYear;
    	      tmp.month = 1;
    	      tmp.day = 1;
    	      tmp.isDate = true;

    	      var start_dow = tmp.dayOfWeek();

    	      tmp.month = 12;
    	      tmp.day = 31;
    	      tmp.isDate = true;

    	      var end_dow = tmp.dayOfWeek();
    	      var end_year_day = tmp.dayOfYear();

    	      for (var daykey in this.by_data.BYDAY) {
    	        /* istanbul ignore if */
    	        if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
    	          continue;
    	        }
    	        var day = this.by_data.BYDAY[daykey];
    	        var parts = this.ruleDayOfWeek(day);
    	        var pos = parts[0];
    	        var dow = parts[1];

    	        if (pos == 0) {
    	          var tmp_start_doy = ((dow + 7 - start_dow) % 7) + 1;

    	          for (var doy = tmp_start_doy; doy <= end_year_day; doy += 7) {
    	            days_list.push(doy);
    	          }

    	        } else if (pos > 0) {
    	          var first;
    	          if (dow >= start_dow) {
    	            first = dow - start_dow + 1;
    	          } else {
    	            first = dow - start_dow + 8;
    	          }

    	          days_list.push(first + (pos - 1) * 7);
    	        } else {
    	          var last;
    	          pos = -pos;

    	          if (dow <= end_dow) {
    	            last = end_year_day - end_dow + dow;
    	          } else {
    	            last = end_year_day - end_dow + dow - 7;
    	          }

    	          days_list.push(last - (pos - 1) * 7);
    	        }
    	      }
    	      return days_list;
    	    },

    	    is_day_in_byday: function is_day_in_byday(tt) {
    	      for (var daykey in this.by_data.BYDAY) {
    	        /* istanbul ignore if */
    	        if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
    	          continue;
    	        }
    	        var day = this.by_data.BYDAY[daykey];
    	        var parts = this.ruleDayOfWeek(day);
    	        var pos = parts[0];
    	        var dow = parts[1];
    	        var this_dow = tt.dayOfWeek();

    	        if ((pos == 0 && dow == this_dow) ||
    	            (tt.nthWeekDay(dow, pos) == tt.day)) {
    	          return 1;
    	        }
    	      }

    	      return 0;
    	    },

    	    /**
    	     * Checks if given value is in BYSETPOS.
    	     *
    	     * @private
    	     * @param {Numeric} aPos position to check for.
    	     * @return {Boolean} false unless BYSETPOS rules exist
    	     *                   and the given value is present in rules.
    	     */
    	    check_set_position: function check_set_position(aPos) {
    	      if (this.has_by_data('BYSETPOS')) {
    	        var idx = this.by_data.BYSETPOS.indexOf(aPos);
    	        // negative numbers are not false-y
    	        return idx !== -1;
    	      }
    	      return false;
    	    },

    	    sort_byday_rules: function icalrecur_sort_byday_rules(aRules) {
    	      for (var i = 0; i < aRules.length; i++) {
    	        for (var j = 0; j < i; j++) {
    	          var one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];
    	          var two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];

    	          if (one > two) {
    	            var tmp = aRules[i];
    	            aRules[i] = aRules[j];
    	            aRules[j] = tmp;
    	          }
    	        }
    	      }
    	    },

    	    check_contract_restriction: function check_contract_restriction(aRuleType, v) {
    	      var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
    	      var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
    	      var pass = false;

    	      if (aRuleType in this.by_data &&
    	          ruleMapValue == icalrecur_iterator.CONTRACT) {

    	        var ruleType = this.by_data[aRuleType];

    	        for (var bydatakey in ruleType) {
    	          /* istanbul ignore else */
    	          if (ruleType.hasOwnProperty(bydatakey)) {
    	            if (ruleType[bydatakey] == v) {
    	              pass = true;
    	              break;
    	            }
    	          }
    	        }
    	      } else {
    	        // Not a contracting byrule or has no data, test passes
    	        pass = true;
    	      }
    	      return pass;
    	    },

    	    check_contracting_rules: function check_contracting_rules() {
    	      var dow = this.last.dayOfWeek();
    	      var weekNo = this.last.weekNumber(this.rule.wkst);
    	      var doy = this.last.dayOfYear();

    	      return (this.check_contract_restriction("BYSECOND", this.last.second) &&
    	              this.check_contract_restriction("BYMINUTE", this.last.minute) &&
    	              this.check_contract_restriction("BYHOUR", this.last.hour) &&
    	              this.check_contract_restriction("BYDAY", ICAL.Recur.numericDayToIcalDay(dow)) &&
    	              this.check_contract_restriction("BYWEEKNO", weekNo) &&
    	              this.check_contract_restriction("BYMONTHDAY", this.last.day) &&
    	              this.check_contract_restriction("BYMONTH", this.last.month) &&
    	              this.check_contract_restriction("BYYEARDAY", doy));
    	    },

    	    setup_defaults: function setup_defaults(aRuleType, req, deftime) {
    	      var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
    	      var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];

    	      if (ruleMapValue != icalrecur_iterator.CONTRACT) {
    	        if (!(aRuleType in this.by_data)) {
    	          this.by_data[aRuleType] = [deftime];
    	        }
    	        if (this.rule.freq != req) {
    	          return this.by_data[aRuleType][0];
    	        }
    	      }
    	      return deftime;
    	    },

    	    /**
    	     * Convert iterator into a serialize-able object.  Will preserve current
    	     * iteration sequence to ensure the seamless continuation of the recurrence
    	     * rule.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      var result = Object.create(null);

    	      result.initialized = this.initialized;
    	      result.rule = this.rule.toJSON();
    	      result.dtstart = this.dtstart.toJSON();
    	      result.by_data = this.by_data;
    	      result.days = this.days;
    	      result.last = this.last.toJSON();
    	      result.by_indices = this.by_indices;
    	      result.occurrence_number = this.occurrence_number;

    	      return result;
    	    }
    	  };

    	  icalrecur_iterator._indexMap = {
    	    "BYSECOND": 0,
    	    "BYMINUTE": 1,
    	    "BYHOUR": 2,
    	    "BYDAY": 3,
    	    "BYMONTHDAY": 4,
    	    "BYYEARDAY": 5,
    	    "BYWEEKNO": 6,
    	    "BYMONTH": 7,
    	    "BYSETPOS": 8
    	  };

    	  icalrecur_iterator._expandMap = {
    	    "SECONDLY": [1, 1, 1, 1, 1, 1, 1, 1],
    	    "MINUTELY": [2, 1, 1, 1, 1, 1, 1, 1],
    	    "HOURLY": [2, 2, 1, 1, 1, 1, 1, 1],
    	    "DAILY": [2, 2, 2, 1, 1, 1, 1, 1],
    	    "WEEKLY": [2, 2, 2, 2, 3, 3, 1, 1],
    	    "MONTHLY": [2, 2, 2, 2, 2, 3, 3, 1],
    	    "YEARLY": [2, 2, 2, 2, 2, 2, 2, 2]
    	  };
    	  icalrecur_iterator.UNKNOWN = 0;
    	  icalrecur_iterator.CONTRACT = 1;
    	  icalrecur_iterator.EXPAND = 2;
    	  icalrecur_iterator.ILLEGAL = 3;

    	  return icalrecur_iterator;

    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.RecurExpansion = (function() {
    	  function formatTime(item) {
    	    return ICAL.helpers.formatClassType(item, ICAL.Time);
    	  }

    	  function compareTime(a, b) {
    	    return a.compare(b);
    	  }

    	  function isRecurringComponent(comp) {
    	    return comp.hasProperty('rdate') ||
    	           comp.hasProperty('rrule') ||
    	           comp.hasProperty('recurrence-id');
    	  }

    	  /**
    	   * @classdesc
    	   * Primary class for expanding recurring rules.  Can take multiple rrules,
    	   * rdates, exdate(s) and iterate (in order) over each next occurrence.
    	   *
    	   * Once initialized this class can also be serialized saved and continue
    	   * iteration from the last point.
    	   *
    	   * NOTE: it is intended that this class is to be used
    	   *       with ICAL.Event which handles recurrence exceptions.
    	   *
    	   * @example
    	   * // assuming event is a parsed ical component
    	   * var event;
    	   *
    	   * var expand = new ICAL.RecurExpansion({
    	   *   component: event,
    	   *   dtstart: event.getFirstPropertyValue('dtstart')
    	   * });
    	   *
    	   * // remember there are infinite rules
    	   * // so its a good idea to limit the scope
    	   * // of the iterations then resume later on.
    	   *
    	   * // next is always an ICAL.Time or null
    	   * var next;
    	   *
    	   * while (someCondition && (next = expand.next())) {
    	   *   // do something with next
    	   * }
    	   *
    	   * // save instance for later
    	   * var json = JSON.stringify(expand);
    	   *
    	   * //...
    	   *
    	   * // NOTE: if the component's properties have
    	   * //       changed you will need to rebuild the
    	   * //       class and start over. This only works
    	   * //       when the component's recurrence info is the same.
    	   * var expand = new ICAL.RecurExpansion(JSON.parse(json));
    	   *
    	   * @description
    	   * The options object can be filled with the specified initial values. It can
    	   * also contain additional members, as a result of serializing a previous
    	   * expansion state, as shown in the example.
    	   *
    	   * @class
    	   * @alias ICAL.RecurExpansion
    	   * @param {Object} options
    	   *        Recurrence expansion options
    	   * @param {ICAL.Time} options.dtstart
    	   *        Start time of the event
    	   * @param {ICAL.Component=} options.component
    	   *        Component for expansion, required if not resuming.
    	   */
    	  function RecurExpansion(options) {
    	    this.ruleDates = [];
    	    this.exDates = [];
    	    this.fromData(options);
    	  }

    	  RecurExpansion.prototype = {
    	    /**
    	     * True when iteration is fully completed.
    	     * @type {Boolean}
    	     */
    	    complete: false,

    	    /**
    	     * Array of rrule iterators.
    	     *
    	     * @type {ICAL.RecurIterator[]}
    	     * @private
    	     */
    	    ruleIterators: null,

    	    /**
    	     * Array of rdate instances.
    	     *
    	     * @type {ICAL.Time[]}
    	     * @private
    	     */
    	    ruleDates: null,

    	    /**
    	     * Array of exdate instances.
    	     *
    	     * @type {ICAL.Time[]}
    	     * @private
    	     */
    	    exDates: null,

    	    /**
    	     * Current position in ruleDates array.
    	     * @type {Number}
    	     * @private
    	     */
    	    ruleDateInc: 0,

    	    /**
    	     * Current position in exDates array
    	     * @type {Number}
    	     * @private
    	     */
    	    exDateInc: 0,

    	    /**
    	     * Current negative date.
    	     *
    	     * @type {ICAL.Time}
    	     * @private
    	     */
    	    exDate: null,

    	    /**
    	     * Current additional date.
    	     *
    	     * @type {ICAL.Time}
    	     * @private
    	     */
    	    ruleDate: null,

    	    /**
    	     * Start date of recurring rules.
    	     *
    	     * @type {ICAL.Time}
    	     */
    	    dtstart: null,

    	    /**
    	     * Last expanded time
    	     *
    	     * @type {ICAL.Time}
    	     */
    	    last: null,

    	    /**
    	     * Initialize the recurrence expansion from the data object. The options
    	     * object may also contain additional members, see the
    	     * {@link ICAL.RecurExpansion constructor} for more details.
    	     *
    	     * @param {Object} options
    	     *        Recurrence expansion options
    	     * @param {ICAL.Time} options.dtstart
    	     *        Start time of the event
    	     * @param {ICAL.Component=} options.component
    	     *        Component for expansion, required if not resuming.
    	     */
    	    fromData: function(options) {
    	      var start = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);

    	      if (!start) {
    	        throw new Error('.dtstart (ICAL.Time) must be given');
    	      } else {
    	        this.dtstart = start;
    	      }

    	      if (options.component) {
    	        this._init(options.component);
    	      } else {
    	        this.last = formatTime(options.last) || start.clone();

    	        if (!options.ruleIterators) {
    	          throw new Error('.ruleIterators or .component must be given');
    	        }

    	        this.ruleIterators = options.ruleIterators.map(function(item) {
    	          return ICAL.helpers.formatClassType(item, ICAL.RecurIterator);
    	        });

    	        this.ruleDateInc = options.ruleDateInc;
    	        this.exDateInc = options.exDateInc;

    	        if (options.ruleDates) {
    	          this.ruleDates = options.ruleDates.map(formatTime);
    	          this.ruleDate = this.ruleDates[this.ruleDateInc];
    	        }

    	        if (options.exDates) {
    	          this.exDates = options.exDates.map(formatTime);
    	          this.exDate = this.exDates[this.exDateInc];
    	        }

    	        if (typeof(options.complete) !== 'undefined') {
    	          this.complete = options.complete;
    	        }
    	      }
    	    },

    	    /**
    	     * Retrieve the next occurrence in the series.
    	     * @return {ICAL.Time}
    	     */
    	    next: function() {
    	      var iter;
    	      var next;
    	      var compare;

    	      var maxTries = 500;
    	      var currentTry = 0;

    	      while (true) {
    	        if (currentTry++ > maxTries) {
    	          throw new Error(
    	            'max tries have occured, rule may be impossible to forfill.'
    	          );
    	        }

    	        next = this.ruleDate;
    	        iter = this._nextRecurrenceIter(this.last);

    	        // no more matches
    	        // because we increment the rule day or rule
    	        // _after_ we choose a value this should be
    	        // the only spot where we need to worry about the
    	        // end of events.
    	        if (!next && !iter) {
    	          // there are no more iterators or rdates
    	          this.complete = true;
    	          break;
    	        }

    	        // no next rule day or recurrence rule is first.
    	        if (!next || (iter && next.compare(iter.last) > 0)) {
    	          // must be cloned, recur will reuse the time element.
    	          next = iter.last.clone();
    	          // move to next so we can continue
    	          iter.next();
    	        }

    	        // if the ruleDate is still next increment it.
    	        if (this.ruleDate === next) {
    	          this._nextRuleDay();
    	        }

    	        this.last = next;

    	        // check the negative rules
    	        if (this.exDate) {
    	          compare = this.exDate.compare(this.last);

    	          if (compare < 0) {
    	            this._nextExDay();
    	          }

    	          // if the current rule is excluded skip it.
    	          if (compare === 0) {
    	            this._nextExDay();
    	            continue;
    	          }
    	        }

    	        //XXX: The spec states that after we resolve the final
    	        //     list of dates we execute exdate this seems somewhat counter
    	        //     intuitive to what I have seen most servers do so for now
    	        //     I exclude based on the original date not the one that may
    	        //     have been modified by the exception.
    	        return this.last;
    	      }
    	    },

    	    /**
    	     * Converts object into a serialize-able format. This format can be passed
    	     * back into the expansion to resume iteration.
    	     * @return {Object}
    	     */
    	    toJSON: function() {
    	      function toJSON(item) {
    	        return item.toJSON();
    	      }

    	      var result = Object.create(null);
    	      result.ruleIterators = this.ruleIterators.map(toJSON);

    	      if (this.ruleDates) {
    	        result.ruleDates = this.ruleDates.map(toJSON);
    	      }

    	      if (this.exDates) {
    	        result.exDates = this.exDates.map(toJSON);
    	      }

    	      result.ruleDateInc = this.ruleDateInc;
    	      result.exDateInc = this.exDateInc;
    	      result.last = this.last.toJSON();
    	      result.dtstart = this.dtstart.toJSON();
    	      result.complete = this.complete;

    	      return result;
    	    },

    	    /**
    	     * Extract all dates from the properties in the given component. The
    	     * properties will be filtered by the property name.
    	     *
    	     * @private
    	     * @param {ICAL.Component} component        The component to search in
    	     * @param {String} propertyName             The property name to search for
    	     * @return {ICAL.Time[]}                    The extracted dates.
    	     */
    	    _extractDates: function(component, propertyName) {
    	      function handleProp(prop) {
    	        idx = ICAL.helpers.binsearchInsert(
    	          result,
    	          prop,
    	          compareTime
    	        );

    	        // ordered insert
    	        result.splice(idx, 0, prop);
    	      }

    	      var result = [];
    	      var props = component.getAllProperties(propertyName);
    	      var len = props.length;
    	      var i = 0;

    	      var idx;

    	      for (; i < len; i++) {
    	        props[i].getValues().forEach(handleProp);
    	      }

    	      return result;
    	    },

    	    /**
    	     * Initialize the recurrence expansion.
    	     *
    	     * @private
    	     * @param {ICAL.Component} component    The component to initialize from.
    	     */
    	    _init: function(component) {
    	      this.ruleIterators = [];

    	      this.last = this.dtstart.clone();

    	      // to provide api consistency non-recurring
    	      // events can also use the iterator though it will
    	      // only return a single time.
    	      if (!isRecurringComponent(component)) {
    	        this.ruleDate = this.last.clone();
    	        this.complete = true;
    	        return;
    	      }

    	      if (component.hasProperty('rdate')) {
    	        this.ruleDates = this._extractDates(component, 'rdate');

    	        // special hack for cases where first rdate is prior
    	        // to the start date. We only check for the first rdate.
    	        // This is mostly for google's crazy recurring date logic
    	        // (contacts birthdays).
    	        if ((this.ruleDates[0]) &&
    	            (this.ruleDates[0].compare(this.dtstart) < 0)) {

    	          this.ruleDateInc = 0;
    	          this.last = this.ruleDates[0].clone();
    	        } else {
    	          this.ruleDateInc = ICAL.helpers.binsearchInsert(
    	            this.ruleDates,
    	            this.last,
    	            compareTime
    	          );
    	        }

    	        this.ruleDate = this.ruleDates[this.ruleDateInc];
    	      }

    	      if (component.hasProperty('rrule')) {
    	        var rules = component.getAllProperties('rrule');
    	        var i = 0;
    	        var len = rules.length;

    	        var rule;
    	        var iter;

    	        for (; i < len; i++) {
    	          rule = rules[i].getFirstValue();
    	          iter = rule.iterator(this.dtstart);
    	          this.ruleIterators.push(iter);

    	          // increment to the next occurrence so future
    	          // calls to next return times beyond the initial iteration.
    	          // XXX: I find this suspicious might be a bug?
    	          iter.next();
    	        }
    	      }

    	      if (component.hasProperty('exdate')) {
    	        this.exDates = this._extractDates(component, 'exdate');
    	        // if we have a .last day we increment the index to beyond it.
    	        this.exDateInc = ICAL.helpers.binsearchInsert(
    	          this.exDates,
    	          this.last,
    	          compareTime
    	        );

    	        this.exDate = this.exDates[this.exDateInc];
    	      }
    	    },

    	    /**
    	     * Advance to the next exdate
    	     * @private
    	     */
    	    _nextExDay: function() {
    	      this.exDate = this.exDates[++this.exDateInc];
    	    },

    	    /**
    	     * Advance to the next rule date
    	     * @private
    	     */
    	    _nextRuleDay: function() {
    	      this.ruleDate = this.ruleDates[++this.ruleDateInc];
    	    },

    	    /**
    	     * Find and return the recurrence rule with the most recent event and
    	     * return it.
    	     *
    	     * @private
    	     * @return {?ICAL.RecurIterator}    Found iterator.
    	     */
    	    _nextRecurrenceIter: function() {
    	      var iters = this.ruleIterators;

    	      if (iters.length === 0) {
    	        return null;
    	      }

    	      var len = iters.length;
    	      var iter;
    	      var iterTime;
    	      var iterIdx = 0;
    	      var chosenIter;

    	      // loop through each iterator
    	      for (; iterIdx < len; iterIdx++) {
    	        iter = iters[iterIdx];
    	        iterTime = iter.last;

    	        // if iteration is complete
    	        // then we must exclude it from
    	        // the search and remove it.
    	        if (iter.completed) {
    	          len--;
    	          if (iterIdx !== 0) {
    	            iterIdx--;
    	          }
    	          iters.splice(iterIdx, 1);
    	          continue;
    	        }

    	        // find the most recent possible choice
    	        if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {
    	          // that iterator is saved
    	          chosenIter = iter;
    	        }
    	      }

    	      // the chosen iterator is returned but not mutated
    	      // this iterator contains the most recent event.
    	      return chosenIter;
    	    }
    	  };

    	  return RecurExpansion;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.Event = (function() {

    	  /**
    	   * @classdesc
    	   * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal
    	   * object, followed by the component/property layer. The highest level is the
    	   * event representation, which this class is part of. See the
    	   * {@tutorial layers} guide for more details.
    	   *
    	   * @class
    	   * @alias ICAL.Event
    	   * @param {ICAL.Component=} component         The ICAL.Component to base this event on
    	   * @param {Object} options                    Options for this event
    	   * @param {Boolean} options.strictExceptions
    	   *          When true, will verify exceptions are related by their UUID
    	   * @param {Array<ICAL.Component|ICAL.Event>} options.exceptions
    	   *          Exceptions to this event, either as components or events. If not
    	   *            specified exceptions will automatically be set in relation of
    	   *            component's parent
    	   */
    	  function Event(component, options) {
    	    if (!(component instanceof ICAL.Component)) {
    	      options = component;
    	      component = null;
    	    }

    	    if (component) {
    	      this.component = component;
    	    } else {
    	      this.component = new ICAL.Component('vevent');
    	    }

    	    this._rangeExceptionCache = Object.create(null);
    	    this.exceptions = Object.create(null);
    	    this.rangeExceptions = [];

    	    if (options && options.strictExceptions) {
    	      this.strictExceptions = options.strictExceptions;
    	    }

    	    if (options && options.exceptions) {
    	      options.exceptions.forEach(this.relateException, this);
    	    } else if (this.component.parent && !this.isRecurrenceException()) {
    	      this.component.parent.getAllSubcomponents('vevent').forEach(function(event) {
    	        if (event.hasProperty('recurrence-id')) {
    	          this.relateException(event);
    	        }
    	      }, this);
    	    }
    	  }

    	  Event.prototype = {

    	    THISANDFUTURE: 'THISANDFUTURE',

    	    /**
    	     * List of related event exceptions.
    	     *
    	     * @type {ICAL.Event[]}
    	     */
    	    exceptions: null,

    	    /**
    	     * When true, will verify exceptions are related by their UUID.
    	     *
    	     * @type {Boolean}
    	     */
    	    strictExceptions: false,

    	    /**
    	     * Relates a given event exception to this object.  If the given component
    	     * does not share the UID of this event it cannot be related and will throw
    	     * an exception.
    	     *
    	     * If this component is an exception it cannot have other exceptions
    	     * related to it.
    	     *
    	     * @param {ICAL.Component|ICAL.Event} obj       Component or event
    	     */
    	    relateException: function(obj) {
    	      if (this.isRecurrenceException()) {
    	        throw new Error('cannot relate exception to exceptions');
    	      }

    	      if (obj instanceof ICAL.Component) {
    	        obj = new ICAL.Event(obj);
    	      }

    	      if (this.strictExceptions && obj.uid !== this.uid) {
    	        throw new Error('attempted to relate unrelated exception');
    	      }

    	      var id = obj.recurrenceId.toString();

    	      // we don't sort or manage exceptions directly
    	      // here the recurrence expander handles that.
    	      this.exceptions[id] = obj;

    	      // index RANGE=THISANDFUTURE exceptions so we can
    	      // look them up later in getOccurrenceDetails.
    	      if (obj.modifiesFuture()) {
    	        var item = [
    	          obj.recurrenceId.toUnixTime(), id
    	        ];

    	        // we keep them sorted so we can find the nearest
    	        // value later on...
    	        var idx = ICAL.helpers.binsearchInsert(
    	          this.rangeExceptions,
    	          item,
    	          compareRangeException
    	        );

    	        this.rangeExceptions.splice(idx, 0, item);
    	      }
    	    },

    	    /**
    	     * Checks if this record is an exception and has the RANGE=THISANDFUTURE
    	     * value.
    	     *
    	     * @return {Boolean}        True, when exception is within range
    	     */
    	    modifiesFuture: function() {
    	      if (!this.component.hasProperty('recurrence-id')) {
    	        return false;
    	      }

    	      var range = this.component.getFirstProperty('recurrence-id').getParameter('range');
    	      return range === this.THISANDFUTURE;
    	    },

    	    /**
    	     * Finds the range exception nearest to the given date.
    	     *
    	     * @param {ICAL.Time} time usually an occurrence time of an event
    	     * @return {?ICAL.Event} the related event/exception or null
    	     */
    	    findRangeException: function(time) {
    	      if (!this.rangeExceptions.length) {
    	        return null;
    	      }

    	      var utc = time.toUnixTime();
    	      var idx = ICAL.helpers.binsearchInsert(
    	        this.rangeExceptions,
    	        [utc],
    	        compareRangeException
    	      );

    	      idx -= 1;

    	      // occurs before
    	      if (idx < 0) {
    	        return null;
    	      }

    	      var rangeItem = this.rangeExceptions[idx];

    	      /* istanbul ignore next: sanity check only */
    	      if (utc < rangeItem[0]) {
    	        return null;
    	      }

    	      return rangeItem[1];
    	    },

    	    /**
    	     * This object is returned by {@link ICAL.Event#getOccurrenceDetails getOccurrenceDetails}
    	     *
    	     * @typedef {Object} occurrenceDetails
    	     * @memberof ICAL.Event
    	     * @property {ICAL.Time} recurrenceId       The passed in recurrence id
    	     * @property {ICAL.Event} item              The occurrence
    	     * @property {ICAL.Time} startDate          The start of the occurrence
    	     * @property {ICAL.Time} endDate            The end of the occurrence
    	     */

    	    /**
    	     * Returns the occurrence details based on its start time.  If the
    	     * occurrence has an exception will return the details for that exception.
    	     *
    	     * NOTE: this method is intend to be used in conjunction
    	     *       with the {@link ICAL.Event#iterator iterator} method.
    	     *
    	     * @param {ICAL.Time} occurrence time occurrence
    	     * @return {ICAL.Event.occurrenceDetails} Information about the occurrence
    	     */
    	    getOccurrenceDetails: function(occurrence) {
    	      var id = occurrence.toString();
    	      var utcId = occurrence.convertToZone(ICAL.Timezone.utcTimezone).toString();
    	      var item;
    	      var result = {
    	        //XXX: Clone?
    	        recurrenceId: occurrence
    	      };

    	      if (id in this.exceptions) {
    	        item = result.item = this.exceptions[id];
    	        result.startDate = item.startDate;
    	        result.endDate = item.endDate;
    	        result.item = item;
    	      } else if (utcId in this.exceptions) {
    	        item = this.exceptions[utcId];
    	        result.startDate = item.startDate;
    	        result.endDate = item.endDate;
    	        result.item = item;
    	      } else {
    	        // range exceptions (RANGE=THISANDFUTURE) have a
    	        // lower priority then direct exceptions but
    	        // must be accounted for first. Their item is
    	        // always the first exception with the range prop.
    	        var rangeExceptionId = this.findRangeException(
    	          occurrence
    	        );
    	        var end;

    	        if (rangeExceptionId) {
    	          var exception = this.exceptions[rangeExceptionId];

    	          // range exception must modify standard time
    	          // by the difference (if any) in start/end times.
    	          result.item = exception;

    	          var startDiff = this._rangeExceptionCache[rangeExceptionId];

    	          if (!startDiff) {
    	            var original = exception.recurrenceId.clone();
    	            var newStart = exception.startDate.clone();

    	            // zones must be same otherwise subtract may be incorrect.
    	            original.zone = newStart.zone;
    	            startDiff = newStart.subtractDate(original);

    	            this._rangeExceptionCache[rangeExceptionId] = startDiff;
    	          }

    	          var start = occurrence.clone();
    	          start.zone = exception.startDate.zone;
    	          start.addDuration(startDiff);

    	          end = start.clone();
    	          end.addDuration(exception.duration);

    	          result.startDate = start;
    	          result.endDate = end;
    	        } else {
    	          // no range exception standard expansion
    	          end = occurrence.clone();
    	          end.addDuration(this.duration);

    	          result.endDate = end;
    	          result.startDate = occurrence;
    	          result.item = this;
    	        }
    	      }

    	      return result;
    	    },

    	    /**
    	     * Builds a recur expansion instance for a specific point in time (defaults
    	     * to startDate).
    	     *
    	     * @param {ICAL.Time} startTime     Starting point for expansion
    	     * @return {ICAL.RecurExpansion}    Expansion object
    	     */
    	    iterator: function(startTime) {
    	      return new ICAL.RecurExpansion({
    	        component: this.component,
    	        dtstart: startTime || this.startDate
    	      });
    	    },

    	    /**
    	     * Checks if the event is recurring
    	     *
    	     * @return {Boolean}        True, if event is recurring
    	     */
    	    isRecurring: function() {
    	      var comp = this.component;
    	      return comp.hasProperty('rrule') || comp.hasProperty('rdate');
    	    },

    	    /**
    	     * Checks if the event describes a recurrence exception. See
    	     * {@tutorial terminology} for details.
    	     *
    	     * @return {Boolean}    True, if the even describes a recurrence exception
    	     */
    	    isRecurrenceException: function() {
    	      return this.component.hasProperty('recurrence-id');
    	    },

    	    /**
    	     * Returns the types of recurrences this event may have.
    	     *
    	     * Returned as an object with the following possible keys:
    	     *
    	     *    - YEARLY
    	     *    - MONTHLY
    	     *    - WEEKLY
    	     *    - DAILY
    	     *    - MINUTELY
    	     *    - SECONDLY
    	     *
    	     * @return {Object.<ICAL.Recur.frequencyValues, Boolean>}
    	     *          Object of recurrence flags
    	     */
    	    getRecurrenceTypes: function() {
    	      var rules = this.component.getAllProperties('rrule');
    	      var i = 0;
    	      var len = rules.length;
    	      var result = Object.create(null);

    	      for (; i < len; i++) {
    	        var value = rules[i].getFirstValue();
    	        result[value.freq] = true;
    	      }

    	      return result;
    	    },

    	    /**
    	     * The uid of this event
    	     * @type {String}
    	     */
    	    get uid() {
    	      return this._firstProp('uid');
    	    },

    	    set uid(value) {
    	      this._setProp('uid', value);
    	    },

    	    /**
    	     * The start date
    	     * @type {ICAL.Time}
    	     */
    	    get startDate() {
    	      return this._firstProp('dtstart');
    	    },

    	    set startDate(value) {
    	      this._setTime('dtstart', value);
    	    },

    	    /**
    	     * The end date. This can be the result directly from the property, or the
    	     * end date calculated from start date and duration. Setting the property
    	     * will remove any duration properties.
    	     * @type {ICAL.Time}
    	     */
    	    get endDate() {
    	      var endDate = this._firstProp('dtend');
    	      if (!endDate) {
    	          var duration = this._firstProp('duration');
    	          endDate = this.startDate.clone();
    	          if (duration) {
    	              endDate.addDuration(duration);
    	          } else if (endDate.isDate) {
    	              endDate.day += 1;
    	          }
    	      }
    	      return endDate;
    	    },

    	    set endDate(value) {
    	      if (this.component.hasProperty('duration')) {
    	        this.component.removeProperty('duration');
    	      }
    	      this._setTime('dtend', value);
    	    },

    	    /**
    	     * The duration. This can be the result directly from the property, or the
    	     * duration calculated from start date and end date. Setting the property
    	     * will remove any `dtend` properties.
    	     * @type {ICAL.Duration}
    	     */
    	    get duration() {
    	      var duration = this._firstProp('duration');
    	      if (!duration) {
    	        return this.endDate.subtractDateTz(this.startDate);
    	      }
    	      return duration;
    	    },

    	    set duration(value) {
    	      if (this.component.hasProperty('dtend')) {
    	        this.component.removeProperty('dtend');
    	      }

    	      this._setProp('duration', value);
    	    },

    	    /**
    	     * The location of the event.
    	     * @type {String}
    	     */
    	    get location() {
    	      return this._firstProp('location');
    	    },

    	    set location(value) {
    	      return this._setProp('location', value);
    	    },

    	    /**
    	     * The attendees in the event
    	     * @type {ICAL.Property[]}
    	     * @readonly
    	     */
    	    get attendees() {
    	      //XXX: This is way lame we should have a better
    	      //     data structure for this later.
    	      return this.component.getAllProperties('attendee');
    	    },


    	    /**
    	     * The event summary
    	     * @type {String}
    	     */
    	    get summary() {
    	      return this._firstProp('summary');
    	    },

    	    set summary(value) {
    	      this._setProp('summary', value);
    	    },

    	    /**
    	     * The event description.
    	     * @type {String}
    	     */
    	    get description() {
    	      return this._firstProp('description');
    	    },

    	    set description(value) {
    	      this._setProp('description', value);
    	    },

    	    /**
    	     * The organizer value as an uri. In most cases this is a mailto: uri, but
    	     * it can also be something else, like urn:uuid:...
    	     * @type {String}
    	     */
    	    get organizer() {
    	      return this._firstProp('organizer');
    	    },

    	    set organizer(value) {
    	      this._setProp('organizer', value);
    	    },

    	    /**
    	     * The sequence value for this event. Used for scheduling
    	     * see {@tutorial terminology}.
    	     * @type {Number}
    	     */
    	    get sequence() {
    	      return this._firstProp('sequence');
    	    },

    	    set sequence(value) {
    	      this._setProp('sequence', value);
    	    },

    	    /**
    	     * The recurrence id for this event. See {@tutorial terminology} for details.
    	     * @type {ICAL.Time}
    	     */
    	    get recurrenceId() {
    	      return this._firstProp('recurrence-id');
    	    },

    	    set recurrenceId(value) {
    	      this._setTime('recurrence-id', value);
    	    },

    	    /**
    	     * Set/update a time property's value.
    	     * This will also update the TZID of the property.
    	     *
    	     * TODO: this method handles the case where we are switching
    	     * from a known timezone to an implied timezone (one without TZID).
    	     * This does _not_ handle the case of moving between a known
    	     *  (by TimezoneService) timezone to an unknown timezone...
    	     *
    	     * We will not add/remove/update the VTIMEZONE subcomponents
    	     *  leading to invalid ICAL data...
    	     * @private
    	     * @param {String} propName     The property name
    	     * @param {ICAL.Time} time      The time to set
    	     */
    	    _setTime: function(propName, time) {
    	      var prop = this.component.getFirstProperty(propName);

    	      if (!prop) {
    	        prop = new ICAL.Property(propName);
    	        this.component.addProperty(prop);
    	      }

    	      // utc and local don't get a tzid
    	      if (
    	        time.zone === ICAL.Timezone.localTimezone ||
    	        time.zone === ICAL.Timezone.utcTimezone
    	      ) {
    	        // remove the tzid
    	        prop.removeParameter('tzid');
    	      } else {
    	        prop.setParameter('tzid', time.zone.tzid);
    	      }

    	      prop.setValue(time);
    	    },

    	    _setProp: function(name, value) {
    	      this.component.updatePropertyWithValue(name, value);
    	    },

    	    _firstProp: function(name) {
    	      return this.component.getFirstPropertyValue(name);
    	    },

    	    /**
    	     * The string representation of this event.
    	     * @return {String}
    	     */
    	    toString: function() {
    	      return this.component.toString();
    	    }

    	  };

    	  function compareRangeException(a, b) {
    	    if (a[0] > b[0]) return 1;
    	    if (b[0] > a[0]) return -1;
    	    return 0;
    	  }

    	  return Event;
    	}());
    	/* This Source Code Form is subject to the terms of the Mozilla Public
    	 * License, v. 2.0. If a copy of the MPL was not distributed with this
    	 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    	 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */


    	/**
    	 * This symbol is further described later on
    	 * @ignore
    	 */
    	ICAL.ComponentParser = (function() {
    	  /**
    	   * @classdesc
    	   * The ComponentParser is used to process a String or jCal Object,
    	   * firing callbacks for various found components, as well as completion.
    	   *
    	   * @example
    	   * var options = {
    	   *   // when false no events will be emitted for type
    	   *   parseEvent: true,
    	   *   parseTimezone: true
    	   * };
    	   *
    	   * var parser = new ICAL.ComponentParser(options);
    	   *
    	   * parser.onevent(eventComponent) {
    	   *   //...
    	   * }
    	   *
    	   * // ontimezone, etc...
    	   *
    	   * parser.oncomplete = function() {
    	   *
    	   * };
    	   *
    	   * parser.process(stringOrComponent);
    	   *
    	   * @class
    	   * @alias ICAL.ComponentParser
    	   * @param {Object=} options        Component parser options
    	   * @param {Boolean} options.parseEvent        Whether events should be parsed
    	   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed
    	   */
    	  function ComponentParser(options) {
    	    if (typeof(options) === 'undefined') {
    	      options = {};
    	    }

    	    var key;
    	    for (key in options) {
    	      /* istanbul ignore else */
    	      if (options.hasOwnProperty(key)) {
    	        this[key] = options[key];
    	      }
    	    }
    	  }

    	  ComponentParser.prototype = {

    	    /**
    	     * When true, parse events
    	     *
    	     * @type {Boolean}
    	     */
    	    parseEvent: true,

    	    /**
    	     * When true, parse timezones
    	     *
    	     * @type {Boolean}
    	     */
    	    parseTimezone: true,


    	    /* SAX like events here for reference */

    	    /**
    	     * Fired when parsing is complete
    	     * @callback
    	     */
    	    oncomplete: /* istanbul ignore next */ function() {},

    	    /**
    	     * Fired if an error occurs during parsing.
    	     *
    	     * @callback
    	     * @param {Error} err details of error
    	     */
    	    onerror: /* istanbul ignore next */ function(err) {},

    	    /**
    	     * Fired when a top level component (VTIMEZONE) is found
    	     *
    	     * @callback
    	     * @param {ICAL.Timezone} component     Timezone object
    	     */
    	    ontimezone: /* istanbul ignore next */ function(component) {},

    	    /**
    	     * Fired when a top level component (VEVENT) is found.
    	     *
    	     * @callback
    	     * @param {ICAL.Event} component    Top level component
    	     */
    	    onevent: /* istanbul ignore next */ function(component) {},

    	    /**
    	     * Process a string or parse ical object.  This function itself will return
    	     * nothing but will start the parsing process.
    	     *
    	     * Events must be registered prior to calling this method.
    	     *
    	     * @param {ICAL.Component|String|Object} ical      The component to process,
    	     *        either in its final form, as a jCal Object, or string representation
    	     */
    	    process: function(ical) {
    	      //TODO: this is sync now in the future we will have a incremental parser.
    	      if (typeof(ical) === 'string') {
    	        ical = ICAL.parse(ical);
    	      }

    	      if (!(ical instanceof ICAL.Component)) {
    	        ical = new ICAL.Component(ical);
    	      }

    	      var components = ical.getAllSubcomponents();
    	      var i = 0;
    	      var len = components.length;
    	      var component;

    	      for (; i < len; i++) {
    	        component = components[i];

    	        switch (component.name) {
    	          case 'vtimezone':
    	            if (this.parseTimezone) {
    	              var tzid = component.getFirstPropertyValue('tzid');
    	              if (tzid) {
    	                this.ontimezone(new ICAL.Timezone({
    	                  tzid: tzid,
    	                  component: component
    	                }));
    	              }
    	            }
    	            break;
    	          case 'vevent':
    	            if (this.parseEvent) {
    	              this.onevent(new ICAL.Event(component));
    	            }
    	            break;
    	          default:
    	            continue;
    	        }
    	      }

    	      //XXX: ideally we should do a "nextTick" here
    	      //     so in all cases this is actually async.
    	      this.oncomplete();
    	    }
    	  };

    	  return ComponentParser;
    	}());
    } (ical));

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};var require$$1 = {"Africa/Abidjan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Accra":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Addis_Ababa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Algiers":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Asmara":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bamako":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bangui":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Banjul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bissau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Blantyre":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Brazzaville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Bujumbura":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Cairo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Casablanca":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT","Africa/Ceuta":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Africa/Conakry":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Dakar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Dar_es_Salaam":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Djibouti":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Douala":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/El_Aaiun":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD","Africa/Freetown":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Gaborone":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Harare":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Johannesburg":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Juba":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kampala":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Khartoum":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kigali":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Kinshasa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Libreville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lome":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Luanda":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lubumbashi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Lusaka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Malabo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Maputo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Maseru":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Mbabane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Mogadishu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Monrovia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Nairobi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Ndjamena":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Niamey":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Nouakchott":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Ouagadougou":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Porto-Novo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Sao_Tome":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:20180101T010000\r\nRDATE:20180101T010000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:20190101T020000\r\nRDATE:20190101T020000\r\nEND:STANDARD","Africa/Tripoli":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Tunis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Windhoek":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Adak":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-0900\r\nTZNAME:HDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Anchorage":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Anguilla":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Antigua":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Araguaina":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Buenos_Aires":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Catamarca":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Cordoba":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Jujuy":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/La_Rioja":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Mendoza":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Rio_Gallegos":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Salta":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/San_Juan":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/San_Luis":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Tucuman":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Argentina/Ushuaia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Aruba":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Asuncion":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD","America/Atikokan":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bahia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bahia_Banderas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT","America/Barbados":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Belem":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Belize":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Blanc-Sablon":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Boa_Vista":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Bogota":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Boise":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Cambridge_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Campo_Grande":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD","America/Cancun":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Caracas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cayenne":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cayman":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Chicago":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Chihuahua":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Costa_Rica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Creston":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Cuiaba":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Curacao":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Danmarkshavn":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Dawson":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD","America/Dawson_Creek":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Denver":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Detroit":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Dominica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Edmonton":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Eirunepe":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/El_Salvador":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Fort_Nelson":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Fortaleza":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Glace_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Goose_Bay":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Grand_Turk":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:20181104T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20190310T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nEND:DAYLIGHT","America/Grenada":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guadeloupe":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guatemala":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guayaquil":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Guyana":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Halifax":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Havana":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:CST\r\nDTSTART:19701101T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:CDT\r\nDTSTART:19700308T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Hermosillo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Indiana/Indianapolis":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Knox":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Marengo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Petersburg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Tell_City":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Vevay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Vincennes":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Indiana/Winamac":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Inuvik":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Iqaluit":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Jamaica":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Juneau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kentucky/Louisville":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kentucky/Monticello":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Kralendijk":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/La_Paz":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Lima":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Los_Angeles":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Lower_Princes":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Maceio":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Managua":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Manaus":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Marigot":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Martinique":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Matamoros":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Mazatlan":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Menominee":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Merida":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Metlakatla":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20191103T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20190120T020000\r\nRDATE:20190120T020000\r\nEND:STANDARD","America/Mexico_City":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Miquelon":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Moncton":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Monterrey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Montevideo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Montserrat":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Nassau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/New_York":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nipigon":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nome":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Noronha":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/North_Dakota/Beulah":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/North_Dakota/Center":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/North_Dakota/New_Salem":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Nuuk":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD","America/Ojinaga":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Panama":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Pangnirtung":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Paramaribo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Phoenix":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Port-au-Prince":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Port_of_Spain":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Porto_Velho":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Puerto_Rico":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Punta_Arenas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Rainy_River":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Rankin_Inlet":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Recife":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Regina":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Resolute":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/Rio_Branco":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Santarem":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Santiago":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD","America/Santo_Domingo":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Sao_Paulo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT","America/Scoresbysund":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","America/Sitka":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/St_Barthelemy":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Johns":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","America/St_Kitts":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Lucia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Thomas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/St_Vincent":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Swift_Current":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Tegucigalpa":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Thule":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Thunder_Bay":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Tijuana":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Toronto":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Tortola":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Vancouver":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Whitehorse":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD","America/Winnipeg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Yakutat":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Yellowknife":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Antarctica/Casey":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20181007T040000\r\nRDATE:20181007T040000\r\nRDATE:20191004T030000\r\nRDATE:20201004T000100\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:20180311T040000\r\nRDATE:20180311T040000\r\nRDATE:20190317T030000\r\nRDATE:20200308T030000\r\nEND:STANDARD","Antarctica/Davis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/DumontDUrville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Macquarie":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Antarctica/Mawson":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/McMurdo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Antarctica/Palmer":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Rothera":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Syowa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Antarctica/Troll":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0200\r\nTZNAME:+02\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Antarctica/Vostok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arctic/Longyearbyen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Aden":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Almaty":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Amman":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD","Asia/Anadyr":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Aqtau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Aqtobe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ashgabat":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Atyrau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Baghdad":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Bahrain":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Baku":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Bangkok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Barnaul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Beirut":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Bishkek":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Brunei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Chita":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Choibalsan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Colombo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Damascus":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT","Asia/Dhaka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dili":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dubai":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Dushanbe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Famagusta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180325T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Asia/Gaza":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hebron":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ho_Chi_Minh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hong_Kong":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:HKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Hovd":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Irkutsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Istanbul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jakarta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jayapura":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:WIT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Jerusalem":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Asia/Kabul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kamchatka":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Karachi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kathmandu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Khandyga":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kolkata":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Krasnoyarsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuala_Lumpur":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuching":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Kuwait":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Macau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Magadan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Makassar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:WITA\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Manila":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Muscat":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Nicosia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Asia/Novokuznetsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Novosibirsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Omsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Oral":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Phnom_Penh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Pontianak":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Pyongyang":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0830\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0830\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:20180504T233000\r\nRDATE:20180504T233000\r\nEND:STANDARD","Asia/Qatar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Qostanay":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Qyzylorda":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:20181221T000000\r\nRDATE:20181221T000000\r\nEND:STANDARD","Asia/Riyadh":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Sakhalin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Samarkand":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Seoul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Shanghai":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Singapore":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Srednekolymsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Taipei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tashkent":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tbilisi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tehran":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD","Asia/Thimphu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tokyo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Tomsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ulaanbaatar":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Urumqi":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Ust-Nera":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Vientiane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Vladivostok":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yakutsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yangon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yekaterinburg":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Yerevan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Azores":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Bermuda":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Atlantic/Canary":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Cape_Verde":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Faroe":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Madeira":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Reykjavik":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/South_Georgia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/St_Helena":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic/Stanley":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Adelaide":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Brisbane":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Broken_Hill":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Currie":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Australia/Darwin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Eucla":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0845\r\nTZOFFSETTO:+0845\r\nTZNAME:+0845\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Hobart":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Australia/Lindeman":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Lord_Howe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1030\r\nTZNAME:+1030\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Melbourne":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Australia/Perth":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Australia/Sydney":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Europe/Amsterdam":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Andorra":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Astrakhan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Athens":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Belgrade":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Berlin":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Bratislava":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Brussels":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Bucharest":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Budapest":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Busingen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Chisinau":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Copenhagen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Dublin":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:IST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Gibraltar":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Guernsey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Helsinki":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Isle_of_Man":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Istanbul":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Jersey":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Kaliningrad":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Kiev":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Kirov":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Lisbon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Ljubljana":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/London":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Luxembourg":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Madrid":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Malta":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Mariehamn":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Minsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Monaco":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Moscow":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Nicosia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT","Europe/Oslo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Paris":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Podgorica":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Prague":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Riga":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Rome":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Samara":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/San_Marino":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Sarajevo":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Saratov":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Simferopol":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Skopje":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Sofia":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Stockholm":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Tallinn":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Tirane":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Ulyanovsk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Uzhgorod":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vaduz":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vatican":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vienna":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Vilnius":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Volgograd":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:20181028T020000\r\nRDATE:20181028T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Warsaw":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zagreb":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zaporozhye":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Europe/Zurich":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Indian/Antananarivo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Chagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Christmas":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Cocos":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Comoro":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Kerguelen":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mahe":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Maldives":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mauritius":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Mayotte":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Indian/Reunion":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Apia":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT","Pacific/Auckland":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Pacific/Bougainville":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Chatham":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1245\r\nTZOFFSETTO:+1345\r\nTZNAME:+1345\r\nDTSTART:19700927T024500\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1345\r\nTZOFFSETTO:+1245\r\nTZNAME:+1245\r\nDTSTART:19700405T034500\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Pacific/Chuuk":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Easter":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20190406T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20190907T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=1SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20180811T220000\r\nRDATE:20180811T220000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20180512T220000\r\nRDATE:20180512T220000\r\nEND:STANDARD","Pacific/Efate":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Enderbury":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Fakaofo":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Fiji":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT","Pacific/Funafuti":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Galapagos":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Gambier":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0900\r\nTZNAME:-09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Guadalcanal":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Guam":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Honolulu":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kiritimati":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kosrae":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Kwajalein":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Majuro":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Marquesas":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0930\r\nTZOFFSETTO:-0930\r\nTZNAME:-0930\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Midway":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Nauru":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Niue":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:-11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Norfolk":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:20191006T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20200405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1130\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20190701T000000\r\nRDATE:20190701T000000\r\nEND:STANDARD","Pacific/Noumea":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pago_Pago":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Palau":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pitcairn":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:-08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Pohnpei":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Port_Moresby":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Rarotonga":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Saipan":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tahiti":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tarawa":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Tongatapu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Wake":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific/Wallis":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","AUS Central Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","AUS Eastern Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Afghanistan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Asmera":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Africa/Timbuktu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Alaskan Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Argentina/ComodRivadavia":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Buenos_Aires":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","America/Godthab":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD","America/Louisville":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Montreal":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","America/Santa_Isabel":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Arab Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arabian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Arabic Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Argentina Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Calcutta":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Katmandu":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Rangoon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Asia/Saigon":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Atlantic Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Atlantic/Faeroe":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Atlantic/Jan_Mayen":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Azerbaijan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Azores Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Bahia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Bangladesh Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Belarus Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Canada Central Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Cape Verde Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Caucasus Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Cen. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT","Central America Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Brazilian Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Europe Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Central European Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Central Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Central Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Central Standard Time (Mexico)":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","China Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","E. South America Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT","Eastern Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Egypt Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Ekaterinburg Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Europe/Belfast":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","FLE Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Fiji Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT","GMT Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","GTB Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Georgian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Greenwich Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Hawaiian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Iran Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD","Israel Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Jordan Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD","Kaliningrad Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Korea Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Libya Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Line Islands Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Magadan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Mauritius Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Middle East Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Montevideo Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Morocco Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT","Mountain Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Mountain Standard Time (Mexico)":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","N. Central Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Namibia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","New Zealand Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Newfoundland Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT","North Asia East Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","North Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pacific SA Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD","Pacific Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Pacific/Johnston":"BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Pakistan Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Paraguay Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD","Romance Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","Russia Time Zone 10":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russia Time Zone 11":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russia Time Zone 3":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Russian Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Eastern Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SA Western Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","SE Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Samoa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT","Singapore Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","South Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Sri Lanka Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Syria Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT","Taipei Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Tasmania Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD","Tokyo Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Tonga Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Turkey Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD","US Eastern Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US Mountain Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","US/Central":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Eastern":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Mountain":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Pacific":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","US/Pacific-New":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD","Ulaanbaatar Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Venezuela Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Vladivostok Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Australia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Central Africa Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD","W. Europe Standard Time":"BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD","West Asia Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD","West Pacific Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD","Yakutsk Standard Time":"BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD"};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    const ICAL$1 = ical.exports;

    // Copied from https://dxr.mozilla.org/comm-central/source/calendar/timezones/zones.json
    // And compiled using node compile-zones.js
    // See also https://github.com/mozilla-comm/ical.js/issues/195
    const timezones = require$$1;

    class IcalExpander {
      constructor(opts) {
        this.maxIterations = opts.maxIterations != null ? opts.maxIterations : 1000;
        this.skipInvalidDates = opts.skipInvalidDates != null ? opts.skipInvalidDates : false;

        this.jCalData = ICAL$1.parse(opts.ics);
        this.component = new ICAL$1.Component(this.jCalData);
        this.events = this.component.getAllSubcomponents('vevent').map(vevent => new ICAL$1.Event(vevent));

        if (this.skipInvalidDates) {
          this.events = this.events.filter((evt) => {
            try {
              evt.startDate.toJSDate();
              evt.endDate.toJSDate();
              return true;
            } catch (err) {
              // skipping events with invalid time
              return false;
            }
          });
        }
      }

      between(after, before) {
        function isEventWithinRange(startTime, endTime) {
          return (!after || endTime >= after.getTime()) &&
          (!before || startTime <= before.getTime());
        }

        function getTimes(eventOrOccurrence) {
          const startTime = eventOrOccurrence.startDate.toJSDate().getTime();
          let endTime = eventOrOccurrence.endDate.toJSDate().getTime();

          // If it is an all day event, the end date is set to 00:00 of the next day
          // So we need to make it be 23:59:59 to compare correctly with the given range
          if (eventOrOccurrence.endDate.isDate && (endTime > startTime)) {
            endTime -= 1;
          }

          return { startTime, endTime };
        }

        const exceptions = [];

        this.events.forEach((event) => {
          if (event.isRecurrenceException()) exceptions.push(event);
        });

        const ret = {
          events: [],
          occurrences: [],
        };

        this.events.filter(e => !e.isRecurrenceException()).forEach((event) => {
          const exdates = [];

          event.component.getAllProperties('exdate').forEach((exdateProp) => {
            const exdate = exdateProp.getFirstValue();
            exdates.push(exdate.toJSDate().getTime());
          });

          // Recurring event is handled differently
          if (event.isRecurring()) {
            const iterator = event.iterator();

            let next;
            let i = 0;

            do {
              i += 1;
              next = iterator.next();
              if (next) {
                const occurrence = event.getOccurrenceDetails(next);

                const { startTime, endTime } = getTimes(occurrence);

                const isOccurrenceExcluded = exdates.indexOf(startTime) !== -1;

                // TODO check that within same day?
                const exception = exceptions.find(ex => ex.uid === event.uid && ex.recurrenceId.toJSDate().getTime() === occurrence.startDate.toJSDate().getTime());

                // We have passed the max date, stop
                if (before && startTime > before.getTime()) break;

                // Check that we are within our range
                if (isEventWithinRange(startTime, endTime)) {
                  if (exception) {
                    ret.events.push(exception);
                  } else if (!isOccurrenceExcluded) {
                    ret.occurrences.push(occurrence);
                  }
                }
              }
            }
            while (next && (!this.maxIterations || i < this.maxIterations));

            return;
          }

          // Non-recurring event:
          const { startTime, endTime } = getTimes(event);

          if (isEventWithinRange(startTime, endTime)) ret.events.push(event);
        });

        return ret;
      }

      before(before) {
        return this.between(undefined, before);
      }

      after(after) {
        return this.between(after);
      }

      all() {
        return this.between();
      }
    }

    function registerTimezones() {
      Object.keys(timezones).forEach((key) => {
        const icsData = timezones[key];
        const icsTimezone = `BEGIN:VTIMEZONE\r\nTZID:${key}\r\n${icsData}\r\nEND:VTIMEZONE`;
        const parsed = ICAL$1.parse(`BEGIN:VCALENDAR\nPRODID:-//tzurl.org//NONSGML Olson 2012h//EN\nVERSION:2.0\n${icsTimezone}\nEND:VCALENDAR`);
        const comp = new ICAL$1.Component(parsed);
        const vtimezone = comp.getFirstSubcomponent('vtimezone');

        ICAL$1.TimezoneService.register(key, new ICAL$1.Timezone(vtimezone));
      });
    }

    registerTimezones();

    var icalExpander = IcalExpander;

    var isBetween$1 = {exports: {}};

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    (function (module, exports) {
    	!function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,i){t.prototype.isBetween=function(e,t,s,f){var n=i(e),o=i(t),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}});
    } (isBetween$1));

    var isBetween = isBetween$1.exports;

    window.StreamChat.StreamChat=StreamChat;window.StreamChat.logChatPromiseExecution=logChatPromiseExecution;window.StreamChat.Channel=Channel;window.ICAL=window.ICAL||{};
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var runtime = (function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }
      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);

        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);

        return generator;
      }
      exports.wrap = wrap;

      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";

      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};

      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}

      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(
        GeneratorFunctionPrototype,
        toStringTagSymbol,
        "GeneratorFunction"
      );

      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };

      exports.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };

      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      exports.awrap = function(arg) {
        return { __await: arg };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function(error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }

        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };
      exports.AsyncIterator = AsyncIterator;

      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;

        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList),
          PromiseImpl
        );

        return exports.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;

        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);

            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };

            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }

      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;

          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;

          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }

        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }

        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }

      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);

      define(Gp, toStringTagSymbol, "Generator");

      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      Gp[iteratorSymbol] = function() {
        return this;
      };

      Gp.toString = function() {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();

        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }

          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;

              return next;
            };

            return next.next = next;
          }
        }

        // Return an iterator with no values.
        return { next: doneResult };
      }
      exports.values = values;

      function doneResult() {
        return { value: undefined$1, done: true };
      }

      Context.prototype = {
        constructor: Context,

        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;

          this.method = "next";
          this.arg = undefined$1;

          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },

        stop: function() {
          this.done = true;

          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },

        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !! caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }

              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }

              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },

        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },

        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },

        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },

        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }

          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },

        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      };

      // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.
      return exports;

    }(
      // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
       module.exports 
    ));

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
    });

    function isXmlElement(node) {
      return !!node.children;
    }
    /**
     * MMLTag - Xml tag converted to this MMLTag
     */


    var MMLTag = /*#__PURE__*/function () {
      function MMLTag(name, node, children) {
        this.name = name;
        this.node = node;
        this.attributes = this.node.attributes || {};
        this.children = children;
      }

      var _proto = MMLTag.prototype;

      _proto.getText = function getText() {
        if (this.node.type === 'text') return this.node.text;else if (isXmlElement(this.node) && this.node.children.length) return this.node.children[0].text;
        return '';
      };

      _proto.initialState = function initialState() {
        var _ref;

        var _this$attributes = this.attributes,
            name = _this$attributes.name,
            value = _this$attributes.value;
        if (name) return _ref = {}, _ref[name] = value, _ref;
        return {};
      };

      return MMLTag;
    }();

    var Card = function Card(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          children = _ref.children;
      return React__default["default"].createElement("div", {
        className: "mml-card " + className
      }, children);
    };

    var Icon = function Icon(_ref) {
      var name = _ref.name;
      return React__default["default"].createElement("i", {
        className: "mml-icon material-icons"
      }, name);
    };

    var CardHeader = function CardHeader(_ref) {
      var text = _ref.text,
          _ref$icon = _ref.icon,
          icon = _ref$icon === void 0 ? '' : _ref$icon,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default["default"].createElement("div", {
        className: "mml-card-header " + className
      }, icon && React__default["default"].createElement(Icon, {
        name: icon
      }), React__default["default"].createElement("span", {
        className: "mml-card-header__text"
      }, text));
    };

    var CardBody = function CardBody(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          children = _ref.children;
      return React__default["default"].createElement("div", {
        className: "mml-card-body " + className
      }, children);
    };

    /**
     * A list of buttons
     */

    var ButtonList = function ButtonList(_ref) {
      var children = _ref.children,
          _ref$variant = _ref.variant,
          variant = _ref$variant === void 0 ? '' : _ref$variant;
      return React__default["default"].createElement("div", {
        className: "mml-btnlist " + (variant === 'floating' ? ' mml-btnlist--floating' : 'mml-btnlist--grounded')
      }, children);
    };

    /**
     * Utility to have custom svg icons outside the `material-icons` system provided by the Icon component
     * Use case internal to this library is the AddToCalendar component which needs brand icons which are not
     * included in [the default material-icons set and probably never will be](https://git.io/Jk9yH)
     */

    var SvgIcon = function SvgIcon(_ref) {
      var path = _ref.path;
      return React__default["default"].createElement("i", {
        className: "mml-icon"
      }, React__default["default"].createElement("svg", {
        className: "mml-icon__svg",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, React__default["default"].createElement("path", {
        d: path
      })));
    };
    /** Icon path from https://materialdesignicons.com/ */


    var IconGoogle = /*#__PURE__*/React__default["default"].createElement(SvgIcon, {
      path: "M21.35 11.1h-9.17v2.73h6.5c-.33 3.8-3.5 5.44-6.5 5.44C8.36 19.27 5 16.25 5 12c0-4.1 3.2-7.27 7.2-7.27 3.1 0 4.9 1.97 4.9 1.97L19 4.72S16.56 2 12.1 2C6.42 2 2.03 6.8 2.03 12c0 5.05 4.13 10 10.22 10 5.35 0 9.25-3.67 9.25-9.1 0-1.15-.15-1.8-.15-1.8h0z"
    });
    /** Icon path from https://materialdesignicons.com/ */

    var IconMicrosoft = /*#__PURE__*/React__default["default"].createElement(SvgIcon, {
      path: "M3 12V6.75l6-1.32v6.48L3 12m17-9v8.75l-10 .15V5.2L20 3M3 13l6 .1v6.8l-6-1.15V13m17 .25V22l-10-1.9v-7l10 .15z"
    });
    /** Icon path from https://materialdesignicons.com/ */

    var IconApple = /*#__PURE__*/React__default["default"].createElement(SvgIcon, {
      path: "M18.7 19.5c-.83 1.24-1.7 2.45-3.05 2.47-1.34.03-1.77-.8-3.3-.8-1.53 0-2 .77-3.27.82-1.3.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.4c.87-1.52 2.43-2.48 4.12-2.5 1.28-.02 2.5.87 3.3.87.78 0 2.26-1.07 3.8-.9.65.03 2.47.26 3.64 1.98-.1.06-2.17 1.28-2.15 3.8.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.2-.7.85-1.83 1.5-2.95 1.42-.15-1.15.4-2.35 1.05-3.1z"
    });

    function isMobile() {
      var ua = typeof navigator !== 'undefined' ? navigator.userAgent : '';
      if (!ua) return false;
      var mobileRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
      if (mobileRE.test(ua)) return true;
      if (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 1 && ua.indexOf('Macintosh') !== -1 && ua.indexOf('Safari') !== -1) return true;
      return false;
    } // @ts-ignore (expect-error breaks in GH actions) TODO: replace deprecated method


    var isIE = typeof window !== 'undefined' && window.navigator.msSaveOrOpenBlob && window.Blob;

    var getCurrentURL = function getCurrentURL() {
      if (typeof window !== 'undefined') return window.location.href;
      return '';
    };

    var CALENDAR_SERVICES = [{
      id: 'google',
      label: 'Google',
      Icon: IconGoogle
    }, {
      id: 'apple',
      label: 'Apple Calendar',
      Icon: IconApple
    }, {
      id: 'outlook',
      label: 'Outlook',
      Icon: IconMicrosoft
    }, {
      id: 'outlookcom',
      label: 'Outlook.com',
      Icon: IconMicrosoft
    }];
    /**
     * Format time
     *
     * Adapted from the `moment` way of [react-add-to-calendar](https://git.io/JkWol)
     * to the dayjs way
     */

    function formatTime(date, id) {
      return dayjs_minExports(date).format(id === 'outlookcom' ? 'YYYY-MM-DDTHH:mm:ss' : 'YYYYMMDDTHHmmss') + 'Z';
    }
    /**
     * Create query string with given parameters
     *
     * It checks that the parameter value is not falsy
     */


    function createQueryString(params) {
      if (params === void 0) {
        params = {};
      }

      return Object.keys(params).reduce(function (acc, key) {
        var value = params[key];
        if (value) acc += "&" + key + "=" + encodeURIComponent(value);
        return acc;
      }, '');
    }
    /**
     * Build calendar URL
     *
     * Resources:
     * - [SO question about Google](https://stackoverflow.com/q/22757908)
     * - [docs about outlook.com format](https://git.io/JkWp5)
     * - [addevent wrapper SaaS](https://www.addevent.com/)
     */


    function buildUrl(event, id) {
      var start = event.start,
          end = event.end,
          title = event.title,
          location = event.location,
          description = event.description;
      var startFormatted = formatTime(start, id);
      var endFormatted = formatTime(end, id);
      if (id === 'google') return "https://calendar.google.com/calendar/render?action=TEMPLATE&dates=" + startFormatted + "/" + endFormatted + createQueryString({
        location: location,
        text: title,
        details: description
      });
      if (id === 'outlookcom') return "https://outlook.live.com/owa/?rru=addevent" + createQueryString({
        startdt: startFormatted,
        enddt: endFormatted,
        subject: title,
        location: location,
        body: description,
        allday: 'false'
      }) + "&path=/calendar/view/Month";
      var url = ['BEGIN:VCALENDAR', 'VERSION:2.0', 'BEGIN:VEVENT', 'URL:' + getCurrentURL(), 'DTSTART:' + startFormatted, 'DTEND:' + endFormatted, 'SUMMARY:' + title, 'DESCRIPTION:' + description, 'LOCATION:' + location, 'END:VEVENT', 'END:VCALENDAR'].join('\n');
      if (!isIE && isMobile()) url = encodeURI('data:text/calendar;charset=utf8,' + url);
      return url;
    }
    /**
     * AddToCalendar widget that supports google, apple and outlook calendars
     */


    var AddToCalendar = function AddToCalendar(_ref2) {
      var title = _ref2.title,
          start = _ref2.start,
          end = _ref2.end,
          _ref2$className = _ref2.className,
          className = _ref2$className === void 0 ? '' : _ref2$className,
          _ref2$location = _ref2.location,
          location = _ref2$location === void 0 ? '' : _ref2$location,
          _ref2$description = _ref2.description,
          description = _ref2$description === void 0 ? '' : _ref2$description;
      var event = {
        start: start,
        end: end,
        title: title,
        location: location,
        description: description
      };

      function handleLinkClick(event) {
        event.preventDefault();
        var url = event.currentTarget.getAttribute('href');

        if (!isMobile() && (url.startsWith('data') || url.startsWith('BEGIN'))) {
          var filename = 'download.ics';
          var blob = new Blob([url], {
            type: 'text/calendar;charset=utf-8'
          });

          if (isIE) {
            // @ts-ignore (expect-error breaks in GH actions) TODO: replace deprecated method
            window.navigator.msSaveOrOpenBlob(blob, filename);
          } else {
            // many browsers do not properly support downloading data URIs
            // (even with "download" attribute in use) so this solution
            // ensures the event will download cross-browser
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.setAttribute('download', filename);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          }
        } else {
          window.open(url, '_blank');
        }
      }

      return React__default["default"].createElement(Card, {
        className: "mml-add-to-calendar " + className
      }, React__default["default"].createElement(CardHeader, {
        icon: "date_range",
        text: "Add to My Calendar"
      }), React__default["default"].createElement(CardBody, null, React__default["default"].createElement(ButtonList, null, CALENDAR_SERVICES.map(function (_ref3) {
        var id = _ref3.id,
            label = _ref3.label,
            Icon = _ref3.Icon;
        return React__default["default"].createElement("a", {
          key: id,
          className: "mml-btn " + (Icon ? 'mml-btn--with-icon' : ''),
          onClick: handleLinkClick,
          href: buildUrl(event, id),
          target: "_blank",
          rel: "nofollow noreferrer noopener"
        }, Icon, " ", label);
      }))));
    };

    /**
     * Button can be used to open a URL, submit the form or trigger a select when clicked
     */

    var Button = function Button(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          text = _ref.text,
          name = _ref.name,
          value = _ref.value,
          _ref$url = _ref.url,
          url = _ref$url === void 0 ? '' : _ref$url,
          variant = _ref.variant,
          icon = _ref.icon;

      if (icon) {
        className += text ? ' mml-btn--with-icon' : ' mml-btn--icon';
      } else {
        className += ' mml-btn--text';
      }

      className += variant === 'floating' ? ' mml-btn--floating' : ' mml-btn--grounded';
      if (url) return React__default["default"].createElement("a", {
        className: "mml-btn " + className,
        href: dist$1.sanitizeUrl(url),
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, icon && React__default["default"].createElement(Icon, {
        name: icon
      }), text);
      return React__default["default"].createElement("button", {
        className: "mml-btn " + className,
        type: "submit",
        name: name,
        value: value,
        onClick: function onClick(event) {
          var _event$currentTarget, _event$currentTarget$;

          var input = document.createElement('input');
          input.type = 'hidden';
          input.name = name || '';
          input.value = value || '';
          (_event$currentTarget = event.currentTarget) == null ? void 0 : (_event$currentTarget$ = _event$currentTarget.closest('form')) == null ? void 0 : _event$currentTarget$.appendChild(input);
        }
      }, icon && React__default["default"].createElement(Icon, {
        name: icon
      }), text);
    };

    /**
     * A carousel is a nice mobile friendly way of letting a user select something
     *
     * Super simple scroll based carousel slightly inspired by [react-scroll-snap-slider](https://github.com/lifarl/react-scroll-snap-slider)
     */

    var Carousel = function Carousel(_ref) {
      var children = _ref.children,
          _ref$slideWidth = _ref.slideWidth,
          slideWidth = _ref$slideWidth === void 0 ? '120px' : _ref$slideWidth,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default["default"].createElement("div", {
        className: "mml-carousel " + className
      }, React__default["default"].createElement("div", {
        className: "mml-carousel__track"
      }, React__default["default"].createElement("div", {
        className: "mml-carousel__slides"
      }, React$2.Children.map(children, function (child) {
        return React$2.cloneElement(child, {
          className: 'mml-carousel__slide',
          slideWidth: slideWidth
        });
      }))));
    };

    /**
     * A carousel item
     */

    var CarouselItem = function CarouselItem(_ref) {
      var children = _ref.children,
          slideWidth = _ref.slideWidth,
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? '' : _ref$width,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      var finalWidth = width || slideWidth;
      return React__default["default"].createElement("div", {
        className: "mml-carousel-item " + className,
        style: {
          flex: "0 0 " + finalWidth,
          minWidth: finalWidth
        }
      }, children);
    };

    /**
     * A grid column
     * TODO: Consider renaming this element
     */

    var Col = function Col(_ref) {
      var children = _ref.children,
          _ref$width = _ref.width,
          width = _ref$width === void 0 ? 12 : _ref$width,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          _ref$align = _ref.align,
          align = _ref$align === void 0 ? 'left' : _ref$align;
      var classNames = "mml-col-" + width;
      if (offset) classNames = classNames + (" mml-offset-" + offset);
      classNames = classNames + (" mml-align-" + align);
      return React__default["default"].createElement("div", {
        className: classNames
      }, children);
    };

    var Error$1 = function Error(_ref) {
      var _ref$error = _ref.error,
          error = _ref$error === void 0 ? '' : _ref$error;
      if (!error) return null;
      return React__default["default"].createElement("span", {
        className: "mml-error"
      }, error);
    };

    var Image$1 = function Image(_ref) {
      var src = _ref.src,
          _ref$alt = _ref.alt,
          alt = _ref$alt === void 0 ? '' : _ref$alt,
          _ref$title = _ref.title,
          title = _ref$title === void 0 ? '' : _ref$title,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default["default"].createElement("img", {
        className: ("mml-image " + className).trim(),
        src: src,
        alt: alt,
        title: title
      });
    };

    /**
     * Text input element. Usually you'll want to rely on regular messages
     */

    var Input = function Input(_ref) {
      var name = _ref.name,
          label = _ref.label,
          _ref$value = _ref.value,
          value = _ref$value === void 0 ? '' : _ref$value,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? 'text' : _ref$type,
          _ref$placeholder = _ref.placeholder,
          placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder;

      var _useState = React$2.useState(value),
          state = _useState[0],
          setState = _useState[1];

      var id = "mml-" + name;
      return React__default["default"].createElement(React__default["default"].Fragment, null, label && React__default["default"].createElement("label", {
        className: "mml-card-header",
        htmlFor: id
      }, React__default["default"].createElement("span", {
        className: "mml-card-header__text"
      }, label)), React__default["default"].createElement("input", {
        id: id,
        className: "mml-input",
        name: name,
        value: state,
        type: type,
        placeholder: placeholder,
        onChange: function onChange(event) {
          return setState(event.target.value);
        }
      }));
    };

    var SIZE = 44;
    var Progress = function Progress(_ref) {
      var size = _ref.size,
          _ref$thickness = _ref.thickness,
          thickness = _ref$thickness === void 0 ? 3.6 : _ref$thickness,
          color = _ref.color;
      thickness = typeof thickness === 'string' ? parseFloat(thickness) : thickness; // interpret a digit only string or a number as a pixel value otherwise leave
      // it as astring, it might be a value like `2em` or `120%`

      size = typeof size === 'string' && /^\d+$/.test(size) || typeof size === 'number' ? size + 'px' : size;
      return React__default["default"].createElement("span", {
        className: "mml-progress",
        role: "progressbar",
        style: {
          width: size,
          height: size,
          color: color
        }
      }, React__default["default"].createElement("svg", {
        className: "mml-progress__svg",
        viewBox: SIZE / 2 + " " + SIZE / 2 + " " + SIZE + " " + SIZE
      }, React__default["default"].createElement("circle", {
        className: "mml-progress__circle",
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    };

    /**
     * Loading indicator
     */

    var Loading = function Loading(_ref) {
      var _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          _ref$loading = _ref.loading,
          loading = _ref$loading === void 0 ? false : _ref$loading,
          text = _ref.text,
          size = _ref.size,
          thickness = _ref.thickness,
          color = _ref.color;
      if (!loading) return null;
      return React__default["default"].createElement("div", {
        className: "mml-loading " + className
      }, React__default["default"].createElement(Progress, Object.assign({}, {
        size: size,
        thickness: thickness,
        color: color
      })), text && React__default["default"].createElement("div", {
        className: "mml-loading__text"
      }, text));
    };

    var truncate = function truncate(input, length, end) {
      if (end === void 0) {
        end = '...';
      }

      if (input.length > length) return "" + input.substring(0, length - end.length) + end;
      return input;
    };

    var matchMarkdownLinks = function matchMarkdownLinks(message) {
      var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
      var matches = message.match(regexMdLinks);
      var singleMatch = /\[([^[]+)\]\((.*)\)/;
      var links = matches ? matches.map(function (match) {
        var i = singleMatch.exec(match);
        return i && i[2];
      }) : [];
      return links;
    };

    var MDLinkRender = function MDLinkRender(props) {
      if (!props.href || !props.href.startsWith('http') && !props.href.startsWith('mailto:')) return props.children;
      return React__default["default"].createElement("a", {
        href: props.href,
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, props.children);
    };

    var markDownRenderers = {
      link: MDLinkRender
    };
    var allowedMarkups = ['html', // @ts-ignore
    'root', 'text', 'break', 'paragraph', 'emphasis', 'strong', 'link', 'list', 'listItem', 'code', 'inlineCode', 'blockquote'];
    /**
     * MD renders a given text as markdown
     */

    var MD = function MD(_ref) {
      var text = _ref.text;
      if (!text) return null;
      var newText = text;
      var markdownLinks = matchMarkdownLinks(newText); // extract all valid links/emails within text and replace it with proper markup

      linkifyjs.exports.find(newText).forEach(function (_ref2) {
        var type = _ref2.type,
            href = _ref2.href,
            value = _ref2.value;
        // check if message is already  markdown
        var noParsingNeeded = markdownLinks && markdownLinks.filter(function (text) {
          return (text == null ? void 0 : text.indexOf(href)) !== -1;
        });
        if (noParsingNeeded.length > 0) return;
        var displayLink = type === 'email' ? value : truncate(value.replace(/(http(s?):\/\/)?(www\.)?/, ''), 20);
        newText = newText.replace(value, "[" + displayLink + "](" + encodeURI(href) + ")");
      });
      return React__default["default"].createElement("div", {
        className: "mml-md"
      }, React__default["default"].createElement(reactMarkdown, {
        allowedTypes: allowedMarkups,
        renderers: markDownRenderers,
        source: newText,
        escapeHtml: true,
        unwrapDisallowed: true,
        transformLinkUri: function transformLinkUri(uri) {
          return uri.startsWith('app://') ? uri : reactMarkdown.uriTransformer(uri);
        }
      }));
    };

    /**
     * Mobile friendly number input
     */

    var Number$1 = function Number(_ref) {
      var name = _ref.name,
          value = _ref.value;

      var _useState = React$2.useState(parseInt("" + value, 10) || 0),
          state = _useState[0],
          setState = _useState[1];

      return React__default["default"].createElement("div", {
        className: "mml-number"
      }, React__default["default"].createElement("input", {
        name: name,
        value: state,
        type: "hidden"
      }), React__default["default"].createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__dec",
        onClick: function onClick() {
          return setState(state - 1);
        }
      }, React__default["default"].createElement(Icon, {
        name: "remove"
      })), React__default["default"].createElement("span", {
        className: "mml-number__count"
      }, state), React__default["default"].createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__inc",
        onClick: function onClick() {
          return setState(state + 1);
        }
      }, React__default["default"].createElement(Icon, {
        name: "add"
      })));
    };

    var Row = function Row(_ref) {
      var children = _ref.children;
      return React__default["default"].createElement("div", {
        className: "mml-row"
      }, children);
    };

    var ITEMS_PER_PAGE = 40;
    var VERTICAL_COMPENSATION = 3;
    var INITIAL_INDEX = ITEMS_PER_PAGE;
    var VIRTUOSO_START_INDEX = 10000;
    /**
     * DatePicker select
     */

    var DatePickerSelect = function DatePickerSelect(props) {
      var onChange = props.onChange,
          icalFilter = props.icalFilter,
          getItemData = props.getItemData,
          itemClassName = props.itemClassName,
          interval = props.interval,
          format = props.format,
          value = props.value; // Generate date items

      var generateItems = React$2.useCallback(function (quantity, firstIdx) {
        return Array(quantity).fill(true).map(function (_, idx) {
          return getItemData({
            interval: interval,
            format: format,
            value: value,
            idx: firstIdx + idx
          });
        }).filter(function (newItem) {
          return !icalFilter || icalFilter && icalFilter(newItem.value);
        });
      }, [interval, format, value, icalFilter, getItemData]);

      var _useState = React$2.useState(generateItems(ITEMS_PER_PAGE * 2, -ITEMS_PER_PAGE)),
          items = _useState[0],
          setItems = _useState[1];

      var _useState2 = React$2.useState(VIRTUOSO_START_INDEX),
          firstItemIndex = _useState2[0],
          setFirstItemIndex = _useState2[1];

      var initialIndexOffset = React$2.useRef(INITIAL_INDEX);

      var _useState3 = React$2.useState(null),
          selectedIdx = _useState3[0],
          setSelectedIdx = _useState3[1];

      var handleClick = React$2.useCallback(function (item) {
        onChange(item.value);
        var firstItemIndex = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex - INITIAL_INDEX - ITEMS_PER_PAGE;
        var missingTopItems = nextFirstItemIdx - item.idx + VERTICAL_COMPENSATION; // prepend date items, when the selected date's index is too low we prepend
        // some date options so that it will remain vertically centered in the middle

        if (missingTopItems >= 0) {
          nextFirstItemIdx -= missingTopItems;
          initialIndexOffset.current -= firstItemIndex - missingTopItems;
          setItems(function (items) {
            return [].concat(generateItems(missingTopItems, nextFirstItemIdx), items);
          });
        }

        setSelectedIdx(item.idx);
      }, [setItems, generateItems, initialIndexOffset, onChange]);
      var appendItems = React$2.useCallback(function (lastItemIndex) {
        setItems(function (items) {
          return [].concat(items, generateItems(ITEMS_PER_PAGE, lastItemIndex));
        });
      }, [setItems, generateItems]); // @see https://git.io/JIUuo

      var prependItems = React$2.useCallback(function () {
        var firstItemIndex = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex - INITIAL_INDEX - ITEMS_PER_PAGE;

        if (initialIndexOffset) {
          initialIndexOffset.current -= ITEMS_PER_PAGE;
        }

        setItems(function (items) {
          return [].concat(generateItems(ITEMS_PER_PAGE, nextFirstItemIdx), items);
        });
        setFirstItemIndex(firstItemIndex - ITEMS_PER_PAGE);
        return false;
      }, [setItems, generateItems, initialIndexOffset]); // on mount check if there is a selected value and save its idx in state

      React$2.useEffect(function () {
        if (value) {
          var initialSelectedIdx = null;

          for (var i = 0; i < items.length; i++) {
            if (items[i].isSelected(value)) {
              initialSelectedIdx = items[i].idx;
              break;
            }
          }

          setSelectedIdx(initialSelectedIdx);
        }
      }, []); // eslint-disable-line

      return React__default["default"].createElement(on$1, {
        data: items,
        firstItemIndex: firstItemIndex,
        itemContent: function itemContent(_, item) {
          return React__default["default"].createElement("div", {
            className: itemClassName + (" mml-datepicker__item " + (item.idx === selectedIdx ? 'mml-datepicker__item--selected' : '')),
            onClick: function onClick() {
              return handleClick(item);
            }
          }, item.displayValue);
        },
        endReached: appendItems,
        startReached: prependItems
      });
    };

    /**
     * Get item data
     */

    var getItemData = function getItemData(props) {
      var idx = props.idx,
          interval = props.interval,
          value = props.value,
          format = props.format;
      var newValue = idx >= 0 ? dayjs_minExports(value).add(idx * (interval * 24), 'hour') : dayjs_minExports(value).subtract(idx * (interval * 24) * -1, 'hour');
      return {
        idx: idx,
        value: newValue,
        displayValue: dayjs_minExports(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return dayjs_minExports(newValue).isSame(interval === 1 ? dayjs_minExports(currentValue) : dayjs_minExports(currentValue).add(interval, 'day'), 'date');
        }
      };
    };
    /**
     * DatePicker date
     */


    var DatePickerDate = function DatePickerDate(props) {
      return React__default["default"].createElement("div", {
        className: "mml-datepicker__select mml-datepicker__date"
      }, React__default["default"].createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--day",
        getItemData: getItemData
      })));
    };

    dayjs_minExports.extend(isBetween);
    /**
     * Get item data
     */

    var getItemData$1 = function getItemData(props) {
      var idx = props.idx,
          interval = props.interval,
          value = props.value,
          format = props.format;
      var newValue = idx >= 0 ? dayjs_minExports(value).add(idx * interval, 'minute') : dayjs_minExports(value).subtract(idx * -1 * interval, 'minute');
      return {
        idx: idx,
        value: newValue,
        displayValue: dayjs_minExports(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return dayjs_minExports(newValue).isBetween(currentValue, dayjs_minExports(currentValue).add(interval - 1, 'minute'), 'minute', '[]');
        }
      };
    };
    /**
     * DatePicker time
     */


    var DatePickerTime = function DatePickerTime(props) {
      return React__default["default"].createElement("div", {
        className: "mml-datepicker__select mml-datepicker__time"
      }, React__default["default"].createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--time",
        getItemData: getItemData$1
      })));
    };

    var DatePicker = function DatePicker(_ref) {
      var name = _ref.name,
          selected = _ref.selected,
          dateInterval = _ref.dateInterval,
          timeInterval = _ref.timeInterval,
          dateFormat = _ref.dateFormat,
          timeFormat = _ref.timeFormat,
          fullDay = _ref.fullDay,
          icalFilter = _ref.icalFilter;

      var _useState = React$2.useState(selected),
          date = _useState[0],
          setDate = _useState[1];

      var handleChangeDate = function handleChangeDate(value) {
        setDate(function (prevDate) {
          return prevDate.set('date', value.get('date')).set('month', value.get('month')).set('year', value.get('year'));
        });
      };

      var handleChangeTime = function handleChangeTime(value) {
        setDate(function (prevDate) {
          return prevDate.set('minute', value.get('minute')).set('hour', value.get('hour'));
        });
      };

      return React__default["default"].createElement("div", {
        className: "mml-datepicker mml-datepicker--" + (fullDay ? 'single' : 'double')
      }, React__default["default"].createElement("input", {
        name: name,
        value: date.toISOString(),
        type: "hidden"
      }), React__default["default"].createElement(DatePickerDate, {
        icalFilter: icalFilter,
        format: dateFormat,
        value: date,
        onChange: handleChangeDate,
        interval: dateInterval
      }), !fullDay && React__default["default"].createElement(DatePickerTime, {
        icalFilter: icalFilter,
        format: timeFormat,
        value: date,
        onChange: handleChangeTime,
        interval: timeInterval
      }));
    };

    var setupIcalFilter = /*#__PURE__*/function () {
      var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(icalURL, duration) {
        var response, body, icalExpander$1;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetch(icalURL, {
                  method: 'GET',
                  redirect: 'follow',
                  credentials: 'same-origin'
                });

              case 2:
                response = _context.sent;
                _context.next = 5;
                return response.text();

              case 5:
                body = _context.sent;

                if (response.ok) {
                  _context.next = 8;
                  break;
                }

                throw new Error(body);

              case 8:
                icalExpander$1 = new icalExpander({
                  ics: body,
                  maxIterations: 10
                });
                return _context.abrupt("return", function () {
                  return function (start) {
                    if (!start) return true;

                    var _icalExpander$between = icalExpander$1.between(start.toDate(), start.add(duration, 'minute').toDate()),
                        events = _icalExpander$between.events;

                    return !events.length;
                  };
                });

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function setupIcalFilter(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    var Scheduler = function Scheduler(_ref2) {
      var name = _ref2.name,
          selected = _ref2.selected,
          icalAvailability = _ref2.icalAvailability,
          _ref2$duration = _ref2.duration,
          duration = _ref2$duration === void 0 ? 30 : _ref2$duration,
          _ref2$dateInterval = _ref2.dateInterval,
          dateInterval = _ref2$dateInterval === void 0 ? 1 : _ref2$dateInterval,
          _ref2$timeInterval = _ref2.timeInterval,
          timeInterval = _ref2$timeInterval === void 0 ? 30 : _ref2$timeInterval,
          _ref2$dateFormat = _ref2.dateFormat,
          dateFormat = _ref2$dateFormat === void 0 ? 'ddd MMM DD' : _ref2$dateFormat,
          _ref2$timeFormat = _ref2.timeFormat,
          timeFormat = _ref2$timeFormat === void 0 ? 'hh:mm A' : _ref2$timeFormat,
          _ref2$fullDay = _ref2.fullDay,
          fullDay = _ref2$fullDay === void 0 ? false : _ref2$fullDay;

      var _useState = React$2.useState(false),
          loading = _useState[0],
          setLoading = _useState[1];

      var _useState2 = React$2.useState(''),
          error = _useState2[0],
          setError = _useState2[1];

      var _useState3 = React$2.useState(function () {
        return function () {
          return true;
        };
      }),
          icalFilter = _useState3[0],
          setIcalFilter = _useState3[1];

      React$2.useEffect(function () {
        if (!icalAvailability) return;
        setLoading(true);
        setupIcalFilter(icalAvailability, duration).then(setIcalFilter)["catch"](function (err) {
          console.warn('loading ical failed', {
            icalAvailability: icalAvailability,
            err: err
          });
          setError('iCal availability could not be loaded');
        })["finally"](function () {
          return setLoading(false);
        });
      }, [icalAvailability, duration]);
      return React__default["default"].createElement(Card, {
        className: "mml-scheduler"
      }, React__default["default"].createElement(CardHeader, {
        icon: "date_range",
        text: "Scheduler"
      }), React__default["default"].createElement(CardBody, null, error && !loading && React__default["default"].createElement(Error$1, {
        error: "Failed, error: " + error
      }), !error && loading && React__default["default"].createElement(Loading, {
        loading: true,
        text: "Loading availability"
      }), !error && !loading && React__default["default"].createElement(DatePicker, {
        name: name,
        selected: selected ? dayjs_minExports(selected) : dayjs_minExports().startOf('hour'),
        dateInterval: dateInterval,
        timeInterval: timeInterval,
        dateFormat: dateFormat,
        timeFormat: timeFormat,
        fullDay: fullDay,
        icalFilter: icalFilter
      })));
    };

    var Success = function Success(_ref) {
      var success = _ref.success;
      if (success) return React__default["default"].createElement("div", {
        className: "mml-success"
      }, success);
      return null;
    };

    /**
     * Simple paragraph text element
     */

    var Text = function Text(_ref) {
      var text = _ref.text,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className;
      return React__default["default"].createElement("div", {
        className: ("mml-text " + className).trim()
      }, text);
    };

    /**
     * The converters maps MML tags to react nodes
     * Every converter is passed the MML tag as well as the children (as React nodes)
     */

    var converters = {
      button: function button(tag) {
        return React__default["default"].createElement(Button, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText(),
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      button_list: function button_list(tag, children) {
        return React__default["default"].createElement(ButtonList, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      input: function input(tag) {
        return React__default["default"].createElement(Input, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      add_to_calendar: function add_to_calendar(tag) {
        return React__default["default"].createElement(AddToCalendar, Object.assign({}, tag.attributes, {
          key: tag.key,
          title: tag.attributes.title,
          start: tag.attributes.start,
          end: tag.attributes.end
        }));
      },
      col: function col(tag, children) {
        return React__default["default"].createElement(Col, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      row: function row(tag, children) {
        return React__default["default"].createElement(Row, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      icon: function icon(tag) {
        return React__default["default"].createElement(Icon, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name
        }));
      },
      image: function image(tag) {
        return React__default["default"].createElement(Image$1, Object.assign({}, tag.attributes, {
          key: tag.key,
          src: tag.attributes.src
        }));
      },
      md: function md(tag) {
        return React__default["default"].createElement(MD, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      text: function text(tag) {
        return React__default["default"].createElement(Text, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      scheduler: function scheduler(tag) {
        return React__default["default"].createElement(Scheduler, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          dateInterval: parseInt(tag.attributes.dateInterval, 10) || 1,
          timeInterval: parseInt(tag.attributes.timeInterval, 10) || 30,
          duration: parseInt(tag.attributes.duration, 10) || 30,
          selected: tag.attributes.selected,
          fullDay: tag.attributes.fullDay === 'true',
          icalAvailability: tag.attributes.icalAvailability
        }));
      },
      carousel: function carousel(tag, children) {
        return React__default["default"].createElement(Carousel, Object.assign({
          slideWidth: tag.attributes.slideWidth
        }, tag.attributes, {
          key: tag.key
        }), children);
      },
      item: function item(tag, children) {
        return React__default["default"].createElement(CarouselItem, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      number: function number(tag) {
        return React__default["default"].createElement(Number$1, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      }
    };

    /**
     * Tree - The tree object for MML tags
     */

    var Tree = /*#__PURE__*/function () {
      function Tree(node, children, customConvertors) {
        this.converters = _extends({}, converters, customConvertors);
        this.node = node;
        this.children = children;
        this.reactElements = this.toReact();
        this.name = node.attributes.name;
        this.type = node.attributes.type;
      }
      /**
       * convert all nodes to react and maintain the hierarchy
       */


      var _proto = Tree.prototype;

      _proto.toReact = function toReact(parent) {
        var _this = this;

        if (parent === void 0) {
          parent = this;
        }

        var reactNodes = [];
        (parent.children || []).forEach(function (child, i) {
          var converter = _this.converters[child.name];

          if (!converter || !Object.hasOwnProperty.call(_this.converters, child.name)) {
            throw Error("Converter not found for tag " + child.name + ", Available converters are " + Object.keys(_this.converters));
          }

          var children = _this.toReact(child);

          child.key = "tag-" + child.name + "-position-" + i;
          reactNodes.push(converter(child, children));
        });
        return reactNodes;
      };

      return Tree;
    }();

    /**
     * SourceToXML - Takes an MML string and converts it to XML nodes
     *
     * @param {string} source MML tag string
     *
     * @returns {array} an Array of XML nodes
     */

    function SourceToXML(source) {
      var src = source.trim(); // the wrapping MML tags are optional, for parsing simplicity we automatically add them if they are not already there

      if (!src.startsWith('<mml')) src = "<mml>" + source + "</mml>"; // emulate HTML handling of & escaping

      var unescapedAmps = /&(?!amp;|lt;|gt;)/g;
      src = src.replace(unescapedAmps, '&amp;'); // convert the string to XML nodes
      // this library is relatively lightweight and doesn't do a ton of validation

      return parseXml$1(src);
    }

    function convertNodes(nodes) {
      return nodes.reduce(function (acc, node) {
        var element = node;
        var children;
        if (element.children) children = convertNodes(element.children);
        var name = element.name;

        if (node.type === 'text') {
          if (node.text.trim().length) name = 'text';else return acc; // skip empty text elements
        }

        acc.push(new MMLTag(name, node, children));
        return acc;
      }, []);
    }
    /**
     * XMLtoMMLTree - Takes an array of XML nodes and converts it into an MML Tree
     *
     * @param {type} XMLNodes an array of XML nodes
     *
     * @returns {MMLTree} The MML tree
     */


    function XMLtoMMLTree(document, customConvertors) {
      if (!document || !document.children || !document.children.length) throw new Error('bad input');
      var mmlNode = document.children[0];
      if (mmlNode.name !== 'mml') throw new Error('missing mml tag');
      return new Tree(mmlNode, convertNodes(mmlNode.children), customConvertors);
    }
    /**
     * Takes an MML string and returns an MML Tree
     *
     * @param {string} source MML tag string
     *
     *  @returns {Tree} An MML Tree
     */

    function Parse(source, customConvertors) {
      var XMLNodes = SourceToXML(source);
      return XMLtoMMLTree(XMLNodes, customConvertors);
    }

    /**
     * MML root component
     */

    var MML = function MML(_ref) {
      var source = _ref.source,
          onSubmit = _ref.onSubmit,
          converters = _ref.converters,
          _ref$theme = _ref.theme,
          theme = _ref$theme === void 0 ? '' : _ref$theme,
          _ref$className = _ref.className,
          className = _ref$className === void 0 ? '' : _ref$className,
          _ref$Loading = _ref.Loading,
          Loading$1 = _ref$Loading === void 0 ? Loading : _ref$Loading,
          _ref$Error = _ref.Error,
          Error = _ref$Error === void 0 ? Error$1 : _ref$Error,
          _ref$Success = _ref.Success,
          Success$1 = _ref$Success === void 0 ? Success : _ref$Success;

      var _useState = React$2.useState(''),
          error = _useState[0],
          setError = _useState[1];

      var _useState2 = React$2.useState({
        loading: false,
        error: '',
        success: ''
      }),
          submitState = _useState2[0],
          setSubmitState = _useState2[1];

      var tree = React$2.useMemo(function () {
        try {
          return Parse(source, converters);
        } catch (e) {
          console.warn('mml parsing error: ', source, e);
          setError("This chat message has invalid formatting and can't be shown");
          return null;
        }
      }, [source, converters]);
      var handleSubmit = React$2.useCallback( /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(event) {
          var state;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  event.preventDefault();
                  state = {};
                  if (tree != null && tree.name) state.mml_name = tree.name; // include mml_name in the data

                  new FormData(event.currentTarget).forEach(function (value, key) {
                    state[key] = value;
                  });

                  if (onSubmit) {
                    _context.next = 6;
                    break;
                  }

                  return _context.abrupt("return", console.warn('Forgot to pass onSubmit prop to <MML/>? payload:', state));

                case 6:
                  _context.prev = 6;
                  setSubmitState({
                    loading: true,
                    error: '',
                    success: ''
                  });
                  _context.next = 10;
                  return onSubmit(state);

                case 10:
                  setSubmitState({
                    loading: false,
                    error: '',
                    success: 'submitted'
                  });
                  _context.next = 16;
                  break;

                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](6);
                  setSubmitState({
                    loading: false,
                    error: 'Failed to send the request. Please try again.',
                    success: ''
                  });

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[6, 13]]);
        }));

        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }(), [onSubmit, tree]);
      return React__default["default"].createElement("div", {
        className: "mml-container " + theme + " " + className,
        "data-testid": "mml-container"
      }, error ? React__default["default"].createElement("div", {
        className: "mml-wrap"
      }, Error && React__default["default"].createElement(Error, {
        error: error
      })) : React__default["default"].createElement("form", {
        onSubmit: handleSubmit,
        className: "mml-wrap",
        "data-testid": "mml-form"
      }, tree != null && tree.type ? React__default["default"].createElement("div", {
        className: "mml-card"
      }, tree == null ? void 0 : tree.reactElements) : tree == null ? void 0 : tree.reactElements, submitState.loading && Loading$1 && React__default["default"].createElement(Loading$1, {
        loading: submitState.loading
      }), submitState.success && Success$1 && React__default["default"].createElement(Success$1, {
        success: submitState.success
      }), submitState.error && Error && React__default["default"].createElement(Error, {
        error: submitState.error
      })));
    };

    var mmlReact_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddToCalendar: AddToCalendar,
        Button: Button,
        ButtonList: ButtonList,
        Card: Card,
        CardBody: CardBody,
        CardHeader: CardHeader,
        Carousel: Carousel,
        CarouselItem: CarouselItem,
        Col: Col,
        Error: Error$1,
        Icon: Icon,
        Image: Image$1,
        Input: Input,
        Loading: Loading,
        MD: MD,
        MML: MML,
        MMLTag: MMLTag,
        Number: Number$1,
        Parse: Parse,
        Row: Row,
        Scheduler: Scheduler,
        SourceToXML: SourceToXML,
        Success: Success,
        Text: Text,
        Tree: Tree,
        XMLtoMMLTree: XMLtoMMLTree,
        converters: converters,
        truncate: truncate
    });

    exports.ACTIONS_NOT_WORKING_IN_THREAD = ACTIONS_NOT_WORKING_IN_THREAD;
    exports.ATTACHMENT_GROUPS_ORDER = ATTACHMENT_GROUPS_ORDER;
    exports.ActionsIcon = ActionsIcon;
    exports.Attachment = Attachment;
    exports.AttachmentActions = AttachmentActions;
    exports.AttachmentActionsContainer = AttachmentActionsContainer;
    exports.AttachmentPreviewList = AttachmentPreviewList;
    exports.AttachmentWithinContainer = AttachmentWithinContainer;
    exports.Audio = Audio;
    exports.AudioContainer = AudioContainer;
    exports.AutoCompleteTextarea = ReactTextareaAutocomplete;
    exports.Avatar = Avatar;
    exports.BaseImage = BaseImage;
    exports.Card = Card$1;
    exports.CardAudio = CardAudio;
    exports.CardContainer = CardContainer;
    exports.Channel = Channel$1;
    exports.ChannelActionContext = ChannelActionContext;
    exports.ChannelActionProvider = ChannelActionProvider;
    exports.ChannelHeader = ChannelHeader;
    exports.ChannelList = ChannelList;
    exports.ChannelListContext = ChannelListContext;
    exports.ChannelListContextProvider = ChannelListContextProvider;
    exports.ChannelListMessenger = ChannelListMessenger;
    exports.ChannelPreview = ChannelPreview;
    exports.ChannelPreviewMessenger = ChannelPreviewMessenger;
    exports.ChannelSearch = ChannelSearch;
    exports.ChannelStateContext = ChannelStateContext;
    exports.ChannelStateProvider = ChannelStateProvider;
    exports.Chat = Chat;
    exports.ChatAutoComplete = ChatAutoComplete;
    exports.ChatContext = ChatContext;
    exports.ChatDown = ChatDown;
    exports.ChatProvider = ChatProvider;
    exports.CloseIcon = CloseIcon$2;
    exports.CommandItem = CommandItem;
    exports.ComponentContext = ComponentContext;
    exports.ComponentProvider = ComponentProvider;
    exports.ConnectionStatus = ConnectionStatus;
    exports.CooldownTimer = CooldownTimer;
    exports.CustomMessageActionsList = CustomMessageActionsList;
    exports.DateSeparator = DateSeparator;
    exports.DefaultSuggestionList = List$1;
    exports.DefaultSuggestionListHeader = DefaultSuggestionListHeader;
    exports.DefaultSuggestionListItem = Item$2;
    exports.DefaultTriggerProvider = DefaultTriggerProvider;
    exports.DeliveredCheckIcon = DeliveredCheckIcon;
    exports.DownloadIcon = DownloadIcon;
    exports.EditMessageForm = EditMessageForm;
    exports.EmojiIconLarge = EmojiIconLarge;
    exports.EmojiIconSmall = EmojiIconSmall;
    exports.EmojiPicker = EmojiPicker;
    exports.EmojiPickerIcon = EmojiPickerIcon;
    exports.EmoticonItem = EmoticonItem;
    exports.EmptyStateIndicator = EmptyStateIndicator;
    exports.ErrorIcon = ErrorIcon;
    exports.EventComponent = EventComponent;
    exports.FileAttachment = FileAttachment;
    exports.FileContainer = FileContainer;
    exports.FileUploadIcon = FileUploadIcon;
    exports.FileUploadIconFlat = FileUploadIconFlat;
    exports.FixedHeightMessage = FixedHeightMessage;
    exports.Gallery = Gallery;
    exports.GalleryContainer = GalleryContainer;
    exports.GiphyPreviewMessage = GiphyPreviewMessage;
    exports.ImageComponent = ImageComponent;
    exports.ImageContainer = ImageContainer;
    exports.InfiniteScroll = InfiniteScroll;
    exports.LinkIcon = LinkIcon;
    exports.LinkPreviewList = LinkPreviewList;
    exports.LoadMoreButton = LoadMoreButton;
    exports.LoadMorePaginator = LoadMorePaginator;
    exports.LoadingChannels = LoadingChannels;
    exports.LoadingErrorIndicator = LoadingErrorIndicator;
    exports.LoadingIndicator = LoadingIndicator;
    exports.LoadingIndicatorIcon = LoadingIndicatorIcon;
    exports.MAX_MESSAGE_REACTIONS_TO_FETCH = MAX_MESSAGE_REACTIONS_TO_FETCH;
    exports.MAX_QUERY_CHANNELS_LIMIT = MAX_QUERY_CHANNELS_LIMIT;
    exports.MESSAGE_ACTIONS = MESSAGE_ACTIONS;
    exports.MML = MML$1;
    exports.MediaContainer = MediaContainer;
    exports.Message = Message;
    exports.MessageActions = MessageActions;
    exports.MessageActionsBox = MessageActionsBox;
    exports.MessageBounceProvider = MessageBounceProvider;
    exports.MessageContext = MessageContext;
    exports.MessageDeleted = MessageDeleted;
    exports.MessageDeliveredIcon = MessageDeliveredIcon;
    exports.MessageErrorIcon = MessageErrorIcon;
    exports.MessageInput = MessageInput;
    exports.MessageInputContext = MessageInputContext;
    exports.MessageInputContextProvider = MessageInputContextProvider;
    exports.MessageInputFlat = MessageInputFlat;
    exports.MessageInputSmall = MessageInputSmall;
    exports.MessageList = MessageList;
    exports.MessageListContext = MessageListContext;
    exports.MessageListContextProvider = MessageListContextProvider;
    exports.MessageListNotifications = MessageListNotifications;
    exports.MessageNotification = MessageNotification;
    exports.MessageOptions = MessageOptions;
    exports.MessageProvider = MessageProvider;
    exports.MessageRepliesCountButton = MessageRepliesCountButton;
    exports.MessageSimple = MessageSimple;
    exports.MessageStatus = MessageStatus;
    exports.MessageText = MessageText;
    exports.MessageTimestamp = MessageTimestamp;
    exports.Modal = Modal;
    exports.ModalGallery = ModalGallery;
    exports.NullComponent = NullComponent;
    exports.PinIcon = PinIcon;
    exports.PinIndicator = PinIndicator;
    exports.PlayButton = PlayButton;
    exports.PopperTooltip = PopperTooltip;
    exports.ProgressBar = ProgressBar;
    exports.QuotedMessage = QuotedMessage;
    exports.QuotedMessagePreview = QuotedMessagePreview;
    exports.QuotedMessagePreviewHeader = QuotedMessagePreviewHeader;
    exports.ReactionIcon = ReactionIcon;
    exports.ReactionSelector = ReactionSelector;
    exports.ReactionsList = ReactionsList;
    exports.ReplyIcon = ReplyIcon;
    exports.RetryIcon = RetryIcon;
    exports.SUPPORTED_VIDEO_FORMATS = SUPPORTED_VIDEO_FORMATS;
    exports.SafeAnchor = SafeAnchor;
    exports.ScrollToBottomButton = ScrollToBottomButton;
    exports.SearchBar = SearchBar;
    exports.SearchInput = SearchInput;
    exports.SearchResults = SearchResults;
    exports.SendButton = SendButton;
    exports.SendIconV1 = SendIconV1;
    exports.SendIconV2 = SendIconV2;
    exports.SimpleReactionsList = SimpleReactionsList;
    exports.SpriteImage = SpriteImage;
    exports.StreamEmoji = StreamEmoji;
    exports.Streami18n = Streami18n;
    exports.Thread = Thread;
    exports.ThreadHeader = ThreadHeader;
    exports.ThreadIcon = ThreadIcon;
    exports.ThreadStart = ThreadStart;
    exports.Tooltip = Tooltip;
    exports.TranslationContext = TranslationContext;
    exports.TranslationProvider = TranslationProvider;
    exports.TypingContext = TypingContext;
    exports.TypingIndicator = TypingIndicator;
    exports.TypingProvider = TypingProvider;
    exports.UNREAD_MESSAGE_SEPARATOR_CLASS = UNREAD_MESSAGE_SEPARATOR_CLASS;
    exports.UnMemoizedLoadMorePaginator = UnMemoizedLoadMorePaginator;
    exports.UnreadMessagesNotification = UnreadMessagesNotification;
    exports.UnreadMessagesSeparator = UnreadMessagesSeparator;
    exports.UnsupportedAttachment = UnsupportedAttachment;
    exports.UnsupportedAttachmentContainer = UnsupportedAttachmentContainer;
    exports.UploadButton = UploadButton;
    exports.UploadIcon = UploadIcon;
    exports.UploadsPreview = UploadsPreview;
    exports.UserItem = UserItem;
    exports.VirtualizedMessageList = VirtualizedMessageList;
    exports.Window = Window;
    exports.areMessagePropsEqual = areMessagePropsEqual;
    exports.areMessageUIPropsEqual = areMessageUIPropsEqual;
    exports.darkModeTheme = darkModeTheme;
    exports.deTranslations = deTranslations;
    exports.defaultAllowedTagNames = defaultAllowedTagNames;
    exports.defaultDateTimeParser = defaultDateTimeParser;
    exports.defaultPinPermissions = defaultPinPermissions;
    exports.defaultReactionOptions = defaultReactionOptions;
    exports.defaultRenderMessages = defaultRenderMessages;
    exports.defaultScrollToItem = defaultScrollToItem;
    exports.defaultTimestampFormat = defaultTimestampFormat;
    exports.defaultTranslatorFunction = defaultTranslatorFunction;
    exports.emojiMarkdownPlugin = emojiMarkdownPlugin;
    exports.enTranslations = enTranslations;
    exports.esTranslations = esTranslations;
    exports.escapeRegExp = escapeRegExp;
    exports.frTranslations = frTranslations;
    exports.generateRandomId = generateRandomId;
    exports.getChannel = getChannel;
    exports.getDisplayImage = getDisplayImage;
    exports.getDisplayTitle = getDisplayTitle;
    exports.getGroupStyles = getGroupStyles;
    exports.getImages = getImages;
    exports.getLastReceived = getLastReceived;
    exports.getLatestMessagePreview = getLatestMessagePreview;
    exports.getMessageActions = getMessageActions;
    exports.getNonImageAttachments = getNonImageAttachments;
    exports.getReadByTooltipText = getReadByTooltipText;
    exports.getReadStates = getReadStates;
    exports.getWholeChar = getWholeChar;
    exports.handleActionWarning = handleActionWarning;
    exports.hasMoreMessagesProbably = hasMoreMessagesProbably;
    exports.hasNotMoreMessages = hasNotMoreMessages;
    exports.hiTranslations = hiTranslations;
    exports.htmlToTextPlugin = htmlToTextPlugin;
    exports.insertIntro = insertIntro;
    exports.isAudioAttachment = isAudioAttachment;
    exports.isChannel = isChannel;
    exports.isDate = isDate;
    exports.isDayOrMoment = isDayOrMoment;
    exports.isFileAttachment = isFileAttachment;
    exports.isGalleryAttachmentType = isGalleryAttachmentType;
    exports.isLanguageSupported = isLanguageSupported;
    exports.isMediaAttachment = isMediaAttachment;
    exports.isMessageBounced = isMessageBounced;
    exports.isNumberOrString = isNumberOrString;
    exports.isOnlyEmojis = isOnlyEmojis;
    exports.isScrapedContent = isScrapedContent;
    exports.isSvgAttachment = isSvgAttachment;
    exports.isUploadedImage = isUploadedImage;
    exports.isUserMuted = isUserMuted;
    exports.itTranslations = itTranslations;
    exports.jaTranslations = jaTranslations;
    exports.keepLineBreaksPlugin = keepLineBreaksPlugin;
    exports.koTranslations = koTranslations;
    exports.makeDateMessageId = makeDateMessageId;
    exports.mapToUserNameOrId = mapToUserNameOrId;
    exports.markDownRenderers = markDownRenderers$1;
    exports.matchMarkdownLinks = matchMarkdownLinks$1;
    exports.mentionsMarkdownPlugin = mentionsMarkdownPlugin;
    exports.messageCodeBlocks = messageCodeBlocks;
    exports.messageHasAttachments = messageHasAttachments;
    exports.messageHasReactions = messageHasReactions;
    exports.missingUseFlagHandlerParameterWarning = missingUseFlagHandlerParameterWarning;
    exports.missingUseMuteHandlerParamsWarning = missingUseMuteHandlerParamsWarning;
    exports.moveChannelUp = moveChannelUp;
    exports.nlTranslations = nlTranslations;
    exports.processMessages = processMessages;
    exports.ptTranslations = ptTranslations;
    exports.reactionHandlerWarning = reactionHandlerWarning;
    exports.renderAttachmentActions = renderAttachmentActions;
    exports.renderAttachmentWithinContainer = renderAttachmentWithinContainer;
    exports.renderAudio = renderAudio;
    exports.renderCard = renderCard;
    exports.renderFile = renderFile;
    exports.renderGallery = renderGallery;
    exports.renderImage = renderImage;
    exports.renderMedia = renderMedia;
    exports.renderPreviewText = renderPreviewText;
    exports.renderText = renderText;
    exports.ruTranslations = ruTranslations;
    exports.showMessageActionsBox = showMessageActionsBox;
    exports.trTranslations = trTranslations;
    exports.useActionHandler = useActionHandler;
    exports.useChannelActionContext = useChannelActionContext;
    exports.useChannelDeletedListener = useChannelDeletedListener;
    exports.useChannelEditMessageHandler = useEditMessageHandler;
    exports.useChannelHiddenListener = useChannelHiddenListener;
    exports.useChannelListContext = useChannelListContext;
    exports.useChannelMentionsHandler = useMentionsHandlers;
    exports.useChannelPreviewInfo = useChannelPreviewInfo;
    exports.useChannelStateContext = useChannelStateContext;
    exports.useChannelTruncatedListener = useChannelTruncatedListener;
    exports.useChannelUpdatedListener = useChannelUpdatedListener;
    exports.useChannelVisibleListener = useChannelVisibleListener;
    exports.useChat = useChat;
    exports.useChatContext = useChatContext;
    exports.useComponentContext = useComponentContext;
    exports.useConnectionRecoveredListener = useConnectionRecoveredListener;
    exports.useCooldownTimer = useCooldownTimer;
    exports.useCreateChatClient = useCreateChatClient;
    exports.useCustomStyles = useCustomStyles;
    exports.useDeleteHandler = useDeleteHandler;
    exports.useEditHandler = useEditHandler;
    exports.useEnrichedMessages = useEnrichedMessages;
    exports.useFlagHandler = useFlagHandler;
    exports.useLastReadData = useLastReadData;
    exports.useMarkUnreadHandler = useMarkUnreadHandler;
    exports.useMentionsHandler = useMentionsHandler;
    exports.useMessageBounceContext = useMessageBounceContext;
    exports.useMessageContext = useMessageContext;
    exports.useMessageInputContext = useMessageInputContext;
    exports.useMessageInputState = useMessageInputState;
    exports.useMessageListContext = useMessageListContext;
    exports.useMessageListElements = useMessageListElements;
    exports.useMessageListScrollManager = useMessageListScrollManager;
    exports.useMessageNewListener = useMessageNewListener;
    exports.useMobileNavigation = useMobileNavigation;
    exports.useMuteHandler = useMuteHandler;
    exports.useNewMessageNotification = useNewMessageNotification;
    exports.useNotificationAddedToChannelListener = useNotificationAddedToChannelListener;
    exports.useNotificationMessageNewListener = useNotificationMessageNewListener;
    exports.useNotificationRemovedFromChannelListener = useNotificationRemovedFromChannelListener;
    exports.useOpenThreadHandler = useOpenThreadHandler;
    exports.usePaginatedChannels = usePaginatedChannels;
    exports.usePinHandler = usePinHandler;
    exports.usePrependedMessagesCount = usePrependedMessagesCount;
    exports.useReactionClick = useReactionClick;
    exports.useReactionHandler = useReactionHandler;
    exports.useReactionsFetcher = useReactionsFetcher;
    exports.useRetryHandler = useRetryHandler;
    exports.useScrollLocationLogic = useScrollLocationLogic;
    exports.useShouldForceScrollToBottom = useShouldForceScrollToBottom;
    exports.useTranslationContext = useTranslationContext;
    exports.useTypingContext = useTypingContext;
    exports.useUserHandler = useUserHandler;
    exports.useUserPresenceChangedListener = useUserPresenceChangedListener;
    exports.useUserRole = useUserRole;
    exports.validateAndGetMessage = validateAndGetMessage;
    exports.withChannelActionContext = withChannelActionContext;
    exports.withChannelStateContext = withChannelStateContext;
    exports.withChatContext = withChatContext;
    exports.withComponentContext = withComponentContext;
    exports.withMessageContext = withMessageContext;
    exports.withTranslationContext = withTranslationContext;
    exports.withTypingContext = withTypingContext;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, React, jsxRuntime, ReactDOM, StreamChat, Picker);
//# sourceMappingURL=browser.full-bundle.js.map
