import { TFunction } from 'i18next';
import Dayjs from 'dayjs';
import type momentTimezone from 'moment-timezone';
import type { TranslationLanguages } from 'stream-chat';
import type { TDateTimeParser } from '../context/TranslationContext';
import type { UnknownType } from '../types/types';
import { enTranslations } from './translations';
import 'dayjs/locale/de';
import 'dayjs/locale/es';
import 'dayjs/locale/fr';
import 'dayjs/locale/hi';
import 'dayjs/locale/it';
import 'dayjs/locale/ja';
import 'dayjs/locale/ko';
import 'dayjs/locale/nl';
import 'dayjs/locale/pt';
import 'dayjs/locale/ru';
import 'dayjs/locale/tr';
import 'dayjs/locale/en';
type CalendarLocaleConfig = {
    lastDay: string;
    lastWeek: string;
    nextDay: string;
    nextWeek: string;
    sameDay: string;
    sameElse: string;
};
type DateTimeParserModule = typeof Dayjs | typeof momentTimezone;
export type Streami18nOptions = {
    DateTimeParser?: DateTimeParserModule;
    dayjsLocaleConfigForLanguage?: Partial<ILocale> & {
        calendar?: CalendarLocaleConfig;
    };
    debug?: boolean;
    disableDateTimeTranslations?: boolean;
    language?: TranslationLanguages;
    logger?: (message?: string) => void;
    parseMissingKeyHandler?: (key: string, defaultValue?: string) => string;
    timezone?: string;
    translationsForLanguage?: Partial<typeof enTranslations>;
};
export declare const defaultTranslatorFunction: TFunction;
export declare class Streami18n {
    i18nInstance: import("i18next").i18n;
    Dayjs: null;
    setLanguageCallback: (t: TFunction) => void;
    initialized: boolean;
    t: TFunction;
    tDateTimeParser: TDateTimeParser;
    translations: {
        [key: string]: {
            [key: string]: typeof enTranslations | UnknownType;
        };
    };
    /**
     * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that
     * when user calls registerTranslation() function. So instead we will store the locale configs
     * given to registerTranslation() function in `dayjsLocales` object, and register the required locale
     * with moment, when setLanguage is called.
     * */
    dayjsLocales: {
        [key: string]: Partial<ILocale>;
    };
    /**
     * Initialize properties used in constructor
     */
    logger: (msg?: string) => void;
    currentLanguage: TranslationLanguages;
    DateTimeParser: DateTimeParserModule;
    isCustomDateTimeParser: boolean;
    i18nextConfig: {
        debug: boolean;
        fallbackLng: false;
        interpolation: {
            escapeValue: boolean;
        };
        keySeparator: false;
        lng: string;
        nsSeparator: false;
        parseMissingKeyHandler?: (key: string, defaultValue?: string) => string;
    };
    /**
     * A valid TZ identifier string (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     */
    timezone?: string;
    /**
     * Constructor accepts following options:
     *  - language (String) default: 'en'
     *    Language code e.g., en, tr
     *
     *  - translationsForLanguage (object)
     *    Translations object. Please check src/i18n/en.json for example.
     *
     *  - disableDateTimeTranslations (boolean) default: false
     *    Disable translations for date-times
     *
     *  - debug (boolean) default: false
     *    Enable debug mode in internal i18n class
     *
     *  - logger (function) default: () => {}
     *    Logger function to log warnings/errors from this class
     *
     *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
     *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
     *    corresponding to language (param)
     *
     *  - DateTimeParser (function) Moment or Dayjs instance/function.
     *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
     *
     * @param {*} options
     */
    constructor(options?: Streami18nOptions);
    /**
     * Initializes the i18next instance with configuration (which enables natural language as default keys)
     */
    init(): Promise<{
        t: TFunction;
        tDateTimeParser: TDateTimeParser;
    }>;
    localeExists: (language: TranslationLanguages) => boolean;
    validateCurrentLanguage: () => void;
    /** Returns an instance of i18next used within this class instance */
    geti18Instance: () => import("i18next").i18n;
    /** Returns list of available languages. */
    getAvailableLanguages: () => string[];
    /** Returns all the translation dictionary for all inbuilt-languages */
    getTranslations: () => {
        [key: string]: {
            [key: string]: {
                "Attach files": string;
                Cancel: string;
                "Channel Missing": string;
                Close: string;
                "Close emoji picker": string;
                "Commands matching": string;
                "Connection failure, reconnecting now...": string;
                Delete: string;
                Delivered: string;
                "Drag your files here": string;
                "Drag your files here to add to your post": string;
                "Edit Message": string;
                "Edit message request failed": string;
                "Emoji matching": string;
                "Empty message...": string;
                "Error adding flag": string;
                "Error connecting to chat, refresh the page to try again.": string;
                "Error deleting message": string;
                "Error fetching reactions": string;
                "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": string;
                "Error muting a user ...": string;
                "Error pinning message": string;
                "Error removing message pin": string;
                "Error unmuting a user ...": string;
                "Error uploading file": string;
                "Error uploading image": string;
                "Error \u00B7 Unsent": string;
                "Error: {{ errorMessage }}": string;
                "Failed to jump to the first unread message": string;
                "Failed to mark channel as read": string;
                Flag: string;
                "Latest Messages": string;
                "Load more": string;
                "Mark as unread": string;
                Menu: string;
                "Message Failed \u00B7 Click to try again": string;
                "Message Failed \u00B7 Unauthorized": string;
                "Message deleted": string;
                "Message has been successfully flagged": string;
                "Message pinned": string;
                "Messages have been marked unread.": string;
                Mute: string;
                New: string;
                "New Messages!": string;
                "No chats here yet\u2026": string;
                "No results found": string;
                "Nothing yet...": string;
                "Open emoji picker": string;
                "People matching": string;
                Pin: string;
                "Pinned by": string;
                Reply: string;
                "Reply to Message": string;
                Search: string;
                "Searching...": string;
                Send: string;
                "Send Anyway": string;
                "Send message request failed": string;
                "Sending...": string;
                Shuffle: string;
                "Slow Mode ON": string;
                "Some of the files will not be accepted": string;
                "This message did not meet our content guidelines": string;
                "This message was deleted...": string;
                Thread: string;
                "Type your message": string;
                Unmute: string;
                Unpin: string;
                "Unread messages": string;
                "Upload type: \"{{ type }}\" is not allowed": string;
                "User uploaded content": string;
                "Wait until all attachments have uploaded": string;
                "You have no channels currently": string;
                "You've reached the maximum number of files": string;
                "aria/Attachment": string;
                "aria/Cancel Reply": string;
                "aria/Cancel upload": string;
                "aria/Channel list": string;
                "aria/Channel search results": string;
                "aria/Close thread": string;
                "aria/Emoji picker": string;
                "aria/File input": string;
                "aria/File upload": string;
                "aria/Image input": string;
                "aria/Load More Channels": string;
                "aria/Menu": string;
                "aria/Message Options": string;
                "aria/Open Message Actions Menu": string;
                "aria/Open Reaction Selector": string;
                "aria/Open Thread": string;
                "aria/Reaction list": string;
                "aria/Retry upload": string;
                "aria/Send": string;
                live: string;
                replyCount_one: string;
                replyCount_other: string;
                searchResultsCount_one: string;
                searchResultsCount_other: string;
                "this content could not be displayed": string;
                unreadMessagesSeparatorText_one: string;
                unreadMessagesSeparatorText_other: string;
                "{{ commaSeparatedUsers }} and {{ moreCount }} more": string;
                "{{ commaSeparatedUsers }}, and {{ lastUser }}": string;
                "{{ firstUser }} and {{ secondUser }}": string;
                "{{ imageCount }} more": string;
                "{{ memberCount }} members": string;
                "{{ user }} has been muted": string;
                "{{ user }} has been unmuted": string;
                "{{ user }} is typing...": string;
                "{{ users }} and more are typing...": string;
                "{{ users }} and {{ user }} are typing...": string;
                "{{ watcherCount }} online": string;
                "{{count}} unread_one": string;
                "{{count}} unread_other": string;
                "\uD83C\uDFD9 Attachment...": string;
            } | UnknownType;
        };
    };
    /**
     * Returns current version translator function.
     */
    getTranslators(): Promise<{
        t: TFunction;
        tDateTimeParser: TDateTimeParser;
    }>;
    registerTranslation(language: TranslationLanguages, translation: typeof enTranslations, customDayjsLocale?: Partial<ILocale>): void;
    addOrUpdateLocale(key: TranslationLanguages, config: Partial<ILocale>): void;
    setLanguage(language: TranslationLanguages): Promise<TFunction | undefined>;
    registerSetLanguageCallback(callback: (t: TFunction) => void): void;
}
export {};
//# sourceMappingURL=Streami18n.d.ts.map