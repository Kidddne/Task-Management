import React, { PropsWithChildren } from 'react';
import type { TriggerSettings } from '../components/MessageInput/DefaultTriggerProvider';
import type { CooldownTimerState, MessageInputProps } from '../components/MessageInput';
import type { CommandsListState, MentionsListState, MessageInputHookProps, MessageInputState } from '../components/MessageInput/hooks/useMessageInputState';
import type { CustomTrigger, DefaultStreamChatGenerics } from '../types/types';
export type MessageInputContextValue<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics, V extends CustomTrigger = CustomTrigger> = MessageInputState<StreamChatGenerics> & MessageInputHookProps<StreamChatGenerics> & Omit<MessageInputProps<StreamChatGenerics, V>, 'Input'> & CooldownTimerState & {
    autocompleteTriggers?: TriggerSettings<StreamChatGenerics, V>;
} & CommandsListState & MentionsListState;
export declare const MessageInputContext: React.Context<(MessageInputState<DefaultStreamChatGenerics> & import("../components/MessageInput/hooks/useLinkPreviews").EnrichURLsController & {
    handleChange: React.ChangeEventHandler<HTMLTextAreaElement>;
    handleSubmit: (event: React.BaseSyntheticEvent<object, any, any>, customMessageData?: Partial<import("stream-chat").Message<DefaultStreamChatGenerics>> | undefined, options?: import("../types/types").SendMessageOptions | undefined) => void;
    insertText: (textToInsert: string) => void;
    isUploadEnabled: boolean;
    maxFilesLeft: number;
    numberOfUploads: number;
    onPaste: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
    onSelectUser: (item: import("stream-chat").UserResponse<DefaultStreamChatGenerics>) => void;
    removeFile: (id: string) => void;
    removeImage: (id: string) => void;
    textareaRef: React.MutableRefObject<HTMLTextAreaElement | null | undefined>;
    uploadFile: (id: string) => void;
    uploadImage: (id: string) => void;
    uploadNewFiles: (files: FileList | File[]) => void;
}) | undefined>;
export declare const MessageInputContextProvider: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics, V extends CustomTrigger = CustomTrigger>({ children, value, }: React.PropsWithChildren<{
    value: MessageInputContextValue<StreamChatGenerics, V>;
}>) => React.JSX.Element;
export declare const useMessageInputContext: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics, V extends CustomTrigger = CustomTrigger>(componentName?: string) => MessageInputContextValue<StreamChatGenerics, V>;
//# sourceMappingURL=MessageInputContext.d.ts.map