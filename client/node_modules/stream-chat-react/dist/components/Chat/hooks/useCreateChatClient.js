import { useEffect, useState } from 'react';
import { StreamChat, } from 'stream-chat';
/**
 * React hook to create, connect and return `StreamChat` client.
 */
export var useCreateChatClient = function (_a) {
    var apiKey = _a.apiKey, tokenOrProvider = _a.tokenOrProvider, userData = _a.userData;
    var _b = useState(null), chatClient = _b[0], setChatClient = _b[1];
    var _c = useState(userData), cachedUserData = _c[0], setCachedUserData = _c[1];
    if (userData.id !== cachedUserData.id) {
        setCachedUserData(userData);
    }
    useEffect(function () {
        var client = new StreamChat(apiKey);
        var didUserConnectInterrupt = false;
        var connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(function () {
            if (!didUserConnectInterrupt)
                setChatClient(client);
        });
        return function () {
            didUserConnectInterrupt = true;
            setChatClient(null);
            connectionPromise
                .then(function () { return client.disconnectUser(); })
                .then(function () {
                console.log("Connection for user \"".concat(cachedUserData.id, "\" has been closed"));
            });
        };
    }, [apiKey, cachedUserData, tokenOrProvider]);
    return chatClient;
};
