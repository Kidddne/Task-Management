'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Window = require('../../Window-194c5448.js');
var React = require('react');
var Picker = require('@emoji-mart/react');
require('dayjs');
require('dayjs/plugin/calendar');
require('dayjs/plugin/localizedFormat');
require('i18next');
require('dayjs/plugin/updateLocale');
require('dayjs/plugin/localeData');
require('dayjs/plugin/relativeTime');
require('dayjs/plugin/utc');
require('dayjs/plugin/timezone');
require('dayjs/locale/de');
require('dayjs/locale/es');
require('dayjs/locale/fr');
require('dayjs/locale/hi');
require('dayjs/locale/it');
require('dayjs/locale/ja');
require('dayjs/locale/ko');
require('dayjs/locale/nl');
require('dayjs/locale/pt');
require('dayjs/locale/ru');
require('dayjs/locale/tr');
require('dayjs/locale/en');
require('react-player');
require('pretty-bytes');
require('@braintree/sanitize-url');
require('react-image-gallery');
require('prop-types');
require('linkifyjs');
require('emoji-regex');
require('lodash.uniqby');
require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/defineProperty');
require('react-textarea-autosize');
require('textarea-caret');
require('react-is');
require('lodash.debounce');
require('lodash.throttle');
require('crypto');
require('react-fast-compare');
require('react-dom');
require('react/jsx-runtime');
require('stream-chat');
require('react-virtuoso');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Picker__default = /*#__PURE__*/_interopDefaultLegacy(Picker);

var classNames = {
    1: {
        buttonClassName: 'str-chat__input-flat-emojiselect',
        pickerContainerClassName: undefined,
        wrapperClassName: 'str-chat__emojiselect-wrapper',
    },
    2: {
        buttonClassName: 'str-chat__emoji-picker-button',
        pickerContainerClassName: 'str-chat__message-textarea-emoji-picker-container',
        wrapperClassName: 'str-chat__message-textarea-emoji-picker',
    },
};
var EmojiPicker = function (props) {
    var _a, _b, _c;
    var themeVersion = Window.useChatContext('EmojiPicker').themeVersion;
    var t = Window.useTranslationContext('EmojiPicker').t;
    var _d = Window.useMessageInputContext('EmojiPicker'), insertText = _d.insertText, textareaRef = _d.textareaRef;
    var _e = React.useState(false), displayPicker = _e[0], setDisplayPicker = _e[1];
    var _f = React.useState(null), referenceElement = _f[0], setReferenceElement = _f[1];
    var _g = React.useState(null), popperElement = _g[0], setPopperElement = _g[1];
    var _h = Window.usePopper(referenceElement, popperElement, Window.__assign({ placement: themeVersion === '2' ? 'top-end' : 'top-start' }, props.popperOptions)), attributes = _h.attributes, styles = _h.styles;
    var _j = classNames[themeVersion], buttonClassName = _j.buttonClassName, pickerContainerClassName = _j.pickerContainerClassName, wrapperClassName = _j.wrapperClassName;
    var _k = props.ButtonIconComponent, ButtonIconComponent = _k === void 0 ? themeVersion === '2' ? Window.EmojiPickerIcon : Window.EmojiIconLarge : _k;
    React.useEffect(function () {
        if (!popperElement || !referenceElement)
            return;
        var handlePointerDown = function (e) {
            var target = e.target;
            if (popperElement.contains(target) || referenceElement.contains(target))
                return;
            setDisplayPicker(false);
        };
        window.addEventListener('pointerdown', handlePointerDown);
        return function () { return window.removeEventListener('pointerdown', handlePointerDown); };
    }, [referenceElement, popperElement]);
    return (React__default["default"].createElement("div", { className: (_a = props.wrapperClassName) !== null && _a !== void 0 ? _a : wrapperClassName },
        displayPicker && (React__default["default"].createElement("div", Window.__assign({ className: (_b = props.pickerContainerClassName) !== null && _b !== void 0 ? _b : pickerContainerClassName, style: styles.popper }, attributes.popper, { ref: setPopperElement }),
            React__default["default"].createElement(Picker__default["default"], Window.__assign({ data: function () { return Window.__awaiter(void 0, void 0, void 0, function () { return Window.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('@emoji-mart/data')); })];
                        case 1: return [2 /*return*/, (_a.sent()).default];
                    }
                }); }); }, onEmojiSelect: function (e) {
                    var _a;
                    insertText(e.native);
                    (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
                } }, props.pickerProps)))),
        themeVersion === '1' && (React__default["default"].createElement(Window.Tooltip, null, displayPicker ? t('Close emoji picker') : t('Open emoji picker'))),
        React__default["default"].createElement("button", { "aria-expanded": displayPicker, "aria-label": t('aria/Emoji picker'), className: (_c = props.buttonClassName) !== null && _c !== void 0 ? _c : buttonClassName, onClick: function () { return setDisplayPicker(function (cv) { return !cv; }); }, ref: setReferenceElement, type: 'button' }, ButtonIconComponent && React__default["default"].createElement(ButtonIconComponent, null))));
};

exports.EmojiPicker = EmojiPicker;
