import { __awaiter, __generator } from "tslib";
import { useChannelStateContext, useTranslationContext } from '../../../context';
export var MAX_MESSAGE_REACTIONS_TO_FETCH = 1200;
export function useReactionsFetcher(message, notifications) {
    var _this = this;
    if (notifications === void 0) { notifications = {}; }
    var channel = useChannelStateContext('useReactionFetcher').channel;
    var t = useTranslationContext('useReactionFetcher').t;
    var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
    return function () { return __awaiter(_this, void 0, void 0, function () {
        var e_1, errorMessage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fetchMessageReactions(channel, message.id)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_1 = _a.sent();
                    errorMessage = getErrorNotification === null || getErrorNotification === void 0 ? void 0 : getErrorNotification(message);
                    notify === null || notify === void 0 ? void 0 : notify(errorMessage || t('Error fetching reactions'), 'error');
                    throw e_1;
                case 3: return [2 /*return*/];
            }
        });
    }); };
}
function fetchMessageReactions(channel, messageId) {
    return __awaiter(this, void 0, void 0, function () {
        var reactions, limit, offset, reactionsLimit, lastPageSize, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    reactions = [];
                    limit = 300;
                    offset = 0;
                    reactionsLimit = MAX_MESSAGE_REACTIONS_TO_FETCH;
                    lastPageSize = limit;
                    _a.label = 1;
                case 1:
                    if (!(lastPageSize === limit && reactions.length < reactionsLimit)) return [3 /*break*/, 3];
                    return [4 /*yield*/, channel.getReactions(messageId, {
                            limit: limit,
                            offset: offset,
                        })];
                case 2:
                    response = _a.sent();
                    lastPageSize = response.reactions.length;
                    if (lastPageSize > 0) {
                        reactions.push.apply(reactions, response.reactions);
                    }
                    offset += lastPageSize;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, reactions];
            }
        });
    });
}
