import { __rest } from "tslib";
import React, { useState } from 'react';
import clsx from 'clsx';
import { useChatContext } from '../../context/ChatContext';
import { useMessageContext } from '../../context/MessageContext';
import { useProcessReactions } from './hooks/useProcessReactions';
import { useEnterLeaveHandlers } from '../Tooltip/hooks';
import { PopperTooltip } from '../Tooltip';
var WithTooltip = function (_a) {
    var children = _a.children, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, title = _a.title;
    var _b = useState(null), referenceElement = _b[0], setReferenceElement = _b[1];
    var _c = useEnterLeaveHandlers({
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
    }), handleEnter = _c.handleEnter, handleLeave = _c.handleLeave, tooltipVisible = _c.tooltipVisible;
    var themeVersion = useChatContext('WithTooltip').themeVersion;
    return (React.createElement(React.Fragment, null,
        themeVersion === '2' && (React.createElement(PopperTooltip, { referenceElement: referenceElement, visible: tooltipVisible }, title)),
        React.createElement("span", { onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement }, children)));
};
var UnMemoizedSimpleReactionsList = function (props) {
    var propHandleReaction = props.handleReaction, rest = __rest(props, ["handleReaction"]);
    var contextHandleReaction = useMessageContext('SimpleReactionsList').handleReaction;
    var _a = useProcessReactions(rest), existingReactions = _a.existingReactions, hasReactions = _a.hasReactions, totalReactionCount = _a.totalReactionCount;
    var _b = useState(undefined), tooltipReactionType = _b[0], setTooltipReactionType = _b[1];
    var themeVersion = useChatContext('SimpleReactionsList').themeVersion;
    var handleReaction = propHandleReaction || contextHandleReaction;
    if (!hasReactions)
        return null;
    return (React.createElement("div", { className: 'str-chat__message-reactions-container' },
        React.createElement("ul", { className: 'str-chat__simple-reactions-list str-chat__message-reactions', "data-testid": 'simple-reaction-list', onMouseLeave: function () { return setTooltipReactionType(undefined); } },
            existingReactions.map(function (_a) {
                var EmojiComponent = _a.EmojiComponent, isOwnReaction = _a.isOwnReaction, latestReactedUserNames = _a.latestReactedUserNames, reactionType = _a.reactionType;
                var tooltipVisible = tooltipReactionType === reactionType;
                var tooltipContent = latestReactedUserNames.join(', ');
                return (EmojiComponent && (React.createElement("li", { className: clsx('str-chat__simple-reactions-list-item', {
                        'str-chat__message-reaction-own': isOwnReaction,
                    }), key: reactionType, onClick: function (event) { return handleReaction(reactionType, event); }, onKeyUp: function (event) { return handleReaction(reactionType, event); } },
                    React.createElement(WithTooltip, { onMouseEnter: function () { return setTooltipReactionType(reactionType); }, onMouseLeave: function () { return setTooltipReactionType(undefined); }, title: tooltipContent },
                        React.createElement(EmojiComponent, null),
                        "\u00A0",
                        tooltipVisible && themeVersion === '1' && (React.createElement("div", { className: 'str-chat__simple-reactions-list-tooltip' },
                            React.createElement("div", { className: 'arrow' }),
                            tooltipContent))))));
            }),
            React.createElement("li", { className: 'str-chat__simple-reactions-list-item--last-number' }, totalReactionCount))));
};
export var SimpleReactionsList = React.memo(UnMemoizedSimpleReactionsList);
